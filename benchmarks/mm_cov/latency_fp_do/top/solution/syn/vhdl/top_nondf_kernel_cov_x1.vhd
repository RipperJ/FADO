-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_nondf_kernel_cov_x1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_B_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_B_AWREADY : IN STD_LOGIC;
    m_axi_gmem_B_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_B_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_B_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_B_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_B_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_B_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_B_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_B_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_B_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_B_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_B_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_B_WVALID : OUT STD_LOGIC;
    m_axi_gmem_B_WREADY : IN STD_LOGIC;
    m_axi_gmem_B_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_gmem_B_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_B_WLAST : OUT STD_LOGIC;
    m_axi_gmem_B_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_B_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_B_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_B_ARREADY : IN STD_LOGIC;
    m_axi_gmem_B_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_B_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_B_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_B_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_B_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_B_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_B_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_B_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_B_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_B_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_B_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_B_RVALID : IN STD_LOGIC;
    m_axi_gmem_B_RREADY : OUT STD_LOGIC;
    m_axi_gmem_B_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_gmem_B_RLAST : IN STD_LOGIC;
    m_axi_gmem_B_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_B_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_B_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_B_BVALID : IN STD_LOGIC;
    m_axi_gmem_B_BREADY : OUT STD_LOGIC;
    m_axi_gmem_B_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_B_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_B_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    xout : IN STD_LOGIC_VECTOR (63 downto 0);
    xin_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    xin_ce0 : OUT STD_LOGIC;
    xin_we0 : OUT STD_LOGIC;
    xin_d0 : OUT STD_LOGIC_VECTOR (118 downto 0) );
end;


architecture behav of top_nondf_kernel_cov_x1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (102 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (102 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (102 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (102 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (102 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (102 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (102 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (102 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (102 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (102 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011011";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv32_65 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100101";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv32_62 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100010";
    constant ap_const_lv32_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100110";
    constant ap_const_lv32_1000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001000000000000";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv257_lc_2 : STD_LOGIC_VECTOR (256 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000010000000001000000000100000000010000000001000000000100000000010000000001000000000100000000010000000001000000000100000001";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_8A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001010";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal gmem_B_blk_n_AR : STD_LOGIC;
    signal gmem_B_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal data_V_q0 : STD_LOGIC_VECTOR (127 downto 0);
    signal reg_367 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal data_V_q1 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal add_ln68_fu_393_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln68_reg_789 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal tmp_cast_fu_403_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_cast_reg_794 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln69_fu_417_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln69_reg_802 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal data_V_addr_reg_807 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln208_fu_443_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln208_reg_815 : STD_LOGIC_VECTOR (127 downto 0);
    signal add_ln74_fu_447_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln74_reg_820 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal zext_ln74_1_fu_458_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln74_1_reg_825 : STD_LOGIC_VECTOR (11 downto 0);
    signal mean_V_addr_reg_833 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln74_fu_462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln77_fu_468_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln77_reg_838 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal add_ln691_fu_513_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal add_ln82_fu_519_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln82_reg_856 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal tmp_1_cast_fu_529_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_1_cast_reg_861 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln83_fu_543_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln83_reg_869 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal zext_ln83_fu_549_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln83_reg_874 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_V_addr_2_reg_879 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln692_fu_577_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal sub_ln692_reg_892 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal add_ln86_fu_583_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln86_reg_897 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal zext_ln89_fu_589_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln89_reg_902 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_3_cast_fu_597_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_3_cast_reg_908 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln87_fu_611_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln87_reg_916 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal zext_ln89_1_fu_617_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln89_1_reg_921 : STD_LOGIC_VECTOR (11 downto 0);
    signal cov_V_addr_reg_926 : STD_LOGIC_VECTOR (11 downto 0);
    signal cov_V_addr_2_reg_931 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln90_fu_659_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln90_reg_939 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal icmp_ln90_fu_697_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_V_load_3_reg_962 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_fu_713_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal mul_ln691_reg_967 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_state92 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state92 : signal is "none";
    signal add_ln691_1_fu_718_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_state93 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state93 : signal is "none";
    signal trunc_ln693_1_reg_977 : STD_LOGIC_VECTOR (118 downto 0);
    signal ap_CS_fsm_state97 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state97 : signal is "none";
    signal add_ln96_fu_733_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln96_reg_982 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state100 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state100 : signal is "none";
    signal tmp_4_cast_fu_743_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_4_cast_reg_987 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln97_fu_757_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln97_reg_995 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state101 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state101 : signal is "none";
    signal zext_ln208_1_fu_772_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln208_1_reg_1000 : STD_LOGIC_VECTOR (63 downto 0);
    signal cov_V_q0 : STD_LOGIC_VECTOR (118 downto 0);
    signal cov_V_load_reg_1013 : STD_LOGIC_VECTOR (118 downto 0);
    signal ap_CS_fsm_state102 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state102 : signal is "none";
    signal mean_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mean_V_ce0 : STD_LOGIC;
    signal mean_V_we0 : STD_LOGIC;
    signal mean_V_d0 : STD_LOGIC_VECTOR (117 downto 0);
    signal mean_V_q0 : STD_LOGIC_VECTOR (117 downto 0);
    signal data_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal data_V_ce0 : STD_LOGIC;
    signal data_V_we0 : STD_LOGIC;
    signal data_V_d0 : STD_LOGIC_VECTOR (127 downto 0);
    signal data_V_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal data_V_ce1 : STD_LOGIC;
    signal cov_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal cov_V_ce0 : STD_LOGIC;
    signal cov_V_we0 : STD_LOGIC;
    signal i_reg_222 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln69_fu_437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal j_1_reg_233 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal icmp_ln68_fu_411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_reg_244 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln77_fu_496_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_reg_255 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_i3114_reg_266 : STD_LOGIC_VECTOR (127 downto 0);
    signal i_1_reg_278 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln83_fu_567_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_2_reg_289 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal icmp_ln82_fu_537_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_reg_300 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln87_fu_653_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_3_reg_311 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state99 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state99 : signal is "none";
    signal icmp_ln86_fu_605_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_reg_322 : STD_LOGIC_VECTOR (6 downto 0);
    signal conv3_i2113_reg_333 : STD_LOGIC_VECTOR (127 downto 0);
    signal i_4_reg_345 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln97_fu_777_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_4_reg_356 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state103 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state103 : signal is "none";
    signal icmp_ln96_fu_751_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln70_1_fu_432_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln74_fu_453_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln691_fu_491_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln692_1_fu_562_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln89_2_fu_626_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln93_fu_648_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln215_fu_682_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln215_1_fu_692_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln68_fu_382_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state98 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state98 : signal is "none";
    signal trunc_ln_fu_372_p4 : STD_LOGIC_VECTOR (57 downto 0);
    signal trunc_ln70_fu_399_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln70_fu_423_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln70_fu_427_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln691_fu_474_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_cast_fu_478_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln691_2_fu_486_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln692_fu_525_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln692_fu_553_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln692_fu_557_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal mean_V_load_cast_fu_573_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln89_fu_593_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln89_fu_621_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln93_fu_631_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_5_cast_fu_635_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln93_fu_643_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln215_fu_665_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_8_cast_fu_669_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln215_fu_677_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln215_1_fu_687_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_707_p0 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_fu_707_p1 : STD_LOGIC_VECTOR (129 downto 0);
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal grp_fu_707_p2 : STD_LOGIC_VECTOR (256 downto 0);
    signal trunc_ln208_1_fu_739_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln208_fu_763_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln208_fu_767_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (102 downto 0);
    signal grp_fu_707_p00 : STD_LOGIC_VECTOR (256 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component top_mul_128ns_130ns_257_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (127 downto 0);
        din1 : IN STD_LOGIC_VECTOR (129 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (256 downto 0) );
    end component;


    component top_mul_128s_128s_128_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (127 downto 0);
        din1 : IN STD_LOGIC_VECTOR (127 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;


    component top_nondf_kernel_cov_x0_mean_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (117 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (117 downto 0) );
    end component;


    component top_nondf_kernel_cov_x0_data_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (127 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (127 downto 0);
        address1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;


    component top_nondf_kernel_cov_x0_cov_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (118 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (118 downto 0) );
    end component;



begin
    mean_V_U : component top_nondf_kernel_cov_x0_mean_V
    generic map (
        DataWidth => 118,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mean_V_address0,
        ce0 => mean_V_ce0,
        we0 => mean_V_we0,
        d0 => mean_V_d0,
        q0 => mean_V_q0);

    data_V_U : component top_nondf_kernel_cov_x0_data_V
    generic map (
        DataWidth => 128,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => data_V_address0,
        ce0 => data_V_ce0,
        we0 => data_V_we0,
        d0 => data_V_d0,
        q0 => data_V_q0,
        address1 => data_V_address1,
        ce1 => data_V_ce1,
        q1 => data_V_q1);

    cov_V_U : component top_nondf_kernel_cov_x0_cov_V
    generic map (
        DataWidth => 119,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cov_V_address0,
        ce0 => cov_V_ce0,
        we0 => cov_V_we0,
        d0 => trunc_ln693_1_reg_977,
        q0 => cov_V_q0);

    mul_128ns_130ns_257_5_1_U11 : component top_mul_128ns_130ns_257_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 128,
        din1_WIDTH => 130,
        dout_WIDTH => 257)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_707_p0,
        din1 => grp_fu_707_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_707_p2);

    mul_128s_128s_128_5_1_U12 : component top_mul_128s_128s_128_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 128,
        din1_WIDTH => 128,
        dout_WIDTH => 128)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => data_V_load_3_reg_962,
        din1 => reg_367,
        ce => ap_const_logic_1,
        dout => grp_fu_713_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    add_i3114_reg_266_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln74_fu_462_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state75))) then 
                add_i3114_reg_266 <= ap_const_lv128_lc_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
                add_i3114_reg_266 <= add_ln691_fu_513_p2;
            end if; 
        end if;
    end process;

    conv3_i2113_reg_333_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln87_fu_653_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state85))) then 
                conv3_i2113_reg_333 <= ap_const_lv128_lc_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
                conv3_i2113_reg_333 <= add_ln691_1_fu_718_p2;
            end if; 
        end if;
    end process;

    i_1_reg_278_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln74_fu_462_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state75))) then 
                i_1_reg_278 <= ap_const_lv7_0;
            elsif (((icmp_ln83_fu_567_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state80))) then 
                i_1_reg_278 <= add_ln82_reg_856;
            end if; 
        end if;
    end process;

    i_2_reg_255_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln74_fu_462_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state75))) then 
                i_2_reg_255 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
                i_2_reg_255 <= add_ln77_reg_838;
            end if; 
        end if;
    end process;

    i_3_reg_300_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln82_fu_537_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state79))) then 
                i_3_reg_300 <= ap_const_lv7_0;
            elsif (((icmp_ln87_fu_653_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state85))) then 
                i_3_reg_300 <= add_ln86_reg_897;
            end if; 
        end if;
    end process;

    i_4_reg_345_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln86_fu_605_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state84))) then 
                i_4_reg_345 <= ap_const_lv7_0;
            elsif (((icmp_ln97_fu_777_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state101))) then 
                i_4_reg_345 <= add_ln96_reg_982;
            end if; 
        end if;
    end process;

    i_reg_222_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
                i_reg_222 <= ap_const_lv7_0;
            elsif (((icmp_ln69_fu_437_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state72))) then 
                i_reg_222 <= add_ln68_reg_789;
            end if; 
        end if;
    end process;

    j_1_reg_233_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln68_fu_411_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state71))) then 
                j_1_reg_233 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
                j_1_reg_233 <= add_ln69_reg_802;
            end if; 
        end if;
    end process;

    j_2_reg_289_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln82_fu_537_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state79))) then 
                j_2_reg_289 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
                j_2_reg_289 <= add_ln83_reg_869;
            end if; 
        end if;
    end process;

    j_3_reg_311_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln86_fu_605_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state84))) then 
                j_3_reg_311 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state99)) then 
                j_3_reg_311 <= add_ln87_reg_916;
            end if; 
        end if;
    end process;

    j_4_reg_356_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln96_fu_751_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state100))) then 
                j_4_reg_356 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
                j_4_reg_356 <= add_ln97_reg_995;
            end if; 
        end if;
    end process;

    j_reg_244_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln68_fu_411_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state71))) then 
                j_reg_244 <= ap_const_lv7_0;
            elsif (((icmp_ln77_fu_496_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state76))) then 
                j_reg_244 <= add_ln74_reg_820;
            end if; 
        end if;
    end process;

    k_reg_322_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln87_fu_653_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state85))) then 
                k_reg_322 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
                k_reg_322 <= add_ln90_reg_939;
            end if; 
        end if;
    end process;

    reg_367_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
                reg_367 <= data_V_q1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state77))) then 
                reg_367 <= data_V_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state71)) then
                add_ln68_reg_789 <= add_ln68_fu_393_p2;
                    tmp_cast_reg_794(11 downto 6) <= tmp_cast_fu_403_p3(11 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state72)) then
                add_ln69_reg_802 <= add_ln69_fu_417_p2;
                data_V_addr_reg_807 <= zext_ln70_1_fu_432_p1(12 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state75)) then
                add_ln74_reg_820 <= add_ln74_fu_447_p2;
                    zext_ln74_1_reg_825(6 downto 0) <= zext_ln74_1_fu_458_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state76)) then
                add_ln77_reg_838 <= add_ln77_fu_468_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state79)) then
                add_ln82_reg_856 <= add_ln82_fu_519_p2;
                    tmp_1_cast_reg_861(11 downto 6) <= tmp_1_cast_fu_529_p3(11 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state80)) then
                add_ln83_reg_869 <= add_ln83_fu_543_p2;
                data_V_addr_2_reg_879 <= zext_ln692_1_fu_562_p1(12 - 1 downto 0);
                    zext_ln83_reg_874(6 downto 0) <= zext_ln83_fu_549_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state84)) then
                add_ln86_reg_897 <= add_ln86_fu_583_p2;
                    tmp_3_cast_reg_908(11 downto 6) <= tmp_3_cast_fu_597_p3(11 downto 6);
                    zext_ln89_reg_902(6 downto 0) <= zext_ln89_fu_589_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state85)) then
                add_ln87_reg_916 <= add_ln87_fu_611_p2;
                cov_V_addr_2_reg_931 <= zext_ln93_fu_648_p1(12 - 1 downto 0);
                cov_V_addr_reg_926 <= zext_ln89_2_fu_626_p1(12 - 1 downto 0);
                    zext_ln89_1_reg_921(6 downto 0) <= zext_ln89_1_fu_617_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state86)) then
                add_ln90_reg_939 <= add_ln90_fu_659_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state100)) then
                add_ln96_reg_982 <= add_ln96_fu_733_p2;
                    tmp_4_cast_reg_987(11 downto 6) <= tmp_4_cast_fu_743_p3(11 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state101)) then
                add_ln97_reg_995 <= add_ln97_fu_757_p2;
                    zext_ln208_1_reg_1000(11 downto 0) <= zext_ln208_1_fu_772_p1(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state102)) then
                cov_V_load_reg_1013 <= cov_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state87)) then
                data_V_load_3_reg_962 <= data_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln74_fu_462_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state75))) then
                mean_V_addr_reg_833 <= zext_ln74_fu_453_p1(6 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state92)) then
                mul_ln691_reg_967 <= grp_fu_713_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state82)) then
                sub_ln692_reg_892 <= sub_ln692_fu_577_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state73)) then
                trunc_ln208_reg_815 <= trunc_ln208_fu_443_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state97)) then
                trunc_ln693_1_reg_977 <= grp_fu_707_p2(256 downto 138);
            end if;
        end if;
    end process;
    tmp_cast_reg_794(5 downto 0) <= "000000";
    zext_ln74_1_reg_825(11 downto 7) <= "00000";
    tmp_1_cast_reg_861(5 downto 0) <= "000000";
    zext_ln83_reg_874(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln89_reg_902(11 downto 7) <= "00000";
    tmp_3_cast_reg_908(5 downto 0) <= "000000";
    zext_ln89_1_reg_921(11 downto 7) <= "00000";
    tmp_4_cast_reg_987(5 downto 0) <= "000000";
    zext_ln208_1_reg_1000(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_gmem_B_ARREADY, m_axi_gmem_B_RVALID, ap_CS_fsm_state73, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state75, icmp_ln74_fu_462_p2, ap_CS_fsm_state76, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, icmp_ln90_fu_697_p2, ap_CS_fsm_state100, ap_CS_fsm_state101, icmp_ln69_fu_437_p2, icmp_ln68_fu_411_p2, icmp_ln77_fu_496_p2, icmp_ln83_fu_567_p2, icmp_ln82_fu_537_p2, icmp_ln87_fu_653_p2, icmp_ln86_fu_605_p2, icmp_ln97_fu_777_p2, icmp_ln96_fu_751_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((m_axi_gmem_B_ARREADY = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                if (((icmp_ln68_fu_411_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state71))) then
                    ap_NS_fsm <= ap_ST_fsm_state75;
                else
                    ap_NS_fsm <= ap_ST_fsm_state72;
                end if;
            when ap_ST_fsm_state72 => 
                if (((icmp_ln69_fu_437_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state72))) then
                    ap_NS_fsm <= ap_ST_fsm_state71;
                else
                    ap_NS_fsm <= ap_ST_fsm_state73;
                end if;
            when ap_ST_fsm_state73 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state73) and (m_axi_gmem_B_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state74;
                else
                    ap_NS_fsm <= ap_ST_fsm_state73;
                end if;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state75 => 
                if (((icmp_ln74_fu_462_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state75))) then
                    ap_NS_fsm <= ap_ST_fsm_state79;
                else
                    ap_NS_fsm <= ap_ST_fsm_state76;
                end if;
            when ap_ST_fsm_state76 => 
                if (((icmp_ln77_fu_496_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state76))) then
                    ap_NS_fsm <= ap_ST_fsm_state75;
                else
                    ap_NS_fsm <= ap_ST_fsm_state77;
                end if;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state79 => 
                if (((icmp_ln82_fu_537_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state79))) then
                    ap_NS_fsm <= ap_ST_fsm_state84;
                else
                    ap_NS_fsm <= ap_ST_fsm_state80;
                end if;
            when ap_ST_fsm_state80 => 
                if (((icmp_ln83_fu_567_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state80))) then
                    ap_NS_fsm <= ap_ST_fsm_state79;
                else
                    ap_NS_fsm <= ap_ST_fsm_state81;
                end if;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state84 => 
                if (((icmp_ln86_fu_605_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state84))) then
                    ap_NS_fsm <= ap_ST_fsm_state100;
                else
                    ap_NS_fsm <= ap_ST_fsm_state85;
                end if;
            when ap_ST_fsm_state85 => 
                if (((icmp_ln87_fu_653_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state85))) then
                    ap_NS_fsm <= ap_ST_fsm_state84;
                else
                    ap_NS_fsm <= ap_ST_fsm_state86;
                end if;
            when ap_ST_fsm_state86 => 
                if (((icmp_ln90_fu_697_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state86))) then
                    ap_NS_fsm <= ap_ST_fsm_state94;
                else
                    ap_NS_fsm <= ap_ST_fsm_state87;
                end if;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state100 => 
                if (((icmp_ln96_fu_751_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state100))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state101;
                end if;
            when ap_ST_fsm_state101 => 
                if (((icmp_ln97_fu_777_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state101))) then
                    ap_NS_fsm <= ap_ST_fsm_state100;
                else
                    ap_NS_fsm <= ap_ST_fsm_state102;
                end if;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln208_fu_767_p2 <= std_logic_vector(unsigned(tmp_4_cast_reg_987) + unsigned(zext_ln208_fu_763_p1));
    add_ln215_1_fu_687_p2 <= std_logic_vector(unsigned(tmp_8_cast_fu_669_p3) + unsigned(zext_ln89_1_reg_921));
    add_ln215_fu_677_p2 <= std_logic_vector(unsigned(tmp_8_cast_fu_669_p3) + unsigned(zext_ln89_reg_902));
    add_ln68_fu_393_p2 <= std_logic_vector(unsigned(i_reg_222) + unsigned(ap_const_lv7_1));
    add_ln691_1_fu_718_p2 <= std_logic_vector(unsigned(mul_ln691_reg_967) + unsigned(conv3_i2113_reg_333));
    add_ln691_2_fu_486_p2 <= std_logic_vector(unsigned(tmp_2_cast_fu_478_p3) + unsigned(zext_ln74_1_reg_825));
    add_ln691_fu_513_p2 <= std_logic_vector(signed(reg_367) + signed(add_i3114_reg_266));
    add_ln692_fu_557_p2 <= std_logic_vector(unsigned(tmp_1_cast_reg_861) + unsigned(zext_ln692_fu_553_p1));
    add_ln69_fu_417_p2 <= std_logic_vector(unsigned(j_1_reg_233) + unsigned(ap_const_lv7_1));
    add_ln70_fu_427_p2 <= std_logic_vector(unsigned(tmp_cast_reg_794) + unsigned(zext_ln70_fu_423_p1));
    add_ln74_fu_447_p2 <= std_logic_vector(unsigned(j_reg_244) + unsigned(ap_const_lv7_1));
    add_ln77_fu_468_p2 <= std_logic_vector(unsigned(i_2_reg_255) + unsigned(ap_const_lv7_1));
    add_ln82_fu_519_p2 <= std_logic_vector(unsigned(i_1_reg_278) + unsigned(ap_const_lv7_1));
    add_ln83_fu_543_p2 <= std_logic_vector(unsigned(j_2_reg_289) + unsigned(ap_const_lv7_1));
    add_ln86_fu_583_p2 <= std_logic_vector(unsigned(i_3_reg_300) + unsigned(ap_const_lv7_1));
    add_ln87_fu_611_p2 <= std_logic_vector(unsigned(j_3_reg_311) + unsigned(ap_const_lv7_1));
    add_ln89_fu_621_p2 <= std_logic_vector(unsigned(tmp_3_cast_reg_908) + unsigned(zext_ln89_1_fu_617_p1));
    add_ln90_fu_659_p2 <= std_logic_vector(unsigned(k_reg_322) + unsigned(ap_const_lv7_1));
    add_ln93_fu_643_p2 <= std_logic_vector(unsigned(tmp_5_cast_fu_635_p3) + unsigned(zext_ln89_reg_902));
    add_ln96_fu_733_p2 <= std_logic_vector(unsigned(i_4_reg_345) + unsigned(ap_const_lv7_1));
    add_ln97_fu_757_p2 <= std_logic_vector(unsigned(j_4_reg_356) + unsigned(ap_const_lv7_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state100 <= ap_CS_fsm(99);
    ap_CS_fsm_state101 <= ap_CS_fsm(100);
    ap_CS_fsm_state102 <= ap_CS_fsm(101);
    ap_CS_fsm_state103 <= ap_CS_fsm(102);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state72 <= ap_CS_fsm(71);
    ap_CS_fsm_state73 <= ap_CS_fsm(72);
    ap_CS_fsm_state74 <= ap_CS_fsm(73);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);
    ap_CS_fsm_state76 <= ap_CS_fsm(75);
    ap_CS_fsm_state77 <= ap_CS_fsm(76);
    ap_CS_fsm_state78 <= ap_CS_fsm(77);
    ap_CS_fsm_state79 <= ap_CS_fsm(78);
    ap_CS_fsm_state80 <= ap_CS_fsm(79);
    ap_CS_fsm_state81 <= ap_CS_fsm(80);
    ap_CS_fsm_state82 <= ap_CS_fsm(81);
    ap_CS_fsm_state83 <= ap_CS_fsm(82);
    ap_CS_fsm_state84 <= ap_CS_fsm(83);
    ap_CS_fsm_state85 <= ap_CS_fsm(84);
    ap_CS_fsm_state86 <= ap_CS_fsm(85);
    ap_CS_fsm_state87 <= ap_CS_fsm(86);
    ap_CS_fsm_state88 <= ap_CS_fsm(87);
    ap_CS_fsm_state92 <= ap_CS_fsm(91);
    ap_CS_fsm_state93 <= ap_CS_fsm(92);
    ap_CS_fsm_state97 <= ap_CS_fsm(96);
    ap_CS_fsm_state98 <= ap_CS_fsm(97);
    ap_CS_fsm_state99 <= ap_CS_fsm(98);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state100, icmp_ln96_fu_751_p2)
    begin
        if ((((icmp_ln96_fu_751_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state100)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state100, icmp_ln96_fu_751_p2)
    begin
        if (((icmp_ln96_fu_751_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state100))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    cov_V_address0_assign_proc : process(cov_V_addr_reg_926, cov_V_addr_2_reg_931, ap_CS_fsm_state101, zext_ln208_1_fu_772_p1, ap_CS_fsm_state99, ap_CS_fsm_state98)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            cov_V_address0 <= zext_ln208_1_fu_772_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state99)) then 
            cov_V_address0 <= cov_V_addr_2_reg_931;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state98)) then 
            cov_V_address0 <= cov_V_addr_reg_926;
        else 
            cov_V_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    cov_V_ce0_assign_proc : process(ap_CS_fsm_state101, ap_CS_fsm_state99, ap_CS_fsm_state98)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state101))) then 
            cov_V_ce0 <= ap_const_logic_1;
        else 
            cov_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cov_V_we0_assign_proc : process(ap_CS_fsm_state99, ap_CS_fsm_state98)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state99))) then 
            cov_V_we0 <= ap_const_logic_1;
        else 
            cov_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_V_address0_assign_proc : process(data_V_addr_reg_807, ap_CS_fsm_state76, ap_CS_fsm_state80, data_V_addr_2_reg_879, ap_CS_fsm_state86, ap_CS_fsm_state74, ap_CS_fsm_state83, zext_ln691_fu_491_p1, zext_ln692_1_fu_562_p1, zext_ln215_1_fu_692_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            data_V_address0 <= zext_ln215_1_fu_692_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            data_V_address0 <= data_V_addr_2_reg_879;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            data_V_address0 <= zext_ln692_1_fu_562_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            data_V_address0 <= zext_ln691_fu_491_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            data_V_address0 <= data_V_addr_reg_807;
        else 
            data_V_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;

    data_V_address1 <= zext_ln215_fu_682_p1(12 - 1 downto 0);

    data_V_ce0_assign_proc : process(ap_CS_fsm_state76, ap_CS_fsm_state80, ap_CS_fsm_state86, ap_CS_fsm_state74, ap_CS_fsm_state83)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state76))) then 
            data_V_ce0 <= ap_const_logic_1;
        else 
            data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_V_ce1_assign_proc : process(ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            data_V_ce1 <= ap_const_logic_1;
        else 
            data_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    data_V_d0_assign_proc : process(trunc_ln208_reg_815, sub_ln692_reg_892, ap_CS_fsm_state74, ap_CS_fsm_state83)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            data_V_d0 <= sub_ln692_reg_892;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            data_V_d0 <= trunc_ln208_reg_815;
        else 
            data_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data_V_we0_assign_proc : process(ap_CS_fsm_state74, ap_CS_fsm_state83)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state74))) then 
            data_V_we0 <= ap_const_logic_1;
        else 
            data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    gmem_B_blk_n_AR_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_gmem_B_ARREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            gmem_B_blk_n_AR <= m_axi_gmem_B_ARREADY;
        else 
            gmem_B_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_B_blk_n_R_assign_proc : process(m_axi_gmem_B_RVALID, ap_CS_fsm_state73)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            gmem_B_blk_n_R <= m_axi_gmem_B_RVALID;
        else 
            gmem_B_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_707_p0 <= grp_fu_707_p00(128 - 1 downto 0);
    grp_fu_707_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(conv3_i2113_reg_333),257));
    grp_fu_707_p1 <= ap_const_lv257_lc_2(130 - 1 downto 0);
    icmp_ln68_fu_411_p2 <= "1" when (i_reg_222 = ap_const_lv7_40) else "0";
    icmp_ln69_fu_437_p2 <= "1" when (j_1_reg_233 = ap_const_lv7_40) else "0";
    icmp_ln74_fu_462_p2 <= "1" when (j_reg_244 = ap_const_lv7_40) else "0";
    icmp_ln77_fu_496_p2 <= "1" when (i_2_reg_255 = ap_const_lv7_40) else "0";
    icmp_ln82_fu_537_p2 <= "1" when (i_1_reg_278 = ap_const_lv7_40) else "0";
    icmp_ln83_fu_567_p2 <= "1" when (j_2_reg_289 = ap_const_lv7_40) else "0";
    icmp_ln86_fu_605_p2 <= "1" when (i_3_reg_300 = ap_const_lv7_40) else "0";
    icmp_ln87_fu_653_p2 <= "1" when (j_3_reg_311 = ap_const_lv7_40) else "0";
    icmp_ln90_fu_697_p2 <= "1" when (k_reg_322 = ap_const_lv7_40) else "0";
    icmp_ln96_fu_751_p2 <= "1" when (i_4_reg_345 = ap_const_lv7_40) else "0";
    icmp_ln97_fu_777_p2 <= "1" when (j_4_reg_356 = ap_const_lv7_40) else "0";
    m_axi_gmem_B_ARADDR <= sext_ln68_fu_382_p1;
    m_axi_gmem_B_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_B_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_B_ARID <= ap_const_lv1_0;
    m_axi_gmem_B_ARLEN <= ap_const_lv32_1000;
    m_axi_gmem_B_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_B_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_B_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_B_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_B_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_B_ARUSER <= ap_const_lv1_0;

    m_axi_gmem_B_ARVALID_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_gmem_B_ARREADY)
    begin
        if ((not(((m_axi_gmem_B_ARREADY = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_gmem_B_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_B_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_B_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_B_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_B_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_B_AWID <= ap_const_lv1_0;
    m_axi_gmem_B_AWLEN <= ap_const_lv32_0;
    m_axi_gmem_B_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_B_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_B_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_B_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_B_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_B_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_B_AWVALID <= ap_const_logic_0;
    m_axi_gmem_B_BREADY <= ap_const_logic_0;

    m_axi_gmem_B_RREADY_assign_proc : process(m_axi_gmem_B_RVALID, ap_CS_fsm_state73)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state73) and (m_axi_gmem_B_RVALID = ap_const_logic_1))) then 
            m_axi_gmem_B_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_B_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_B_WDATA <= ap_const_lv512_lc_1;
    m_axi_gmem_B_WID <= ap_const_lv1_0;
    m_axi_gmem_B_WLAST <= ap_const_logic_0;
    m_axi_gmem_B_WSTRB <= ap_const_lv64_0;
    m_axi_gmem_B_WUSER <= ap_const_lv1_0;
    m_axi_gmem_B_WVALID <= ap_const_logic_0;

    mean_V_address0_assign_proc : process(ap_CS_fsm_state81, mean_V_addr_reg_833, ap_CS_fsm_state76, zext_ln83_reg_874)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            mean_V_address0 <= zext_ln83_reg_874(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            mean_V_address0 <= mean_V_addr_reg_833;
        else 
            mean_V_address0 <= "XXXXXX";
        end if; 
    end process;


    mean_V_ce0_assign_proc : process(ap_CS_fsm_state81, ap_CS_fsm_state76)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state81))) then 
            mean_V_ce0 <= ap_const_logic_1;
        else 
            mean_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mean_V_d0 <= add_i3114_reg_266(127 downto 10);
    mean_V_load_cast_fu_573_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mean_V_q0),128));

    mean_V_we0_assign_proc : process(ap_CS_fsm_state76, icmp_ln77_fu_496_p2)
    begin
        if (((icmp_ln77_fu_496_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state76))) then 
            mean_V_we0 <= ap_const_logic_1;
        else 
            mean_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln68_fu_382_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_372_p4),64));

    sub_ln692_fu_577_p2 <= std_logic_vector(signed(reg_367) - signed(mean_V_load_cast_fu_573_p1));
    tmp_1_cast_fu_529_p3 <= (trunc_ln692_fu_525_p1 & ap_const_lv6_0);
    tmp_2_cast_fu_478_p3 <= (trunc_ln691_fu_474_p1 & ap_const_lv6_0);
    tmp_3_cast_fu_597_p3 <= (trunc_ln89_fu_593_p1 & ap_const_lv6_0);
    tmp_4_cast_fu_743_p3 <= (trunc_ln208_1_fu_739_p1 & ap_const_lv6_0);
    tmp_5_cast_fu_635_p3 <= (trunc_ln93_fu_631_p1 & ap_const_lv6_0);
    tmp_8_cast_fu_669_p3 <= (trunc_ln215_fu_665_p1 & ap_const_lv6_0);
    tmp_cast_fu_403_p3 <= (trunc_ln70_fu_399_p1 & ap_const_lv6_0);
    trunc_ln208_1_fu_739_p1 <= i_4_reg_345(6 - 1 downto 0);
    trunc_ln208_fu_443_p1 <= m_axi_gmem_B_RDATA(128 - 1 downto 0);
    trunc_ln215_fu_665_p1 <= k_reg_322(6 - 1 downto 0);
    trunc_ln691_fu_474_p1 <= i_2_reg_255(6 - 1 downto 0);
    trunc_ln692_fu_525_p1 <= i_1_reg_278(6 - 1 downto 0);
    trunc_ln70_fu_399_p1 <= i_reg_222(6 - 1 downto 0);
    trunc_ln89_fu_593_p1 <= i_3_reg_300(6 - 1 downto 0);
    trunc_ln93_fu_631_p1 <= j_3_reg_311(6 - 1 downto 0);
    trunc_ln_fu_372_p4 <= xout(63 downto 6);
    xin_address0 <= zext_ln208_1_reg_1000(12 - 1 downto 0);

    xin_ce0_assign_proc : process(ap_CS_fsm_state103)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            xin_ce0 <= ap_const_logic_1;
        else 
            xin_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    xin_d0 <= cov_V_load_reg_1013;

    xin_we0_assign_proc : process(ap_CS_fsm_state103)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            xin_we0 <= ap_const_logic_1;
        else 
            xin_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln208_1_fu_772_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln208_fu_767_p2),64));
    zext_ln208_fu_763_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_4_reg_356),12));
    zext_ln215_1_fu_692_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln215_1_fu_687_p2),64));
    zext_ln215_fu_682_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln215_fu_677_p2),64));
    zext_ln691_fu_491_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln691_2_fu_486_p2),64));
    zext_ln692_1_fu_562_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln692_fu_557_p2),64));
    zext_ln692_fu_553_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_2_reg_289),12));
    zext_ln70_1_fu_432_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln70_fu_427_p2),64));
    zext_ln70_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_233),12));
    zext_ln74_1_fu_458_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_244),12));
    zext_ln74_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_244),64));
    zext_ln83_fu_549_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_2_reg_289),64));
    zext_ln89_1_fu_617_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_3_reg_311),12));
    zext_ln89_2_fu_626_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln89_fu_621_p2),64));
    zext_ln89_fu_589_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_300),12));
    zext_ln93_fu_648_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln93_fu_643_p2),64));
end behav;
