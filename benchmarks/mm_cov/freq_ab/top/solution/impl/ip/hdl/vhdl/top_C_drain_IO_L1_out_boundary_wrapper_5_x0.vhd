-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_C_drain_IO_L1_out_boundary_wrapper_5_x0 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    fifo_C_drain_C_drain_IO_L1_out_5_7_x0275_din : OUT STD_LOGIC_VECTOR (127 downto 0);
    fifo_C_drain_C_drain_IO_L1_out_5_7_x0275_full_n : IN STD_LOGIC;
    fifo_C_drain_C_drain_IO_L1_out_5_7_x0275_write : OUT STD_LOGIC;
    fifo_C_drain_PE_7_5_x0211_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    fifo_C_drain_PE_7_5_x0211_empty_n : IN STD_LOGIC;
    fifo_C_drain_PE_7_5_x0211_read : OUT STD_LOGIC );
end;


architecture behav of top_C_drain_IO_L1_out_boundary_wrapper_5_x0 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal fifo_C_drain_C_drain_IO_L1_out_5_7_x0275_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal fifo_C_drain_PE_7_5_x0211_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal add_ln691_fu_282_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln691_reg_452 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln691_584_fu_294_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln691_584_reg_460 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln691_586_fu_306_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln691_586_reg_468 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal data_split_V_addr_reg_476 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln890_587_fu_312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln691_587_fu_327_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln691_587_reg_481 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal local_C_V_0_addr_59_reg_489 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln890_589_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_494 : STD_LOGIC_VECTOR (15 downto 0);
    signal local_C_V_0_q0 : STD_LOGIC_VECTOR (127 downto 0);
    signal add_ln691_588_fu_344_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal zext_ln1497_fu_376_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal icmp_ln878_fu_355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_split_V_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_reg_517 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal data_split_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_8451_reg_522 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_8452_reg_527 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal v2_V_8453_reg_532 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_8454_reg_537 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal v2_V_8455_reg_542 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln691_585_fu_395_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln691_585_reg_547 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal icmp_ln890_588_fu_406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal local_C_V_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal local_C_V_0_ce0 : STD_LOGIC;
    signal local_C_V_0_we0 : STD_LOGIC;
    signal local_C_V_0_d0 : STD_LOGIC_VECTOR (127 downto 0);
    signal data_split_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal data_split_V_ce0 : STD_LOGIC;
    signal data_split_V_we0 : STD_LOGIC;
    signal data_split_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_split_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal data_split_V_ce1 : STD_LOGIC;
    signal c0_V_reg_207 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln890_586_fu_300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal c1_V_reg_218 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln890_fu_288_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c6_V_reg_229 : STD_LOGIC_VECTOR (3 downto 0);
    signal c7_V_reg_240 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal n_V_reg_251 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Val2_s_reg_262 : STD_LOGIC_VECTOR (127 downto 0);
    signal c5_V_reg_271 : STD_LOGIC_VECTOR (3 downto 0);
    signal idxprom_fu_322_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln890_59_fu_333_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln878_fu_350_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln890_fu_401_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln674_fu_361_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal empty_fu_318_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_fu_366_p4 : STD_LOGIC_VECTOR (111 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component top_C_drain_IO_L1_out_boundary_wrapper_0_x0_local_C_V_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (127 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;


    component top_C_drain_IO_L1_out_boundary_wrapper_0_x0_data_split_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    local_C_V_0_U : component top_C_drain_IO_L1_out_boundary_wrapper_0_x0_local_C_V_0
    generic map (
        DataWidth => 128,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => local_C_V_0_address0,
        ce0 => local_C_V_0_ce0,
        we0 => local_C_V_0_we0,
        d0 => local_C_V_0_d0,
        q0 => local_C_V_0_q0);

    data_split_V_U : component top_C_drain_IO_L1_out_boundary_wrapper_0_x0_data_split_V
    generic map (
        DataWidth => 16,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => data_split_V_address0,
        ce0 => data_split_V_ce0,
        we0 => data_split_V_we0,
        d0 => data_split_V_d0,
        q0 => data_split_V_q0,
        address1 => data_split_V_address1,
        ce1 => data_split_V_ce1,
        q1 => data_split_V_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln890_fu_288_p2 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    c0_V_reg_207_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c0_V_reg_207 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln890_586_fu_300_p2 = ap_const_lv1_1))) then 
                c0_V_reg_207 <= add_ln691_reg_452;
            end if; 
        end if;
    end process;

    c1_V_reg_218_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln890_588_fu_406_p2 = ap_const_lv1_1))) then 
                c1_V_reg_218 <= add_ln691_584_reg_460;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln890_fu_288_p2 = ap_const_lv1_0))) then 
                c1_V_reg_218 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    c5_V_reg_271_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln890_587_fu_312_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                c5_V_reg_271 <= ap_const_lv4_0;
            elsif (((fifo_C_drain_C_drain_IO_L1_out_5_7_x0275_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                c5_V_reg_271 <= add_ln691_585_reg_547;
            end if; 
        end if;
    end process;

    c6_V_reg_229_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln890_586_fu_300_p2 = ap_const_lv1_0))) then 
                c6_V_reg_229 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln890_589_fu_338_p2 = ap_const_lv1_1))) then 
                c6_V_reg_229 <= add_ln691_586_reg_468;
            end if; 
        end if;
    end process;

    c7_V_reg_240_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln890_587_fu_312_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                c7_V_reg_240 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                c7_V_reg_240 <= add_ln691_587_reg_481;
            end if; 
        end if;
    end process;

    n_V_reg_251_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((fifo_C_drain_PE_7_5_x0211_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                n_V_reg_251 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln878_fu_355_p2 = ap_const_lv1_0))) then 
                n_V_reg_251 <= add_ln691_588_fu_344_p2;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_262_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((fifo_C_drain_PE_7_5_x0211_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                p_Val2_s_reg_262 <= local_C_V_0_q0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln878_fu_355_p2 = ap_const_lv1_0))) then 
                p_Val2_s_reg_262 <= zext_ln1497_fu_376_p1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln691_584_reg_460 <= add_ln691_584_fu_294_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                add_ln691_585_reg_547 <= add_ln691_585_fu_395_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln691_586_reg_468 <= add_ln691_586_fu_306_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln691_587_reg_481 <= add_ln691_587_fu_327_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln691_reg_452 <= add_ln691_fu_282_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln890_587_fu_312_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                data_split_V_addr_reg_476 <= idxprom_fu_322_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln890_589_fu_338_p2 = ap_const_lv1_0))) then
                local_C_V_0_addr_59_reg_489 <= zext_ln890_59_fu_333_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_reg_494 <= fifo_C_drain_PE_7_5_x0211_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                v2_V_8451_reg_522 <= data_split_V_q0;
                v2_V_reg_517 <= data_split_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                v2_V_8452_reg_527 <= data_split_V_q0;
                v2_V_8453_reg_532 <= data_split_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                v2_V_8454_reg_537 <= data_split_V_q0;
                v2_V_8455_reg_542 <= data_split_V_q1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, fifo_C_drain_C_drain_IO_L1_out_5_7_x0275_full_n, fifo_C_drain_PE_7_5_x0211_empty_n, ap_CS_fsm_state14, ap_CS_fsm_state6, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, icmp_ln890_587_fu_312_p2, ap_CS_fsm_state5, icmp_ln890_589_fu_338_p2, ap_CS_fsm_state7, icmp_ln878_fu_355_p2, ap_CS_fsm_state13, icmp_ln890_588_fu_406_p2, icmp_ln890_586_fu_300_p2, icmp_ln890_fu_288_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln890_fu_288_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln890_586_fu_300_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln890_587_fu_312_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln890_589_fu_338_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((fifo_C_drain_PE_7_5_x0211_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln878_fu_355_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln890_588_fu_406_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                if (((fifo_C_drain_C_drain_IO_L1_out_5_7_x0275_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln691_584_fu_294_p2 <= std_logic_vector(unsigned(c1_V_reg_218) + unsigned(ap_const_lv5_1));
    add_ln691_585_fu_395_p2 <= std_logic_vector(unsigned(c5_V_reg_271) + unsigned(ap_const_lv4_1));
    add_ln691_586_fu_306_p2 <= std_logic_vector(unsigned(c6_V_reg_229) + unsigned(ap_const_lv4_1));
    add_ln691_587_fu_327_p2 <= std_logic_vector(unsigned(c7_V_reg_240) + unsigned(ap_const_lv4_1));
    add_ln691_588_fu_344_p2 <= std_logic_vector(unsigned(n_V_reg_251) + unsigned(ap_const_lv4_1));
    add_ln691_fu_282_p2 <= std_logic_vector(unsigned(c0_V_reg_207) + unsigned(ap_const_lv5_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, icmp_ln890_fu_288_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln890_fu_288_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln890_fu_288_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln890_fu_288_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    data_split_V_address0_assign_proc : process(data_split_V_addr_reg_476, ap_CS_fsm_state7, icmp_ln878_fu_355_p2, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, zext_ln878_fu_350_p1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            data_split_V_address0 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            data_split_V_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            data_split_V_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            data_split_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln878_fu_355_p2 = ap_const_lv1_1))) then 
            data_split_V_address0 <= data_split_V_addr_reg_476;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln878_fu_355_p2 = ap_const_lv1_0))) then 
            data_split_V_address0 <= zext_ln878_fu_350_p1(3 - 1 downto 0);
        else 
            data_split_V_address0 <= "XXX";
        end if; 
    end process;


    data_split_V_address1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            data_split_V_address1 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            data_split_V_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            data_split_V_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            data_split_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            data_split_V_address1 <= "XXX";
        end if; 
    end process;


    data_split_V_ce0_assign_proc : process(ap_CS_fsm_state7, icmp_ln878_fu_355_p2, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln878_fu_355_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln878_fu_355_p2 = ap_const_lv1_0)))) then 
            data_split_V_ce0 <= ap_const_logic_1;
        else 
            data_split_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_split_V_ce1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            data_split_V_ce1 <= ap_const_logic_1;
        else 
            data_split_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    data_split_V_d0_assign_proc : process(tmp_reg_494, ap_CS_fsm_state7, icmp_ln878_fu_355_p2, trunc_ln674_fu_361_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
            if ((icmp_ln878_fu_355_p2 = ap_const_lv1_1)) then 
                data_split_V_d0 <= tmp_reg_494;
            elsif ((icmp_ln878_fu_355_p2 = ap_const_lv1_0)) then 
                data_split_V_d0 <= trunc_ln674_fu_361_p1;
            else 
                data_split_V_d0 <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            data_split_V_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data_split_V_we0_assign_proc : process(ap_CS_fsm_state7, icmp_ln878_fu_355_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln878_fu_355_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln878_fu_355_p2 = ap_const_lv1_0)))) then 
            data_split_V_we0 <= ap_const_logic_1;
        else 
            data_split_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_318_p1 <= c6_V_reg_229(3 - 1 downto 0);

    fifo_C_drain_C_drain_IO_L1_out_5_7_x0275_blk_n_assign_proc : process(fifo_C_drain_C_drain_IO_L1_out_5_7_x0275_full_n, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            fifo_C_drain_C_drain_IO_L1_out_5_7_x0275_blk_n <= fifo_C_drain_C_drain_IO_L1_out_5_7_x0275_full_n;
        else 
            fifo_C_drain_C_drain_IO_L1_out_5_7_x0275_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    fifo_C_drain_C_drain_IO_L1_out_5_7_x0275_din <= local_C_V_0_q0;

    fifo_C_drain_C_drain_IO_L1_out_5_7_x0275_write_assign_proc : process(fifo_C_drain_C_drain_IO_L1_out_5_7_x0275_full_n, ap_CS_fsm_state14)
    begin
        if (((fifo_C_drain_C_drain_IO_L1_out_5_7_x0275_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            fifo_C_drain_C_drain_IO_L1_out_5_7_x0275_write <= ap_const_logic_1;
        else 
            fifo_C_drain_C_drain_IO_L1_out_5_7_x0275_write <= ap_const_logic_0;
        end if; 
    end process;


    fifo_C_drain_PE_7_5_x0211_blk_n_assign_proc : process(fifo_C_drain_PE_7_5_x0211_empty_n, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            fifo_C_drain_PE_7_5_x0211_blk_n <= fifo_C_drain_PE_7_5_x0211_empty_n;
        else 
            fifo_C_drain_PE_7_5_x0211_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    fifo_C_drain_PE_7_5_x0211_read_assign_proc : process(fifo_C_drain_PE_7_5_x0211_empty_n, ap_CS_fsm_state6)
    begin
        if (((fifo_C_drain_PE_7_5_x0211_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            fifo_C_drain_PE_7_5_x0211_read <= ap_const_logic_1;
        else 
            fifo_C_drain_PE_7_5_x0211_read <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln878_fu_355_p2 <= "1" when (n_V_reg_251 = ap_const_lv4_8) else "0";
    icmp_ln890_586_fu_300_p2 <= "1" when (c1_V_reg_218 = ap_const_lv5_10) else "0";
    icmp_ln890_587_fu_312_p2 <= "1" when (c6_V_reg_229 = ap_const_lv4_8) else "0";
    icmp_ln890_588_fu_406_p2 <= "1" when (c5_V_reg_271 = ap_const_lv4_8) else "0";
    icmp_ln890_589_fu_338_p2 <= "1" when (c7_V_reg_240 = ap_const_lv4_8) else "0";
    icmp_ln890_fu_288_p2 <= "1" when (c0_V_reg_207 = ap_const_lv5_10) else "0";
    idxprom_fu_322_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_fu_318_p1),64));

    local_C_V_0_address0_assign_proc : process(ap_CS_fsm_state5, local_C_V_0_addr_59_reg_489, ap_CS_fsm_state13, ap_CS_fsm_state12, zext_ln890_59_fu_333_p1, zext_ln890_fu_401_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            local_C_V_0_address0 <= zext_ln890_fu_401_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            local_C_V_0_address0 <= local_C_V_0_addr_59_reg_489;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            local_C_V_0_address0 <= zext_ln890_59_fu_333_p1(3 - 1 downto 0);
        else 
            local_C_V_0_address0 <= "XXX";
        end if; 
    end process;


    local_C_V_0_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state13, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            local_C_V_0_ce0 <= ap_const_logic_1;
        else 
            local_C_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    local_C_V_0_d0 <= (((((((data_split_V_q1 & data_split_V_q0) & v2_V_8455_reg_542) & v2_V_8454_reg_537) & v2_V_8453_reg_532) & v2_V_8452_reg_527) & v2_V_8451_reg_522) & v2_V_reg_517);

    local_C_V_0_we0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            local_C_V_0_we0 <= ap_const_logic_1;
        else 
            local_C_V_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    r_fu_366_p4 <= p_Val2_s_reg_262(127 downto 16);
    trunc_ln674_fu_361_p1 <= p_Val2_s_reg_262(16 - 1 downto 0);
    zext_ln1497_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_fu_366_p4),128));
    zext_ln878_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_V_reg_251),64));
    zext_ln890_59_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c7_V_reg_240),64));
    zext_ln890_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c5_V_reg_271),64));
end behav;
