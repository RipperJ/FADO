-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_PE_wrapper_6_4_x0 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    fifo_A_PE_6_4_x078_dout : IN STD_LOGIC_VECTOR (511 downto 0);
    fifo_A_PE_6_4_x078_empty_n : IN STD_LOGIC;
    fifo_A_PE_6_4_x078_read : OUT STD_LOGIC;
    fifo_A_PE_6_5_x079_din : OUT STD_LOGIC_VECTOR (511 downto 0);
    fifo_A_PE_6_5_x079_full_n : IN STD_LOGIC;
    fifo_A_PE_6_5_x079_write : OUT STD_LOGIC;
    fifo_B_PE_6_4_x0134_dout : IN STD_LOGIC_VECTOR (511 downto 0);
    fifo_B_PE_6_4_x0134_empty_n : IN STD_LOGIC;
    fifo_B_PE_6_4_x0134_read : OUT STD_LOGIC;
    fifo_B_PE_7_4_x0135_din : OUT STD_LOGIC_VECTOR (511 downto 0);
    fifo_B_PE_7_4_x0135_full_n : IN STD_LOGIC;
    fifo_B_PE_7_4_x0135_write : OUT STD_LOGIC;
    fifo_C_drain_PE_6_4_x0202_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    fifo_C_drain_PE_6_4_x0202_full_n : IN STD_LOGIC;
    fifo_C_drain_PE_6_4_x0202_write : OUT STD_LOGIC );
end;


architecture behav of top_PE_wrapper_6_4_x0 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv20_1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_const_lv20_80000 : STD_LOGIC_VECTOR (19 downto 0) := "10000000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_8F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001111";
    constant ap_const_lv32_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101111";
    constant ap_const_lv32_B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001111";
    constant ap_const_lv32_D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101111";
    constant ap_const_lv32_F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_10F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100001111";
    constant ap_const_lv32_110 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100010000";
    constant ap_const_lv32_11F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011111";
    constant ap_const_lv32_120 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100100000";
    constant ap_const_lv32_12F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100101111";
    constant ap_const_lv32_130 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100110000";
    constant ap_const_lv32_13F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111111";
    constant ap_const_lv32_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000000";
    constant ap_const_lv32_14F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101001111";
    constant ap_const_lv32_150 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101010000";
    constant ap_const_lv32_15F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101011111";
    constant ap_const_lv32_160 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101100000";
    constant ap_const_lv32_16F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101101111";
    constant ap_const_lv32_170 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101110000";
    constant ap_const_lv32_17F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111111";
    constant ap_const_lv32_180 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000000";
    constant ap_const_lv32_18F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110001111";
    constant ap_const_lv32_190 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110010000";
    constant ap_const_lv32_19F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110011111";
    constant ap_const_lv32_1A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110100000";
    constant ap_const_lv32_1AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110101111";
    constant ap_const_lv32_1B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110110000";
    constant ap_const_lv32_1BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110111111";
    constant ap_const_lv32_1C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111000000";
    constant ap_const_lv32_1CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111001111";
    constant ap_const_lv32_1D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111010000";
    constant ap_const_lv32_1DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111011111";
    constant ap_const_lv32_1E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111100000";
    constant ap_const_lv32_1EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111101111";
    constant ap_const_lv32_1F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111110000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv17_8000 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv8_40 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_const_lv13_800 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv6_1F : STD_LOGIC_VECTOR (5 downto 0) := "011111";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal fifo_A_PE_6_4_x078_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln890_reg_1577 : STD_LOGIC_VECTOR (0 downto 0);
    signal fifo_A_PE_6_5_x079_blk_n : STD_LOGIC;
    signal fifo_B_PE_6_4_x0134_blk_n : STD_LOGIC;
    signal fifo_B_PE_7_4_x0135_blk_n : STD_LOGIC;
    signal fifo_C_drain_PE_6_4_x0202_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal select_ln10436_2_reg_2053 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln10436_2_reg_2053_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten73_reg_283 : STD_LOGIC_VECTOR (19 downto 0);
    signal indvar_flatten39_reg_294 : STD_LOGIC_VECTOR (16 downto 0);
    signal indvar_flatten13_reg_305 : STD_LOGIC_VECTOR (12 downto 0);
    signal indvar_flatten_reg_316 : STD_LOGIC_VECTOR (7 downto 0);
    signal c6_V_reg_327 : STD_LOGIC_VECTOR (3 downto 0);
    signal c7_V_reg_338 : STD_LOGIC_VECTOR (3 downto 0);
    signal c2_V_reg_349 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln890_36_fu_360_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln890_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln890_reg_1577_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln890_reg_1577_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln890_reg_1577_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln890_reg_1577_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln890_reg_1577_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln890_reg_1577_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln890_reg_1577_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal v2_V_1422_fu_372_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_1422_reg_1581 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_1422_reg_1581_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_1422_reg_1581_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_1423_reg_1586 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_1425_reg_1596 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_1427_reg_1606 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_1429_reg_1616 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_1431_reg_1626 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_1433_reg_1636 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_1436_reg_1651 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_1436_reg_1651_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_1437_reg_1656 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_1439_reg_1666 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_1441_reg_1676 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_1443_reg_1686 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_1445_reg_1696 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_1447_reg_1706 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_1449_reg_1716 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_1452_reg_1731 : STD_LOGIC_VECTOR (15 downto 0);
    signal v1_V_12_reg_1736 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_fu_686_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_reg_1741 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_reg_1741_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_reg_1741_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_1392_reg_1746 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_1394_reg_1756 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_1396_reg_1766 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_1398_reg_1776 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_1400_reg_1786 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_1402_reg_1796 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_1405_reg_1811 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_1405_reg_1811_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_1406_reg_1816 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_1408_reg_1826 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_1410_reg_1836 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_1412_reg_1846 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_1414_reg_1856 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_1416_reg_1866 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_1418_reg_1876 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_1421_reg_1891 : STD_LOGIC_VECTOR (15 downto 0);
    signal v1_V_reg_1896 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln890_34_fu_1000_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln890_34_reg_1901 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln890_34_reg_1901_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln890_34_reg_1901_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln890_60_fu_1012_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal xor_ln10434_fu_1020_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln10434_reg_1915 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10434_3_fu_1055_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10434_3_reg_1920 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10434_3_reg_1920_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln10435_fu_1061_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln10435_reg_1925 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln10435_2_fu_1072_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln10435_2_reg_1930 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10435_2_fu_1083_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10435_2_reg_1935 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10435_2_reg_1935_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln890_57_fu_1146_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln890_57_reg_1942 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal empty_fu_1154_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_reg_1948 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_1368_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1374_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1380_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1386_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1392_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1398_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1404_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1410_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1416_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1422_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1428_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1434_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1440_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1446_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1452_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln691_27_fu_1158_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln890_58_fu_1170_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln890_59_fu_1184_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal cmp_i_i135998_fu_1192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp_i_i135998_reg_2043 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp_i_i1359_mid1_fu_1227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp_i_i1359_mid1_reg_2048 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln10436_2_fu_1239_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln10436_2_reg_2053_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln890_fu_1246_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal local_C_addr_reg_2062 : STD_LOGIC_VECTOR (5 downto 0);
    signal local_C_addr_reg_2062_pp0_iter6_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal local_C_addr_reg_2062_pp0_iter7_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln10477_6_fu_1282_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln10477_6_reg_2068 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln10477_6_reg_2068_pp0_iter6_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln10477_6_reg_2068_pp0_iter7_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln10477_13_fu_1296_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln10477_13_reg_2073 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln10477_13_reg_2073_pp0_iter6_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln10477_13_reg_2073_pp0_iter7_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1458_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln10477_16_reg_2078 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln10477_16_reg_2078_pp0_iter6_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln10477_20_fu_1302_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln10477_20_fu_1302_p2 : signal is "no";
    signal add_ln10477_20_reg_2083 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln10477_20_reg_2083_pp0_iter6_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1478_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln10477_22_reg_2088 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1484_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln10477_23_reg_2093 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1490_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln10477_25_reg_2098 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1552_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln10477_29_fu_1337_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln10477_29_reg_2113 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln10477_30_fu_1352_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln10477_30_reg_2118 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_flush_enable : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_condition_pp0_exit_iter5_state7 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal local_C_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal local_C_ce0 : STD_LOGIC;
    signal local_C_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal local_C_ce1 : STD_LOGIC;
    signal local_C_we1 : STD_LOGIC;
    signal ap_phi_mux_c6_V_phi_fu_331_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_cast_fu_1269_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal add_ln10477_31_fu_1361_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln890_35_fu_1006_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln890101_fu_1025_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln890_35_fu_1037_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln890_36_fu_1049_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln10435_fu_1066_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10434_1_fu_1031_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10434_2_fu_1043_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln10436_fu_1089_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln10436_1_fu_1095_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10435_1_fu_1077_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln10436_fu_1108_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln10436_fu_1100_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln10436_fu_1114_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln890_fu_1126_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln890_12_fu_1132_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln691_26_fu_1120_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln890_56_fu_1138_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln890_fu_1164_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln890_34_fu_1178_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal cmp_i_i97_fu_1198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10434_fu_1204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln10435_fu_1209_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln691_fu_1221_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal cmp_i_i_mid1_fu_1233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10435_fu_1216_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_cast_fu_1256_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln890_fu_1253_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_1285_fu_1263_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1538_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1545_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1531_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1524_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln10477_5_fu_1278_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln10477_5_fu_1278_p2 : signal is "no";
    signal add_ln10477_2_fu_1274_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln10477_2_fu_1274_p2 : signal is "no";
    signal grp_fu_1503_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1496_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1517_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1510_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln10477_12_fu_1292_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln10477_12_fu_1292_p2 : signal is "no";
    signal add_ln10477_9_fu_1288_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln10477_9_fu_1288_p2 : signal is "no";
    signal grp_fu_1471_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1464_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln10434_fu_1306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln10435_1_fu_1310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln10436_1_fu_1315_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1558_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln10477_28_fu_1333_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln10477_28_fu_1333_p2 : signal is "no";
    signal add_ln10477_24_fu_1329_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln10477_24_fu_1329_p2 : signal is "no";
    signal grp_fu_1565_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln10477_17_fu_1343_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln10477_17_fu_1343_p2 : signal is "no";
    signal add_ln10477_21_fu_1347_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln10477_14_fu_1357_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1368_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1368_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1374_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1374_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1380_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1380_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1386_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1386_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1392_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1392_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1398_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1398_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1404_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1404_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1410_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1410_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1416_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1416_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1422_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1422_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1428_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1428_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1434_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1434_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1440_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1440_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1446_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1446_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1452_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1452_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1565_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1368_ce : STD_LOGIC;
    signal grp_fu_1374_ce : STD_LOGIC;
    signal grp_fu_1380_ce : STD_LOGIC;
    signal grp_fu_1386_ce : STD_LOGIC;
    signal grp_fu_1392_ce : STD_LOGIC;
    signal grp_fu_1398_ce : STD_LOGIC;
    signal grp_fu_1404_ce : STD_LOGIC;
    signal grp_fu_1410_ce : STD_LOGIC;
    signal grp_fu_1416_ce : STD_LOGIC;
    signal grp_fu_1422_ce : STD_LOGIC;
    signal grp_fu_1428_ce : STD_LOGIC;
    signal grp_fu_1434_ce : STD_LOGIC;
    signal grp_fu_1440_ce : STD_LOGIC;
    signal grp_fu_1446_ce : STD_LOGIC;
    signal grp_fu_1452_ce : STD_LOGIC;
    signal grp_fu_1458_ce : STD_LOGIC;
    signal grp_fu_1464_ce : STD_LOGIC;
    signal grp_fu_1471_ce : STD_LOGIC;
    signal grp_fu_1478_ce : STD_LOGIC;
    signal grp_fu_1484_ce : STD_LOGIC;
    signal grp_fu_1490_ce : STD_LOGIC;
    signal grp_fu_1496_ce : STD_LOGIC;
    signal grp_fu_1503_ce : STD_LOGIC;
    signal grp_fu_1510_ce : STD_LOGIC;
    signal grp_fu_1517_ce : STD_LOGIC;
    signal grp_fu_1524_ce : STD_LOGIC;
    signal grp_fu_1531_ce : STD_LOGIC;
    signal grp_fu_1538_ce : STD_LOGIC;
    signal grp_fu_1545_ce : STD_LOGIC;
    signal grp_fu_1552_ce : STD_LOGIC;
    signal grp_fu_1558_ce : STD_LOGIC;
    signal grp_fu_1565_ce : STD_LOGIC;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component top_mul_mul_16s_16s_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component top_mac_muladd_16s_16s_16s_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component top_mac_muladd_16s_16s_16ns_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component top_PE_wrapper_0_0_x0_local_C IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    local_C_U : component top_PE_wrapper_0_0_x0_local_C
    generic map (
        DataWidth => 16,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => local_C_address0,
        ce0 => local_C_ce0,
        q0 => local_C_q0,
        address1 => local_C_addr_reg_2062_pp0_iter7_reg,
        ce1 => local_C_ce1,
        we1 => local_C_we1,
        d1 => add_ln10477_31_fu_1361_p2);

    mul_mul_16s_16s_16_4_1_U2004 : component top_mul_mul_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1368_p0,
        din1 => grp_fu_1368_p1,
        ce => grp_fu_1368_ce,
        dout => grp_fu_1368_p2);

    mul_mul_16s_16s_16_4_1_U2005 : component top_mul_mul_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1374_p0,
        din1 => grp_fu_1374_p1,
        ce => grp_fu_1374_ce,
        dout => grp_fu_1374_p2);

    mul_mul_16s_16s_16_4_1_U2006 : component top_mul_mul_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1380_p0,
        din1 => grp_fu_1380_p1,
        ce => grp_fu_1380_ce,
        dout => grp_fu_1380_p2);

    mul_mul_16s_16s_16_4_1_U2007 : component top_mul_mul_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1386_p0,
        din1 => grp_fu_1386_p1,
        ce => grp_fu_1386_ce,
        dout => grp_fu_1386_p2);

    mul_mul_16s_16s_16_4_1_U2008 : component top_mul_mul_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1392_p0,
        din1 => grp_fu_1392_p1,
        ce => grp_fu_1392_ce,
        dout => grp_fu_1392_p2);

    mul_mul_16s_16s_16_4_1_U2009 : component top_mul_mul_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1398_p0,
        din1 => grp_fu_1398_p1,
        ce => grp_fu_1398_ce,
        dout => grp_fu_1398_p2);

    mul_mul_16s_16s_16_4_1_U2010 : component top_mul_mul_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1404_p0,
        din1 => grp_fu_1404_p1,
        ce => grp_fu_1404_ce,
        dout => grp_fu_1404_p2);

    mul_mul_16s_16s_16_4_1_U2011 : component top_mul_mul_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1410_p0,
        din1 => grp_fu_1410_p1,
        ce => grp_fu_1410_ce,
        dout => grp_fu_1410_p2);

    mul_mul_16s_16s_16_4_1_U2012 : component top_mul_mul_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1416_p0,
        din1 => grp_fu_1416_p1,
        ce => grp_fu_1416_ce,
        dout => grp_fu_1416_p2);

    mul_mul_16s_16s_16_4_1_U2013 : component top_mul_mul_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1422_p0,
        din1 => grp_fu_1422_p1,
        ce => grp_fu_1422_ce,
        dout => grp_fu_1422_p2);

    mul_mul_16s_16s_16_4_1_U2014 : component top_mul_mul_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1428_p0,
        din1 => grp_fu_1428_p1,
        ce => grp_fu_1428_ce,
        dout => grp_fu_1428_p2);

    mul_mul_16s_16s_16_4_1_U2015 : component top_mul_mul_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1434_p0,
        din1 => grp_fu_1434_p1,
        ce => grp_fu_1434_ce,
        dout => grp_fu_1434_p2);

    mul_mul_16s_16s_16_4_1_U2016 : component top_mul_mul_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1440_p0,
        din1 => grp_fu_1440_p1,
        ce => grp_fu_1440_ce,
        dout => grp_fu_1440_p2);

    mul_mul_16s_16s_16_4_1_U2017 : component top_mul_mul_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1446_p0,
        din1 => grp_fu_1446_p1,
        ce => grp_fu_1446_ce,
        dout => grp_fu_1446_p2);

    mul_mul_16s_16s_16_4_1_U2018 : component top_mul_mul_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1452_p0,
        din1 => grp_fu_1452_p1,
        ce => grp_fu_1452_ce,
        dout => grp_fu_1452_p2);

    mac_muladd_16s_16s_16s_16_4_1_U2019 : component top_mac_muladd_16s_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v2_V_1392_reg_1746,
        din1 => v2_V_1423_reg_1586,
        din2 => grp_fu_1368_p2,
        ce => grp_fu_1458_ce,
        dout => grp_fu_1458_p3);

    mac_muladd_16s_16s_16s_16_4_1_U2020 : component top_mac_muladd_16s_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v2_V_1394_reg_1756,
        din1 => v2_V_1425_reg_1596,
        din2 => grp_fu_1374_p2,
        ce => grp_fu_1464_ce,
        dout => grp_fu_1464_p3);

    mac_muladd_16s_16s_16s_16_4_1_U2021 : component top_mac_muladd_16s_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v2_V_1396_reg_1766,
        din1 => v2_V_1427_reg_1606,
        din2 => grp_fu_1380_p2,
        ce => grp_fu_1471_ce,
        dout => grp_fu_1471_p3);

    mac_muladd_16s_16s_16s_16_4_1_U2022 : component top_mac_muladd_16s_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v2_V_1398_reg_1776,
        din1 => v2_V_1429_reg_1616,
        din2 => grp_fu_1386_p2,
        ce => grp_fu_1478_ce,
        dout => grp_fu_1478_p3);

    mac_muladd_16s_16s_16s_16_4_1_U2023 : component top_mac_muladd_16s_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v2_V_1400_reg_1786,
        din1 => v2_V_1431_reg_1626,
        din2 => grp_fu_1392_p2,
        ce => grp_fu_1484_ce,
        dout => grp_fu_1484_p3);

    mac_muladd_16s_16s_16s_16_4_1_U2024 : component top_mac_muladd_16s_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v2_V_1402_reg_1796,
        din1 => v2_V_1433_reg_1636,
        din2 => grp_fu_1398_p2,
        ce => grp_fu_1490_ce,
        dout => grp_fu_1490_p3);

    mac_muladd_16s_16s_16s_16_4_1_U2025 : component top_mac_muladd_16s_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v2_V_1406_reg_1816,
        din1 => v2_V_1437_reg_1656,
        din2 => grp_fu_1410_p2,
        ce => grp_fu_1496_ce,
        dout => grp_fu_1496_p3);

    mac_muladd_16s_16s_16s_16_4_1_U2026 : component top_mac_muladd_16s_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v2_V_1408_reg_1826,
        din1 => v2_V_1439_reg_1666,
        din2 => grp_fu_1416_p2,
        ce => grp_fu_1503_ce,
        dout => grp_fu_1503_p3);

    mac_muladd_16s_16s_16s_16_4_1_U2027 : component top_mac_muladd_16s_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v2_V_1410_reg_1836,
        din1 => v2_V_1441_reg_1676,
        din2 => grp_fu_1422_p2,
        ce => grp_fu_1510_ce,
        dout => grp_fu_1510_p3);

    mac_muladd_16s_16s_16s_16_4_1_U2028 : component top_mac_muladd_16s_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v2_V_1412_reg_1846,
        din1 => v2_V_1443_reg_1686,
        din2 => grp_fu_1428_p2,
        ce => grp_fu_1517_ce,
        dout => grp_fu_1517_p3);

    mac_muladd_16s_16s_16s_16_4_1_U2029 : component top_mac_muladd_16s_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v2_V_1414_reg_1856,
        din1 => v2_V_1445_reg_1696,
        din2 => grp_fu_1434_p2,
        ce => grp_fu_1524_ce,
        dout => grp_fu_1524_p3);

    mac_muladd_16s_16s_16s_16_4_1_U2030 : component top_mac_muladd_16s_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v2_V_1416_reg_1866,
        din1 => v2_V_1447_reg_1706,
        din2 => grp_fu_1440_p2,
        ce => grp_fu_1531_ce,
        dout => grp_fu_1531_p3);

    mac_muladd_16s_16s_16s_16_4_1_U2031 : component top_mac_muladd_16s_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v2_V_1418_reg_1876,
        din1 => v2_V_1449_reg_1716,
        din2 => grp_fu_1446_p2,
        ce => grp_fu_1538_ce,
        dout => grp_fu_1538_p3);

    mac_muladd_16s_16s_16s_16_4_1_U2032 : component top_mac_muladd_16s_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v2_V_1421_reg_1891,
        din1 => v2_V_1452_reg_1731,
        din2 => grp_fu_1452_p2,
        ce => grp_fu_1545_ce,
        dout => grp_fu_1545_p3);

    mac_muladd_16s_16s_16s_16_4_1_U2033 : component top_mac_muladd_16s_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v1_V_reg_1896,
        din1 => v1_V_12_reg_1736,
        din2 => grp_fu_1404_p2,
        ce => grp_fu_1552_ce,
        dout => grp_fu_1552_p3);

    mac_muladd_16s_16s_16s_16_4_1_U2034 : component top_mac_muladd_16s_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v2_V_1405_reg_1811_pp0_iter2_reg,
        din1 => v2_V_1436_reg_1651_pp0_iter2_reg,
        din2 => grp_fu_1552_p3,
        ce => grp_fu_1558_ce,
        dout => grp_fu_1558_p3);

    mac_muladd_16s_16s_16ns_16_4_1_U2035 : component top_mac_muladd_16s_16s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v2_V_reg_1741_pp0_iter3_reg,
        din1 => v2_V_1422_reg_1581_pp0_iter3_reg,
        din2 => grp_fu_1565_p2,
        ce => grp_fu_1565_ce,
        dout => grp_fu_1565_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp0_flush_enable)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter5_state7)) then 
                        ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter4;
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c2_V_reg_349_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln890_reg_1577_pp0_iter4_reg = ap_const_lv1_0))) then 
                c2_V_reg_349 <= select_ln890_fu_1246_p3;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c2_V_reg_349 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    c6_V_reg_327_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln890_reg_1577_pp0_iter4_reg = ap_const_lv1_0))) then 
                c6_V_reg_327 <= select_ln890_57_reg_1942;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c6_V_reg_327 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    c7_V_reg_338_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln890_reg_1577_pp0_iter3_reg = ap_const_lv1_0))) then 
                c7_V_reg_338 <= add_ln691_27_fu_1158_p2;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c7_V_reg_338 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    indvar_flatten13_reg_305_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln890_reg_1577_pp0_iter3_reg = ap_const_lv1_0))) then 
                indvar_flatten13_reg_305 <= select_ln890_59_fu_1184_p3;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten13_reg_305 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    indvar_flatten39_reg_294_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln890_reg_1577_pp0_iter2_reg = ap_const_lv1_0))) then 
                indvar_flatten39_reg_294 <= select_ln890_60_fu_1012_p3;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten39_reg_294 <= ap_const_lv17_0;
            end if; 
        end if;
    end process;

    indvar_flatten73_reg_283_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln890_fu_366_p2 = ap_const_lv1_0))) then 
                indvar_flatten73_reg_283 <= add_ln890_36_fu_360_p2;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten73_reg_283 <= ap_const_lv20_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_316_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln890_reg_1577_pp0_iter3_reg = ap_const_lv1_0))) then 
                indvar_flatten_reg_316 <= select_ln890_58_fu_1170_p3;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_316 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln890_reg_1577_pp0_iter4_reg = ap_const_lv1_0))) then
                add_ln10477_13_reg_2073 <= add_ln10477_13_fu_1296_p2;
                add_ln10477_20_reg_2083 <= add_ln10477_20_fu_1302_p2;
                add_ln10477_6_reg_2068 <= add_ln10477_6_fu_1282_p2;
                local_C_addr_reg_2062 <= p_cast_fu_1269_p1(6 - 1 downto 0);
                select_ln10436_2_reg_2053 <= select_ln10436_2_fu_1239_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln10477_13_reg_2073_pp0_iter6_reg <= add_ln10477_13_reg_2073;
                add_ln10477_13_reg_2073_pp0_iter7_reg <= add_ln10477_13_reg_2073_pp0_iter6_reg;
                add_ln10477_16_reg_2078_pp0_iter6_reg <= add_ln10477_16_reg_2078;
                add_ln10477_20_reg_2083_pp0_iter6_reg <= add_ln10477_20_reg_2083;
                add_ln10477_6_reg_2068_pp0_iter6_reg <= add_ln10477_6_reg_2068;
                add_ln10477_6_reg_2068_pp0_iter7_reg <= add_ln10477_6_reg_2068_pp0_iter6_reg;
                and_ln10434_3_reg_1920_pp0_iter5_reg <= and_ln10434_3_reg_1920;
                and_ln10435_2_reg_1935_pp0_iter5_reg <= and_ln10435_2_reg_1935;
                icmp_ln890_34_reg_1901_pp0_iter4_reg <= icmp_ln890_34_reg_1901;
                icmp_ln890_34_reg_1901_pp0_iter5_reg <= icmp_ln890_34_reg_1901_pp0_iter4_reg;
                icmp_ln890_reg_1577_pp0_iter2_reg <= icmp_ln890_reg_1577_pp0_iter1_reg;
                icmp_ln890_reg_1577_pp0_iter3_reg <= icmp_ln890_reg_1577_pp0_iter2_reg;
                icmp_ln890_reg_1577_pp0_iter4_reg <= icmp_ln890_reg_1577_pp0_iter3_reg;
                icmp_ln890_reg_1577_pp0_iter5_reg <= icmp_ln890_reg_1577_pp0_iter4_reg;
                icmp_ln890_reg_1577_pp0_iter6_reg <= icmp_ln890_reg_1577_pp0_iter5_reg;
                icmp_ln890_reg_1577_pp0_iter7_reg <= icmp_ln890_reg_1577_pp0_iter6_reg;
                local_C_addr_reg_2062_pp0_iter6_reg <= local_C_addr_reg_2062;
                local_C_addr_reg_2062_pp0_iter7_reg <= local_C_addr_reg_2062_pp0_iter6_reg;
                select_ln10436_2_reg_2053_pp0_iter6_reg <= select_ln10436_2_reg_2053;
                select_ln10436_2_reg_2053_pp0_iter7_reg <= select_ln10436_2_reg_2053_pp0_iter6_reg;
                v2_V_1405_reg_1811_pp0_iter2_reg <= v2_V_1405_reg_1811;
                v2_V_1422_reg_1581_pp0_iter2_reg <= v2_V_1422_reg_1581;
                v2_V_1422_reg_1581_pp0_iter3_reg <= v2_V_1422_reg_1581_pp0_iter2_reg;
                v2_V_1436_reg_1651_pp0_iter2_reg <= v2_V_1436_reg_1651;
                v2_V_reg_1741_pp0_iter2_reg <= v2_V_reg_1741;
                v2_V_reg_1741_pp0_iter3_reg <= v2_V_reg_1741_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln890_reg_1577_pp0_iter4_reg = ap_const_lv1_0))) then
                add_ln10477_16_reg_2078 <= grp_fu_1458_p3;
                add_ln10477_22_reg_2088 <= grp_fu_1478_p3;
                add_ln10477_23_reg_2093 <= grp_fu_1484_p3;
                add_ln10477_25_reg_2098 <= grp_fu_1490_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln890_reg_1577_pp0_iter5_reg = ap_const_lv1_0))) then
                add_ln10477_29_reg_2113 <= add_ln10477_29_fu_1337_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln890_reg_1577_pp0_iter6_reg = ap_const_lv1_0))) then
                add_ln10477_30_reg_2118 <= add_ln10477_30_fu_1352_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln890_reg_1577_pp0_iter3_reg = ap_const_lv1_0))) then
                and_ln10434_3_reg_1920 <= and_ln10434_3_fu_1055_p2;
                and_ln10435_2_reg_1935 <= and_ln10435_2_fu_1083_p2;
                empty_reg_1948 <= empty_fu_1154_p1;
                or_ln10435_2_reg_1930 <= or_ln10435_2_fu_1072_p2;
                or_ln10435_reg_1925 <= or_ln10435_fu_1061_p2;
                xor_ln10434_reg_1915 <= xor_ln10434_fu_1020_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln10435_2_reg_1935) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln890_reg_1577_pp0_iter4_reg = ap_const_lv1_0))) then
                cmp_i_i135998_reg_2043 <= cmp_i_i135998_fu_1192_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln10435_2_reg_1935) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln890_reg_1577_pp0_iter4_reg = ap_const_lv1_0))) then
                cmp_i_i1359_mid1_reg_2048 <= cmp_i_i1359_mid1_fu_1227_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln890_reg_1577_pp0_iter2_reg = ap_const_lv1_0))) then
                icmp_ln890_34_reg_1901 <= icmp_ln890_34_fu_1000_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln890_reg_1577 <= icmp_ln890_fu_366_p2;
                icmp_ln890_reg_1577_pp0_iter1_reg <= icmp_ln890_reg_1577;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln890_reg_1577_pp0_iter3_reg = ap_const_lv1_0))) then
                select_ln890_57_reg_1942 <= select_ln890_57_fu_1146_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln890_reg_1577 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                v1_V_12_reg_1736 <= fifo_A_PE_6_4_x078_dout(511 downto 496);
                v1_V_reg_1896 <= fifo_B_PE_6_4_x0134_dout(511 downto 496);
                v2_V_1392_reg_1746 <= fifo_B_PE_6_4_x0134_dout(31 downto 16);
                v2_V_1394_reg_1756 <= fifo_B_PE_6_4_x0134_dout(63 downto 48);
                v2_V_1396_reg_1766 <= fifo_B_PE_6_4_x0134_dout(95 downto 80);
                v2_V_1398_reg_1776 <= fifo_B_PE_6_4_x0134_dout(127 downto 112);
                v2_V_1400_reg_1786 <= fifo_B_PE_6_4_x0134_dout(159 downto 144);
                v2_V_1402_reg_1796 <= fifo_B_PE_6_4_x0134_dout(191 downto 176);
                v2_V_1405_reg_1811 <= fifo_B_PE_6_4_x0134_dout(239 downto 224);
                v2_V_1406_reg_1816 <= fifo_B_PE_6_4_x0134_dout(255 downto 240);
                v2_V_1408_reg_1826 <= fifo_B_PE_6_4_x0134_dout(287 downto 272);
                v2_V_1410_reg_1836 <= fifo_B_PE_6_4_x0134_dout(319 downto 304);
                v2_V_1412_reg_1846 <= fifo_B_PE_6_4_x0134_dout(351 downto 336);
                v2_V_1414_reg_1856 <= fifo_B_PE_6_4_x0134_dout(383 downto 368);
                v2_V_1416_reg_1866 <= fifo_B_PE_6_4_x0134_dout(415 downto 400);
                v2_V_1418_reg_1876 <= fifo_B_PE_6_4_x0134_dout(447 downto 432);
                v2_V_1421_reg_1891 <= fifo_B_PE_6_4_x0134_dout(495 downto 480);
                v2_V_1422_reg_1581 <= v2_V_1422_fu_372_p1;
                v2_V_1423_reg_1586 <= fifo_A_PE_6_4_x078_dout(31 downto 16);
                v2_V_1425_reg_1596 <= fifo_A_PE_6_4_x078_dout(63 downto 48);
                v2_V_1427_reg_1606 <= fifo_A_PE_6_4_x078_dout(95 downto 80);
                v2_V_1429_reg_1616 <= fifo_A_PE_6_4_x078_dout(127 downto 112);
                v2_V_1431_reg_1626 <= fifo_A_PE_6_4_x078_dout(159 downto 144);
                v2_V_1433_reg_1636 <= fifo_A_PE_6_4_x078_dout(191 downto 176);
                v2_V_1436_reg_1651 <= fifo_A_PE_6_4_x078_dout(239 downto 224);
                v2_V_1437_reg_1656 <= fifo_A_PE_6_4_x078_dout(255 downto 240);
                v2_V_1439_reg_1666 <= fifo_A_PE_6_4_x078_dout(287 downto 272);
                v2_V_1441_reg_1676 <= fifo_A_PE_6_4_x078_dout(319 downto 304);
                v2_V_1443_reg_1686 <= fifo_A_PE_6_4_x078_dout(351 downto 336);
                v2_V_1445_reg_1696 <= fifo_A_PE_6_4_x078_dout(383 downto 368);
                v2_V_1447_reg_1706 <= fifo_A_PE_6_4_x078_dout(415 downto 400);
                v2_V_1449_reg_1716 <= fifo_A_PE_6_4_x078_dout(447 downto 432);
                v2_V_1452_reg_1731 <= fifo_A_PE_6_4_x078_dout(495 downto 480);
                v2_V_reg_1741 <= v2_V_fu_686_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0))) and not(((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln10477_12_fu_1292_p2 <= std_logic_vector(signed(grp_fu_1517_p3) + signed(grp_fu_1510_p3));
    add_ln10477_13_fu_1296_p2 <= std_logic_vector(unsigned(add_ln10477_12_fu_1292_p2) + unsigned(add_ln10477_9_fu_1288_p2));
    add_ln10477_14_fu_1357_p2 <= std_logic_vector(unsigned(add_ln10477_13_reg_2073_pp0_iter7_reg) + unsigned(add_ln10477_6_reg_2068_pp0_iter7_reg));
    add_ln10477_17_fu_1343_p2 <= std_logic_vector(signed(add_ln10477_16_reg_2078_pp0_iter6_reg) + signed(grp_fu_1565_p3));
    add_ln10477_20_fu_1302_p2 <= std_logic_vector(signed(grp_fu_1471_p3) + signed(grp_fu_1464_p3));
    add_ln10477_21_fu_1347_p2 <= std_logic_vector(unsigned(add_ln10477_20_reg_2083_pp0_iter6_reg) + unsigned(add_ln10477_17_fu_1343_p2));
    add_ln10477_24_fu_1329_p2 <= std_logic_vector(signed(add_ln10477_23_reg_2093) + signed(add_ln10477_22_reg_2088));
    add_ln10477_28_fu_1333_p2 <= std_logic_vector(signed(grp_fu_1558_p3) + signed(add_ln10477_25_reg_2098));
    add_ln10477_29_fu_1337_p2 <= std_logic_vector(unsigned(add_ln10477_28_fu_1333_p2) + unsigned(add_ln10477_24_fu_1329_p2));
    add_ln10477_2_fu_1274_p2 <= std_logic_vector(signed(grp_fu_1538_p3) + signed(grp_fu_1545_p3));
    add_ln10477_30_fu_1352_p2 <= std_logic_vector(unsigned(add_ln10477_29_reg_2113) + unsigned(add_ln10477_21_fu_1347_p2));
    add_ln10477_31_fu_1361_p2 <= std_logic_vector(unsigned(add_ln10477_30_reg_2118) + unsigned(add_ln10477_14_fu_1357_p2));
    add_ln10477_5_fu_1278_p2 <= std_logic_vector(signed(grp_fu_1531_p3) + signed(grp_fu_1524_p3));
    add_ln10477_6_fu_1282_p2 <= std_logic_vector(unsigned(add_ln10477_5_fu_1278_p2) + unsigned(add_ln10477_2_fu_1274_p2));
    add_ln10477_9_fu_1288_p2 <= std_logic_vector(signed(grp_fu_1503_p3) + signed(grp_fu_1496_p3));
    add_ln691_26_fu_1120_p2 <= std_logic_vector(unsigned(select_ln10436_fu_1100_p3) + unsigned(ap_const_lv4_1));
    add_ln691_27_fu_1158_p2 <= std_logic_vector(unsigned(select_ln890_56_fu_1138_p3) + unsigned(ap_const_lv4_1));
    add_ln691_fu_1221_p2 <= std_logic_vector(unsigned(select_ln10435_fu_1209_p3) + unsigned(ap_const_lv6_1));
    add_ln890_34_fu_1178_p2 <= std_logic_vector(unsigned(indvar_flatten13_reg_305) + unsigned(ap_const_lv13_1));
    add_ln890_35_fu_1006_p2 <= std_logic_vector(unsigned(indvar_flatten39_reg_294) + unsigned(ap_const_lv17_1));
    add_ln890_36_fu_360_p2 <= std_logic_vector(unsigned(indvar_flatten73_reg_283) + unsigned(ap_const_lv20_1));
    add_ln890_fu_1164_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_316) + unsigned(ap_const_lv8_1));
    and_ln10434_1_fu_1031_p2 <= (xor_ln10434_fu_1020_p2 and icmp_ln890101_fu_1025_p2);
    and_ln10434_2_fu_1043_p2 <= (xor_ln10434_fu_1020_p2 and icmp_ln890_35_fu_1037_p2);
    and_ln10434_3_fu_1055_p2 <= (xor_ln10434_fu_1020_p2 and icmp_ln890_36_fu_1049_p2);
    and_ln10434_fu_1204_p2 <= (xor_ln10434_reg_1915 and cmp_i_i97_fu_1198_p2);
    and_ln10435_1_fu_1077_p2 <= (or_ln10435_2_fu_1072_p2 and and_ln10434_1_fu_1031_p2);
    and_ln10435_2_fu_1083_p2 <= (or_ln10435_2_fu_1072_p2 and and_ln10434_2_fu_1043_p2);
    and_ln10435_fu_1216_p2 <= (or_ln10435_2_reg_1930 and and_ln10434_fu_1204_p2);
    and_ln10436_fu_1114_p2 <= (xor_ln10436_fu_1108_p2 and and_ln10435_1_fu_1077_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(fifo_A_PE_6_4_x078_empty_n, fifo_A_PE_6_5_x079_full_n, fifo_B_PE_6_4_x0134_empty_n, fifo_B_PE_7_4_x0135_full_n, fifo_C_drain_PE_6_4_x0202_full_n, ap_enable_reg_pp0_iter1, icmp_ln890_reg_1577, ap_enable_reg_pp0_iter8, select_ln10436_2_reg_2053_pp0_iter7_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((select_ln10436_2_reg_2053_pp0_iter7_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (fifo_C_drain_PE_6_4_x0202_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln890_reg_1577 = ap_const_lv1_0) and (fifo_B_PE_6_4_x0134_empty_n = ap_const_logic_0)) or ((icmp_ln890_reg_1577 = ap_const_lv1_0) and (fifo_A_PE_6_4_x078_empty_n = ap_const_logic_0)) or ((icmp_ln890_reg_1577 = ap_const_lv1_0) and (fifo_A_PE_6_5_x079_full_n = ap_const_logic_0)) or ((icmp_ln890_reg_1577 = ap_const_lv1_0) and (fifo_B_PE_7_4_x0135_full_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(fifo_A_PE_6_4_x078_empty_n, fifo_A_PE_6_5_x079_full_n, fifo_B_PE_6_4_x0134_empty_n, fifo_B_PE_7_4_x0135_full_n, fifo_C_drain_PE_6_4_x0202_full_n, ap_enable_reg_pp0_iter1, icmp_ln890_reg_1577, ap_enable_reg_pp0_iter8, select_ln10436_2_reg_2053_pp0_iter7_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((select_ln10436_2_reg_2053_pp0_iter7_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (fifo_C_drain_PE_6_4_x0202_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln890_reg_1577 = ap_const_lv1_0) and (fifo_B_PE_6_4_x0134_empty_n = ap_const_logic_0)) or ((icmp_ln890_reg_1577 = ap_const_lv1_0) and (fifo_A_PE_6_4_x078_empty_n = ap_const_logic_0)) or ((icmp_ln890_reg_1577 = ap_const_lv1_0) and (fifo_A_PE_6_5_x079_full_n = ap_const_logic_0)) or ((icmp_ln890_reg_1577 = ap_const_lv1_0) and (fifo_B_PE_7_4_x0135_full_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(fifo_A_PE_6_4_x078_empty_n, fifo_A_PE_6_5_x079_full_n, fifo_B_PE_6_4_x0134_empty_n, fifo_B_PE_7_4_x0135_full_n, fifo_C_drain_PE_6_4_x0202_full_n, ap_enable_reg_pp0_iter1, icmp_ln890_reg_1577, ap_enable_reg_pp0_iter8, select_ln10436_2_reg_2053_pp0_iter7_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((select_ln10436_2_reg_2053_pp0_iter7_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (fifo_C_drain_PE_6_4_x0202_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln890_reg_1577 = ap_const_lv1_0) and (fifo_B_PE_6_4_x0134_empty_n = ap_const_logic_0)) or ((icmp_ln890_reg_1577 = ap_const_lv1_0) and (fifo_A_PE_6_4_x078_empty_n = ap_const_logic_0)) or ((icmp_ln890_reg_1577 = ap_const_lv1_0) and (fifo_A_PE_6_5_x079_full_n = ap_const_logic_0)) or ((icmp_ln890_reg_1577 = ap_const_lv1_0) and (fifo_B_PE_7_4_x0135_full_n = ap_const_logic_0)))));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state10_pp0_stage0_iter8_assign_proc : process(fifo_C_drain_PE_6_4_x0202_full_n, select_ln10436_2_reg_2053_pp0_iter7_reg)
    begin
                ap_block_state10_pp0_stage0_iter8 <= ((select_ln10436_2_reg_2053_pp0_iter7_reg = ap_const_lv1_1) and (fifo_C_drain_PE_6_4_x0202_full_n = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(fifo_A_PE_6_4_x078_empty_n, fifo_A_PE_6_5_x079_full_n, fifo_B_PE_6_4_x0134_empty_n, fifo_B_PE_7_4_x0135_full_n, icmp_ln890_reg_1577)
    begin
                ap_block_state3_pp0_stage0_iter1 <= (((icmp_ln890_reg_1577 = ap_const_lv1_0) and (fifo_B_PE_6_4_x0134_empty_n = ap_const_logic_0)) or ((icmp_ln890_reg_1577 = ap_const_lv1_0) and (fifo_A_PE_6_4_x078_empty_n = ap_const_logic_0)) or ((icmp_ln890_reg_1577 = ap_const_lv1_0) and (fifo_A_PE_6_5_x079_full_n = ap_const_logic_0)) or ((icmp_ln890_reg_1577 = ap_const_lv1_0) and (fifo_B_PE_7_4_x0135_full_n = ap_const_logic_0)));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter5_state7_assign_proc : process(ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0))) then 
            ap_condition_pp0_exit_iter5_state7 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter5_state7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp0_flush_enable_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln890_fu_366_p2, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln890_fu_366_p2 = ap_const_lv1_1))) then 
            ap_condition_pp0_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp0_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_c6_V_phi_fu_331_p4_assign_proc : process(ap_block_pp0_stage0, c6_V_reg_327, icmp_ln890_reg_1577_pp0_iter4_reg, select_ln890_57_reg_1942, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln890_reg_1577_pp0_iter4_reg = ap_const_lv1_0))) then 
            ap_phi_mux_c6_V_phi_fu_331_p4 <= select_ln890_57_reg_1942;
        else 
            ap_phi_mux_c6_V_phi_fu_331_p4 <= c6_V_reg_327;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    cmp_i_i135998_fu_1192_p2 <= "1" when (c2_V_reg_349 = ap_const_lv6_0) else "0";
    cmp_i_i1359_mid1_fu_1227_p2 <= "1" when (add_ln691_fu_1221_p2 = ap_const_lv6_0) else "0";
    cmp_i_i97_fu_1198_p2 <= "1" when (c2_V_reg_349 = ap_const_lv6_1F) else "0";
    cmp_i_i_mid1_fu_1233_p2 <= "1" when (add_ln691_fu_1221_p2 = ap_const_lv6_1F) else "0";
    empty_1285_fu_1263_p2 <= std_logic_vector(unsigned(tmp_30_cast_fu_1256_p3) + unsigned(zext_ln890_fu_1253_p1));
    empty_fu_1154_p1 <= select_ln890_56_fu_1138_p3(3 - 1 downto 0);

    fifo_A_PE_6_4_x078_blk_n_assign_proc : process(fifo_A_PE_6_4_x078_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln890_reg_1577)
    begin
        if (((icmp_ln890_reg_1577 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fifo_A_PE_6_4_x078_blk_n <= fifo_A_PE_6_4_x078_empty_n;
        else 
            fifo_A_PE_6_4_x078_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    fifo_A_PE_6_4_x078_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln890_reg_1577, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln890_reg_1577 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fifo_A_PE_6_4_x078_read <= ap_const_logic_1;
        else 
            fifo_A_PE_6_4_x078_read <= ap_const_logic_0;
        end if; 
    end process;


    fifo_A_PE_6_5_x079_blk_n_assign_proc : process(fifo_A_PE_6_5_x079_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln890_reg_1577)
    begin
        if (((icmp_ln890_reg_1577 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fifo_A_PE_6_5_x079_blk_n <= fifo_A_PE_6_5_x079_full_n;
        else 
            fifo_A_PE_6_5_x079_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    fifo_A_PE_6_5_x079_din <= fifo_A_PE_6_4_x078_dout;

    fifo_A_PE_6_5_x079_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln890_reg_1577, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln890_reg_1577 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fifo_A_PE_6_5_x079_write <= ap_const_logic_1;
        else 
            fifo_A_PE_6_5_x079_write <= ap_const_logic_0;
        end if; 
    end process;


    fifo_B_PE_6_4_x0134_blk_n_assign_proc : process(fifo_B_PE_6_4_x0134_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln890_reg_1577)
    begin
        if (((icmp_ln890_reg_1577 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fifo_B_PE_6_4_x0134_blk_n <= fifo_B_PE_6_4_x0134_empty_n;
        else 
            fifo_B_PE_6_4_x0134_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    fifo_B_PE_6_4_x0134_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln890_reg_1577, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln890_reg_1577 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fifo_B_PE_6_4_x0134_read <= ap_const_logic_1;
        else 
            fifo_B_PE_6_4_x0134_read <= ap_const_logic_0;
        end if; 
    end process;


    fifo_B_PE_7_4_x0135_blk_n_assign_proc : process(fifo_B_PE_7_4_x0135_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln890_reg_1577)
    begin
        if (((icmp_ln890_reg_1577 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fifo_B_PE_7_4_x0135_blk_n <= fifo_B_PE_7_4_x0135_full_n;
        else 
            fifo_B_PE_7_4_x0135_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    fifo_B_PE_7_4_x0135_din <= fifo_B_PE_6_4_x0134_dout;

    fifo_B_PE_7_4_x0135_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln890_reg_1577, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln890_reg_1577 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fifo_B_PE_7_4_x0135_write <= ap_const_logic_1;
        else 
            fifo_B_PE_7_4_x0135_write <= ap_const_logic_0;
        end if; 
    end process;


    fifo_C_drain_PE_6_4_x0202_blk_n_assign_proc : process(fifo_C_drain_PE_6_4_x0202_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter8, select_ln10436_2_reg_2053_pp0_iter7_reg)
    begin
        if (((select_ln10436_2_reg_2053_pp0_iter7_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            fifo_C_drain_PE_6_4_x0202_blk_n <= fifo_C_drain_PE_6_4_x0202_full_n;
        else 
            fifo_C_drain_PE_6_4_x0202_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    fifo_C_drain_PE_6_4_x0202_din <= add_ln10477_31_fu_1361_p2;

    fifo_C_drain_PE_6_4_x0202_write_assign_proc : process(ap_enable_reg_pp0_iter8, select_ln10436_2_reg_2053_pp0_iter7_reg, ap_block_pp0_stage0_11001)
    begin
        if (((select_ln10436_2_reg_2053_pp0_iter7_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            fifo_C_drain_PE_6_4_x0202_write <= ap_const_logic_1;
        else 
            fifo_C_drain_PE_6_4_x0202_write <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1368_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1368_ce <= ap_const_logic_1;
        else 
            grp_fu_1368_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1368_p0 <= fifo_B_PE_6_4_x0134_dout(47 downto 32);
    grp_fu_1368_p1 <= fifo_A_PE_6_4_x078_dout(47 downto 32);

    grp_fu_1374_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1374_ce <= ap_const_logic_1;
        else 
            grp_fu_1374_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1374_p0 <= fifo_B_PE_6_4_x0134_dout(79 downto 64);
    grp_fu_1374_p1 <= fifo_A_PE_6_4_x078_dout(79 downto 64);

    grp_fu_1380_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1380_ce <= ap_const_logic_1;
        else 
            grp_fu_1380_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1380_p0 <= fifo_B_PE_6_4_x0134_dout(111 downto 96);
    grp_fu_1380_p1 <= fifo_A_PE_6_4_x078_dout(111 downto 96);

    grp_fu_1386_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1386_ce <= ap_const_logic_1;
        else 
            grp_fu_1386_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1386_p0 <= fifo_B_PE_6_4_x0134_dout(143 downto 128);
    grp_fu_1386_p1 <= fifo_A_PE_6_4_x078_dout(143 downto 128);

    grp_fu_1392_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1392_ce <= ap_const_logic_1;
        else 
            grp_fu_1392_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1392_p0 <= fifo_B_PE_6_4_x0134_dout(175 downto 160);
    grp_fu_1392_p1 <= fifo_A_PE_6_4_x078_dout(175 downto 160);

    grp_fu_1398_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1398_ce <= ap_const_logic_1;
        else 
            grp_fu_1398_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1398_p0 <= fifo_B_PE_6_4_x0134_dout(207 downto 192);
    grp_fu_1398_p1 <= fifo_A_PE_6_4_x078_dout(207 downto 192);

    grp_fu_1404_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1404_ce <= ap_const_logic_1;
        else 
            grp_fu_1404_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1404_p0 <= fifo_B_PE_6_4_x0134_dout(223 downto 208);
    grp_fu_1404_p1 <= fifo_A_PE_6_4_x078_dout(223 downto 208);

    grp_fu_1410_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1410_ce <= ap_const_logic_1;
        else 
            grp_fu_1410_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1410_p0 <= fifo_B_PE_6_4_x0134_dout(271 downto 256);
    grp_fu_1410_p1 <= fifo_A_PE_6_4_x078_dout(271 downto 256);

    grp_fu_1416_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1416_ce <= ap_const_logic_1;
        else 
            grp_fu_1416_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1416_p0 <= fifo_B_PE_6_4_x0134_dout(303 downto 288);
    grp_fu_1416_p1 <= fifo_A_PE_6_4_x078_dout(303 downto 288);

    grp_fu_1422_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1422_ce <= ap_const_logic_1;
        else 
            grp_fu_1422_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1422_p0 <= fifo_B_PE_6_4_x0134_dout(335 downto 320);
    grp_fu_1422_p1 <= fifo_A_PE_6_4_x078_dout(335 downto 320);

    grp_fu_1428_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1428_ce <= ap_const_logic_1;
        else 
            grp_fu_1428_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1428_p0 <= fifo_B_PE_6_4_x0134_dout(367 downto 352);
    grp_fu_1428_p1 <= fifo_A_PE_6_4_x078_dout(367 downto 352);

    grp_fu_1434_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1434_ce <= ap_const_logic_1;
        else 
            grp_fu_1434_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1434_p0 <= fifo_B_PE_6_4_x0134_dout(399 downto 384);
    grp_fu_1434_p1 <= fifo_A_PE_6_4_x078_dout(399 downto 384);

    grp_fu_1440_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1440_ce <= ap_const_logic_1;
        else 
            grp_fu_1440_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1440_p0 <= fifo_B_PE_6_4_x0134_dout(431 downto 416);
    grp_fu_1440_p1 <= fifo_A_PE_6_4_x078_dout(431 downto 416);

    grp_fu_1446_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1446_ce <= ap_const_logic_1;
        else 
            grp_fu_1446_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1446_p0 <= fifo_B_PE_6_4_x0134_dout(463 downto 448);
    grp_fu_1446_p1 <= fifo_A_PE_6_4_x078_dout(463 downto 448);

    grp_fu_1452_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1452_ce <= ap_const_logic_1;
        else 
            grp_fu_1452_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1452_p0 <= fifo_B_PE_6_4_x0134_dout(479 downto 464);
    grp_fu_1452_p1 <= fifo_A_PE_6_4_x078_dout(479 downto 464);

    grp_fu_1458_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1458_ce <= ap_const_logic_1;
        else 
            grp_fu_1458_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1464_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1464_ce <= ap_const_logic_1;
        else 
            grp_fu_1464_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1471_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1471_ce <= ap_const_logic_1;
        else 
            grp_fu_1471_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1478_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1478_ce <= ap_const_logic_1;
        else 
            grp_fu_1478_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1484_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1484_ce <= ap_const_logic_1;
        else 
            grp_fu_1484_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1490_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1490_ce <= ap_const_logic_1;
        else 
            grp_fu_1490_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1496_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1496_ce <= ap_const_logic_1;
        else 
            grp_fu_1496_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1503_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1503_ce <= ap_const_logic_1;
        else 
            grp_fu_1503_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1510_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1510_ce <= ap_const_logic_1;
        else 
            grp_fu_1510_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1517_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1517_ce <= ap_const_logic_1;
        else 
            grp_fu_1517_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1524_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1524_ce <= ap_const_logic_1;
        else 
            grp_fu_1524_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1531_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1531_ce <= ap_const_logic_1;
        else 
            grp_fu_1531_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1538_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1538_ce <= ap_const_logic_1;
        else 
            grp_fu_1538_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1545_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1545_ce <= ap_const_logic_1;
        else 
            grp_fu_1545_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1552_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1552_ce <= ap_const_logic_1;
        else 
            grp_fu_1552_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1558_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1558_ce <= ap_const_logic_1;
        else 
            grp_fu_1558_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1565_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1565_ce <= ap_const_logic_1;
        else 
            grp_fu_1565_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1565_p2 <= 
        ap_const_lv16_0 when (select_ln10436_1_fu_1315_p3(0) = '1') else 
        local_C_q0;
    icmp_ln890101_fu_1025_p2 <= "1" when (c7_V_reg_338 = ap_const_lv4_8) else "0";
    icmp_ln890_34_fu_1000_p2 <= "1" when (indvar_flatten39_reg_294 = ap_const_lv17_8000) else "0";
    icmp_ln890_35_fu_1037_p2 <= "1" when (indvar_flatten_reg_316 = ap_const_lv8_40) else "0";
    icmp_ln890_36_fu_1049_p2 <= "1" when (indvar_flatten13_reg_305 = ap_const_lv13_800) else "0";
    icmp_ln890_fu_366_p2 <= "1" when (indvar_flatten73_reg_283 = ap_const_lv20_80000) else "0";
    local_C_address0 <= p_cast_fu_1269_p1(6 - 1 downto 0);

    local_C_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            local_C_ce0 <= ap_const_logic_1;
        else 
            local_C_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    local_C_ce1_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            local_C_ce1 <= ap_const_logic_1;
        else 
            local_C_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    local_C_we1_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001, icmp_ln890_reg_1577_pp0_iter7_reg)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln890_reg_1577_pp0_iter7_reg = ap_const_lv1_0))) then 
            local_C_we1 <= ap_const_logic_1;
        else 
            local_C_we1 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln10434_fu_1306_p2 <= (icmp_ln890_34_reg_1901_pp0_iter5_reg or cmp_i_i135998_reg_2043);
    or_ln10435_1_fu_1310_p2 <= (or_ln10434_fu_1306_p2 or and_ln10434_3_reg_1920_pp0_iter5_reg);
    or_ln10435_2_fu_1072_p2 <= (xor_ln10435_fu_1066_p2 or icmp_ln890_34_reg_1901);
    or_ln10435_fu_1061_p2 <= (icmp_ln890_34_reg_1901 or and_ln10434_3_fu_1055_p2);
    or_ln10436_1_fu_1095_p2 <= (or_ln10436_fu_1089_p2 or icmp_ln890_34_reg_1901);
    or_ln10436_fu_1089_p2 <= (and_ln10435_2_fu_1083_p2 or and_ln10434_3_fu_1055_p2);
    or_ln890_12_fu_1132_p2 <= (or_ln890_fu_1126_p2 or or_ln10435_fu_1061_p2);
    or_ln890_fu_1126_p2 <= (and_ln10436_fu_1114_p2 or and_ln10435_2_fu_1083_p2);
    p_cast_fu_1269_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_1285_fu_1263_p2),64));
    select_ln10435_fu_1209_p3 <= 
        ap_const_lv6_0 when (or_ln10435_reg_1925(0) = '1') else 
        c2_V_reg_349;
    select_ln10436_1_fu_1315_p3 <= 
        cmp_i_i1359_mid1_reg_2048 when (and_ln10435_2_reg_1935_pp0_iter5_reg(0) = '1') else 
        or_ln10435_1_fu_1310_p2;
    select_ln10436_2_fu_1239_p3 <= 
        cmp_i_i_mid1_fu_1233_p2 when (and_ln10435_2_reg_1935(0) = '1') else 
        and_ln10435_fu_1216_p2;
    select_ln10436_fu_1100_p3 <= 
        ap_const_lv4_0 when (or_ln10436_1_fu_1095_p2(0) = '1') else 
        ap_phi_mux_c6_V_phi_fu_331_p4;
    select_ln890_56_fu_1138_p3 <= 
        ap_const_lv4_0 when (or_ln890_12_fu_1132_p2(0) = '1') else 
        c7_V_reg_338;
    select_ln890_57_fu_1146_p3 <= 
        add_ln691_26_fu_1120_p2 when (and_ln10436_fu_1114_p2(0) = '1') else 
        select_ln10436_fu_1100_p3;
    select_ln890_58_fu_1170_p3 <= 
        ap_const_lv8_1 when (or_ln10436_1_fu_1095_p2(0) = '1') else 
        add_ln890_fu_1164_p2;
    select_ln890_59_fu_1184_p3 <= 
        ap_const_lv13_1 when (or_ln10435_fu_1061_p2(0) = '1') else 
        add_ln890_34_fu_1178_p2;
    select_ln890_60_fu_1012_p3 <= 
        ap_const_lv17_1 when (icmp_ln890_34_fu_1000_p2(0) = '1') else 
        add_ln890_35_fu_1006_p2;
    select_ln890_fu_1246_p3 <= 
        add_ln691_fu_1221_p2 when (and_ln10435_2_reg_1935(0) = '1') else 
        select_ln10435_fu_1209_p3;
    tmp_30_cast_fu_1256_p3 <= (empty_reg_1948 & ap_const_lv3_0);
    v2_V_1422_fu_372_p1 <= fifo_A_PE_6_4_x078_dout(16 - 1 downto 0);
    v2_V_fu_686_p1 <= fifo_B_PE_6_4_x0134_dout(16 - 1 downto 0);
    xor_ln10434_fu_1020_p2 <= (icmp_ln890_34_reg_1901 xor ap_const_lv1_1);
    xor_ln10435_fu_1066_p2 <= (icmp_ln890_36_fu_1049_p2 xor ap_const_lv1_1);
    xor_ln10436_fu_1108_p2 <= (ap_const_lv1_1 xor and_ln10435_2_fu_1083_p2);
    zext_ln890_fu_1253_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln890_57_reg_1942),6));
end behav;
