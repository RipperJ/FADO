// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module top_nondf_kernel_cov_x1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_B_AWVALID,
        m_axi_gmem_B_AWREADY,
        m_axi_gmem_B_AWADDR,
        m_axi_gmem_B_AWID,
        m_axi_gmem_B_AWLEN,
        m_axi_gmem_B_AWSIZE,
        m_axi_gmem_B_AWBURST,
        m_axi_gmem_B_AWLOCK,
        m_axi_gmem_B_AWCACHE,
        m_axi_gmem_B_AWPROT,
        m_axi_gmem_B_AWQOS,
        m_axi_gmem_B_AWREGION,
        m_axi_gmem_B_AWUSER,
        m_axi_gmem_B_WVALID,
        m_axi_gmem_B_WREADY,
        m_axi_gmem_B_WDATA,
        m_axi_gmem_B_WSTRB,
        m_axi_gmem_B_WLAST,
        m_axi_gmem_B_WID,
        m_axi_gmem_B_WUSER,
        m_axi_gmem_B_ARVALID,
        m_axi_gmem_B_ARREADY,
        m_axi_gmem_B_ARADDR,
        m_axi_gmem_B_ARID,
        m_axi_gmem_B_ARLEN,
        m_axi_gmem_B_ARSIZE,
        m_axi_gmem_B_ARBURST,
        m_axi_gmem_B_ARLOCK,
        m_axi_gmem_B_ARCACHE,
        m_axi_gmem_B_ARPROT,
        m_axi_gmem_B_ARQOS,
        m_axi_gmem_B_ARREGION,
        m_axi_gmem_B_ARUSER,
        m_axi_gmem_B_RVALID,
        m_axi_gmem_B_RREADY,
        m_axi_gmem_B_RDATA,
        m_axi_gmem_B_RLAST,
        m_axi_gmem_B_RID,
        m_axi_gmem_B_RUSER,
        m_axi_gmem_B_RRESP,
        m_axi_gmem_B_BVALID,
        m_axi_gmem_B_BREADY,
        m_axi_gmem_B_BRESP,
        m_axi_gmem_B_BID,
        m_axi_gmem_B_BUSER,
        xout,
        xin_address0,
        xin_ce0,
        xin_we0,
        xin_d0
);

parameter    ap_ST_fsm_state1 = 85'd1;
parameter    ap_ST_fsm_state2 = 85'd2;
parameter    ap_ST_fsm_state3 = 85'd4;
parameter    ap_ST_fsm_state4 = 85'd8;
parameter    ap_ST_fsm_state5 = 85'd16;
parameter    ap_ST_fsm_state6 = 85'd32;
parameter    ap_ST_fsm_state7 = 85'd64;
parameter    ap_ST_fsm_state8 = 85'd128;
parameter    ap_ST_fsm_state9 = 85'd256;
parameter    ap_ST_fsm_state10 = 85'd512;
parameter    ap_ST_fsm_state11 = 85'd1024;
parameter    ap_ST_fsm_state12 = 85'd2048;
parameter    ap_ST_fsm_state13 = 85'd4096;
parameter    ap_ST_fsm_state14 = 85'd8192;
parameter    ap_ST_fsm_state15 = 85'd16384;
parameter    ap_ST_fsm_state16 = 85'd32768;
parameter    ap_ST_fsm_state17 = 85'd65536;
parameter    ap_ST_fsm_state18 = 85'd131072;
parameter    ap_ST_fsm_state19 = 85'd262144;
parameter    ap_ST_fsm_state20 = 85'd524288;
parameter    ap_ST_fsm_state21 = 85'd1048576;
parameter    ap_ST_fsm_state22 = 85'd2097152;
parameter    ap_ST_fsm_state23 = 85'd4194304;
parameter    ap_ST_fsm_state24 = 85'd8388608;
parameter    ap_ST_fsm_state25 = 85'd16777216;
parameter    ap_ST_fsm_state26 = 85'd33554432;
parameter    ap_ST_fsm_state27 = 85'd67108864;
parameter    ap_ST_fsm_state28 = 85'd134217728;
parameter    ap_ST_fsm_state29 = 85'd268435456;
parameter    ap_ST_fsm_state30 = 85'd536870912;
parameter    ap_ST_fsm_state31 = 85'd1073741824;
parameter    ap_ST_fsm_state32 = 85'd2147483648;
parameter    ap_ST_fsm_state33 = 85'd4294967296;
parameter    ap_ST_fsm_state34 = 85'd8589934592;
parameter    ap_ST_fsm_state35 = 85'd17179869184;
parameter    ap_ST_fsm_state36 = 85'd34359738368;
parameter    ap_ST_fsm_state37 = 85'd68719476736;
parameter    ap_ST_fsm_state38 = 85'd137438953472;
parameter    ap_ST_fsm_state39 = 85'd274877906944;
parameter    ap_ST_fsm_state40 = 85'd549755813888;
parameter    ap_ST_fsm_state41 = 85'd1099511627776;
parameter    ap_ST_fsm_state42 = 85'd2199023255552;
parameter    ap_ST_fsm_state43 = 85'd4398046511104;
parameter    ap_ST_fsm_state44 = 85'd8796093022208;
parameter    ap_ST_fsm_state45 = 85'd17592186044416;
parameter    ap_ST_fsm_state46 = 85'd35184372088832;
parameter    ap_ST_fsm_state47 = 85'd70368744177664;
parameter    ap_ST_fsm_state48 = 85'd140737488355328;
parameter    ap_ST_fsm_state49 = 85'd281474976710656;
parameter    ap_ST_fsm_state50 = 85'd562949953421312;
parameter    ap_ST_fsm_state51 = 85'd1125899906842624;
parameter    ap_ST_fsm_state52 = 85'd2251799813685248;
parameter    ap_ST_fsm_state53 = 85'd4503599627370496;
parameter    ap_ST_fsm_state54 = 85'd9007199254740992;
parameter    ap_ST_fsm_state55 = 85'd18014398509481984;
parameter    ap_ST_fsm_state56 = 85'd36028797018963968;
parameter    ap_ST_fsm_state57 = 85'd72057594037927936;
parameter    ap_ST_fsm_state58 = 85'd144115188075855872;
parameter    ap_ST_fsm_state59 = 85'd288230376151711744;
parameter    ap_ST_fsm_state60 = 85'd576460752303423488;
parameter    ap_ST_fsm_state61 = 85'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 85'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 85'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 85'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 85'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 85'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 85'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 85'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 85'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 85'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 85'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 85'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 85'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 85'd9444732965739290427392;
parameter    ap_ST_fsm_pp0_stage0 = 85'd18889465931478580854784;
parameter    ap_ST_fsm_state79 = 85'd37778931862957161709568;
parameter    ap_ST_fsm_pp1_stage0 = 85'd75557863725914323419136;
parameter    ap_ST_fsm_state85 = 85'd151115727451828646838272;
parameter    ap_ST_fsm_pp2_stage0 = 85'd302231454903657293676544;
parameter    ap_ST_fsm_pp2_stage1 = 85'd604462909807314587353088;
parameter    ap_ST_fsm_state103 = 85'd1208925819614629174706176;
parameter    ap_ST_fsm_state104 = 85'd2417851639229258349412352;
parameter    ap_ST_fsm_state105 = 85'd4835703278458516698824704;
parameter    ap_ST_fsm_state106 = 85'd9671406556917033397649408;
parameter    ap_ST_fsm_state107 = 85'd19342813113834066795298816;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_B_AWVALID;
input   m_axi_gmem_B_AWREADY;
output  [63:0] m_axi_gmem_B_AWADDR;
output  [0:0] m_axi_gmem_B_AWID;
output  [31:0] m_axi_gmem_B_AWLEN;
output  [2:0] m_axi_gmem_B_AWSIZE;
output  [1:0] m_axi_gmem_B_AWBURST;
output  [1:0] m_axi_gmem_B_AWLOCK;
output  [3:0] m_axi_gmem_B_AWCACHE;
output  [2:0] m_axi_gmem_B_AWPROT;
output  [3:0] m_axi_gmem_B_AWQOS;
output  [3:0] m_axi_gmem_B_AWREGION;
output  [0:0] m_axi_gmem_B_AWUSER;
output   m_axi_gmem_B_WVALID;
input   m_axi_gmem_B_WREADY;
output  [511:0] m_axi_gmem_B_WDATA;
output  [63:0] m_axi_gmem_B_WSTRB;
output   m_axi_gmem_B_WLAST;
output  [0:0] m_axi_gmem_B_WID;
output  [0:0] m_axi_gmem_B_WUSER;
output   m_axi_gmem_B_ARVALID;
input   m_axi_gmem_B_ARREADY;
output  [63:0] m_axi_gmem_B_ARADDR;
output  [0:0] m_axi_gmem_B_ARID;
output  [31:0] m_axi_gmem_B_ARLEN;
output  [2:0] m_axi_gmem_B_ARSIZE;
output  [1:0] m_axi_gmem_B_ARBURST;
output  [1:0] m_axi_gmem_B_ARLOCK;
output  [3:0] m_axi_gmem_B_ARCACHE;
output  [2:0] m_axi_gmem_B_ARPROT;
output  [3:0] m_axi_gmem_B_ARQOS;
output  [3:0] m_axi_gmem_B_ARREGION;
output  [0:0] m_axi_gmem_B_ARUSER;
input   m_axi_gmem_B_RVALID;
output   m_axi_gmem_B_RREADY;
input  [511:0] m_axi_gmem_B_RDATA;
input   m_axi_gmem_B_RLAST;
input  [0:0] m_axi_gmem_B_RID;
input  [0:0] m_axi_gmem_B_RUSER;
input  [1:0] m_axi_gmem_B_RRESP;
input   m_axi_gmem_B_BVALID;
output   m_axi_gmem_B_BREADY;
input  [1:0] m_axi_gmem_B_BRESP;
input  [0:0] m_axi_gmem_B_BID;
input  [0:0] m_axi_gmem_B_BUSER;
input  [63:0] xout;
output  [11:0] xin_address0;
output   xin_ce0;
output   xin_we0;
output  [118:0] xin_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_gmem_B_ARVALID;
reg m_axi_gmem_B_RREADY;
reg xin_ce0;
reg xin_we0;

(* fsm_encoding = "none" *) reg   [84:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    gmem_B_blk_n_AR;
reg    gmem_B_blk_n_R;
wire    ap_CS_fsm_state73;
reg   [12:0] indvar_flatten_reg_275;
reg   [6:0] j_reg_286;
reg   [6:0] i_2_reg_297;
reg   [127:0] add_i3114_reg_308;
reg   [12:0] indvar_flatten8_reg_320;
reg   [6:0] i_1_reg_331;
reg   [6:0] j_2_reg_342;
reg   [18:0] indvar_flatten36_reg_353;
reg   [6:0] i_3_reg_365;
reg   [13:0] indvar_flatten21_reg_376;
reg   [6:0] j_3_reg_387;
reg   [6:0] k_reg_398;
reg   [127:0] conv3_i2113_reg_409;
wire   [127:0] data_V_q0;
reg  signed [127:0] reg_442;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_state75_pp0_stage0_iter0;
wire    ap_block_state76_pp0_stage0_iter1;
wire    ap_block_state77_pp0_stage0_iter2;
wire    ap_block_state78_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln74_reg_1030;
reg   [0:0] icmp_ln74_reg_1030_pp0_iter1_reg;
wire    ap_CS_fsm_pp2_stage0;
wire    ap_block_state86_pp2_stage0_iter0;
wire    ap_block_state88_pp2_stage0_iter1;
wire    ap_block_state90_pp2_stage0_iter2;
wire    ap_block_state92_pp2_stage0_iter3;
wire    ap_block_state94_pp2_stage0_iter4;
wire    ap_block_state108_pp2_stage0_iter5;
wire    ap_block_state97_pp2_stage0_iter6;
wire    ap_block_state99_pp2_stage0_iter7;
wire    ap_block_state101_pp2_stage0_iter8;
wire    ap_block_pp2_stage0_11001;
wire   [127:0] data_V_q1;
reg    ap_enable_reg_pp1_iter2;
wire    ap_block_state80_pp1_stage0_iter0;
wire    ap_block_state81_pp1_stage0_iter1;
wire    ap_block_state82_pp1_stage0_iter2;
wire    ap_block_state83_pp1_stage0_iter3;
wire    ap_block_state84_pp1_stage0_iter4;
wire    ap_block_pp1_stage0_11001;
reg   [0:0] icmp_ln82_reg_1075;
reg   [0:0] icmp_ln82_reg_1075_pp1_iter1_reg;
reg    ap_enable_reg_pp2_iter1;
reg   [0:0] icmp_ln86_reg_1116;
wire   [6:0] add_ln68_fu_468_p2;
reg   [6:0] add_ln68_reg_993;
wire    ap_CS_fsm_state71;
wire   [11:0] tmp_cast_fu_478_p3;
reg   [11:0] tmp_cast_reg_998;
wire   [0:0] icmp_ln68_fu_486_p2;
wire   [6:0] add_ln69_fu_492_p2;
reg   [6:0] add_ln69_reg_1007;
wire    ap_CS_fsm_state72;
reg   [11:0] data_V_addr_reg_1012;
wire   [127:0] trunc_ln208_fu_518_p1;
reg   [127:0] trunc_ln208_reg_1020;
wire   [12:0] add_ln74_1_fu_522_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln74_fu_528_p2;
reg   [0:0] icmp_ln74_reg_1030_pp0_iter2_reg;
wire   [0:0] icmp_ln77_fu_540_p2;
reg   [0:0] icmp_ln77_reg_1034;
reg   [0:0] icmp_ln77_reg_1034_pp0_iter1_reg;
reg   [0:0] icmp_ln77_reg_1034_pp0_iter2_reg;
wire   [6:0] select_ln74_2_fu_554_p3;
reg   [6:0] select_ln74_2_reg_1039;
reg   [6:0] select_ln74_2_reg_1039_pp0_iter1_reg;
reg   [6:0] select_ln74_2_reg_1039_pp0_iter2_reg;
wire   [5:0] trunc_ln691_fu_562_p1;
reg   [5:0] trunc_ln691_reg_1046;
wire   [6:0] add_ln77_fu_566_p2;
reg   [6:0] add_ln77_reg_1051;
wire   [0:0] icmp_ln77_1_fu_572_p2;
reg   [0:0] icmp_ln77_1_reg_1056;
reg   [0:0] icmp_ln77_1_reg_1056_pp0_iter1_reg;
reg   [0:0] icmp_ln77_1_reg_1056_pp0_iter2_reg;
wire   [127:0] add_ln691_fu_610_p2;
reg    ap_enable_reg_pp0_iter3;
wire   [12:0] add_ln82_1_fu_627_p2;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire   [0:0] icmp_ln82_fu_633_p2;
reg   [0:0] icmp_ln82_reg_1075_pp1_iter2_reg;
reg   [0:0] icmp_ln82_reg_1075_pp1_iter3_reg;
wire   [6:0] select_ln82_fu_651_p3;
reg   [6:0] select_ln82_reg_1079;
reg   [6:0] select_ln82_reg_1079_pp1_iter1_reg;
wire   [6:0] select_ln82_1_fu_659_p3;
reg   [6:0] select_ln82_1_reg_1085;
wire   [5:0] trunc_ln692_fu_667_p1;
reg   [5:0] trunc_ln692_reg_1090;
wire   [6:0] add_ln83_fu_671_p2;
reg   [11:0] data_V_addr_2_reg_1100;
reg   [11:0] data_V_addr_2_reg_1100_pp1_iter2_reg;
reg   [11:0] data_V_addr_2_reg_1100_pp1_iter3_reg;
wire   [127:0] sub_ln692_fu_706_p2;
reg   [127:0] sub_ln692_reg_1111;
wire   [0:0] icmp_ln86_fu_712_p2;
reg   [0:0] icmp_ln86_reg_1116_pp2_iter1_reg;
reg   [0:0] icmp_ln86_reg_1116_pp2_iter2_reg;
reg   [0:0] icmp_ln86_reg_1116_pp2_iter3_reg;
reg   [0:0] icmp_ln86_reg_1116_pp2_iter4_reg;
reg   [0:0] icmp_ln86_reg_1116_pp2_iter5_reg;
wire   [6:0] select_ln86_fu_730_p3;
reg   [6:0] select_ln86_reg_1120;
wire   [6:0] select_ln86_1_fu_738_p3;
reg   [6:0] select_ln86_1_reg_1126;
reg    ap_enable_reg_pp2_iter0;
wire   [5:0] trunc_ln89_fu_746_p1;
reg   [5:0] trunc_ln89_reg_1132;
wire   [0:0] and_ln86_fu_762_p2;
reg   [0:0] and_ln86_reg_1137;
wire   [0:0] or_ln87_fu_768_p2;
reg   [0:0] or_ln87_reg_1142;
reg   [0:0] or_ln87_reg_1142_pp2_iter1_reg;
reg   [0:0] or_ln87_reg_1142_pp2_iter2_reg;
reg   [0:0] or_ln87_reg_1142_pp2_iter3_reg;
reg   [0:0] or_ln87_reg_1142_pp2_iter4_reg;
wire   [6:0] select_ln87_fu_774_p3;
reg   [6:0] select_ln87_reg_1147;
wire   [5:0] trunc_ln215_fu_782_p1;
reg   [5:0] trunc_ln215_reg_1152;
wire   [13:0] select_ln87_3_fu_792_p3;
reg   [13:0] select_ln87_3_reg_1157;
wire   [18:0] add_ln86_1_fu_800_p2;
reg   [18:0] add_ln86_1_reg_1162;
wire    ap_CS_fsm_pp2_stage1;
wire    ap_block_state87_pp2_stage1_iter0;
wire    ap_block_state89_pp2_stage1_iter1;
wire    ap_block_state91_pp2_stage1_iter2;
wire    ap_block_state93_pp2_stage1_iter3;
wire    ap_block_state95_pp2_stage1_iter4;
wire    ap_block_state96_pp2_stage1_iter5;
wire    ap_block_state98_pp2_stage1_iter6;
wire    ap_block_state100_pp2_stage1_iter7;
wire    ap_block_state102_pp2_stage1_iter8;
wire    ap_block_pp2_stage1_11001;
wire   [6:0] select_ln87_2_fu_814_p3;
reg   [6:0] select_ln87_2_reg_1167;
wire   [11:0] add_ln93_fu_832_p2;
reg   [11:0] add_ln93_reg_1173;
reg   [11:0] add_ln93_reg_1173_pp2_iter1_reg;
reg   [11:0] add_ln93_reg_1173_pp2_iter2_reg;
reg   [11:0] add_ln93_reg_1173_pp2_iter3_reg;
wire   [11:0] tmp_6_cast_fu_838_p3;
reg   [11:0] tmp_6_cast_reg_1178;
wire   [6:0] add_ln90_fu_856_p2;
reg   [6:0] add_ln90_reg_1188;
wire   [0:0] icmp_ln90_1_fu_861_p2;
reg   [0:0] icmp_ln90_1_reg_1193;
reg   [0:0] icmp_ln90_1_reg_1193_pp2_iter1_reg;
reg   [0:0] icmp_ln90_1_reg_1193_pp2_iter2_reg;
reg   [0:0] icmp_ln90_1_reg_1193_pp2_iter3_reg;
reg   [0:0] icmp_ln90_1_reg_1193_pp2_iter4_reg;
reg   [0:0] icmp_ln90_1_reg_1193_pp2_iter5_reg;
reg   [0:0] icmp_ln90_1_reg_1193_pp2_iter6_reg;
reg   [0:0] icmp_ln90_1_reg_1193_pp2_iter7_reg;
wire   [11:0] add_ln89_fu_877_p2;
reg   [11:0] add_ln89_reg_1197;
reg   [11:0] add_ln89_reg_1197_pp2_iter2_reg;
reg   [11:0] add_ln89_reg_1197_pp2_iter3_reg;
reg   [11:0] add_ln89_reg_1197_pp2_iter4_reg;
reg  signed [127:0] data_V_load_3_reg_1207;
wire   [127:0] grp_fu_893_p2;
reg   [127:0] mul_ln691_reg_1212;
reg   [11:0] cov_V_addr_reg_1217;
reg   [11:0] cov_V_addr_reg_1217_pp2_iter5_reg;
reg   [11:0] cov_V_addr_reg_1217_pp2_iter6_reg;
reg   [11:0] cov_V_addr_reg_1217_pp2_iter7_reg;
reg   [11:0] cov_V_addr_2_reg_1222;
reg   [11:0] cov_V_addr_2_reg_1222_pp2_iter5_reg;
reg   [11:0] cov_V_addr_2_reg_1222_pp2_iter6_reg;
reg   [11:0] cov_V_addr_2_reg_1222_pp2_iter7_reg;
wire   [127:0] add_ln691_1_fu_913_p2;
reg   [127:0] add_ln691_1_reg_1227;
reg    ap_enable_reg_pp2_iter4;
reg   [118:0] trunc_ln693_1_reg_1238;
wire   [6:0] add_ln96_fu_937_p2;
reg   [6:0] add_ln96_reg_1243;
wire    ap_CS_fsm_state104;
wire   [11:0] tmp_7_cast_fu_947_p3;
reg   [11:0] tmp_7_cast_reg_1248;
wire   [6:0] add_ln97_fu_961_p2;
reg   [6:0] add_ln97_reg_1256;
wire    ap_CS_fsm_state105;
wire   [63:0] zext_ln208_1_fu_976_p1;
reg   [63:0] zext_ln208_1_reg_1261;
wire   [118:0] cov_V_q0;
reg   [118:0] cov_V_load_reg_1274;
wire    ap_CS_fsm_state106;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state75;
reg    ap_enable_reg_pp0_iter1;
wire    ap_CS_fsm_state79;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state80;
reg    ap_enable_reg_pp1_iter1;
reg    ap_enable_reg_pp1_iter3;
reg    ap_enable_reg_pp1_iter4;
wire    ap_CS_fsm_state85;
wire    ap_block_pp2_stage1_subdone;
reg    ap_condition_pp2_flush_enable;
reg    ap_enable_reg_pp2_iter2;
reg    ap_enable_reg_pp2_iter3;
reg    ap_enable_reg_pp2_iter5;
reg    ap_condition_pp2_exit_iter4_state95;
reg    ap_enable_reg_pp2_iter6;
reg    ap_enable_reg_pp2_iter7;
reg    ap_enable_reg_pp2_iter8;
reg   [5:0] mean_V_address0;
reg    mean_V_ce0;
reg    mean_V_we0;
wire   [117:0] mean_V_d0;
wire   [117:0] mean_V_q0;
reg   [11:0] data_V_address0;
reg    data_V_ce0;
reg    data_V_we0;
reg   [127:0] data_V_d0;
wire   [11:0] data_V_address1;
reg    data_V_ce1;
reg   [11:0] cov_V_address0;
reg    cov_V_ce0;
reg    cov_V_we0;
reg   [6:0] i_reg_253;
wire   [0:0] icmp_ln69_fu_512_p2;
wire    ap_CS_fsm_state70;
reg   [6:0] j_1_reg_264;
wire    ap_CS_fsm_state74;
reg   [6:0] ap_phi_mux_j_phi_fu_290_p4;
wire    ap_block_pp0_stage0;
reg   [6:0] ap_phi_mux_i_2_phi_fu_301_p4;
reg   [6:0] ap_phi_mux_i_1_phi_fu_335_p4;
wire    ap_block_pp1_stage0;
reg   [18:0] ap_phi_mux_indvar_flatten36_phi_fu_357_p4;
wire    ap_block_pp2_stage0;
reg   [6:0] ap_phi_mux_i_3_phi_fu_369_p4;
reg   [13:0] ap_phi_mux_indvar_flatten21_phi_fu_380_p4;
reg   [6:0] ap_phi_mux_j_3_phi_fu_391_p4;
reg   [6:0] ap_phi_mux_k_phi_fu_402_p4;
reg   [127:0] ap_phi_mux_conv3_i2113_phi_fu_413_p4;
wire    ap_block_pp2_stage1;
reg   [6:0] i_4_reg_420;
wire   [0:0] icmp_ln97_fu_981_p2;
wire    ap_CS_fsm_state103;
reg   [6:0] j_4_reg_431;
wire    ap_CS_fsm_state107;
wire   [0:0] icmp_ln96_fu_955_p2;
wire   [63:0] zext_ln70_1_fu_507_p1;
wire   [63:0] zext_ln691_1_fu_594_p1;
wire   [63:0] zext_ln74_fu_606_p1;
wire   [63:0] zext_ln692_1_fu_693_p1;
wire   [63:0] zext_ln83_fu_698_p1;
wire   [63:0] zext_ln215_fu_851_p1;
wire   [63:0] zext_ln215_1_fu_888_p1;
wire   [63:0] zext_ln93_1_fu_905_p1;
wire   [63:0] zext_ln89_1_fu_909_p1;
wire  signed [63:0] sext_ln68_fu_457_p1;
wire   [57:0] trunc_ln_fu_447_p4;
wire   [5:0] trunc_ln70_fu_474_p1;
wire   [11:0] zext_ln70_fu_498_p1;
wire   [11:0] add_ln70_fu_502_p2;
wire   [6:0] add_ln74_fu_534_p2;
wire   [6:0] select_ln74_fu_546_p3;
wire   [11:0] tmp_1_cast_fu_581_p3;
wire   [11:0] zext_ln691_fu_578_p1;
wire   [11:0] add_ln691_2_fu_588_p2;
wire   [127:0] select_ln74_1_fu_599_p3;
wire   [0:0] icmp_ln83_fu_645_p2;
wire   [6:0] add_ln82_fu_639_p2;
wire   [11:0] tmp_2_cast_fu_677_p3;
wire   [11:0] zext_ln692_fu_684_p1;
wire   [11:0] add_ln692_fu_687_p2;
wire   [127:0] mean_V_load_cast_fu_702_p1;
wire   [0:0] icmp_ln87_fu_724_p2;
wire   [6:0] add_ln86_fu_718_p2;
wire   [0:0] icmp_ln90_fu_756_p2;
wire   [0:0] xor_ln86_fu_750_p2;
wire   [13:0] add_ln87_1_fu_786_p2;
wire   [6:0] add_ln87_fu_809_p2;
wire   [5:0] trunc_ln93_fu_820_p1;
wire   [11:0] tmp_5_cast_fu_824_p3;
wire   [11:0] zext_ln89_fu_806_p1;
wire   [11:0] add_ln215_fu_845_p2;
wire   [11:0] tmp_3_cast_fu_867_p3;
wire   [11:0] zext_ln93_fu_874_p1;
wire   [11:0] add_ln215_1_fu_883_p2;
wire   [127:0] select_ln87_1_fu_898_p3;
wire   [127:0] grp_fu_921_p0;
wire   [129:0] grp_fu_921_p1;
wire   [256:0] grp_fu_921_p2;
wire   [5:0] trunc_ln208_1_fu_943_p1;
wire   [11:0] zext_ln208_fu_967_p1;
wire   [11:0] add_ln208_fu_971_p2;
reg   [84:0] ap_NS_fsm;
wire    ap_block_pp2_stage0_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
wire   [256:0] grp_fu_921_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 85'd1;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter3 = 1'b0;
#0 ap_enable_reg_pp2_iter5 = 1'b0;
#0 ap_enable_reg_pp2_iter6 = 1'b0;
#0 ap_enable_reg_pp2_iter7 = 1'b0;
#0 ap_enable_reg_pp2_iter8 = 1'b0;
end

top_nondf_kernel_cov_x0_mean_V #(
    .DataWidth( 118 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
mean_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mean_V_address0),
    .ce0(mean_V_ce0),
    .we0(mean_V_we0),
    .d0(mean_V_d0),
    .q0(mean_V_q0)
);

top_nondf_kernel_cov_x0_data_V #(
    .DataWidth( 128 ),
    .AddressRange( 4096 ),
    .AddressWidth( 12 ))
data_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(data_V_address0),
    .ce0(data_V_ce0),
    .we0(data_V_we0),
    .d0(data_V_d0),
    .q0(data_V_q0),
    .address1(data_V_address1),
    .ce1(data_V_ce1),
    .q1(data_V_q1)
);

top_nondf_kernel_cov_x0_cov_V #(
    .DataWidth( 119 ),
    .AddressRange( 4096 ),
    .AddressWidth( 12 ))
cov_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(cov_V_address0),
    .ce0(cov_V_ce0),
    .we0(cov_V_we0),
    .d0(trunc_ln693_1_reg_1238),
    .q0(cov_V_q0)
);

top_mul_128s_128s_128_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 128 ),
    .din1_WIDTH( 128 ),
    .dout_WIDTH( 128 ))
mul_128s_128s_128_5_1_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(data_V_load_3_reg_1207),
    .din1(reg_442),
    .ce(1'b1),
    .dout(grp_fu_893_p2)
);

top_mul_128ns_130ns_257_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 128 ),
    .din1_WIDTH( 130 ),
    .dout_WIDTH( 257 ))
mul_128ns_130ns_257_5_1_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_921_p0),
    .din1(grp_fu_921_p1),
    .ce(1'b1),
    .dout(grp_fu_921_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state75) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln68_fu_486_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state71))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state75)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state75);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((icmp_ln68_fu_486_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state71))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state80) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state79)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state80)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state80);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end else if ((1'b1 == ap_CS_fsm_state79)) begin
            ap_enable_reg_pp1_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp2_flush_enable)) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state85)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage1_subdone) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage1_subdone) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage1_subdone) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
            ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage1_subdone) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
            ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter5 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage1_subdone) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
            if ((1'b1 == ap_condition_pp2_exit_iter4_state95)) begin
                ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter3;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter6 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage1_subdone) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
            ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter7 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage1_subdone) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
            ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter8 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage1_subdone) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
            ap_enable_reg_pp2_iter8 <= ap_enable_reg_pp2_iter7;
        end else if ((1'b1 == ap_CS_fsm_state85)) begin
            ap_enable_reg_pp2_iter8 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln68_fu_486_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state71))) begin
        add_i3114_reg_308 <= 128'd0;
    end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln74_reg_1030_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_i3114_reg_308 <= add_ln691_fu_610_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state85)) begin
        conv3_i2113_reg_409 <= 128'd0;
    end else if (((ap_enable_reg_pp2_iter5 == 1'b1) & (icmp_ln86_reg_1116_pp2_iter5_reg == 1'd0) & (1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        conv3_i2113_reg_409 <= add_ln691_1_reg_1227;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        i_1_reg_331 <= 7'd0;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln82_reg_1075 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        i_1_reg_331 <= select_ln82_1_reg_1085;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln68_fu_486_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state71))) begin
        i_2_reg_297 <= 7'd0;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln74_reg_1030 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_2_reg_297 <= add_ln77_reg_1051;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state85)) begin
        i_3_reg_365 <= 7'd0;
    end else if (((icmp_ln86_reg_1116 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        i_3_reg_365 <= select_ln86_1_reg_1126;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state103)) begin
        i_4_reg_420 <= 7'd0;
    end else if (((icmp_ln97_fu_981_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state105))) begin
        i_4_reg_420 <= add_ln96_reg_1243;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        i_reg_253 <= 7'd0;
    end else if (((icmp_ln69_fu_512_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state72))) begin
        i_reg_253 <= add_ln68_reg_993;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state85)) begin
        indvar_flatten21_reg_376 <= 14'd0;
    end else if (((icmp_ln86_reg_1116 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        indvar_flatten21_reg_376 <= select_ln87_3_reg_1157;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state85)) begin
        indvar_flatten36_reg_353 <= 19'd0;
    end else if (((icmp_ln86_reg_1116 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        indvar_flatten36_reg_353 <= add_ln86_1_reg_1162;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        indvar_flatten8_reg_320 <= 13'd0;
    end else if (((icmp_ln82_fu_633_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        indvar_flatten8_reg_320 <= add_ln82_1_fu_627_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln68_fu_486_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state71))) begin
        indvar_flatten_reg_275 <= 13'd0;
    end else if (((icmp_ln74_fu_528_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_275 <= add_ln74_1_fu_522_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln68_fu_486_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state71))) begin
        j_1_reg_264 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        j_1_reg_264 <= add_ln69_reg_1007;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        j_2_reg_342 <= 7'd0;
    end else if (((icmp_ln82_fu_633_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        j_2_reg_342 <= add_ln83_fu_671_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state85)) begin
        j_3_reg_387 <= 7'd0;
    end else if (((icmp_ln86_reg_1116 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        j_3_reg_387 <= select_ln87_2_reg_1167;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln96_fu_955_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state104))) begin
        j_4_reg_431 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state107)) begin
        j_4_reg_431 <= add_ln97_reg_1256;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln68_fu_486_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state71))) begin
        j_reg_286 <= 7'd0;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln74_reg_1030 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_reg_286 <= select_ln74_2_reg_1039;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state85)) begin
        k_reg_398 <= 7'd0;
    end else if (((icmp_ln86_reg_1116 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        k_reg_398 <= add_ln90_reg_1188;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln82_reg_1075_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        reg_442 <= data_V_q1;
    end else if ((((icmp_ln86_reg_1116 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((icmp_ln74_reg_1030_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        reg_442 <= data_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        add_ln68_reg_993 <= add_ln68_fu_468_p2;
        tmp_cast_reg_998[11 : 6] <= tmp_cast_fu_478_p3[11 : 6];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter4 == 1'b1) & (icmp_ln86_reg_1116_pp2_iter4_reg == 1'd0) & (1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        add_ln691_1_reg_1227 <= add_ln691_1_fu_913_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        add_ln69_reg_1007 <= add_ln69_fu_492_p2;
        data_V_addr_reg_1012 <= zext_ln70_1_fu_507_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln74_fu_528_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln77_reg_1051 <= add_ln77_fu_566_p2;
        select_ln74_2_reg_1039 <= select_ln74_2_fu_554_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        add_ln86_1_reg_1162 <= add_ln86_1_fu_800_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_reg_1116 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        add_ln89_reg_1197 <= add_ln89_fu_877_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        add_ln89_reg_1197_pp2_iter2_reg <= add_ln89_reg_1197;
        add_ln89_reg_1197_pp2_iter3_reg <= add_ln89_reg_1197_pp2_iter2_reg;
        add_ln89_reg_1197_pp2_iter4_reg <= add_ln89_reg_1197_pp2_iter3_reg;
        icmp_ln86_reg_1116 <= icmp_ln86_fu_712_p2;
        icmp_ln86_reg_1116_pp2_iter1_reg <= icmp_ln86_reg_1116;
        icmp_ln86_reg_1116_pp2_iter2_reg <= icmp_ln86_reg_1116_pp2_iter1_reg;
        icmp_ln86_reg_1116_pp2_iter3_reg <= icmp_ln86_reg_1116_pp2_iter2_reg;
        icmp_ln86_reg_1116_pp2_iter4_reg <= icmp_ln86_reg_1116_pp2_iter3_reg;
        icmp_ln86_reg_1116_pp2_iter5_reg <= icmp_ln86_reg_1116_pp2_iter4_reg;
        or_ln87_reg_1142_pp2_iter1_reg <= or_ln87_reg_1142;
        or_ln87_reg_1142_pp2_iter2_reg <= or_ln87_reg_1142_pp2_iter1_reg;
        or_ln87_reg_1142_pp2_iter3_reg <= or_ln87_reg_1142_pp2_iter2_reg;
        or_ln87_reg_1142_pp2_iter4_reg <= or_ln87_reg_1142_pp2_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln86_reg_1116 == 1'd0) & (1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        add_ln90_reg_1188 <= add_ln90_fu_856_p2;
        select_ln87_2_reg_1167 <= select_ln87_2_fu_814_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_reg_1116 == 1'd0) & (1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        add_ln93_reg_1173 <= add_ln93_fu_832_p2;
        icmp_ln90_1_reg_1193 <= icmp_ln90_1_fu_861_p2;
        tmp_6_cast_reg_1178[11 : 6] <= tmp_6_cast_fu_838_p3[11 : 6];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        add_ln93_reg_1173_pp2_iter1_reg <= add_ln93_reg_1173;
        add_ln93_reg_1173_pp2_iter2_reg <= add_ln93_reg_1173_pp2_iter1_reg;
        add_ln93_reg_1173_pp2_iter3_reg <= add_ln93_reg_1173_pp2_iter2_reg;
        cov_V_addr_2_reg_1222_pp2_iter5_reg <= cov_V_addr_2_reg_1222;
        cov_V_addr_2_reg_1222_pp2_iter6_reg <= cov_V_addr_2_reg_1222_pp2_iter5_reg;
        cov_V_addr_2_reg_1222_pp2_iter7_reg <= cov_V_addr_2_reg_1222_pp2_iter6_reg;
        cov_V_addr_reg_1217_pp2_iter5_reg <= cov_V_addr_reg_1217;
        cov_V_addr_reg_1217_pp2_iter6_reg <= cov_V_addr_reg_1217_pp2_iter5_reg;
        cov_V_addr_reg_1217_pp2_iter7_reg <= cov_V_addr_reg_1217_pp2_iter6_reg;
        icmp_ln90_1_reg_1193_pp2_iter1_reg <= icmp_ln90_1_reg_1193;
        icmp_ln90_1_reg_1193_pp2_iter2_reg <= icmp_ln90_1_reg_1193_pp2_iter1_reg;
        icmp_ln90_1_reg_1193_pp2_iter3_reg <= icmp_ln90_1_reg_1193_pp2_iter2_reg;
        icmp_ln90_1_reg_1193_pp2_iter4_reg <= icmp_ln90_1_reg_1193_pp2_iter3_reg;
        icmp_ln90_1_reg_1193_pp2_iter5_reg <= icmp_ln90_1_reg_1193_pp2_iter4_reg;
        icmp_ln90_1_reg_1193_pp2_iter6_reg <= icmp_ln90_1_reg_1193_pp2_iter5_reg;
        icmp_ln90_1_reg_1193_pp2_iter7_reg <= icmp_ln90_1_reg_1193_pp2_iter6_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state104)) begin
        add_ln96_reg_1243 <= add_ln96_fu_937_p2;
        tmp_7_cast_reg_1248[11 : 6] <= tmp_7_cast_fu_947_p3[11 : 6];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state105)) begin
        add_ln97_reg_1256 <= add_ln97_fu_961_p2;
        zext_ln208_1_reg_1261[11 : 0] <= zext_ln208_1_fu_976_p1[11 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_fu_712_p2 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        and_ln86_reg_1137 <= and_ln86_fu_762_p2;
        or_ln87_reg_1142 <= or_ln87_fu_768_p2;
        select_ln86_reg_1120 <= select_ln86_fu_730_p3;
        select_ln87_reg_1147 <= select_ln87_fu_774_p3;
        trunc_ln215_reg_1152 <= trunc_ln215_fu_782_p1;
        trunc_ln89_reg_1132 <= trunc_ln89_fu_746_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_reg_1116_pp2_iter4_reg == 1'd0) & (1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        cov_V_addr_2_reg_1222 <= zext_ln89_1_fu_909_p1;
        cov_V_addr_reg_1217 <= zext_ln93_1_fu_905_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state106)) begin
        cov_V_load_reg_1274 <= cov_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln82_reg_1075 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        data_V_addr_2_reg_1100 <= zext_ln692_1_fu_693_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        data_V_addr_2_reg_1100_pp1_iter2_reg <= data_V_addr_2_reg_1100;
        data_V_addr_2_reg_1100_pp1_iter3_reg <= data_V_addr_2_reg_1100_pp1_iter2_reg;
        icmp_ln82_reg_1075_pp1_iter2_reg <= icmp_ln82_reg_1075_pp1_iter1_reg;
        icmp_ln82_reg_1075_pp1_iter3_reg <= icmp_ln82_reg_1075_pp1_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_reg_1116_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        data_V_load_3_reg_1207 <= data_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln74_reg_1030 <= icmp_ln74_fu_528_p2;
        icmp_ln74_reg_1030_pp0_iter1_reg <= icmp_ln74_reg_1030;
        icmp_ln77_1_reg_1056_pp0_iter1_reg <= icmp_ln77_1_reg_1056;
        icmp_ln77_reg_1034_pp0_iter1_reg <= icmp_ln77_reg_1034;
        select_ln74_2_reg_1039_pp0_iter1_reg <= select_ln74_2_reg_1039;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln74_reg_1030_pp0_iter2_reg <= icmp_ln74_reg_1030_pp0_iter1_reg;
        icmp_ln77_1_reg_1056_pp0_iter2_reg <= icmp_ln77_1_reg_1056_pp0_iter1_reg;
        icmp_ln77_reg_1034_pp0_iter2_reg <= icmp_ln77_reg_1034_pp0_iter1_reg;
        select_ln74_2_reg_1039_pp0_iter2_reg <= select_ln74_2_reg_1039_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln74_fu_528_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln77_1_reg_1056 <= icmp_ln77_1_fu_572_p2;
        icmp_ln77_reg_1034 <= icmp_ln77_fu_540_p2;
        trunc_ln691_reg_1046 <= trunc_ln691_fu_562_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln82_reg_1075 <= icmp_ln82_fu_633_p2;
        icmp_ln82_reg_1075_pp1_iter1_reg <= icmp_ln82_reg_1075;
        select_ln82_reg_1079_pp1_iter1_reg <= select_ln82_reg_1079;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_reg_1116_pp2_iter3_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        mul_ln691_reg_1212 <= grp_fu_893_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln82_fu_633_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        select_ln82_1_reg_1085 <= select_ln82_1_fu_659_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln82_fu_633_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        select_ln82_reg_1079 <= select_ln82_fu_651_p3;
        trunc_ln692_reg_1090 <= trunc_ln692_fu_667_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln86_fu_712_p2 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        select_ln86_1_reg_1126 <= select_ln86_1_fu_738_p3;
        select_ln87_3_reg_1157 <= select_ln87_3_fu_792_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln82_reg_1075_pp1_iter2_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        sub_ln692_reg_1111 <= sub_ln692_fu_706_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        trunc_ln208_reg_1020 <= trunc_ln208_fu_518_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln90_1_reg_1193_pp2_iter6_reg == 1'd1) & (1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        trunc_ln693_1_reg_1238 <= {{grp_fu_921_p2[256:138]}};
    end
end

always @ (*) begin
    if ((icmp_ln74_fu_528_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state75 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state75 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln82_fu_633_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state80 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state80 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        ap_condition_pp2_exit_iter4_state95 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter4_state95 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln86_reg_1116 == 1'd1) & (1'b0 == ap_block_pp2_stage1_subdone) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        ap_condition_pp2_flush_enable = 1'b1;
    end else begin
        ap_condition_pp2_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln96_fu_955_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state104)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter8 == 1'b0) & (ap_enable_reg_pp2_iter7 == 1'b0) & (ap_enable_reg_pp2_iter6 == 1'b0) & (ap_enable_reg_pp2_iter5 == 1'b0) & (ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter4 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter5 == 1'b1) & (icmp_ln86_reg_1116_pp2_iter5_reg == 1'd0) & (1'b0 == ap_block_pp2_stage1) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        ap_phi_mux_conv3_i2113_phi_fu_413_p4 = add_ln691_1_reg_1227;
    end else begin
        ap_phi_mux_conv3_i2113_phi_fu_413_p4 = conv3_i2113_reg_409;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln82_reg_1075 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_i_1_phi_fu_335_p4 = select_ln82_1_reg_1085;
    end else begin
        ap_phi_mux_i_1_phi_fu_335_p4 = i_1_reg_331;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln74_reg_1030 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_i_2_phi_fu_301_p4 = add_ln77_reg_1051;
    end else begin
        ap_phi_mux_i_2_phi_fu_301_p4 = i_2_reg_297;
    end
end

always @ (*) begin
    if (((icmp_ln86_reg_1116 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_phi_mux_i_3_phi_fu_369_p4 = select_ln86_1_reg_1126;
    end else begin
        ap_phi_mux_i_3_phi_fu_369_p4 = i_3_reg_365;
    end
end

always @ (*) begin
    if (((icmp_ln86_reg_1116 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_phi_mux_indvar_flatten21_phi_fu_380_p4 = select_ln87_3_reg_1157;
    end else begin
        ap_phi_mux_indvar_flatten21_phi_fu_380_p4 = indvar_flatten21_reg_376;
    end
end

always @ (*) begin
    if (((icmp_ln86_reg_1116 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_phi_mux_indvar_flatten36_phi_fu_357_p4 = add_ln86_1_reg_1162;
    end else begin
        ap_phi_mux_indvar_flatten36_phi_fu_357_p4 = indvar_flatten36_reg_353;
    end
end

always @ (*) begin
    if (((icmp_ln86_reg_1116 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_phi_mux_j_3_phi_fu_391_p4 = select_ln87_2_reg_1167;
    end else begin
        ap_phi_mux_j_3_phi_fu_391_p4 = j_3_reg_387;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln74_reg_1030 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_j_phi_fu_290_p4 = select_ln74_2_reg_1039;
    end else begin
        ap_phi_mux_j_phi_fu_290_p4 = j_reg_286;
    end
end

always @ (*) begin
    if (((icmp_ln86_reg_1116 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_phi_mux_k_phi_fu_402_p4 = add_ln90_reg_1188;
    end else begin
        ap_phi_mux_k_phi_fu_402_p4 = k_reg_398;
    end
end

always @ (*) begin
    if (((icmp_ln96_fu_955_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state104))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state105)) begin
        cov_V_address0 = zext_ln208_1_fu_976_p1;
    end else if (((ap_enable_reg_pp2_iter8 == 1'b1) & (1'b0 == ap_block_pp2_stage1) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        cov_V_address0 = cov_V_addr_reg_1217_pp2_iter7_reg;
    end else if (((ap_enable_reg_pp2_iter8 == 1'b1) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        cov_V_address0 = cov_V_addr_2_reg_1222_pp2_iter7_reg;
    end else begin
        cov_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state105) | ((ap_enable_reg_pp2_iter8 == 1'b1) & (1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1)) | ((ap_enable_reg_pp2_iter8 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
        cov_V_ce0 = 1'b1;
    end else begin
        cov_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp2_iter8 == 1'b1) & (icmp_ln90_1_reg_1193_pp2_iter7_reg == 1'd1) & (1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1)) | ((ap_enable_reg_pp2_iter8 == 1'b1) & (icmp_ln90_1_reg_1193_pp2_iter7_reg == 1'd1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
        cov_V_we0 = 1'b1;
    end else begin
        cov_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        data_V_address0 = zext_ln215_1_fu_888_p1;
    end else if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage1) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        data_V_address0 = zext_ln215_fu_851_p1;
    end else if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        data_V_address0 = data_V_addr_2_reg_1100_pp1_iter3_reg;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_address0 = zext_ln691_1_fu_594_p1;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        data_V_address0 = data_V_addr_reg_1012;
    end else begin
        data_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state74) | ((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
        data_V_ce0 = 1'b1;
    end else begin
        data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        data_V_ce1 = 1'b1;
    end else begin
        data_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        data_V_d0 = sub_ln692_reg_1111;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        data_V_d0 = trunc_ln208_reg_1020;
    end else begin
        data_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state74) | ((ap_enable_reg_pp1_iter4 == 1'b1) & (icmp_ln82_reg_1075_pp1_iter3_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        data_V_we0 = 1'b1;
    end else begin
        data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        gmem_B_blk_n_AR = m_axi_gmem_B_ARREADY;
    end else begin
        gmem_B_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        gmem_B_blk_n_R = m_axi_gmem_B_RVALID;
    end else begin
        gmem_B_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (m_axi_gmem_B_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        m_axi_gmem_B_ARVALID = 1'b1;
    end else begin
        m_axi_gmem_B_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state73) & (m_axi_gmem_B_RVALID == 1'b1))) begin
        m_axi_gmem_B_RREADY = 1'b1;
    end else begin
        m_axi_gmem_B_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        mean_V_address0 = zext_ln83_fu_698_p1;
    end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        mean_V_address0 = zext_ln74_fu_606_p1;
    end else begin
        mean_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        mean_V_ce0 = 1'b1;
    end else begin
        mean_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln77_1_reg_1056_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mean_V_we0 = 1'b1;
    end else begin
        mean_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state107)) begin
        xin_ce0 = 1'b1;
    end else begin
        xin_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state107)) begin
        xin_we0 = 1'b1;
    end else begin
        xin_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (m_axi_gmem_B_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            if (((icmp_ln68_fu_486_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state71))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end
        end
        ap_ST_fsm_state72 : begin
            if (((icmp_ln69_fu_512_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state72))) begin
                ap_NS_fsm = ap_ST_fsm_state71;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end
        end
        ap_ST_fsm_state73 : begin
            if (((1'b1 == ap_CS_fsm_state73) & (m_axi_gmem_B_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln74_fu_528_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln74_fu_528_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state79;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b0) & (icmp_ln82_fu_633_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)) & ~((ap_enable_reg_pp1_iter4 == 1'b1) & (ap_enable_reg_pp1_iter3 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter4 == 1'b1) & (ap_enable_reg_pp1_iter3 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) | ((ap_enable_reg_pp1_iter1 == 1'b0) & (icmp_ln82_fu_633_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state85;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_pp2_stage1 : begin
            if ((~((ap_enable_reg_pp2_iter5 == 1'b0) & (ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter4 == 1'b1) & (1'b0 == ap_block_pp2_stage1_subdone) & (1'b1 == ap_CS_fsm_pp2_stage1)) & ~((ap_enable_reg_pp2_iter8 == 1'b1) & (ap_enable_reg_pp2_iter7 == 1'b0) & (1'b0 == ap_block_pp2_stage1_subdone) & (1'b1 == ap_CS_fsm_pp2_stage1)) & (1'b0 == ap_block_pp2_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((ap_enable_reg_pp2_iter8 == 1'b1) & (ap_enable_reg_pp2_iter7 == 1'b0) & (1'b0 == ap_block_pp2_stage1_subdone) & (1'b1 == ap_CS_fsm_pp2_stage1)) | ((ap_enable_reg_pp2_iter5 == 1'b0) & (ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter4 == 1'b1) & (1'b0 == ap_block_pp2_stage1_subdone) & (1'b1 == ap_CS_fsm_pp2_stage1)))) begin
                ap_NS_fsm = ap_ST_fsm_state103;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            if (((icmp_ln96_fu_955_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state104))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state105;
            end
        end
        ap_ST_fsm_state105 : begin
            if (((icmp_ln97_fu_981_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state105))) begin
                ap_NS_fsm = ap_ST_fsm_state104;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state106;
            end
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln208_fu_971_p2 = (tmp_7_cast_reg_1248 + zext_ln208_fu_967_p1);

assign add_ln215_1_fu_883_p2 = (tmp_6_cast_reg_1178 + zext_ln93_fu_874_p1);

assign add_ln215_fu_845_p2 = (tmp_6_cast_fu_838_p3 + zext_ln89_fu_806_p1);

assign add_ln68_fu_468_p2 = (i_reg_253 + 7'd1);

assign add_ln691_1_fu_913_p2 = (mul_ln691_reg_1212 + select_ln87_1_fu_898_p3);

assign add_ln691_2_fu_588_p2 = (tmp_1_cast_fu_581_p3 + zext_ln691_fu_578_p1);

assign add_ln691_fu_610_p2 = ($signed(reg_442) + $signed(select_ln74_1_fu_599_p3));

assign add_ln692_fu_687_p2 = (tmp_2_cast_fu_677_p3 + zext_ln692_fu_684_p1);

assign add_ln69_fu_492_p2 = (j_1_reg_264 + 7'd1);

assign add_ln70_fu_502_p2 = (tmp_cast_reg_998 + zext_ln70_fu_498_p1);

assign add_ln74_1_fu_522_p2 = (indvar_flatten_reg_275 + 13'd1);

assign add_ln74_fu_534_p2 = (ap_phi_mux_j_phi_fu_290_p4 + 7'd1);

assign add_ln77_fu_566_p2 = (select_ln74_fu_546_p3 + 7'd1);

assign add_ln82_1_fu_627_p2 = (indvar_flatten8_reg_320 + 13'd1);

assign add_ln82_fu_639_p2 = (ap_phi_mux_i_1_phi_fu_335_p4 + 7'd1);

assign add_ln83_fu_671_p2 = (select_ln82_fu_651_p3 + 7'd1);

assign add_ln86_1_fu_800_p2 = (indvar_flatten36_reg_353 + 19'd1);

assign add_ln86_fu_718_p2 = (ap_phi_mux_i_3_phi_fu_369_p4 + 7'd1);

assign add_ln87_1_fu_786_p2 = (ap_phi_mux_indvar_flatten21_phi_fu_380_p4 + 14'd1);

assign add_ln87_fu_809_p2 = (select_ln86_reg_1120 + 7'd1);

assign add_ln89_fu_877_p2 = (tmp_3_cast_fu_867_p3 + zext_ln93_fu_874_p1);

assign add_ln90_fu_856_p2 = (select_ln87_reg_1147 + 7'd1);

assign add_ln93_fu_832_p2 = (tmp_5_cast_fu_824_p3 + zext_ln89_fu_806_p1);

assign add_ln96_fu_937_p2 = (i_4_reg_420 + 7'd1);

assign add_ln97_fu_961_p2 = (j_4_reg_431 + 7'd1);

assign and_ln86_fu_762_p2 = (xor_ln86_fu_750_p2 & icmp_ln90_fu_756_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_pp2_stage1 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state103 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state104 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state105 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_state106 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_state107 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd77];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state100_pp2_stage1_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state101_pp2_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state102_pp2_stage1_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state108_pp2_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state75_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state76_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state77_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state78_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state80_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state81_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state82_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state83_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state84_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state86_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state87_pp2_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state88_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state89_pp2_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state90_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state91_pp2_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state92_pp2_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state93_pp2_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state94_pp2_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state95_pp2_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state96_pp2_stage1_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state97_pp2_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state98_pp2_stage1_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state99_pp2_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign data_V_address1 = zext_ln692_1_fu_693_p1;

assign grp_fu_921_p0 = grp_fu_921_p00;

assign grp_fu_921_p00 = add_ln691_1_reg_1227;

assign grp_fu_921_p1 = 257'd340614998755660788452097358758680985857;

assign icmp_ln68_fu_486_p2 = ((i_reg_253 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln69_fu_512_p2 = ((j_1_reg_264 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln74_fu_528_p2 = ((indvar_flatten_reg_275 == 13'd4096) ? 1'b1 : 1'b0);

assign icmp_ln77_1_fu_572_p2 = ((add_ln77_fu_566_p2 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln77_fu_540_p2 = ((ap_phi_mux_i_2_phi_fu_301_p4 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln82_fu_633_p2 = ((indvar_flatten8_reg_320 == 13'd4096) ? 1'b1 : 1'b0);

assign icmp_ln83_fu_645_p2 = ((j_2_reg_342 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_712_p2 = ((ap_phi_mux_indvar_flatten36_phi_fu_357_p4 == 19'd262144) ? 1'b1 : 1'b0);

assign icmp_ln87_fu_724_p2 = ((ap_phi_mux_indvar_flatten21_phi_fu_380_p4 == 14'd4096) ? 1'b1 : 1'b0);

assign icmp_ln90_1_fu_861_p2 = ((add_ln90_fu_856_p2 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln90_fu_756_p2 = ((ap_phi_mux_k_phi_fu_402_p4 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln96_fu_955_p2 = ((i_4_reg_420 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln97_fu_981_p2 = ((j_4_reg_431 == 7'd64) ? 1'b1 : 1'b0);

assign m_axi_gmem_B_ARADDR = sext_ln68_fu_457_p1;

assign m_axi_gmem_B_ARBURST = 2'd0;

assign m_axi_gmem_B_ARCACHE = 4'd0;

assign m_axi_gmem_B_ARID = 1'd0;

assign m_axi_gmem_B_ARLEN = 32'd4096;

assign m_axi_gmem_B_ARLOCK = 2'd0;

assign m_axi_gmem_B_ARPROT = 3'd0;

assign m_axi_gmem_B_ARQOS = 4'd0;

assign m_axi_gmem_B_ARREGION = 4'd0;

assign m_axi_gmem_B_ARSIZE = 3'd0;

assign m_axi_gmem_B_ARUSER = 1'd0;

assign m_axi_gmem_B_AWADDR = 64'd0;

assign m_axi_gmem_B_AWBURST = 2'd0;

assign m_axi_gmem_B_AWCACHE = 4'd0;

assign m_axi_gmem_B_AWID = 1'd0;

assign m_axi_gmem_B_AWLEN = 32'd0;

assign m_axi_gmem_B_AWLOCK = 2'd0;

assign m_axi_gmem_B_AWPROT = 3'd0;

assign m_axi_gmem_B_AWQOS = 4'd0;

assign m_axi_gmem_B_AWREGION = 4'd0;

assign m_axi_gmem_B_AWSIZE = 3'd0;

assign m_axi_gmem_B_AWUSER = 1'd0;

assign m_axi_gmem_B_AWVALID = 1'b0;

assign m_axi_gmem_B_BREADY = 1'b0;

assign m_axi_gmem_B_WDATA = 512'd0;

assign m_axi_gmem_B_WID = 1'd0;

assign m_axi_gmem_B_WLAST = 1'b0;

assign m_axi_gmem_B_WSTRB = 64'd0;

assign m_axi_gmem_B_WUSER = 1'd0;

assign m_axi_gmem_B_WVALID = 1'b0;

assign mean_V_d0 = {{add_ln691_fu_610_p2[127:10]}};

assign mean_V_load_cast_fu_702_p1 = mean_V_q0;

assign or_ln87_fu_768_p2 = (icmp_ln87_fu_724_p2 | and_ln86_fu_762_p2);

assign select_ln74_1_fu_599_p3 = ((icmp_ln77_reg_1034_pp0_iter2_reg[0:0] == 1'b1) ? 128'd0 : add_i3114_reg_308);

assign select_ln74_2_fu_554_p3 = ((icmp_ln77_fu_540_p2[0:0] == 1'b1) ? add_ln74_fu_534_p2 : ap_phi_mux_j_phi_fu_290_p4);

assign select_ln74_fu_546_p3 = ((icmp_ln77_fu_540_p2[0:0] == 1'b1) ? 7'd0 : ap_phi_mux_i_2_phi_fu_301_p4);

assign select_ln82_1_fu_659_p3 = ((icmp_ln83_fu_645_p2[0:0] == 1'b1) ? add_ln82_fu_639_p2 : ap_phi_mux_i_1_phi_fu_335_p4);

assign select_ln82_fu_651_p3 = ((icmp_ln83_fu_645_p2[0:0] == 1'b1) ? 7'd0 : j_2_reg_342);

assign select_ln86_1_fu_738_p3 = ((icmp_ln87_fu_724_p2[0:0] == 1'b1) ? add_ln86_fu_718_p2 : ap_phi_mux_i_3_phi_fu_369_p4);

assign select_ln86_fu_730_p3 = ((icmp_ln87_fu_724_p2[0:0] == 1'b1) ? 7'd0 : ap_phi_mux_j_3_phi_fu_391_p4);

assign select_ln87_1_fu_898_p3 = ((or_ln87_reg_1142_pp2_iter4_reg[0:0] == 1'b1) ? 128'd0 : ap_phi_mux_conv3_i2113_phi_fu_413_p4);

assign select_ln87_2_fu_814_p3 = ((and_ln86_reg_1137[0:0] == 1'b1) ? add_ln87_fu_809_p2 : select_ln86_reg_1120);

assign select_ln87_3_fu_792_p3 = ((icmp_ln87_fu_724_p2[0:0] == 1'b1) ? 14'd1 : add_ln87_1_fu_786_p2);

assign select_ln87_fu_774_p3 = ((or_ln87_fu_768_p2[0:0] == 1'b1) ? 7'd0 : ap_phi_mux_k_phi_fu_402_p4);

assign sext_ln68_fu_457_p1 = $signed(trunc_ln_fu_447_p4);

assign sub_ln692_fu_706_p2 = ($signed(reg_442) - $signed(mean_V_load_cast_fu_702_p1));

assign tmp_1_cast_fu_581_p3 = {{trunc_ln691_reg_1046}, {6'd0}};

assign tmp_2_cast_fu_677_p3 = {{trunc_ln692_reg_1090}, {6'd0}};

assign tmp_3_cast_fu_867_p3 = {{trunc_ln89_reg_1132}, {6'd0}};

assign tmp_5_cast_fu_824_p3 = {{trunc_ln93_fu_820_p1}, {6'd0}};

assign tmp_6_cast_fu_838_p3 = {{trunc_ln215_reg_1152}, {6'd0}};

assign tmp_7_cast_fu_947_p3 = {{trunc_ln208_1_fu_943_p1}, {6'd0}};

assign tmp_cast_fu_478_p3 = {{trunc_ln70_fu_474_p1}, {6'd0}};

assign trunc_ln208_1_fu_943_p1 = i_4_reg_420[5:0];

assign trunc_ln208_fu_518_p1 = m_axi_gmem_B_RDATA[127:0];

assign trunc_ln215_fu_782_p1 = select_ln87_fu_774_p3[5:0];

assign trunc_ln691_fu_562_p1 = select_ln74_fu_546_p3[5:0];

assign trunc_ln692_fu_667_p1 = select_ln82_1_fu_659_p3[5:0];

assign trunc_ln70_fu_474_p1 = i_reg_253[5:0];

assign trunc_ln89_fu_746_p1 = select_ln86_1_fu_738_p3[5:0];

assign trunc_ln93_fu_820_p1 = select_ln87_2_fu_814_p3[5:0];

assign trunc_ln_fu_447_p4 = {{xout[63:6]}};

assign xin_address0 = zext_ln208_1_reg_1261;

assign xin_d0 = cov_V_load_reg_1274;

assign xor_ln86_fu_750_p2 = (icmp_ln87_fu_724_p2 ^ 1'd1);

assign zext_ln208_1_fu_976_p1 = add_ln208_fu_971_p2;

assign zext_ln208_fu_967_p1 = j_4_reg_431;

assign zext_ln215_1_fu_888_p1 = add_ln215_1_fu_883_p2;

assign zext_ln215_fu_851_p1 = add_ln215_fu_845_p2;

assign zext_ln691_1_fu_594_p1 = add_ln691_2_fu_588_p2;

assign zext_ln691_fu_578_p1 = select_ln74_2_reg_1039;

assign zext_ln692_1_fu_693_p1 = add_ln692_fu_687_p2;

assign zext_ln692_fu_684_p1 = select_ln82_reg_1079;

assign zext_ln70_1_fu_507_p1 = add_ln70_fu_502_p2;

assign zext_ln70_fu_498_p1 = j_1_reg_264;

assign zext_ln74_fu_606_p1 = select_ln74_2_reg_1039_pp0_iter2_reg;

assign zext_ln83_fu_698_p1 = select_ln82_reg_1079_pp1_iter1_reg;

assign zext_ln89_1_fu_909_p1 = add_ln89_reg_1197_pp2_iter4_reg;

assign zext_ln89_fu_806_p1 = select_ln86_1_reg_1126;

assign zext_ln93_1_fu_905_p1 = add_ln93_reg_1173_pp2_iter3_reg;

assign zext_ln93_fu_874_p1 = select_ln87_2_reg_1167;

always @ (posedge ap_clk) begin
    tmp_cast_reg_998[5:0] <= 6'b000000;
    tmp_6_cast_reg_1178[5:0] <= 6'b000000;
    tmp_7_cast_reg_1248[5:0] <= 6'b000000;
    zext_ln208_1_reg_1261[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
end

endmodule //top_nondf_kernel_cov_x1
