// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module top_nondf_kernel_cov_x0 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_A_AWVALID,
        m_axi_gmem_A_AWREADY,
        m_axi_gmem_A_AWADDR,
        m_axi_gmem_A_AWID,
        m_axi_gmem_A_AWLEN,
        m_axi_gmem_A_AWSIZE,
        m_axi_gmem_A_AWBURST,
        m_axi_gmem_A_AWLOCK,
        m_axi_gmem_A_AWCACHE,
        m_axi_gmem_A_AWPROT,
        m_axi_gmem_A_AWQOS,
        m_axi_gmem_A_AWREGION,
        m_axi_gmem_A_AWUSER,
        m_axi_gmem_A_WVALID,
        m_axi_gmem_A_WREADY,
        m_axi_gmem_A_WDATA,
        m_axi_gmem_A_WSTRB,
        m_axi_gmem_A_WLAST,
        m_axi_gmem_A_WID,
        m_axi_gmem_A_WUSER,
        m_axi_gmem_A_ARVALID,
        m_axi_gmem_A_ARREADY,
        m_axi_gmem_A_ARADDR,
        m_axi_gmem_A_ARID,
        m_axi_gmem_A_ARLEN,
        m_axi_gmem_A_ARSIZE,
        m_axi_gmem_A_ARBURST,
        m_axi_gmem_A_ARLOCK,
        m_axi_gmem_A_ARCACHE,
        m_axi_gmem_A_ARPROT,
        m_axi_gmem_A_ARQOS,
        m_axi_gmem_A_ARREGION,
        m_axi_gmem_A_ARUSER,
        m_axi_gmem_A_RVALID,
        m_axi_gmem_A_RREADY,
        m_axi_gmem_A_RDATA,
        m_axi_gmem_A_RLAST,
        m_axi_gmem_A_RID,
        m_axi_gmem_A_RUSER,
        m_axi_gmem_A_RRESP,
        m_axi_gmem_A_BVALID,
        m_axi_gmem_A_BREADY,
        m_axi_gmem_A_BRESP,
        m_axi_gmem_A_BID,
        m_axi_gmem_A_BUSER,
        xout,
        xin_address0,
        xin_ce0,
        xin_we0,
        xin_d0
);

parameter    ap_ST_fsm_state1 = 103'd1;
parameter    ap_ST_fsm_state2 = 103'd2;
parameter    ap_ST_fsm_state3 = 103'd4;
parameter    ap_ST_fsm_state4 = 103'd8;
parameter    ap_ST_fsm_state5 = 103'd16;
parameter    ap_ST_fsm_state6 = 103'd32;
parameter    ap_ST_fsm_state7 = 103'd64;
parameter    ap_ST_fsm_state8 = 103'd128;
parameter    ap_ST_fsm_state9 = 103'd256;
parameter    ap_ST_fsm_state10 = 103'd512;
parameter    ap_ST_fsm_state11 = 103'd1024;
parameter    ap_ST_fsm_state12 = 103'd2048;
parameter    ap_ST_fsm_state13 = 103'd4096;
parameter    ap_ST_fsm_state14 = 103'd8192;
parameter    ap_ST_fsm_state15 = 103'd16384;
parameter    ap_ST_fsm_state16 = 103'd32768;
parameter    ap_ST_fsm_state17 = 103'd65536;
parameter    ap_ST_fsm_state18 = 103'd131072;
parameter    ap_ST_fsm_state19 = 103'd262144;
parameter    ap_ST_fsm_state20 = 103'd524288;
parameter    ap_ST_fsm_state21 = 103'd1048576;
parameter    ap_ST_fsm_state22 = 103'd2097152;
parameter    ap_ST_fsm_state23 = 103'd4194304;
parameter    ap_ST_fsm_state24 = 103'd8388608;
parameter    ap_ST_fsm_state25 = 103'd16777216;
parameter    ap_ST_fsm_state26 = 103'd33554432;
parameter    ap_ST_fsm_state27 = 103'd67108864;
parameter    ap_ST_fsm_state28 = 103'd134217728;
parameter    ap_ST_fsm_state29 = 103'd268435456;
parameter    ap_ST_fsm_state30 = 103'd536870912;
parameter    ap_ST_fsm_state31 = 103'd1073741824;
parameter    ap_ST_fsm_state32 = 103'd2147483648;
parameter    ap_ST_fsm_state33 = 103'd4294967296;
parameter    ap_ST_fsm_state34 = 103'd8589934592;
parameter    ap_ST_fsm_state35 = 103'd17179869184;
parameter    ap_ST_fsm_state36 = 103'd34359738368;
parameter    ap_ST_fsm_state37 = 103'd68719476736;
parameter    ap_ST_fsm_state38 = 103'd137438953472;
parameter    ap_ST_fsm_state39 = 103'd274877906944;
parameter    ap_ST_fsm_state40 = 103'd549755813888;
parameter    ap_ST_fsm_state41 = 103'd1099511627776;
parameter    ap_ST_fsm_state42 = 103'd2199023255552;
parameter    ap_ST_fsm_state43 = 103'd4398046511104;
parameter    ap_ST_fsm_state44 = 103'd8796093022208;
parameter    ap_ST_fsm_state45 = 103'd17592186044416;
parameter    ap_ST_fsm_state46 = 103'd35184372088832;
parameter    ap_ST_fsm_state47 = 103'd70368744177664;
parameter    ap_ST_fsm_state48 = 103'd140737488355328;
parameter    ap_ST_fsm_state49 = 103'd281474976710656;
parameter    ap_ST_fsm_state50 = 103'd562949953421312;
parameter    ap_ST_fsm_state51 = 103'd1125899906842624;
parameter    ap_ST_fsm_state52 = 103'd2251799813685248;
parameter    ap_ST_fsm_state53 = 103'd4503599627370496;
parameter    ap_ST_fsm_state54 = 103'd9007199254740992;
parameter    ap_ST_fsm_state55 = 103'd18014398509481984;
parameter    ap_ST_fsm_state56 = 103'd36028797018963968;
parameter    ap_ST_fsm_state57 = 103'd72057594037927936;
parameter    ap_ST_fsm_state58 = 103'd144115188075855872;
parameter    ap_ST_fsm_state59 = 103'd288230376151711744;
parameter    ap_ST_fsm_state60 = 103'd576460752303423488;
parameter    ap_ST_fsm_state61 = 103'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 103'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 103'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 103'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 103'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 103'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 103'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 103'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 103'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 103'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 103'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 103'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 103'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 103'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 103'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 103'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 103'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 103'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 103'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 103'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 103'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 103'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 103'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 103'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 103'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 103'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 103'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 103'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 103'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 103'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 103'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 103'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 103'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 103'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 103'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 103'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 103'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 103'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 103'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 103'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 103'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 103'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 103'd5070602400912917605986812821504;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_A_AWVALID;
input   m_axi_gmem_A_AWREADY;
output  [63:0] m_axi_gmem_A_AWADDR;
output  [0:0] m_axi_gmem_A_AWID;
output  [31:0] m_axi_gmem_A_AWLEN;
output  [2:0] m_axi_gmem_A_AWSIZE;
output  [1:0] m_axi_gmem_A_AWBURST;
output  [1:0] m_axi_gmem_A_AWLOCK;
output  [3:0] m_axi_gmem_A_AWCACHE;
output  [2:0] m_axi_gmem_A_AWPROT;
output  [3:0] m_axi_gmem_A_AWQOS;
output  [3:0] m_axi_gmem_A_AWREGION;
output  [0:0] m_axi_gmem_A_AWUSER;
output   m_axi_gmem_A_WVALID;
input   m_axi_gmem_A_WREADY;
output  [511:0] m_axi_gmem_A_WDATA;
output  [63:0] m_axi_gmem_A_WSTRB;
output   m_axi_gmem_A_WLAST;
output  [0:0] m_axi_gmem_A_WID;
output  [0:0] m_axi_gmem_A_WUSER;
output   m_axi_gmem_A_ARVALID;
input   m_axi_gmem_A_ARREADY;
output  [63:0] m_axi_gmem_A_ARADDR;
output  [0:0] m_axi_gmem_A_ARID;
output  [31:0] m_axi_gmem_A_ARLEN;
output  [2:0] m_axi_gmem_A_ARSIZE;
output  [1:0] m_axi_gmem_A_ARBURST;
output  [1:0] m_axi_gmem_A_ARLOCK;
output  [3:0] m_axi_gmem_A_ARCACHE;
output  [2:0] m_axi_gmem_A_ARPROT;
output  [3:0] m_axi_gmem_A_ARQOS;
output  [3:0] m_axi_gmem_A_ARREGION;
output  [0:0] m_axi_gmem_A_ARUSER;
input   m_axi_gmem_A_RVALID;
output   m_axi_gmem_A_RREADY;
input  [511:0] m_axi_gmem_A_RDATA;
input   m_axi_gmem_A_RLAST;
input  [0:0] m_axi_gmem_A_RID;
input  [0:0] m_axi_gmem_A_RUSER;
input  [1:0] m_axi_gmem_A_RRESP;
input   m_axi_gmem_A_BVALID;
output   m_axi_gmem_A_BREADY;
input  [1:0] m_axi_gmem_A_BRESP;
input  [0:0] m_axi_gmem_A_BID;
input  [0:0] m_axi_gmem_A_BUSER;
input  [63:0] xout;
output  [11:0] xin_address0;
output   xin_ce0;
output   xin_we0;
output  [118:0] xin_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_gmem_A_ARVALID;
reg m_axi_gmem_A_RREADY;
reg xin_ce0;
reg xin_we0;

(* fsm_encoding = "none" *) reg   [102:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    gmem_A_blk_n_AR;
reg    gmem_A_blk_n_R;
wire    ap_CS_fsm_state73;
wire   [127:0] data_V_q0;
reg  signed [127:0] reg_367;
wire    ap_CS_fsm_state77;
wire    ap_CS_fsm_state81;
wire   [127:0] data_V_q1;
wire    ap_CS_fsm_state87;
wire   [6:0] add_ln24_fu_393_p2;
reg   [6:0] add_ln24_reg_789;
wire    ap_CS_fsm_state71;
wire   [11:0] tmp_cast_fu_403_p3;
reg   [11:0] tmp_cast_reg_794;
wire   [6:0] add_ln25_fu_417_p2;
reg   [6:0] add_ln25_reg_802;
wire    ap_CS_fsm_state72;
reg   [11:0] data_V_addr_reg_807;
wire   [127:0] trunc_ln208_fu_443_p1;
reg   [127:0] trunc_ln208_reg_815;
wire   [6:0] add_ln30_fu_447_p2;
reg   [6:0] add_ln30_reg_820;
wire    ap_CS_fsm_state75;
wire   [11:0] zext_ln30_1_fu_458_p1;
reg   [11:0] zext_ln30_1_reg_825;
reg   [5:0] mean_V_addr_reg_833;
wire   [0:0] icmp_ln30_fu_462_p2;
wire   [6:0] add_ln33_fu_468_p2;
reg   [6:0] add_ln33_reg_838;
wire    ap_CS_fsm_state76;
wire   [127:0] add_ln691_fu_513_p2;
wire    ap_CS_fsm_state78;
wire   [6:0] add_ln38_fu_519_p2;
reg   [6:0] add_ln38_reg_856;
wire    ap_CS_fsm_state79;
wire   [11:0] tmp_9_cast_fu_529_p3;
reg   [11:0] tmp_9_cast_reg_861;
wire   [6:0] add_ln39_fu_543_p2;
reg   [6:0] add_ln39_reg_869;
wire    ap_CS_fsm_state80;
wire   [63:0] zext_ln39_fu_549_p1;
reg   [63:0] zext_ln39_reg_874;
reg   [11:0] data_V_addr_6_reg_879;
wire   [127:0] sub_ln692_fu_577_p2;
reg   [127:0] sub_ln692_reg_892;
wire    ap_CS_fsm_state82;
wire   [6:0] add_ln42_fu_583_p2;
reg   [6:0] add_ln42_reg_897;
wire    ap_CS_fsm_state84;
wire   [11:0] zext_ln45_fu_589_p1;
reg   [11:0] zext_ln45_reg_902;
wire   [11:0] tmp_11_cast_fu_597_p3;
reg   [11:0] tmp_11_cast_reg_908;
wire   [6:0] add_ln43_fu_611_p2;
reg   [6:0] add_ln43_reg_916;
wire    ap_CS_fsm_state85;
wire   [11:0] zext_ln45_1_fu_617_p1;
reg   [11:0] zext_ln45_1_reg_921;
reg   [11:0] cov_V_addr_reg_926;
reg   [11:0] cov_V_addr_4_reg_931;
wire   [6:0] add_ln46_fu_659_p2;
reg   [6:0] add_ln46_reg_939;
wire    ap_CS_fsm_state86;
wire   [0:0] icmp_ln46_fu_697_p2;
reg  signed [127:0] data_V_load_6_reg_962;
wire   [127:0] grp_fu_713_p2;
reg   [127:0] mul_ln691_reg_967;
wire    ap_CS_fsm_state92;
wire   [127:0] add_ln691_2_fu_718_p2;
wire    ap_CS_fsm_state93;
reg   [118:0] trunc_ln693_2_reg_977;
wire    ap_CS_fsm_state97;
wire   [6:0] add_ln52_fu_733_p2;
reg   [6:0] add_ln52_reg_982;
wire    ap_CS_fsm_state100;
wire   [11:0] tmp_12_cast_fu_743_p3;
reg   [11:0] tmp_12_cast_reg_987;
wire   [6:0] add_ln53_fu_757_p2;
reg   [6:0] add_ln53_reg_995;
wire    ap_CS_fsm_state101;
wire   [63:0] zext_ln208_2_fu_772_p1;
reg   [63:0] zext_ln208_2_reg_1000;
wire   [118:0] cov_V_q0;
reg   [118:0] cov_V_load_reg_1013;
wire    ap_CS_fsm_state102;
reg   [5:0] mean_V_address0;
reg    mean_V_ce0;
reg    mean_V_we0;
wire   [117:0] mean_V_d0;
wire   [117:0] mean_V_q0;
reg   [11:0] data_V_address0;
reg    data_V_ce0;
reg    data_V_we0;
reg   [127:0] data_V_d0;
wire   [11:0] data_V_address1;
reg    data_V_ce1;
reg   [11:0] cov_V_address0;
reg    cov_V_ce0;
reg    cov_V_we0;
reg   [6:0] i_reg_222;
wire   [0:0] icmp_ln25_fu_437_p2;
wire    ap_CS_fsm_state70;
reg   [6:0] j_5_reg_233;
wire    ap_CS_fsm_state74;
wire   [0:0] icmp_ln24_fu_411_p2;
reg   [6:0] j_reg_244;
wire   [0:0] icmp_ln33_fu_496_p2;
reg   [6:0] i_6_reg_255;
reg   [127:0] add_i3114_reg_266;
reg   [6:0] i_5_reg_278;
wire   [0:0] icmp_ln39_fu_567_p2;
reg   [6:0] j_6_reg_289;
wire    ap_CS_fsm_state83;
wire   [0:0] icmp_ln38_fu_537_p2;
reg   [6:0] i_7_reg_300;
wire   [0:0] icmp_ln43_fu_653_p2;
reg   [6:0] j_7_reg_311;
wire    ap_CS_fsm_state99;
wire   [0:0] icmp_ln42_fu_605_p2;
reg   [6:0] k_reg_322;
reg   [127:0] conv3_i2113_reg_333;
reg   [6:0] i_8_reg_345;
wire   [0:0] icmp_ln53_fu_777_p2;
reg   [6:0] j_8_reg_356;
wire    ap_CS_fsm_state103;
wire   [0:0] icmp_ln52_fu_751_p2;
wire   [63:0] zext_ln26_1_fu_432_p1;
wire   [63:0] zext_ln30_fu_453_p1;
wire   [63:0] zext_ln691_fu_491_p1;
wire   [63:0] zext_ln692_2_fu_562_p1;
wire   [63:0] zext_ln45_2_fu_626_p1;
wire   [63:0] zext_ln49_fu_648_p1;
wire   [63:0] zext_ln215_fu_682_p1;
wire   [63:0] zext_ln215_2_fu_692_p1;
wire  signed [63:0] sext_ln24_fu_382_p1;
wire    ap_CS_fsm_state98;
wire   [57:0] trunc_ln_fu_372_p4;
wire   [5:0] trunc_ln26_fu_399_p1;
wire   [11:0] zext_ln26_fu_423_p1;
wire   [11:0] add_ln26_fu_427_p2;
wire   [5:0] trunc_ln691_fu_474_p1;
wire   [11:0] tmp_10_cast_fu_478_p3;
wire   [11:0] add_ln691_3_fu_486_p2;
wire   [5:0] trunc_ln692_fu_525_p1;
wire   [11:0] zext_ln692_fu_553_p1;
wire   [11:0] add_ln692_fu_557_p2;
wire   [127:0] mean_V_load_cast_fu_573_p1;
wire   [5:0] trunc_ln45_fu_593_p1;
wire   [11:0] add_ln45_fu_621_p2;
wire   [5:0] trunc_ln49_fu_631_p1;
wire   [11:0] tmp_13_cast_fu_635_p3;
wire   [11:0] add_ln49_fu_643_p2;
wire   [5:0] trunc_ln215_fu_665_p1;
wire   [11:0] tmp_16_cast_fu_669_p3;
wire   [11:0] add_ln215_fu_677_p2;
wire   [11:0] add_ln215_2_fu_687_p2;
wire   [127:0] grp_fu_707_p0;
wire   [129:0] grp_fu_707_p1;
wire    ap_CS_fsm_state88;
wire   [256:0] grp_fu_707_p2;
wire   [5:0] trunc_ln208_2_fu_739_p1;
wire   [11:0] zext_ln208_fu_763_p1;
wire   [11:0] add_ln208_fu_767_p2;
reg   [102:0] ap_NS_fsm;
wire   [256:0] grp_fu_707_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 103'd1;
end

top_nondf_kernel_cov_x0_mean_V #(
    .DataWidth( 118 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
mean_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mean_V_address0),
    .ce0(mean_V_ce0),
    .we0(mean_V_we0),
    .d0(mean_V_d0),
    .q0(mean_V_q0)
);

top_nondf_kernel_cov_x0_data_V #(
    .DataWidth( 128 ),
    .AddressRange( 4096 ),
    .AddressWidth( 12 ))
data_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(data_V_address0),
    .ce0(data_V_ce0),
    .we0(data_V_we0),
    .d0(data_V_d0),
    .q0(data_V_q0),
    .address1(data_V_address1),
    .ce1(data_V_ce1),
    .q1(data_V_q1)
);

top_nondf_kernel_cov_x0_cov_V #(
    .DataWidth( 119 ),
    .AddressRange( 4096 ),
    .AddressWidth( 12 ))
cov_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(cov_V_address0),
    .ce0(cov_V_ce0),
    .we0(cov_V_we0),
    .d0(trunc_ln693_2_reg_977),
    .q0(cov_V_q0)
);

top_mul_128ns_130ns_257_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 128 ),
    .din1_WIDTH( 130 ),
    .dout_WIDTH( 257 ))
mul_128ns_130ns_257_5_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_707_p0),
    .din1(grp_fu_707_p1),
    .ce(1'b1),
    .dout(grp_fu_707_p2)
);

top_mul_128s_128s_128_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 128 ),
    .din1_WIDTH( 128 ),
    .dout_WIDTH( 128 ))
mul_128s_128s_128_5_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(data_V_load_6_reg_962),
    .din1(reg_367),
    .ce(1'b1),
    .dout(grp_fu_713_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln30_fu_462_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state75))) begin
        add_i3114_reg_266 <= 128'd0;
    end else if ((1'b1 == ap_CS_fsm_state78)) begin
        add_i3114_reg_266 <= add_ln691_fu_513_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln43_fu_653_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state85))) begin
        conv3_i2113_reg_333 <= 128'd0;
    end else if ((1'b1 == ap_CS_fsm_state93)) begin
        conv3_i2113_reg_333 <= add_ln691_2_fu_718_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln30_fu_462_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state75))) begin
        i_5_reg_278 <= 7'd0;
    end else if (((icmp_ln39_fu_567_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state80))) begin
        i_5_reg_278 <= add_ln38_reg_856;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln30_fu_462_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state75))) begin
        i_6_reg_255 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state78)) begin
        i_6_reg_255 <= add_ln33_reg_838;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_fu_537_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state79))) begin
        i_7_reg_300 <= 7'd0;
    end else if (((icmp_ln43_fu_653_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state85))) begin
        i_7_reg_300 <= add_ln42_reg_897;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln42_fu_605_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state84))) begin
        i_8_reg_345 <= 7'd0;
    end else if (((icmp_ln53_fu_777_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state101))) begin
        i_8_reg_345 <= add_ln52_reg_982;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        i_reg_222 <= 7'd0;
    end else if (((icmp_ln25_fu_437_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state72))) begin
        i_reg_222 <= add_ln24_reg_789;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_fu_411_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state71))) begin
        j_5_reg_233 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        j_5_reg_233 <= add_ln25_reg_802;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_fu_537_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state79))) begin
        j_6_reg_289 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state83)) begin
        j_6_reg_289 <= add_ln39_reg_869;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln42_fu_605_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state84))) begin
        j_7_reg_311 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state99)) begin
        j_7_reg_311 <= add_ln43_reg_916;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_fu_751_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state100))) begin
        j_8_reg_356 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state103)) begin
        j_8_reg_356 <= add_ln53_reg_995;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_fu_411_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state71))) begin
        j_reg_244 <= 7'd0;
    end else if (((icmp_ln33_fu_496_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state76))) begin
        j_reg_244 <= add_ln30_reg_820;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln43_fu_653_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state85))) begin
        k_reg_322 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state93)) begin
        k_reg_322 <= add_ln46_reg_939;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        reg_367 <= data_V_q1;
    end else if (((1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state77))) begin
        reg_367 <= data_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        add_ln24_reg_789 <= add_ln24_fu_393_p2;
        tmp_cast_reg_794[11 : 6] <= tmp_cast_fu_403_p3[11 : 6];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        add_ln25_reg_802 <= add_ln25_fu_417_p2;
        data_V_addr_reg_807 <= zext_ln26_1_fu_432_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        add_ln30_reg_820 <= add_ln30_fu_447_p2;
        zext_ln30_1_reg_825[6 : 0] <= zext_ln30_1_fu_458_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        add_ln33_reg_838 <= add_ln33_fu_468_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        add_ln38_reg_856 <= add_ln38_fu_519_p2;
        tmp_9_cast_reg_861[11 : 6] <= tmp_9_cast_fu_529_p3[11 : 6];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state80)) begin
        add_ln39_reg_869 <= add_ln39_fu_543_p2;
        data_V_addr_6_reg_879 <= zext_ln692_2_fu_562_p1;
        zext_ln39_reg_874[6 : 0] <= zext_ln39_fu_549_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state84)) begin
        add_ln42_reg_897 <= add_ln42_fu_583_p2;
        tmp_11_cast_reg_908[11 : 6] <= tmp_11_cast_fu_597_p3[11 : 6];
        zext_ln45_reg_902[6 : 0] <= zext_ln45_fu_589_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state85)) begin
        add_ln43_reg_916 <= add_ln43_fu_611_p2;
        cov_V_addr_4_reg_931 <= zext_ln49_fu_648_p1;
        cov_V_addr_reg_926 <= zext_ln45_2_fu_626_p1;
        zext_ln45_1_reg_921[6 : 0] <= zext_ln45_1_fu_617_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        add_ln46_reg_939 <= add_ln46_fu_659_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state100)) begin
        add_ln52_reg_982 <= add_ln52_fu_733_p2;
        tmp_12_cast_reg_987[11 : 6] <= tmp_12_cast_fu_743_p3[11 : 6];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state101)) begin
        add_ln53_reg_995 <= add_ln53_fu_757_p2;
        zext_ln208_2_reg_1000[11 : 0] <= zext_ln208_2_fu_772_p1[11 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state102)) begin
        cov_V_load_reg_1013 <= cov_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        data_V_load_6_reg_962 <= data_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln30_fu_462_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state75))) begin
        mean_V_addr_reg_833 <= zext_ln30_fu_453_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state92)) begin
        mul_ln691_reg_967 <= grp_fu_713_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state82)) begin
        sub_ln692_reg_892 <= sub_ln692_fu_577_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        trunc_ln208_reg_815 <= trunc_ln208_fu_443_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state97)) begin
        trunc_ln693_2_reg_977 <= {{grp_fu_707_p2[256:138]}};
    end
end

always @ (*) begin
    if ((((icmp_ln52_fu_751_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state100)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln52_fu_751_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state100))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state101)) begin
        cov_V_address0 = zext_ln208_2_fu_772_p1;
    end else if ((1'b1 == ap_CS_fsm_state99)) begin
        cov_V_address0 = cov_V_addr_4_reg_931;
    end else if ((1'b1 == ap_CS_fsm_state98)) begin
        cov_V_address0 = cov_V_addr_reg_926;
    end else begin
        cov_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state101))) begin
        cov_V_ce0 = 1'b1;
    end else begin
        cov_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state99))) begin
        cov_V_we0 = 1'b1;
    end else begin
        cov_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        data_V_address0 = zext_ln215_2_fu_692_p1;
    end else if ((1'b1 == ap_CS_fsm_state83)) begin
        data_V_address0 = data_V_addr_6_reg_879;
    end else if ((1'b1 == ap_CS_fsm_state80)) begin
        data_V_address0 = zext_ln692_2_fu_562_p1;
    end else if ((1'b1 == ap_CS_fsm_state76)) begin
        data_V_address0 = zext_ln691_fu_491_p1;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        data_V_address0 = data_V_addr_reg_807;
    end else begin
        data_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state76))) begin
        data_V_ce0 = 1'b1;
    end else begin
        data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        data_V_ce1 = 1'b1;
    end else begin
        data_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state83)) begin
        data_V_d0 = sub_ln692_reg_892;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        data_V_d0 = trunc_ln208_reg_815;
    end else begin
        data_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state74))) begin
        data_V_we0 = 1'b1;
    end else begin
        data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        gmem_A_blk_n_AR = m_axi_gmem_A_ARREADY;
    end else begin
        gmem_A_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        gmem_A_blk_n_R = m_axi_gmem_A_RVALID;
    end else begin
        gmem_A_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((~((m_axi_gmem_A_ARREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        m_axi_gmem_A_ARVALID = 1'b1;
    end else begin
        m_axi_gmem_A_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state73) & (m_axi_gmem_A_RVALID == 1'b1))) begin
        m_axi_gmem_A_RREADY = 1'b1;
    end else begin
        m_axi_gmem_A_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state81)) begin
        mean_V_address0 = zext_ln39_reg_874;
    end else if ((1'b1 == ap_CS_fsm_state76)) begin
        mean_V_address0 = mean_V_addr_reg_833;
    end else begin
        mean_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state81))) begin
        mean_V_ce0 = 1'b1;
    end else begin
        mean_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln33_fu_496_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state76))) begin
        mean_V_we0 = 1'b1;
    end else begin
        mean_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state103)) begin
        xin_ce0 = 1'b1;
    end else begin
        xin_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state103)) begin
        xin_we0 = 1'b1;
    end else begin
        xin_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((m_axi_gmem_A_ARREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            if (((icmp_ln24_fu_411_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state71))) begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end
        end
        ap_ST_fsm_state72 : begin
            if (((icmp_ln25_fu_437_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state72))) begin
                ap_NS_fsm = ap_ST_fsm_state71;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end
        end
        ap_ST_fsm_state73 : begin
            if (((1'b1 == ap_CS_fsm_state73) & (m_axi_gmem_A_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state75 : begin
            if (((icmp_ln30_fu_462_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state75))) begin
                ap_NS_fsm = ap_ST_fsm_state79;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end
        end
        ap_ST_fsm_state76 : begin
            if (((icmp_ln33_fu_496_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state76))) begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state79 : begin
            if (((icmp_ln38_fu_537_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state79))) begin
                ap_NS_fsm = ap_ST_fsm_state84;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state80;
            end
        end
        ap_ST_fsm_state80 : begin
            if (((icmp_ln39_fu_567_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state80))) begin
                ap_NS_fsm = ap_ST_fsm_state79;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state81;
            end
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state84 : begin
            if (((icmp_ln42_fu_605_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state84))) begin
                ap_NS_fsm = ap_ST_fsm_state100;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state85;
            end
        end
        ap_ST_fsm_state85 : begin
            if (((icmp_ln43_fu_653_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state85))) begin
                ap_NS_fsm = ap_ST_fsm_state84;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state86;
            end
        end
        ap_ST_fsm_state86 : begin
            if (((icmp_ln46_fu_697_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state86))) begin
                ap_NS_fsm = ap_ST_fsm_state94;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state87;
            end
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state100 : begin
            if (((icmp_ln52_fu_751_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state100))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state101;
            end
        end
        ap_ST_fsm_state101 : begin
            if (((icmp_ln53_fu_777_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state101))) begin
                ap_NS_fsm = ap_ST_fsm_state100;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state102;
            end
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln208_fu_767_p2 = (tmp_12_cast_reg_987 + zext_ln208_fu_763_p1);

assign add_ln215_2_fu_687_p2 = (tmp_16_cast_fu_669_p3 + zext_ln45_1_reg_921);

assign add_ln215_fu_677_p2 = (tmp_16_cast_fu_669_p3 + zext_ln45_reg_902);

assign add_ln24_fu_393_p2 = (i_reg_222 + 7'd1);

assign add_ln25_fu_417_p2 = (j_5_reg_233 + 7'd1);

assign add_ln26_fu_427_p2 = (tmp_cast_reg_794 + zext_ln26_fu_423_p1);

assign add_ln30_fu_447_p2 = (j_reg_244 + 7'd1);

assign add_ln33_fu_468_p2 = (i_6_reg_255 + 7'd1);

assign add_ln38_fu_519_p2 = (i_5_reg_278 + 7'd1);

assign add_ln39_fu_543_p2 = (j_6_reg_289 + 7'd1);

assign add_ln42_fu_583_p2 = (i_7_reg_300 + 7'd1);

assign add_ln43_fu_611_p2 = (j_7_reg_311 + 7'd1);

assign add_ln45_fu_621_p2 = (tmp_11_cast_reg_908 + zext_ln45_1_fu_617_p1);

assign add_ln46_fu_659_p2 = (k_reg_322 + 7'd1);

assign add_ln49_fu_643_p2 = (tmp_13_cast_fu_635_p3 + zext_ln45_reg_902);

assign add_ln52_fu_733_p2 = (i_8_reg_345 + 7'd1);

assign add_ln53_fu_757_p2 = (j_8_reg_356 + 7'd1);

assign add_ln691_2_fu_718_p2 = (mul_ln691_reg_967 + conv3_i2113_reg_333);

assign add_ln691_3_fu_486_p2 = (tmp_10_cast_fu_478_p3 + zext_ln30_1_reg_825);

assign add_ln691_fu_513_p2 = ($signed(reg_367) + $signed(add_i3114_reg_266));

assign add_ln692_fu_557_p2 = (tmp_9_cast_reg_861 + zext_ln692_fu_553_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state100 = ap_CS_fsm[32'd99];

assign ap_CS_fsm_state101 = ap_CS_fsm[32'd100];

assign ap_CS_fsm_state102 = ap_CS_fsm[32'd101];

assign ap_CS_fsm_state103 = ap_CS_fsm[32'd102];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_state92 = ap_CS_fsm[32'd91];

assign ap_CS_fsm_state93 = ap_CS_fsm[32'd92];

assign ap_CS_fsm_state97 = ap_CS_fsm[32'd96];

assign ap_CS_fsm_state98 = ap_CS_fsm[32'd97];

assign ap_CS_fsm_state99 = ap_CS_fsm[32'd98];

assign data_V_address1 = zext_ln215_fu_682_p1;

assign grp_fu_707_p0 = grp_fu_707_p00;

assign grp_fu_707_p00 = conv3_i2113_reg_333;

assign grp_fu_707_p1 = 257'd340614998755660788452097358758680985857;

assign icmp_ln24_fu_411_p2 = ((i_reg_222 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln25_fu_437_p2 = ((j_5_reg_233 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln30_fu_462_p2 = ((j_reg_244 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_496_p2 = ((i_6_reg_255 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln38_fu_537_p2 = ((i_5_reg_278 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_567_p2 = ((j_6_reg_289 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln42_fu_605_p2 = ((i_7_reg_300 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_653_p2 = ((j_7_reg_311 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_697_p2 = ((k_reg_322 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_751_p2 = ((i_8_reg_345 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln53_fu_777_p2 = ((j_8_reg_356 == 7'd64) ? 1'b1 : 1'b0);

assign m_axi_gmem_A_ARADDR = sext_ln24_fu_382_p1;

assign m_axi_gmem_A_ARBURST = 2'd0;

assign m_axi_gmem_A_ARCACHE = 4'd0;

assign m_axi_gmem_A_ARID = 1'd0;

assign m_axi_gmem_A_ARLEN = 32'd4096;

assign m_axi_gmem_A_ARLOCK = 2'd0;

assign m_axi_gmem_A_ARPROT = 3'd0;

assign m_axi_gmem_A_ARQOS = 4'd0;

assign m_axi_gmem_A_ARREGION = 4'd0;

assign m_axi_gmem_A_ARSIZE = 3'd0;

assign m_axi_gmem_A_ARUSER = 1'd0;

assign m_axi_gmem_A_AWADDR = 64'd0;

assign m_axi_gmem_A_AWBURST = 2'd0;

assign m_axi_gmem_A_AWCACHE = 4'd0;

assign m_axi_gmem_A_AWID = 1'd0;

assign m_axi_gmem_A_AWLEN = 32'd0;

assign m_axi_gmem_A_AWLOCK = 2'd0;

assign m_axi_gmem_A_AWPROT = 3'd0;

assign m_axi_gmem_A_AWQOS = 4'd0;

assign m_axi_gmem_A_AWREGION = 4'd0;

assign m_axi_gmem_A_AWSIZE = 3'd0;

assign m_axi_gmem_A_AWUSER = 1'd0;

assign m_axi_gmem_A_AWVALID = 1'b0;

assign m_axi_gmem_A_BREADY = 1'b0;

assign m_axi_gmem_A_WDATA = 512'd0;

assign m_axi_gmem_A_WID = 1'd0;

assign m_axi_gmem_A_WLAST = 1'b0;

assign m_axi_gmem_A_WSTRB = 64'd0;

assign m_axi_gmem_A_WUSER = 1'd0;

assign m_axi_gmem_A_WVALID = 1'b0;

assign mean_V_d0 = {{add_i3114_reg_266[127:10]}};

assign mean_V_load_cast_fu_573_p1 = mean_V_q0;

assign sext_ln24_fu_382_p1 = $signed(trunc_ln_fu_372_p4);

assign sub_ln692_fu_577_p2 = ($signed(reg_367) - $signed(mean_V_load_cast_fu_573_p1));

assign tmp_10_cast_fu_478_p3 = {{trunc_ln691_fu_474_p1}, {6'd0}};

assign tmp_11_cast_fu_597_p3 = {{trunc_ln45_fu_593_p1}, {6'd0}};

assign tmp_12_cast_fu_743_p3 = {{trunc_ln208_2_fu_739_p1}, {6'd0}};

assign tmp_13_cast_fu_635_p3 = {{trunc_ln49_fu_631_p1}, {6'd0}};

assign tmp_16_cast_fu_669_p3 = {{trunc_ln215_fu_665_p1}, {6'd0}};

assign tmp_9_cast_fu_529_p3 = {{trunc_ln692_fu_525_p1}, {6'd0}};

assign tmp_cast_fu_403_p3 = {{trunc_ln26_fu_399_p1}, {6'd0}};

assign trunc_ln208_2_fu_739_p1 = i_8_reg_345[5:0];

assign trunc_ln208_fu_443_p1 = m_axi_gmem_A_RDATA[127:0];

assign trunc_ln215_fu_665_p1 = k_reg_322[5:0];

assign trunc_ln26_fu_399_p1 = i_reg_222[5:0];

assign trunc_ln45_fu_593_p1 = i_7_reg_300[5:0];

assign trunc_ln49_fu_631_p1 = j_7_reg_311[5:0];

assign trunc_ln691_fu_474_p1 = i_6_reg_255[5:0];

assign trunc_ln692_fu_525_p1 = i_5_reg_278[5:0];

assign trunc_ln_fu_372_p4 = {{xout[63:6]}};

assign xin_address0 = zext_ln208_2_reg_1000;

assign xin_d0 = cov_V_load_reg_1013;

assign zext_ln208_2_fu_772_p1 = add_ln208_fu_767_p2;

assign zext_ln208_fu_763_p1 = j_8_reg_356;

assign zext_ln215_2_fu_692_p1 = add_ln215_2_fu_687_p2;

assign zext_ln215_fu_682_p1 = add_ln215_fu_677_p2;

assign zext_ln26_1_fu_432_p1 = add_ln26_fu_427_p2;

assign zext_ln26_fu_423_p1 = j_5_reg_233;

assign zext_ln30_1_fu_458_p1 = j_reg_244;

assign zext_ln30_fu_453_p1 = j_reg_244;

assign zext_ln39_fu_549_p1 = j_6_reg_289;

assign zext_ln45_1_fu_617_p1 = j_7_reg_311;

assign zext_ln45_2_fu_626_p1 = add_ln45_fu_621_p2;

assign zext_ln45_fu_589_p1 = i_7_reg_300;

assign zext_ln49_fu_648_p1 = add_ln49_fu_643_p2;

assign zext_ln691_fu_491_p1 = add_ln691_3_fu_486_p2;

assign zext_ln692_2_fu_562_p1 = add_ln692_fu_557_p2;

assign zext_ln692_fu_553_p1 = j_6_reg_289;

always @ (posedge ap_clk) begin
    tmp_cast_reg_794[5:0] <= 6'b000000;
    zext_ln30_1_reg_825[11:7] <= 5'b00000;
    tmp_9_cast_reg_861[5:0] <= 6'b000000;
    zext_ln39_reg_874[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln45_reg_902[11:7] <= 5'b00000;
    tmp_11_cast_reg_908[5:0] <= 6'b000000;
    zext_ln45_1_reg_921[11:7] <= 5'b00000;
    tmp_12_cast_reg_987[5:0] <= 6'b000000;
    zext_ln208_2_reg_1000[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
end

endmodule //top_nondf_kernel_cov_x0
