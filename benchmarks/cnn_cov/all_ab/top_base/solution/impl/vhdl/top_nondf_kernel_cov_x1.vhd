-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_nondf_kernel_cov_x1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    xout_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    xout_ce0 : OUT STD_LOGIC;
    xout_q0 : IN STD_LOGIC_VECTOR (511 downto 0);
    xin_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    xin_ce0 : OUT STD_LOGIC;
    xin_we0 : OUT STD_LOGIC;
    xin_d0 : OUT STD_LOGIC_VECTOR (502 downto 0);
    grp_fu_159_p_din0 : OUT STD_LOGIC_VECTOR (511 downto 0);
    grp_fu_159_p_din1 : OUT STD_LOGIC_VECTOR (513 downto 0);
    grp_fu_159_p_dout0 : IN STD_LOGIC_VECTOR (1024 downto 0);
    grp_fu_159_p_ce : OUT STD_LOGIC;
    grp_fu_163_p_din0 : OUT STD_LOGIC_VECTOR (511 downto 0);
    grp_fu_163_p_din1 : OUT STD_LOGIC_VECTOR (511 downto 0);
    grp_fu_163_p_dout0 : IN STD_LOGIC_VECTOR (511 downto 0);
    grp_fu_163_p_ce : OUT STD_LOGIC );
end;


architecture behav of top_nondf_kernel_cov_x1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (36 downto 0) := "0000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (36 downto 0) := "0000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (36 downto 0) := "0000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (36 downto 0) := "0000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (36 downto 0) := "0000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (36 downto 0) := "0000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (36 downto 0) := "0001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (36 downto 0) := "0010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (36 downto 0) := "0100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (36 downto 0) := "1000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1025_lc_3 : STD_LOGIC_VECTOR (1024 downto
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_20A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000001010";
    constant ap_const_lv32_400 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal data_V_q0 : STD_LOGIC_VECTOR (511 downto 0);
    signal reg_330 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal data_V_q1 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal add_ln67_fu_335_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln67_reg_722 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_cast_fu_345_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_cast_reg_727 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln68_fu_359_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln68_reg_735 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal data_V_addr_reg_740 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln68_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xout_load_reg_753 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln73_fu_386_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln73_reg_758 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln73_1_fu_397_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln73_1_reg_763 : STD_LOGIC_VECTOR (11 downto 0);
    signal mean_V_addr_reg_771 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln73_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln76_fu_407_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln76_reg_776 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_452_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal add_ln81_fu_458_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln81_reg_794 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_3_cast_fu_468_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_3_cast_reg_799 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln82_fu_482_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln82_reg_807 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal zext_ln82_fu_488_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln82_reg_812 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_V_addr_2_reg_817 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_fu_516_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal sub_ln692_reg_835 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal add_ln85_fu_522_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln85_reg_840 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal zext_ln88_fu_528_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln88_reg_845 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_5_cast_fu_536_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_5_cast_reg_851 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln86_fu_550_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln86_reg_859 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal zext_ln88_1_fu_556_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln88_1_reg_864 : STD_LOGIC_VECTOR (11 downto 0);
    signal cov_V_addr_reg_869 : STD_LOGIC_VECTOR (11 downto 0);
    signal cov_V_addr_2_reg_874 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln89_fu_598_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln89_reg_882 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal zext_ln693_fu_642_p1 : STD_LOGIC_VECTOR (1024 downto 0);
    signal icmp_ln89_fu_636_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_V_load_3_reg_905 : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_fu_652_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal mul_ln691_reg_910 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal grp_fu_657_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal trunc_ln693_1_reg_920 : STD_LOGIC_VECTOR (502 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal add_ln95_fu_672_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln95_reg_925 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal tmp_6_cast_fu_682_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_6_cast_reg_930 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln96_fu_696_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln96_reg_938 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal zext_ln97_1_fu_711_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln97_1_reg_943 : STD_LOGIC_VECTOR (63 downto 0);
    signal cov_V_q0 : STD_LOGIC_VECTOR (502 downto 0);
    signal cov_V_load_reg_956 : STD_LOGIC_VECTOR (502 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal mean_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mean_V_ce0 : STD_LOGIC;
    signal mean_V_we0 : STD_LOGIC;
    signal mean_V_d0 : STD_LOGIC_VECTOR (501 downto 0);
    signal mean_V_q0 : STD_LOGIC_VECTOR (501 downto 0);
    signal data_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal data_V_ce0 : STD_LOGIC;
    signal data_V_we0 : STD_LOGIC;
    signal data_V_d0 : STD_LOGIC_VECTOR (511 downto 0);
    signal data_V_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal data_V_ce1 : STD_LOGIC;
    signal cov_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal cov_V_ce0 : STD_LOGIC;
    signal cov_V_we0 : STD_LOGIC;
    signal i_reg_185 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_1_reg_196 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln67_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_reg_207 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln76_fu_435_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_reg_218 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_i2614_reg_229 : STD_LOGIC_VECTOR (511 downto 0);
    signal i_1_reg_241 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln82_fu_506_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_2_reg_252 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal icmp_ln81_fu_476_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_reg_263 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln86_fu_592_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_3_reg_274 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal icmp_ln85_fu_544_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_reg_285 : STD_LOGIC_VECTOR (6 downto 0);
    signal conv3_i1613_reg_296 : STD_LOGIC_VECTOR (511 downto 0);
    signal i_4_reg_308 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln96_fu_716_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_4_reg_319 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal icmp_ln95_fu_690_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln69_1_fu_374_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln73_fu_392_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln691_fu_430_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln692_1_fu_501_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln88_2_fu_565_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln92_fu_587_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln215_fu_621_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln215_1_fu_631_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal trunc_ln69_fu_341_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln69_fu_365_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln69_fu_369_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln691_fu_413_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_4_cast_fu_417_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln691_2_fu_425_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal trunc_ln692_fu_464_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln692_fu_492_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln692_fu_496_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_516_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal trunc_ln88_fu_532_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln88_fu_560_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln92_fu_570_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_7_cast_fu_574_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln92_fu_582_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln215_fu_604_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_10_cast_fu_608_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln215_fu_616_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln215_1_fu_626_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_646_p0 : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_fu_646_p1 : STD_LOGIC_VECTOR (513 downto 0);
    signal grp_fu_652_p0 : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_fu_652_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal grp_fu_646_p2 : STD_LOGIC_VECTOR (1024 downto 0);
    signal trunc_ln97_fu_678_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln97_fu_702_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln97_fu_706_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_646_ce : STD_LOGIC;
    signal grp_fu_652_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (36 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component top_add_512ns_512ns_512_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (511 downto 0);
        din1 : IN STD_LOGIC_VECTOR (511 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (511 downto 0) );
    end component;


    component top_sub_512ns_512ns_512_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (511 downto 0);
        din1 : IN STD_LOGIC_VECTOR (511 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (511 downto 0) );
    end component;


    component top_mul_512ns_514ns_1025_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (511 downto 0);
        din1 : IN STD_LOGIC_VECTOR (513 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (1024 downto 0) );
    end component;


    component top_mul_512s_512s_512_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (511 downto 0);
        din1 : IN STD_LOGIC_VECTOR (511 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (511 downto 0) );
    end component;


    component top_nondf_kernel_cov_x0_mean_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (501 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (501 downto 0) );
    end component;


    component top_nondf_kernel_cov_x0_data_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (511 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (511 downto 0);
        address1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (511 downto 0) );
    end component;


    component top_nondf_kernel_cov_x0_cov_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (502 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (502 downto 0) );
    end component;



begin
    mean_V_U : component top_nondf_kernel_cov_x0_mean_V
    generic map (
        DataWidth => 502,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mean_V_address0,
        ce0 => mean_V_ce0,
        we0 => mean_V_we0,
        d0 => mean_V_d0,
        q0 => mean_V_q0);

    data_V_U : component top_nondf_kernel_cov_x0_data_V
    generic map (
        DataWidth => 512,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => data_V_address0,
        ce0 => data_V_ce0,
        we0 => data_V_we0,
        d0 => data_V_d0,
        q0 => data_V_q0,
        address1 => data_V_address1,
        ce1 => data_V_ce1,
        q1 => data_V_q1);

    cov_V_U : component top_nondf_kernel_cov_x0_cov_V
    generic map (
        DataWidth => 503,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cov_V_address0,
        ce0 => cov_V_ce0,
        we0 => cov_V_we0,
        d0 => trunc_ln693_1_reg_920,
        q0 => cov_V_q0);

    add_512ns_512ns_512_2_1_U969 : component top_add_512ns_512ns_512_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 512,
        din1_WIDTH => 512,
        dout_WIDTH => 512)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_330,
        din1 => add_i2614_reg_229,
        ce => ap_const_logic_1,
        dout => grp_fu_452_p2);

    sub_512ns_512ns_512_2_1_U970 : component top_sub_512ns_512ns_512_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 512,
        din1_WIDTH => 512,
        dout_WIDTH => 512)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_330,
        din1 => grp_fu_516_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_516_p2);

    add_512ns_512ns_512_2_1_U973 : component top_add_512ns_512ns_512_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 512,
        din1_WIDTH => 512,
        dout_WIDTH => 512)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul_ln691_reg_910,
        din1 => conv3_i1613_reg_296,
        ce => ap_const_logic_1,
        dout => grp_fu_657_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    add_i2614_reg_229_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln73_fu_401_p2 = ap_const_lv1_0))) then 
                add_i2614_reg_229 <= ap_const_lv512_lc_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                add_i2614_reg_229 <= grp_fu_452_p2;
            end if; 
        end if;
    end process;

    conv3_i1613_reg_296_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln86_fu_592_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                conv3_i1613_reg_296 <= ap_const_lv512_lc_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                conv3_i1613_reg_296 <= grp_fu_657_p2;
            end if; 
        end if;
    end process;

    i_1_reg_241_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln73_fu_401_p2 = ap_const_lv1_1))) then 
                i_1_reg_241 <= ap_const_lv7_0;
            elsif (((icmp_ln82_fu_506_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                i_1_reg_241 <= add_ln81_reg_794;
            end if; 
        end if;
    end process;

    i_2_reg_218_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln73_fu_401_p2 = ap_const_lv1_0))) then 
                i_2_reg_218 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                i_2_reg_218 <= add_ln76_reg_776;
            end if; 
        end if;
    end process;

    i_3_reg_263_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln81_fu_476_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                i_3_reg_263 <= ap_const_lv7_0;
            elsif (((icmp_ln86_fu_592_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                i_3_reg_263 <= add_ln85_reg_840;
            end if; 
        end if;
    end process;

    i_4_reg_308_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln85_fu_544_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                i_4_reg_308 <= ap_const_lv7_0;
            elsif (((icmp_ln96_fu_716_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
                i_4_reg_308 <= add_ln95_reg_925;
            end if; 
        end if;
    end process;

    i_reg_185_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_185 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln68_fu_380_p2 = ap_const_lv1_1))) then 
                i_reg_185 <= add_ln67_reg_722;
            end if; 
        end if;
    end process;

    j_1_reg_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln67_fu_353_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_1_reg_196 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                j_1_reg_196 <= add_ln68_reg_735;
            end if; 
        end if;
    end process;

    j_2_reg_252_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln81_fu_476_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                j_2_reg_252 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                j_2_reg_252 <= add_ln82_reg_807;
            end if; 
        end if;
    end process;

    j_3_reg_274_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln85_fu_544_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                j_3_reg_274 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
                j_3_reg_274 <= add_ln86_reg_859;
            end if; 
        end if;
    end process;

    j_4_reg_319_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln95_fu_690_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state34))) then 
                j_4_reg_319 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                j_4_reg_319 <= add_ln96_reg_938;
            end if; 
        end if;
    end process;

    j_reg_207_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln67_fu_353_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_207 <= ap_const_lv7_0;
            elsif (((icmp_ln76_fu_435_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                j_reg_207 <= add_ln73_reg_758;
            end if; 
        end if;
    end process;

    k_reg_285_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln86_fu_592_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                k_reg_285 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                k_reg_285 <= add_ln89_reg_882;
            end if; 
        end if;
    end process;

    reg_330_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                reg_330 <= data_V_q1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                reg_330 <= data_V_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln67_reg_722 <= add_ln67_fu_335_p2;
                    tmp_cast_reg_727(11 downto 6) <= tmp_cast_fu_345_p3(11 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln68_reg_735 <= add_ln68_fu_359_p2;
                data_V_addr_reg_740 <= zext_ln69_1_fu_374_p1(12 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add_ln73_reg_758 <= add_ln73_fu_386_p2;
                    zext_ln73_1_reg_763(6 downto 0) <= zext_ln73_1_fu_397_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                add_ln76_reg_776 <= add_ln76_fu_407_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                add_ln81_reg_794 <= add_ln81_fu_458_p2;
                    tmp_3_cast_reg_799(11 downto 6) <= tmp_3_cast_fu_468_p3(11 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                add_ln82_reg_807 <= add_ln82_fu_482_p2;
                data_V_addr_2_reg_817 <= zext_ln692_1_fu_501_p1(12 - 1 downto 0);
                    zext_ln82_reg_812(6 downto 0) <= zext_ln82_fu_488_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                add_ln85_reg_840 <= add_ln85_fu_522_p2;
                    tmp_5_cast_reg_851(11 downto 6) <= tmp_5_cast_fu_536_p3(11 downto 6);
                    zext_ln88_reg_845(6 downto 0) <= zext_ln88_fu_528_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                add_ln86_reg_859 <= add_ln86_fu_550_p2;
                cov_V_addr_2_reg_874 <= zext_ln92_fu_587_p1(12 - 1 downto 0);
                cov_V_addr_reg_869 <= zext_ln88_2_fu_565_p1(12 - 1 downto 0);
                    zext_ln88_1_reg_864(6 downto 0) <= zext_ln88_1_fu_556_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                add_ln89_reg_882 <= add_ln89_fu_598_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                add_ln95_reg_925 <= add_ln95_fu_672_p2;
                    tmp_6_cast_reg_930(11 downto 6) <= tmp_6_cast_fu_682_p3(11 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                add_ln96_reg_938 <= add_ln96_fu_696_p2;
                    zext_ln97_1_reg_943(11 downto 0) <= zext_ln97_1_fu_711_p1(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                cov_V_load_reg_956 <= cov_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                data_V_load_3_reg_905 <= data_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln73_fu_401_p2 = ap_const_lv1_0))) then
                mean_V_addr_reg_771 <= zext_ln73_fu_392_p1(6 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                mul_ln691_reg_910 <= grp_fu_163_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                sub_ln692_reg_835 <= grp_fu_516_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                trunc_ln693_1_reg_920 <= grp_fu_159_p_dout0(1024 downto 522);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                xout_load_reg_753 <= xout_q0;
            end if;
        end if;
    end process;
    tmp_cast_reg_727(5 downto 0) <= "000000";
    zext_ln73_1_reg_763(11 downto 7) <= "00000";
    tmp_3_cast_reg_799(5 downto 0) <= "000000";
    zext_ln82_reg_812(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln88_reg_845(11 downto 7) <= "00000";
    tmp_5_cast_reg_851(5 downto 0) <= "000000";
    zext_ln88_1_reg_864(11 downto 7) <= "00000";
    tmp_6_cast_reg_930(5 downto 0) <= "000000";
    zext_ln97_1_reg_943(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln68_fu_380_p2, ap_CS_fsm_state6, icmp_ln73_fu_401_p2, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, icmp_ln89_fu_636_p2, ap_CS_fsm_state34, ap_CS_fsm_state35, icmp_ln67_fu_353_p2, icmp_ln76_fu_435_p2, icmp_ln82_fu_506_p2, icmp_ln81_fu_476_p2, icmp_ln86_fu_592_p2, icmp_ln85_fu_544_p2, icmp_ln96_fu_716_p2, icmp_ln95_fu_690_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln67_fu_353_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln68_fu_380_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln73_fu_401_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln76_fu_435_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state11 => 
                if (((icmp_ln81_fu_476_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                if (((icmp_ln82_fu_506_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state17 => 
                if (((icmp_ln85_fu_544_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                if (((icmp_ln86_fu_592_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state19 => 
                if (((icmp_ln89_fu_636_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state34 => 
                if (((icmp_ln95_fu_690_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state35 => 
                if (((icmp_ln96_fu_716_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln215_1_fu_626_p2 <= std_logic_vector(unsigned(tmp_10_cast_fu_608_p3) + unsigned(zext_ln88_1_reg_864));
    add_ln215_fu_616_p2 <= std_logic_vector(unsigned(tmp_10_cast_fu_608_p3) + unsigned(zext_ln88_reg_845));
    add_ln67_fu_335_p2 <= std_logic_vector(unsigned(i_reg_185) + unsigned(ap_const_lv7_1));
    add_ln68_fu_359_p2 <= std_logic_vector(unsigned(j_1_reg_196) + unsigned(ap_const_lv7_1));
    add_ln691_2_fu_425_p2 <= std_logic_vector(unsigned(tmp_4_cast_fu_417_p3) + unsigned(zext_ln73_1_reg_763));
    add_ln692_fu_496_p2 <= std_logic_vector(unsigned(tmp_3_cast_reg_799) + unsigned(zext_ln692_fu_492_p1));
    add_ln69_fu_369_p2 <= std_logic_vector(unsigned(tmp_cast_reg_727) + unsigned(zext_ln69_fu_365_p1));
    add_ln73_fu_386_p2 <= std_logic_vector(unsigned(j_reg_207) + unsigned(ap_const_lv7_1));
    add_ln76_fu_407_p2 <= std_logic_vector(unsigned(i_2_reg_218) + unsigned(ap_const_lv7_1));
    add_ln81_fu_458_p2 <= std_logic_vector(unsigned(i_1_reg_241) + unsigned(ap_const_lv7_1));
    add_ln82_fu_482_p2 <= std_logic_vector(unsigned(j_2_reg_252) + unsigned(ap_const_lv7_1));
    add_ln85_fu_522_p2 <= std_logic_vector(unsigned(i_3_reg_263) + unsigned(ap_const_lv7_1));
    add_ln86_fu_550_p2 <= std_logic_vector(unsigned(j_3_reg_274) + unsigned(ap_const_lv7_1));
    add_ln88_fu_560_p2 <= std_logic_vector(unsigned(tmp_5_cast_reg_851) + unsigned(zext_ln88_1_fu_556_p1));
    add_ln89_fu_598_p2 <= std_logic_vector(unsigned(k_reg_285) + unsigned(ap_const_lv7_1));
    add_ln92_fu_582_p2 <= std_logic_vector(unsigned(tmp_7_cast_fu_574_p3) + unsigned(zext_ln88_reg_845));
    add_ln95_fu_672_p2 <= std_logic_vector(unsigned(i_4_reg_308) + unsigned(ap_const_lv7_1));
    add_ln96_fu_696_p2 <= std_logic_vector(unsigned(j_4_reg_319) + unsigned(ap_const_lv7_1));
    add_ln97_fu_706_p2 <= std_logic_vector(unsigned(tmp_6_cast_reg_930) + unsigned(zext_ln97_fu_702_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state34, icmp_ln95_fu_690_p2)
    begin
        if ((((icmp_ln95_fu_690_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state34)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state34, icmp_ln95_fu_690_p2)
    begin
        if (((icmp_ln95_fu_690_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    cov_V_address0_assign_proc : process(cov_V_addr_reg_869, cov_V_addr_2_reg_874, ap_CS_fsm_state35, zext_ln97_1_fu_711_p1, ap_CS_fsm_state33, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            cov_V_address0 <= zext_ln97_1_fu_711_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            cov_V_address0 <= cov_V_addr_2_reg_874;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            cov_V_address0 <= cov_V_addr_reg_869;
        else 
            cov_V_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    cov_V_ce0_assign_proc : process(ap_CS_fsm_state35, ap_CS_fsm_state33, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            cov_V_ce0 <= ap_const_logic_1;
        else 
            cov_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cov_V_we0_assign_proc : process(ap_CS_fsm_state33, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            cov_V_we0 <= ap_const_logic_1;
        else 
            cov_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_V_address0_assign_proc : process(data_V_addr_reg_740, ap_CS_fsm_state7, ap_CS_fsm_state12, data_V_addr_2_reg_817, ap_CS_fsm_state19, ap_CS_fsm_state5, ap_CS_fsm_state16, zext_ln691_fu_430_p1, zext_ln692_1_fu_501_p1, zext_ln215_1_fu_631_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            data_V_address0 <= zext_ln215_1_fu_631_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            data_V_address0 <= data_V_addr_2_reg_817;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            data_V_address0 <= zext_ln692_1_fu_501_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            data_V_address0 <= zext_ln691_fu_430_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            data_V_address0 <= data_V_addr_reg_740;
        else 
            data_V_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;

    data_V_address1 <= zext_ln215_fu_621_p1(12 - 1 downto 0);

    data_V_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state12, ap_CS_fsm_state19, ap_CS_fsm_state5, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            data_V_ce0 <= ap_const_logic_1;
        else 
            data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_V_ce1_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            data_V_ce1 <= ap_const_logic_1;
        else 
            data_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    data_V_d0_assign_proc : process(xout_load_reg_753, sub_ln692_reg_835, ap_CS_fsm_state5, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            data_V_d0 <= sub_ln692_reg_835;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            data_V_d0 <= xout_load_reg_753;
        else 
            data_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data_V_we0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            data_V_we0 <= ap_const_logic_1;
        else 
            data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_159_p_ce <= ap_const_logic_1;
    grp_fu_159_p_din0 <= zext_ln693_fu_642_p1(512 - 1 downto 0);
    grp_fu_159_p_din1 <= ap_const_lv1025_lc_3(514 - 1 downto 0);
    grp_fu_163_p_ce <= ap_const_logic_1;
    grp_fu_163_p_din0 <= data_V_load_3_reg_905;
    grp_fu_163_p_din1 <= reg_330;
    grp_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mean_V_q0),512));
    grp_fu_646_ce <= ap_const_logic_1;
    grp_fu_646_p0 <= zext_ln693_fu_642_p1(512 - 1 downto 0);
    grp_fu_646_p1 <= ap_const_lv1025_lc_3(514 - 1 downto 0);
    grp_fu_646_p2 <= grp_fu_159_p_dout0;
    grp_fu_652_ce <= ap_const_logic_1;
    grp_fu_652_p0 <= data_V_load_3_reg_905;
    grp_fu_652_p1 <= reg_330;
    grp_fu_652_p2 <= grp_fu_163_p_dout0;
    icmp_ln67_fu_353_p2 <= "1" when (i_reg_185 = ap_const_lv7_40) else "0";
    icmp_ln68_fu_380_p2 <= "1" when (j_1_reg_196 = ap_const_lv7_40) else "0";
    icmp_ln73_fu_401_p2 <= "1" when (j_reg_207 = ap_const_lv7_40) else "0";
    icmp_ln76_fu_435_p2 <= "1" when (i_2_reg_218 = ap_const_lv7_40) else "0";
    icmp_ln81_fu_476_p2 <= "1" when (i_1_reg_241 = ap_const_lv7_40) else "0";
    icmp_ln82_fu_506_p2 <= "1" when (j_2_reg_252 = ap_const_lv7_40) else "0";
    icmp_ln85_fu_544_p2 <= "1" when (i_3_reg_263 = ap_const_lv7_40) else "0";
    icmp_ln86_fu_592_p2 <= "1" when (j_3_reg_274 = ap_const_lv7_40) else "0";
    icmp_ln89_fu_636_p2 <= "1" when (k_reg_285 = ap_const_lv7_40) else "0";
    icmp_ln95_fu_690_p2 <= "1" when (i_4_reg_308 = ap_const_lv7_40) else "0";
    icmp_ln96_fu_716_p2 <= "1" when (j_4_reg_319 = ap_const_lv7_40) else "0";

    mean_V_address0_assign_proc : process(ap_CS_fsm_state13, mean_V_addr_reg_771, ap_CS_fsm_state7, zext_ln82_reg_812)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            mean_V_address0 <= zext_ln82_reg_812(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            mean_V_address0 <= mean_V_addr_reg_771;
        else 
            mean_V_address0 <= "XXXXXX";
        end if; 
    end process;


    mean_V_ce0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            mean_V_ce0 <= ap_const_logic_1;
        else 
            mean_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mean_V_d0 <= add_i2614_reg_229(511 downto 10);

    mean_V_we0_assign_proc : process(ap_CS_fsm_state7, icmp_ln76_fu_435_p2)
    begin
        if (((icmp_ln76_fu_435_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            mean_V_we0 <= ap_const_logic_1;
        else 
            mean_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_cast_fu_608_p3 <= (trunc_ln215_fu_604_p1 & ap_const_lv6_0);
    tmp_3_cast_fu_468_p3 <= (trunc_ln692_fu_464_p1 & ap_const_lv6_0);
    tmp_4_cast_fu_417_p3 <= (trunc_ln691_fu_413_p1 & ap_const_lv6_0);
    tmp_5_cast_fu_536_p3 <= (trunc_ln88_fu_532_p1 & ap_const_lv6_0);
    tmp_6_cast_fu_682_p3 <= (trunc_ln97_fu_678_p1 & ap_const_lv6_0);
    tmp_7_cast_fu_574_p3 <= (trunc_ln92_fu_570_p1 & ap_const_lv6_0);
    tmp_cast_fu_345_p3 <= (trunc_ln69_fu_341_p1 & ap_const_lv6_0);
    trunc_ln215_fu_604_p1 <= k_reg_285(6 - 1 downto 0);
    trunc_ln691_fu_413_p1 <= i_2_reg_218(6 - 1 downto 0);
    trunc_ln692_fu_464_p1 <= i_1_reg_241(6 - 1 downto 0);
    trunc_ln69_fu_341_p1 <= i_reg_185(6 - 1 downto 0);
    trunc_ln88_fu_532_p1 <= i_3_reg_263(6 - 1 downto 0);
    trunc_ln92_fu_570_p1 <= j_3_reg_274(6 - 1 downto 0);
    trunc_ln97_fu_678_p1 <= i_4_reg_308(6 - 1 downto 0);
    xin_address0 <= zext_ln97_1_reg_943(12 - 1 downto 0);

    xin_ce0_assign_proc : process(ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            xin_ce0 <= ap_const_logic_1;
        else 
            xin_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    xin_d0 <= cov_V_load_reg_956;

    xin_we0_assign_proc : process(ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            xin_we0 <= ap_const_logic_1;
        else 
            xin_we0 <= ap_const_logic_0;
        end if; 
    end process;

    xout_address0 <= zext_ln69_1_fu_374_p1(12 - 1 downto 0);

    xout_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            xout_ce0 <= ap_const_logic_1;
        else 
            xout_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln215_1_fu_631_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln215_1_fu_626_p2),64));
    zext_ln215_fu_621_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln215_fu_616_p2),64));
    zext_ln691_fu_430_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln691_2_fu_425_p2),64));
    zext_ln692_1_fu_501_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln692_fu_496_p2),64));
    zext_ln692_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_2_reg_252),12));
    zext_ln693_fu_642_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(conv3_i1613_reg_296),1025));
    zext_ln69_1_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln69_fu_369_p2),64));
    zext_ln69_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_196),12));
    zext_ln73_1_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_207),12));
    zext_ln73_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_207),64));
    zext_ln82_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_2_reg_252),64));
    zext_ln88_1_fu_556_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_3_reg_274),12));
    zext_ln88_2_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln88_fu_560_p2),64));
    zext_ln88_fu_528_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_263),12));
    zext_ln92_fu_587_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln92_fu_582_p2),64));
    zext_ln97_1_fu_711_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln97_fu_706_p2),64));
    zext_ln97_fu_702_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_4_reg_319),12));
end behav;
