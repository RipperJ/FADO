-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top is
generic (
    C_M_AXI_GMEM_A_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_A_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_A_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_A_DATA_WIDTH : INTEGER := 512;
    C_M_AXI_GMEM_A_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_A_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_A_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_A_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_B_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_B_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_B_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_B_DATA_WIDTH : INTEGER := 512;
    C_M_AXI_GMEM_B_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_B_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_B_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_B_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_C_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_C_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_C_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_C_DATA_WIDTH : INTEGER := 512;
    C_M_AXI_GMEM_C_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_C_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_C_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_C_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_A_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_A_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_A_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM_B_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_B_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_B_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM_C_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_C_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_C_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_A_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_A_AWREADY : IN STD_LOGIC;
    m_axi_gmem_A_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_A_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_A_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_A_ID_WIDTH-1 downto 0);
    m_axi_gmem_A_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_A_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_A_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_A_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_A_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_A_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_A_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_A_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_A_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_A_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_A_WVALID : OUT STD_LOGIC;
    m_axi_gmem_A_WREADY : IN STD_LOGIC;
    m_axi_gmem_A_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_A_DATA_WIDTH-1 downto 0);
    m_axi_gmem_A_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_A_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_A_WLAST : OUT STD_LOGIC;
    m_axi_gmem_A_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_A_ID_WIDTH-1 downto 0);
    m_axi_gmem_A_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_A_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_A_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_A_ARREADY : IN STD_LOGIC;
    m_axi_gmem_A_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_A_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_A_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_A_ID_WIDTH-1 downto 0);
    m_axi_gmem_A_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_A_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_A_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_A_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_A_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_A_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_A_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_A_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_A_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_A_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_A_RVALID : IN STD_LOGIC;
    m_axi_gmem_A_RREADY : OUT STD_LOGIC;
    m_axi_gmem_A_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_A_DATA_WIDTH-1 downto 0);
    m_axi_gmem_A_RLAST : IN STD_LOGIC;
    m_axi_gmem_A_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_A_ID_WIDTH-1 downto 0);
    m_axi_gmem_A_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_A_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_A_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_A_BVALID : IN STD_LOGIC;
    m_axi_gmem_A_BREADY : OUT STD_LOGIC;
    m_axi_gmem_A_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_A_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_A_ID_WIDTH-1 downto 0);
    m_axi_gmem_A_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_A_BUSER_WIDTH-1 downto 0);
    m_axi_gmem_B_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_B_AWREADY : IN STD_LOGIC;
    m_axi_gmem_B_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_B_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_B_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_B_ID_WIDTH-1 downto 0);
    m_axi_gmem_B_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_B_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_B_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_B_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_B_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_B_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_B_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_B_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_B_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_B_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_B_WVALID : OUT STD_LOGIC;
    m_axi_gmem_B_WREADY : IN STD_LOGIC;
    m_axi_gmem_B_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_B_DATA_WIDTH-1 downto 0);
    m_axi_gmem_B_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_B_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_B_WLAST : OUT STD_LOGIC;
    m_axi_gmem_B_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_B_ID_WIDTH-1 downto 0);
    m_axi_gmem_B_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_B_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_B_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_B_ARREADY : IN STD_LOGIC;
    m_axi_gmem_B_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_B_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_B_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_B_ID_WIDTH-1 downto 0);
    m_axi_gmem_B_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_B_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_B_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_B_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_B_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_B_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_B_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_B_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_B_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_B_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_B_RVALID : IN STD_LOGIC;
    m_axi_gmem_B_RREADY : OUT STD_LOGIC;
    m_axi_gmem_B_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_B_DATA_WIDTH-1 downto 0);
    m_axi_gmem_B_RLAST : IN STD_LOGIC;
    m_axi_gmem_B_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_B_ID_WIDTH-1 downto 0);
    m_axi_gmem_B_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_B_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_B_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_B_BVALID : IN STD_LOGIC;
    m_axi_gmem_B_BREADY : OUT STD_LOGIC;
    m_axi_gmem_B_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_B_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_B_ID_WIDTH-1 downto 0);
    m_axi_gmem_B_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_B_BUSER_WIDTH-1 downto 0);
    m_axi_gmem_C_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_C_AWREADY : IN STD_LOGIC;
    m_axi_gmem_C_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_C_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_C_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_C_ID_WIDTH-1 downto 0);
    m_axi_gmem_C_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_C_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_C_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_C_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_C_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_C_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_C_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_C_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_C_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_C_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_C_WVALID : OUT STD_LOGIC;
    m_axi_gmem_C_WREADY : IN STD_LOGIC;
    m_axi_gmem_C_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_C_DATA_WIDTH-1 downto 0);
    m_axi_gmem_C_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_C_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_C_WLAST : OUT STD_LOGIC;
    m_axi_gmem_C_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_C_ID_WIDTH-1 downto 0);
    m_axi_gmem_C_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_C_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_C_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_C_ARREADY : IN STD_LOGIC;
    m_axi_gmem_C_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_C_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_C_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_C_ID_WIDTH-1 downto 0);
    m_axi_gmem_C_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_C_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_C_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_C_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_C_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_C_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_C_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_C_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_C_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_C_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_C_RVALID : IN STD_LOGIC;
    m_axi_gmem_C_RREADY : OUT STD_LOGIC;
    m_axi_gmem_C_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_C_DATA_WIDTH-1 downto 0);
    m_axi_gmem_C_RLAST : IN STD_LOGIC;
    m_axi_gmem_C_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_C_ID_WIDTH-1 downto 0);
    m_axi_gmem_C_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_C_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_C_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_C_BVALID : IN STD_LOGIC;
    m_axi_gmem_C_BREADY : OUT STD_LOGIC;
    m_axi_gmem_C_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_C_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_C_ID_WIDTH-1 downto 0);
    m_axi_gmem_C_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_C_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of top is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "top_top,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu250-figd2104-2L-e,HLS_INPUT_CLOCK=3.333000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.908000,HLS_SYN_LAT=1252105,HLS_SYN_TPT=none,HLS_SYN_MEM=904,HLS_SYN_DSP=0,HLS_SYN_FF=820865,HLS_SYN_LUT=471238,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_rst_reg_2 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_2 : signal is "no";
    signal ap_rst_reg_1 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_1 : signal is "no";
    signal ap_rst_n_inv : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_n_inv : signal is "no";
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_continue : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal A : STD_LOGIC_VECTOR (63 downto 0);
    signal B : STD_LOGIC_VECTOR (63 downto 0);
    signal C : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_A_AWREADY : STD_LOGIC;
    signal gmem_A_WREADY : STD_LOGIC;
    signal gmem_A_ARVALID : STD_LOGIC;
    signal gmem_A_ARREADY : STD_LOGIC;
    signal gmem_A_RVALID : STD_LOGIC;
    signal gmem_A_RREADY : STD_LOGIC;
    signal gmem_A_RDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal gmem_A_RLAST : STD_LOGIC;
    signal gmem_A_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_A_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_A_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_A_BVALID : STD_LOGIC;
    signal gmem_A_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_A_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_A_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_B_AWREADY : STD_LOGIC;
    signal gmem_B_WREADY : STD_LOGIC;
    signal gmem_B_ARVALID : STD_LOGIC;
    signal gmem_B_ARREADY : STD_LOGIC;
    signal gmem_B_RVALID : STD_LOGIC;
    signal gmem_B_RREADY : STD_LOGIC;
    signal gmem_B_RDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal gmem_B_RLAST : STD_LOGIC;
    signal gmem_B_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_B_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_B_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_B_BVALID : STD_LOGIC;
    signal gmem_B_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_B_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_B_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_C_AWVALID : STD_LOGIC;
    signal gmem_C_AWREADY : STD_LOGIC;
    signal gmem_C_WVALID : STD_LOGIC;
    signal gmem_C_WREADY : STD_LOGIC;
    signal gmem_C_ARREADY : STD_LOGIC;
    signal gmem_C_RVALID : STD_LOGIC;
    signal gmem_C_RDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal gmem_C_RLAST : STD_LOGIC;
    signal gmem_C_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_C_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_C_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_C_BVALID : STD_LOGIC;
    signal gmem_C_BREADY : STD_LOGIC;
    signal gmem_C_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_C_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_C_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal C_read_reg_144 : STD_LOGIC_VECTOR (63 downto 0);
    signal B_read_reg_149 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_read_reg_154 : STD_LOGIC_VECTOR (63 downto 0);
    signal temp_xout0_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal temp_xout0_V_ce0 : STD_LOGIC;
    signal temp_xout0_V_we0 : STD_LOGIC;
    signal temp_xout0_V_q0 : STD_LOGIC_VECTOR (511 downto 0);
    signal temp_xin1_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal temp_xin1_V_ce0 : STD_LOGIC;
    signal temp_xin1_V_we0 : STD_LOGIC;
    signal temp_xin1_V_q0 : STD_LOGIC_VECTOR (502 downto 0);
    signal temp_xin1_V_ce1 : STD_LOGIC;
    signal temp_xin1_V_q1 : STD_LOGIC_VECTOR (502 downto 0);
    signal temp_xout1_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal temp_xout1_V_ce0 : STD_LOGIC;
    signal temp_xout1_V_we0 : STD_LOGIC;
    signal temp_xout1_V_q0 : STD_LOGIC_VECTOR (511 downto 0);
    signal temp_xin2_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal temp_xin2_V_ce0 : STD_LOGIC;
    signal temp_xin2_V_we0 : STD_LOGIC;
    signal temp_xin2_V_q0 : STD_LOGIC_VECTOR (502 downto 0);
    signal temp_xin2_V_ce1 : STD_LOGIC;
    signal temp_xin2_V_q1 : STD_LOGIC_VECTOR (502 downto 0);
    signal grp_kernel3_x0_fu_104_m_axi_gmem_A_AWVALID : STD_LOGIC;
    signal grp_kernel3_x0_fu_104_m_axi_gmem_A_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_kernel3_x0_fu_104_m_axi_gmem_A_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_kernel3_x0_fu_104_m_axi_gmem_A_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_kernel3_x0_fu_104_m_axi_gmem_A_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_kernel3_x0_fu_104_m_axi_gmem_A_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_kernel3_x0_fu_104_m_axi_gmem_A_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_kernel3_x0_fu_104_m_axi_gmem_A_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_kernel3_x0_fu_104_m_axi_gmem_A_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_kernel3_x0_fu_104_m_axi_gmem_A_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_kernel3_x0_fu_104_m_axi_gmem_A_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_kernel3_x0_fu_104_m_axi_gmem_A_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_kernel3_x0_fu_104_m_axi_gmem_A_WVALID : STD_LOGIC;
    signal grp_kernel3_x0_fu_104_m_axi_gmem_A_WDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_kernel3_x0_fu_104_m_axi_gmem_A_WSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_kernel3_x0_fu_104_m_axi_gmem_A_WLAST : STD_LOGIC;
    signal grp_kernel3_x0_fu_104_m_axi_gmem_A_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_kernel3_x0_fu_104_m_axi_gmem_A_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_kernel3_x0_fu_104_m_axi_gmem_A_ARVALID : STD_LOGIC;
    signal grp_kernel3_x0_fu_104_m_axi_gmem_A_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_kernel3_x0_fu_104_m_axi_gmem_A_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_kernel3_x0_fu_104_m_axi_gmem_A_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_kernel3_x0_fu_104_m_axi_gmem_A_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_kernel3_x0_fu_104_m_axi_gmem_A_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_kernel3_x0_fu_104_m_axi_gmem_A_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_kernel3_x0_fu_104_m_axi_gmem_A_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_kernel3_x0_fu_104_m_axi_gmem_A_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_kernel3_x0_fu_104_m_axi_gmem_A_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_kernel3_x0_fu_104_m_axi_gmem_A_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_kernel3_x0_fu_104_m_axi_gmem_A_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_kernel3_x0_fu_104_m_axi_gmem_A_RREADY : STD_LOGIC;
    signal grp_kernel3_x0_fu_104_m_axi_gmem_A_BREADY : STD_LOGIC;
    signal grp_kernel3_x0_fu_104_m_axi_gmem_B_AWVALID : STD_LOGIC;
    signal grp_kernel3_x0_fu_104_m_axi_gmem_B_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_kernel3_x0_fu_104_m_axi_gmem_B_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_kernel3_x0_fu_104_m_axi_gmem_B_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_kernel3_x0_fu_104_m_axi_gmem_B_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_kernel3_x0_fu_104_m_axi_gmem_B_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_kernel3_x0_fu_104_m_axi_gmem_B_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_kernel3_x0_fu_104_m_axi_gmem_B_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_kernel3_x0_fu_104_m_axi_gmem_B_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_kernel3_x0_fu_104_m_axi_gmem_B_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_kernel3_x0_fu_104_m_axi_gmem_B_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_kernel3_x0_fu_104_m_axi_gmem_B_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_kernel3_x0_fu_104_m_axi_gmem_B_WVALID : STD_LOGIC;
    signal grp_kernel3_x0_fu_104_m_axi_gmem_B_WDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_kernel3_x0_fu_104_m_axi_gmem_B_WSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_kernel3_x0_fu_104_m_axi_gmem_B_WLAST : STD_LOGIC;
    signal grp_kernel3_x0_fu_104_m_axi_gmem_B_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_kernel3_x0_fu_104_m_axi_gmem_B_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_kernel3_x0_fu_104_m_axi_gmem_B_ARVALID : STD_LOGIC;
    signal grp_kernel3_x0_fu_104_m_axi_gmem_B_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_kernel3_x0_fu_104_m_axi_gmem_B_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_kernel3_x0_fu_104_m_axi_gmem_B_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_kernel3_x0_fu_104_m_axi_gmem_B_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_kernel3_x0_fu_104_m_axi_gmem_B_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_kernel3_x0_fu_104_m_axi_gmem_B_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_kernel3_x0_fu_104_m_axi_gmem_B_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_kernel3_x0_fu_104_m_axi_gmem_B_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_kernel3_x0_fu_104_m_axi_gmem_B_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_kernel3_x0_fu_104_m_axi_gmem_B_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_kernel3_x0_fu_104_m_axi_gmem_B_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_kernel3_x0_fu_104_m_axi_gmem_B_RREADY : STD_LOGIC;
    signal grp_kernel3_x0_fu_104_m_axi_gmem_B_BREADY : STD_LOGIC;
    signal grp_kernel3_x0_fu_104_C_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_kernel3_x0_fu_104_C_ce0 : STD_LOGIC;
    signal grp_kernel3_x0_fu_104_C_d0 : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_kernel3_x0_fu_104_C_we0 : STD_LOGIC;
    signal grp_kernel3_x0_fu_104_C_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_kernel3_x0_fu_104_C_ce1 : STD_LOGIC;
    signal grp_kernel3_x0_fu_104_C_d1 : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_kernel3_x0_fu_104_C_we1 : STD_LOGIC;
    signal grp_kernel3_x0_fu_104_ap_start : STD_LOGIC;
    signal grp_kernel3_x0_fu_104_ap_done : STD_LOGIC;
    signal grp_kernel3_x0_fu_104_ap_ready : STD_LOGIC;
    signal grp_kernel3_x0_fu_104_ap_idle : STD_LOGIC;
    signal grp_kernel3_x0_fu_104_ap_continue : STD_LOGIC;
    signal grp_kernel3_x1_fu_118_B_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_kernel3_x1_fu_118_B_ce0 : STD_LOGIC;
    signal grp_kernel3_x1_fu_118_B_d0 : STD_LOGIC_VECTOR (502 downto 0);
    signal grp_kernel3_x1_fu_118_B_we0 : STD_LOGIC;
    signal grp_kernel3_x1_fu_118_B_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_kernel3_x1_fu_118_B_ce1 : STD_LOGIC;
    signal grp_kernel3_x1_fu_118_B_d1 : STD_LOGIC_VECTOR (502 downto 0);
    signal grp_kernel3_x1_fu_118_B_we1 : STD_LOGIC;
    signal grp_kernel3_x1_fu_118_C_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_kernel3_x1_fu_118_C_ce0 : STD_LOGIC;
    signal grp_kernel3_x1_fu_118_C_d0 : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_kernel3_x1_fu_118_C_we0 : STD_LOGIC;
    signal grp_kernel3_x1_fu_118_C_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_kernel3_x1_fu_118_C_ce1 : STD_LOGIC;
    signal grp_kernel3_x1_fu_118_C_d1 : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_kernel3_x1_fu_118_C_we1 : STD_LOGIC;
    signal grp_kernel3_x1_fu_118_ap_start : STD_LOGIC;
    signal grp_kernel3_x1_fu_118_ap_done : STD_LOGIC;
    signal grp_kernel3_x1_fu_118_ap_ready : STD_LOGIC;
    signal grp_kernel3_x1_fu_118_ap_idle : STD_LOGIC;
    signal grp_kernel3_x1_fu_118_ap_continue : STD_LOGIC;
    signal grp_kernel3_x2_fu_124_m_axi_gmem_C_AWVALID : STD_LOGIC;
    signal grp_kernel3_x2_fu_124_m_axi_gmem_C_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_kernel3_x2_fu_124_m_axi_gmem_C_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_kernel3_x2_fu_124_m_axi_gmem_C_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_kernel3_x2_fu_124_m_axi_gmem_C_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_kernel3_x2_fu_124_m_axi_gmem_C_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_kernel3_x2_fu_124_m_axi_gmem_C_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_kernel3_x2_fu_124_m_axi_gmem_C_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_kernel3_x2_fu_124_m_axi_gmem_C_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_kernel3_x2_fu_124_m_axi_gmem_C_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_kernel3_x2_fu_124_m_axi_gmem_C_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_kernel3_x2_fu_124_m_axi_gmem_C_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_kernel3_x2_fu_124_m_axi_gmem_C_WVALID : STD_LOGIC;
    signal grp_kernel3_x2_fu_124_m_axi_gmem_C_WDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_kernel3_x2_fu_124_m_axi_gmem_C_WSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_kernel3_x2_fu_124_m_axi_gmem_C_WLAST : STD_LOGIC;
    signal grp_kernel3_x2_fu_124_m_axi_gmem_C_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_kernel3_x2_fu_124_m_axi_gmem_C_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_kernel3_x2_fu_124_m_axi_gmem_C_ARVALID : STD_LOGIC;
    signal grp_kernel3_x2_fu_124_m_axi_gmem_C_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_kernel3_x2_fu_124_m_axi_gmem_C_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_kernel3_x2_fu_124_m_axi_gmem_C_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_kernel3_x2_fu_124_m_axi_gmem_C_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_kernel3_x2_fu_124_m_axi_gmem_C_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_kernel3_x2_fu_124_m_axi_gmem_C_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_kernel3_x2_fu_124_m_axi_gmem_C_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_kernel3_x2_fu_124_m_axi_gmem_C_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_kernel3_x2_fu_124_m_axi_gmem_C_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_kernel3_x2_fu_124_m_axi_gmem_C_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_kernel3_x2_fu_124_m_axi_gmem_C_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_kernel3_x2_fu_124_m_axi_gmem_C_RREADY : STD_LOGIC;
    signal grp_kernel3_x2_fu_124_m_axi_gmem_C_BREADY : STD_LOGIC;
    signal grp_kernel3_x2_fu_124_B_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_kernel3_x2_fu_124_B_ce0 : STD_LOGIC;
    signal grp_kernel3_x2_fu_124_B_d0 : STD_LOGIC_VECTOR (502 downto 0);
    signal grp_kernel3_x2_fu_124_B_we0 : STD_LOGIC;
    signal grp_kernel3_x2_fu_124_B_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_kernel3_x2_fu_124_B_ce1 : STD_LOGIC;
    signal grp_kernel3_x2_fu_124_B_d1 : STD_LOGIC_VECTOR (502 downto 0);
    signal grp_kernel3_x2_fu_124_B_we1 : STD_LOGIC;
    signal grp_kernel3_x2_fu_124_ap_start : STD_LOGIC;
    signal grp_kernel3_x2_fu_124_ap_done : STD_LOGIC;
    signal grp_kernel3_x2_fu_124_ap_ready : STD_LOGIC;
    signal grp_kernel3_x2_fu_124_ap_idle : STD_LOGIC;
    signal grp_kernel3_x2_fu_124_ap_continue : STD_LOGIC;
    signal grp_nondf_kernel_cov_x0_fu_132_ap_start : STD_LOGIC;
    signal grp_nondf_kernel_cov_x0_fu_132_ap_done : STD_LOGIC;
    signal grp_nondf_kernel_cov_x0_fu_132_ap_idle : STD_LOGIC;
    signal grp_nondf_kernel_cov_x0_fu_132_ap_ready : STD_LOGIC;
    signal grp_nondf_kernel_cov_x0_fu_132_xout_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_nondf_kernel_cov_x0_fu_132_xout_ce0 : STD_LOGIC;
    signal grp_nondf_kernel_cov_x0_fu_132_xin_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_nondf_kernel_cov_x0_fu_132_xin_ce0 : STD_LOGIC;
    signal grp_nondf_kernel_cov_x0_fu_132_xin_we0 : STD_LOGIC;
    signal grp_nondf_kernel_cov_x0_fu_132_xin_d0 : STD_LOGIC_VECTOR (502 downto 0);
    signal grp_nondf_kernel_cov_x0_fu_132_grp_fu_159_p_din0 : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_nondf_kernel_cov_x0_fu_132_grp_fu_159_p_din1 : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_nondf_kernel_cov_x0_fu_132_grp_fu_159_p_dout0 : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_nondf_kernel_cov_x0_fu_132_grp_fu_159_p_ce : STD_LOGIC;
    signal grp_nondf_kernel_cov_x0_fu_132_grp_fu_163_p_din0 : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_nondf_kernel_cov_x0_fu_132_grp_fu_163_p_din1 : STD_LOGIC_VECTOR (513 downto 0);
    signal grp_nondf_kernel_cov_x0_fu_132_grp_fu_163_p_dout0 : STD_LOGIC_VECTOR (1024 downto 0);
    signal grp_nondf_kernel_cov_x0_fu_132_grp_fu_163_p_ce : STD_LOGIC;
    signal grp_nondf_kernel_cov_x1_fu_138_ap_start : STD_LOGIC;
    signal grp_nondf_kernel_cov_x1_fu_138_ap_done : STD_LOGIC;
    signal grp_nondf_kernel_cov_x1_fu_138_ap_idle : STD_LOGIC;
    signal grp_nondf_kernel_cov_x1_fu_138_ap_ready : STD_LOGIC;
    signal grp_nondf_kernel_cov_x1_fu_138_xout_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_nondf_kernel_cov_x1_fu_138_xout_ce0 : STD_LOGIC;
    signal grp_nondf_kernel_cov_x1_fu_138_xin_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_nondf_kernel_cov_x1_fu_138_xin_ce0 : STD_LOGIC;
    signal grp_nondf_kernel_cov_x1_fu_138_xin_we0 : STD_LOGIC;
    signal grp_nondf_kernel_cov_x1_fu_138_xin_d0 : STD_LOGIC_VECTOR (502 downto 0);
    signal grp_nondf_kernel_cov_x1_fu_138_grp_fu_159_p_din0 : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_nondf_kernel_cov_x1_fu_138_grp_fu_159_p_din1 : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_nondf_kernel_cov_x1_fu_138_grp_fu_159_p_dout0 : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_nondf_kernel_cov_x1_fu_138_grp_fu_159_p_ce : STD_LOGIC;
    signal grp_nondf_kernel_cov_x1_fu_138_grp_fu_163_p_din0 : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_nondf_kernel_cov_x1_fu_138_grp_fu_163_p_din1 : STD_LOGIC_VECTOR (513 downto 0);
    signal grp_nondf_kernel_cov_x1_fu_138_grp_fu_163_p_dout0 : STD_LOGIC_VECTOR (1024 downto 0);
    signal grp_nondf_kernel_cov_x1_fu_138_grp_fu_163_p_ce : STD_LOGIC;
    signal grp_kernel3_x0_fu_104_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state1_ignore_call22 : BOOLEAN;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_sync_grp_kernel3_x0_fu_104_ap_ready : STD_LOGIC;
    signal ap_sync_grp_kernel3_x0_fu_104_ap_done : STD_LOGIC;
    signal ap_block_state2_on_subcall_done : BOOLEAN;
    signal ap_sync_reg_grp_kernel3_x0_fu_104_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_kernel3_x0_fu_104_ap_done : STD_LOGIC := '0';
    signal grp_kernel3_x1_fu_118_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_sync_grp_kernel3_x1_fu_118_ap_ready : STD_LOGIC;
    signal ap_sync_grp_kernel3_x1_fu_118_ap_done : STD_LOGIC;
    signal ap_block_state6_on_subcall_done : BOOLEAN;
    signal ap_sync_reg_grp_kernel3_x1_fu_118_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_kernel3_x1_fu_118_ap_done : STD_LOGIC := '0';
    signal grp_kernel3_x2_fu_124_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_sync_grp_kernel3_x2_fu_124_ap_ready : STD_LOGIC;
    signal ap_sync_grp_kernel3_x2_fu_124_ap_done : STD_LOGIC;
    signal ap_block_state10_on_subcall_done : BOOLEAN;
    signal ap_sync_reg_grp_kernel3_x2_fu_124_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_kernel3_x2_fu_124_ap_done : STD_LOGIC := '0';
    signal grp_nondf_kernel_cov_x0_fu_132_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_nondf_kernel_cov_x1_fu_138_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal grp_fu_159_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_fu_159_p0 : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_fu_159_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_fu_159_ce : STD_LOGIC;
    signal grp_fu_163_p2 : STD_LOGIC_VECTOR (1024 downto 0);
    signal grp_fu_163_p0 : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_fu_163_p1 : STD_LOGIC_VECTOR (513 downto 0);
    signal grp_fu_163_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component top_kernel3_x0 IS
    port (
        m_axi_gmem_A_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_A_AWREADY : IN STD_LOGIC;
        m_axi_gmem_A_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_A_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_A_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_A_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_A_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_A_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_A_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_A_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_A_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_A_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_A_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_A_WVALID : OUT STD_LOGIC;
        m_axi_gmem_A_WREADY : IN STD_LOGIC;
        m_axi_gmem_A_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_axi_gmem_A_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_A_WLAST : OUT STD_LOGIC;
        m_axi_gmem_A_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_A_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_A_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_A_ARREADY : IN STD_LOGIC;
        m_axi_gmem_A_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_A_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_A_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_A_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_A_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_A_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_A_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_A_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_A_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_A_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_A_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_A_RVALID : IN STD_LOGIC;
        m_axi_gmem_A_RREADY : OUT STD_LOGIC;
        m_axi_gmem_A_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        m_axi_gmem_A_RLAST : IN STD_LOGIC;
        m_axi_gmem_A_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_A_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_A_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_A_BVALID : IN STD_LOGIC;
        m_axi_gmem_A_BREADY : OUT STD_LOGIC;
        m_axi_gmem_A_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_A_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_A_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_B_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_B_AWREADY : IN STD_LOGIC;
        m_axi_gmem_B_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_B_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_B_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_B_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_B_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_B_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_B_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_B_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_B_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_B_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_B_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_B_WVALID : OUT STD_LOGIC;
        m_axi_gmem_B_WREADY : IN STD_LOGIC;
        m_axi_gmem_B_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_axi_gmem_B_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_B_WLAST : OUT STD_LOGIC;
        m_axi_gmem_B_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_B_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_B_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_B_ARREADY : IN STD_LOGIC;
        m_axi_gmem_B_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_B_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_B_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_B_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_B_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_B_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_B_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_B_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_B_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_B_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_B_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_B_RVALID : IN STD_LOGIC;
        m_axi_gmem_B_RREADY : OUT STD_LOGIC;
        m_axi_gmem_B_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        m_axi_gmem_B_RLAST : IN STD_LOGIC;
        m_axi_gmem_B_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_B_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_B_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_B_BVALID : IN STD_LOGIC;
        m_axi_gmem_B_BREADY : OUT STD_LOGIC;
        m_axi_gmem_B_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_B_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_B_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        A : IN STD_LOGIC_VECTOR (63 downto 0);
        B : IN STD_LOGIC_VECTOR (63 downto 0);
        C_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        C_ce0 : OUT STD_LOGIC;
        C_d0 : OUT STD_LOGIC_VECTOR (511 downto 0);
        C_q0 : IN STD_LOGIC_VECTOR (511 downto 0);
        C_we0 : OUT STD_LOGIC;
        C_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        C_ce1 : OUT STD_LOGIC;
        C_d1 : OUT STD_LOGIC_VECTOR (511 downto 0);
        C_q1 : IN STD_LOGIC_VECTOR (511 downto 0);
        C_we1 : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        A_ap_vld : IN STD_LOGIC;
        B_ap_vld : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component top_kernel3_x1 IS
    port (
        B_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        B_ce0 : OUT STD_LOGIC;
        B_d0 : OUT STD_LOGIC_VECTOR (502 downto 0);
        B_q0 : IN STD_LOGIC_VECTOR (502 downto 0);
        B_we0 : OUT STD_LOGIC;
        B_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        B_ce1 : OUT STD_LOGIC;
        B_d1 : OUT STD_LOGIC_VECTOR (502 downto 0);
        B_q1 : IN STD_LOGIC_VECTOR (502 downto 0);
        B_we1 : OUT STD_LOGIC;
        C_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        C_ce0 : OUT STD_LOGIC;
        C_d0 : OUT STD_LOGIC_VECTOR (511 downto 0);
        C_q0 : IN STD_LOGIC_VECTOR (511 downto 0);
        C_we0 : OUT STD_LOGIC;
        C_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        C_ce1 : OUT STD_LOGIC;
        C_d1 : OUT STD_LOGIC_VECTOR (511 downto 0);
        C_q1 : IN STD_LOGIC_VECTOR (511 downto 0);
        C_we1 : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component top_kernel3_x2 IS
    port (
        m_axi_gmem_C_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_C_AWREADY : IN STD_LOGIC;
        m_axi_gmem_C_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_C_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_C_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_C_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_C_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_C_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_C_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_C_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_C_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_C_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_C_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_C_WVALID : OUT STD_LOGIC;
        m_axi_gmem_C_WREADY : IN STD_LOGIC;
        m_axi_gmem_C_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_axi_gmem_C_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_C_WLAST : OUT STD_LOGIC;
        m_axi_gmem_C_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_C_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_C_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_C_ARREADY : IN STD_LOGIC;
        m_axi_gmem_C_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_C_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_C_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_C_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_C_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_C_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_C_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_C_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_C_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_C_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_C_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_C_RVALID : IN STD_LOGIC;
        m_axi_gmem_C_RREADY : OUT STD_LOGIC;
        m_axi_gmem_C_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        m_axi_gmem_C_RLAST : IN STD_LOGIC;
        m_axi_gmem_C_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_C_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_C_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_C_BVALID : IN STD_LOGIC;
        m_axi_gmem_C_BREADY : OUT STD_LOGIC;
        m_axi_gmem_C_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_C_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_C_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        B_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        B_ce0 : OUT STD_LOGIC;
        B_d0 : OUT STD_LOGIC_VECTOR (502 downto 0);
        B_q0 : IN STD_LOGIC_VECTOR (502 downto 0);
        B_we0 : OUT STD_LOGIC;
        B_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        B_ce1 : OUT STD_LOGIC;
        B_d1 : OUT STD_LOGIC_VECTOR (502 downto 0);
        B_q1 : IN STD_LOGIC_VECTOR (502 downto 0);
        B_we1 : OUT STD_LOGIC;
        C : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        C_ap_vld : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component top_nondf_kernel_cov_x0 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        xout_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        xout_ce0 : OUT STD_LOGIC;
        xout_q0 : IN STD_LOGIC_VECTOR (511 downto 0);
        xin_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        xin_ce0 : OUT STD_LOGIC;
        xin_we0 : OUT STD_LOGIC;
        xin_d0 : OUT STD_LOGIC_VECTOR (502 downto 0);
        grp_fu_159_p_din0 : OUT STD_LOGIC_VECTOR (511 downto 0);
        grp_fu_159_p_din1 : OUT STD_LOGIC_VECTOR (511 downto 0);
        grp_fu_159_p_dout0 : IN STD_LOGIC_VECTOR (511 downto 0);
        grp_fu_159_p_ce : OUT STD_LOGIC;
        grp_fu_163_p_din0 : OUT STD_LOGIC_VECTOR (511 downto 0);
        grp_fu_163_p_din1 : OUT STD_LOGIC_VECTOR (513 downto 0);
        grp_fu_163_p_dout0 : IN STD_LOGIC_VECTOR (1024 downto 0);
        grp_fu_163_p_ce : OUT STD_LOGIC );
    end component;


    component top_nondf_kernel_cov_x1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        xout_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        xout_ce0 : OUT STD_LOGIC;
        xout_q0 : IN STD_LOGIC_VECTOR (511 downto 0);
        xin_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        xin_ce0 : OUT STD_LOGIC;
        xin_we0 : OUT STD_LOGIC;
        xin_d0 : OUT STD_LOGIC_VECTOR (502 downto 0);
        grp_fu_159_p_din0 : OUT STD_LOGIC_VECTOR (511 downto 0);
        grp_fu_159_p_din1 : OUT STD_LOGIC_VECTOR (511 downto 0);
        grp_fu_159_p_dout0 : IN STD_LOGIC_VECTOR (511 downto 0);
        grp_fu_159_p_ce : OUT STD_LOGIC;
        grp_fu_163_p_din0 : OUT STD_LOGIC_VECTOR (511 downto 0);
        grp_fu_163_p_din1 : OUT STD_LOGIC_VECTOR (513 downto 0);
        grp_fu_163_p_dout0 : IN STD_LOGIC_VECTOR (1024 downto 0);
        grp_fu_163_p_ce : OUT STD_LOGIC );
    end component;


    component top_mul_512s_512s_512_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (511 downto 0);
        din1 : IN STD_LOGIC_VECTOR (511 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (511 downto 0) );
    end component;


    component top_mul_512ns_514ns_1025_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (511 downto 0);
        din1 : IN STD_LOGIC_VECTOR (513 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (1024 downto 0) );
    end component;


    component top_temp_xout0_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (511 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (511 downto 0) );
    end component;


    component top_temp_xin1_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (502 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (502 downto 0);
        address1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (502 downto 0) );
    end component;


    component top_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        A : OUT STD_LOGIC_VECTOR (63 downto 0);
        B : OUT STD_LOGIC_VECTOR (63 downto 0);
        C : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_continue : OUT STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component top_gmem_A_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component top_gmem_B_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component top_gmem_C_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    control_s_axi_U : component top_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        A => A,
        B => B,
        C => C,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_continue => ap_continue,
        ap_idle => ap_idle);

    gmem_A_m_axi_U : component top_gmem_A_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_DW => 512,
        USER_AW => 64,
        USER_MAXREQS => 69,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_A_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_A_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_A_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_A_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_A_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_A_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_A_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_A_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_A_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_A_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_A_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_A_AWVALID,
        AWREADY => m_axi_gmem_A_AWREADY,
        AWADDR => m_axi_gmem_A_AWADDR,
        AWID => m_axi_gmem_A_AWID,
        AWLEN => m_axi_gmem_A_AWLEN,
        AWSIZE => m_axi_gmem_A_AWSIZE,
        AWBURST => m_axi_gmem_A_AWBURST,
        AWLOCK => m_axi_gmem_A_AWLOCK,
        AWCACHE => m_axi_gmem_A_AWCACHE,
        AWPROT => m_axi_gmem_A_AWPROT,
        AWQOS => m_axi_gmem_A_AWQOS,
        AWREGION => m_axi_gmem_A_AWREGION,
        AWUSER => m_axi_gmem_A_AWUSER,
        WVALID => m_axi_gmem_A_WVALID,
        WREADY => m_axi_gmem_A_WREADY,
        WDATA => m_axi_gmem_A_WDATA,
        WSTRB => m_axi_gmem_A_WSTRB,
        WLAST => m_axi_gmem_A_WLAST,
        WID => m_axi_gmem_A_WID,
        WUSER => m_axi_gmem_A_WUSER,
        ARVALID => m_axi_gmem_A_ARVALID,
        ARREADY => m_axi_gmem_A_ARREADY,
        ARADDR => m_axi_gmem_A_ARADDR,
        ARID => m_axi_gmem_A_ARID,
        ARLEN => m_axi_gmem_A_ARLEN,
        ARSIZE => m_axi_gmem_A_ARSIZE,
        ARBURST => m_axi_gmem_A_ARBURST,
        ARLOCK => m_axi_gmem_A_ARLOCK,
        ARCACHE => m_axi_gmem_A_ARCACHE,
        ARPROT => m_axi_gmem_A_ARPROT,
        ARQOS => m_axi_gmem_A_ARQOS,
        ARREGION => m_axi_gmem_A_ARREGION,
        ARUSER => m_axi_gmem_A_ARUSER,
        RVALID => m_axi_gmem_A_RVALID,
        RREADY => m_axi_gmem_A_RREADY,
        RDATA => m_axi_gmem_A_RDATA,
        RLAST => m_axi_gmem_A_RLAST,
        RID => m_axi_gmem_A_RID,
        RUSER => m_axi_gmem_A_RUSER,
        RRESP => m_axi_gmem_A_RRESP,
        BVALID => m_axi_gmem_A_BVALID,
        BREADY => m_axi_gmem_A_BREADY,
        BRESP => m_axi_gmem_A_BRESP,
        BID => m_axi_gmem_A_BID,
        BUSER => m_axi_gmem_A_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_A_ARVALID,
        I_ARREADY => gmem_A_ARREADY,
        I_ARADDR => grp_kernel3_x0_fu_104_m_axi_gmem_A_ARADDR,
        I_ARID => grp_kernel3_x0_fu_104_m_axi_gmem_A_ARID,
        I_ARLEN => grp_kernel3_x0_fu_104_m_axi_gmem_A_ARLEN,
        I_ARSIZE => grp_kernel3_x0_fu_104_m_axi_gmem_A_ARSIZE,
        I_ARLOCK => grp_kernel3_x0_fu_104_m_axi_gmem_A_ARLOCK,
        I_ARCACHE => grp_kernel3_x0_fu_104_m_axi_gmem_A_ARCACHE,
        I_ARQOS => grp_kernel3_x0_fu_104_m_axi_gmem_A_ARQOS,
        I_ARPROT => grp_kernel3_x0_fu_104_m_axi_gmem_A_ARPROT,
        I_ARUSER => grp_kernel3_x0_fu_104_m_axi_gmem_A_ARUSER,
        I_ARBURST => grp_kernel3_x0_fu_104_m_axi_gmem_A_ARBURST,
        I_ARREGION => grp_kernel3_x0_fu_104_m_axi_gmem_A_ARREGION,
        I_RVALID => gmem_A_RVALID,
        I_RREADY => gmem_A_RREADY,
        I_RDATA => gmem_A_RDATA,
        I_RID => gmem_A_RID,
        I_RUSER => gmem_A_RUSER,
        I_RRESP => gmem_A_RRESP,
        I_RLAST => gmem_A_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem_A_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem_A_WREADY,
        I_WDATA => ap_const_lv512_lc_1,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv64_0,
        I_BVALID => gmem_A_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => gmem_A_BRESP,
        I_BID => gmem_A_BID,
        I_BUSER => gmem_A_BUSER);

    gmem_B_m_axi_U : component top_gmem_B_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_DW => 512,
        USER_AW => 64,
        USER_MAXREQS => 69,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_B_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_B_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_B_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_B_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_B_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_B_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_B_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_B_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_B_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_B_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_B_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_B_AWVALID,
        AWREADY => m_axi_gmem_B_AWREADY,
        AWADDR => m_axi_gmem_B_AWADDR,
        AWID => m_axi_gmem_B_AWID,
        AWLEN => m_axi_gmem_B_AWLEN,
        AWSIZE => m_axi_gmem_B_AWSIZE,
        AWBURST => m_axi_gmem_B_AWBURST,
        AWLOCK => m_axi_gmem_B_AWLOCK,
        AWCACHE => m_axi_gmem_B_AWCACHE,
        AWPROT => m_axi_gmem_B_AWPROT,
        AWQOS => m_axi_gmem_B_AWQOS,
        AWREGION => m_axi_gmem_B_AWREGION,
        AWUSER => m_axi_gmem_B_AWUSER,
        WVALID => m_axi_gmem_B_WVALID,
        WREADY => m_axi_gmem_B_WREADY,
        WDATA => m_axi_gmem_B_WDATA,
        WSTRB => m_axi_gmem_B_WSTRB,
        WLAST => m_axi_gmem_B_WLAST,
        WID => m_axi_gmem_B_WID,
        WUSER => m_axi_gmem_B_WUSER,
        ARVALID => m_axi_gmem_B_ARVALID,
        ARREADY => m_axi_gmem_B_ARREADY,
        ARADDR => m_axi_gmem_B_ARADDR,
        ARID => m_axi_gmem_B_ARID,
        ARLEN => m_axi_gmem_B_ARLEN,
        ARSIZE => m_axi_gmem_B_ARSIZE,
        ARBURST => m_axi_gmem_B_ARBURST,
        ARLOCK => m_axi_gmem_B_ARLOCK,
        ARCACHE => m_axi_gmem_B_ARCACHE,
        ARPROT => m_axi_gmem_B_ARPROT,
        ARQOS => m_axi_gmem_B_ARQOS,
        ARREGION => m_axi_gmem_B_ARREGION,
        ARUSER => m_axi_gmem_B_ARUSER,
        RVALID => m_axi_gmem_B_RVALID,
        RREADY => m_axi_gmem_B_RREADY,
        RDATA => m_axi_gmem_B_RDATA,
        RLAST => m_axi_gmem_B_RLAST,
        RID => m_axi_gmem_B_RID,
        RUSER => m_axi_gmem_B_RUSER,
        RRESP => m_axi_gmem_B_RRESP,
        BVALID => m_axi_gmem_B_BVALID,
        BREADY => m_axi_gmem_B_BREADY,
        BRESP => m_axi_gmem_B_BRESP,
        BID => m_axi_gmem_B_BID,
        BUSER => m_axi_gmem_B_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_B_ARVALID,
        I_ARREADY => gmem_B_ARREADY,
        I_ARADDR => grp_kernel3_x0_fu_104_m_axi_gmem_B_ARADDR,
        I_ARID => grp_kernel3_x0_fu_104_m_axi_gmem_B_ARID,
        I_ARLEN => grp_kernel3_x0_fu_104_m_axi_gmem_B_ARLEN,
        I_ARSIZE => grp_kernel3_x0_fu_104_m_axi_gmem_B_ARSIZE,
        I_ARLOCK => grp_kernel3_x0_fu_104_m_axi_gmem_B_ARLOCK,
        I_ARCACHE => grp_kernel3_x0_fu_104_m_axi_gmem_B_ARCACHE,
        I_ARQOS => grp_kernel3_x0_fu_104_m_axi_gmem_B_ARQOS,
        I_ARPROT => grp_kernel3_x0_fu_104_m_axi_gmem_B_ARPROT,
        I_ARUSER => grp_kernel3_x0_fu_104_m_axi_gmem_B_ARUSER,
        I_ARBURST => grp_kernel3_x0_fu_104_m_axi_gmem_B_ARBURST,
        I_ARREGION => grp_kernel3_x0_fu_104_m_axi_gmem_B_ARREGION,
        I_RVALID => gmem_B_RVALID,
        I_RREADY => gmem_B_RREADY,
        I_RDATA => gmem_B_RDATA,
        I_RID => gmem_B_RID,
        I_RUSER => gmem_B_RUSER,
        I_RRESP => gmem_B_RRESP,
        I_RLAST => gmem_B_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem_B_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem_B_WREADY,
        I_WDATA => ap_const_lv512_lc_1,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv64_0,
        I_BVALID => gmem_B_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => gmem_B_BRESP,
        I_BID => gmem_B_BID,
        I_BUSER => gmem_B_BUSER);

    gmem_C_m_axi_U : component top_gmem_C_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_DW => 512,
        USER_AW => 64,
        USER_MAXREQS => 69,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_C_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_C_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_C_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_C_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_C_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_C_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_C_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_C_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_C_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_C_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_C_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_C_AWVALID,
        AWREADY => m_axi_gmem_C_AWREADY,
        AWADDR => m_axi_gmem_C_AWADDR,
        AWID => m_axi_gmem_C_AWID,
        AWLEN => m_axi_gmem_C_AWLEN,
        AWSIZE => m_axi_gmem_C_AWSIZE,
        AWBURST => m_axi_gmem_C_AWBURST,
        AWLOCK => m_axi_gmem_C_AWLOCK,
        AWCACHE => m_axi_gmem_C_AWCACHE,
        AWPROT => m_axi_gmem_C_AWPROT,
        AWQOS => m_axi_gmem_C_AWQOS,
        AWREGION => m_axi_gmem_C_AWREGION,
        AWUSER => m_axi_gmem_C_AWUSER,
        WVALID => m_axi_gmem_C_WVALID,
        WREADY => m_axi_gmem_C_WREADY,
        WDATA => m_axi_gmem_C_WDATA,
        WSTRB => m_axi_gmem_C_WSTRB,
        WLAST => m_axi_gmem_C_WLAST,
        WID => m_axi_gmem_C_WID,
        WUSER => m_axi_gmem_C_WUSER,
        ARVALID => m_axi_gmem_C_ARVALID,
        ARREADY => m_axi_gmem_C_ARREADY,
        ARADDR => m_axi_gmem_C_ARADDR,
        ARID => m_axi_gmem_C_ARID,
        ARLEN => m_axi_gmem_C_ARLEN,
        ARSIZE => m_axi_gmem_C_ARSIZE,
        ARBURST => m_axi_gmem_C_ARBURST,
        ARLOCK => m_axi_gmem_C_ARLOCK,
        ARCACHE => m_axi_gmem_C_ARCACHE,
        ARPROT => m_axi_gmem_C_ARPROT,
        ARQOS => m_axi_gmem_C_ARQOS,
        ARREGION => m_axi_gmem_C_ARREGION,
        ARUSER => m_axi_gmem_C_ARUSER,
        RVALID => m_axi_gmem_C_RVALID,
        RREADY => m_axi_gmem_C_RREADY,
        RDATA => m_axi_gmem_C_RDATA,
        RLAST => m_axi_gmem_C_RLAST,
        RID => m_axi_gmem_C_RID,
        RUSER => m_axi_gmem_C_RUSER,
        RRESP => m_axi_gmem_C_RRESP,
        BVALID => m_axi_gmem_C_BVALID,
        BREADY => m_axi_gmem_C_BREADY,
        BRESP => m_axi_gmem_C_BRESP,
        BID => m_axi_gmem_C_BID,
        BUSER => m_axi_gmem_C_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => gmem_C_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem_C_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => gmem_C_RDATA,
        I_RID => gmem_C_RID,
        I_RUSER => gmem_C_RUSER,
        I_RRESP => gmem_C_RRESP,
        I_RLAST => gmem_C_RLAST,
        I_AWVALID => gmem_C_AWVALID,
        I_AWREADY => gmem_C_AWREADY,
        I_AWADDR => grp_kernel3_x2_fu_124_m_axi_gmem_C_AWADDR,
        I_AWID => grp_kernel3_x2_fu_124_m_axi_gmem_C_AWID,
        I_AWLEN => grp_kernel3_x2_fu_124_m_axi_gmem_C_AWLEN,
        I_AWSIZE => grp_kernel3_x2_fu_124_m_axi_gmem_C_AWSIZE,
        I_AWLOCK => grp_kernel3_x2_fu_124_m_axi_gmem_C_AWLOCK,
        I_AWCACHE => grp_kernel3_x2_fu_124_m_axi_gmem_C_AWCACHE,
        I_AWQOS => grp_kernel3_x2_fu_124_m_axi_gmem_C_AWQOS,
        I_AWPROT => grp_kernel3_x2_fu_124_m_axi_gmem_C_AWPROT,
        I_AWUSER => grp_kernel3_x2_fu_124_m_axi_gmem_C_AWUSER,
        I_AWBURST => grp_kernel3_x2_fu_124_m_axi_gmem_C_AWBURST,
        I_AWREGION => grp_kernel3_x2_fu_124_m_axi_gmem_C_AWREGION,
        I_WVALID => gmem_C_WVALID,
        I_WREADY => gmem_C_WREADY,
        I_WDATA => grp_kernel3_x2_fu_124_m_axi_gmem_C_WDATA,
        I_WID => grp_kernel3_x2_fu_124_m_axi_gmem_C_WID,
        I_WUSER => grp_kernel3_x2_fu_124_m_axi_gmem_C_WUSER,
        I_WLAST => grp_kernel3_x2_fu_124_m_axi_gmem_C_WLAST,
        I_WSTRB => grp_kernel3_x2_fu_124_m_axi_gmem_C_WSTRB,
        I_BVALID => gmem_C_BVALID,
        I_BREADY => gmem_C_BREADY,
        I_BRESP => gmem_C_BRESP,
        I_BID => gmem_C_BID,
        I_BUSER => gmem_C_BUSER);

    temp_xout0_V_U : component top_temp_xout0_V
    generic map (
        DataWidth => 512,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => temp_xout0_V_address0,
        ce0 => temp_xout0_V_ce0,
        we0 => temp_xout0_V_we0,
        d0 => grp_kernel3_x0_fu_104_C_d0,
        q0 => temp_xout0_V_q0);

    temp_xin1_V_U : component top_temp_xin1_V
    generic map (
        DataWidth => 503,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => temp_xin1_V_address0,
        ce0 => temp_xin1_V_ce0,
        we0 => temp_xin1_V_we0,
        d0 => grp_nondf_kernel_cov_x0_fu_132_xin_d0,
        q0 => temp_xin1_V_q0,
        address1 => grp_kernel3_x1_fu_118_B_address1,
        ce1 => temp_xin1_V_ce1,
        q1 => temp_xin1_V_q1);

    temp_xout1_V_U : component top_temp_xout0_V
    generic map (
        DataWidth => 512,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => temp_xout1_V_address0,
        ce0 => temp_xout1_V_ce0,
        we0 => temp_xout1_V_we0,
        d0 => grp_kernel3_x1_fu_118_C_d0,
        q0 => temp_xout1_V_q0);

    temp_xin2_V_U : component top_temp_xin1_V
    generic map (
        DataWidth => 503,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => temp_xin2_V_address0,
        ce0 => temp_xin2_V_ce0,
        we0 => temp_xin2_V_we0,
        d0 => grp_nondf_kernel_cov_x1_fu_138_xin_d0,
        q0 => temp_xin2_V_q0,
        address1 => grp_kernel3_x2_fu_124_B_address1,
        ce1 => temp_xin2_V_ce1,
        q1 => temp_xin2_V_q1);

    grp_kernel3_x0_fu_104 : component top_kernel3_x0
    port map (
        m_axi_gmem_A_AWVALID => grp_kernel3_x0_fu_104_m_axi_gmem_A_AWVALID,
        m_axi_gmem_A_AWREADY => ap_const_logic_0,
        m_axi_gmem_A_AWADDR => grp_kernel3_x0_fu_104_m_axi_gmem_A_AWADDR,
        m_axi_gmem_A_AWID => grp_kernel3_x0_fu_104_m_axi_gmem_A_AWID,
        m_axi_gmem_A_AWLEN => grp_kernel3_x0_fu_104_m_axi_gmem_A_AWLEN,
        m_axi_gmem_A_AWSIZE => grp_kernel3_x0_fu_104_m_axi_gmem_A_AWSIZE,
        m_axi_gmem_A_AWBURST => grp_kernel3_x0_fu_104_m_axi_gmem_A_AWBURST,
        m_axi_gmem_A_AWLOCK => grp_kernel3_x0_fu_104_m_axi_gmem_A_AWLOCK,
        m_axi_gmem_A_AWCACHE => grp_kernel3_x0_fu_104_m_axi_gmem_A_AWCACHE,
        m_axi_gmem_A_AWPROT => grp_kernel3_x0_fu_104_m_axi_gmem_A_AWPROT,
        m_axi_gmem_A_AWQOS => grp_kernel3_x0_fu_104_m_axi_gmem_A_AWQOS,
        m_axi_gmem_A_AWREGION => grp_kernel3_x0_fu_104_m_axi_gmem_A_AWREGION,
        m_axi_gmem_A_AWUSER => grp_kernel3_x0_fu_104_m_axi_gmem_A_AWUSER,
        m_axi_gmem_A_WVALID => grp_kernel3_x0_fu_104_m_axi_gmem_A_WVALID,
        m_axi_gmem_A_WREADY => ap_const_logic_0,
        m_axi_gmem_A_WDATA => grp_kernel3_x0_fu_104_m_axi_gmem_A_WDATA,
        m_axi_gmem_A_WSTRB => grp_kernel3_x0_fu_104_m_axi_gmem_A_WSTRB,
        m_axi_gmem_A_WLAST => grp_kernel3_x0_fu_104_m_axi_gmem_A_WLAST,
        m_axi_gmem_A_WID => grp_kernel3_x0_fu_104_m_axi_gmem_A_WID,
        m_axi_gmem_A_WUSER => grp_kernel3_x0_fu_104_m_axi_gmem_A_WUSER,
        m_axi_gmem_A_ARVALID => grp_kernel3_x0_fu_104_m_axi_gmem_A_ARVALID,
        m_axi_gmem_A_ARREADY => gmem_A_ARREADY,
        m_axi_gmem_A_ARADDR => grp_kernel3_x0_fu_104_m_axi_gmem_A_ARADDR,
        m_axi_gmem_A_ARID => grp_kernel3_x0_fu_104_m_axi_gmem_A_ARID,
        m_axi_gmem_A_ARLEN => grp_kernel3_x0_fu_104_m_axi_gmem_A_ARLEN,
        m_axi_gmem_A_ARSIZE => grp_kernel3_x0_fu_104_m_axi_gmem_A_ARSIZE,
        m_axi_gmem_A_ARBURST => grp_kernel3_x0_fu_104_m_axi_gmem_A_ARBURST,
        m_axi_gmem_A_ARLOCK => grp_kernel3_x0_fu_104_m_axi_gmem_A_ARLOCK,
        m_axi_gmem_A_ARCACHE => grp_kernel3_x0_fu_104_m_axi_gmem_A_ARCACHE,
        m_axi_gmem_A_ARPROT => grp_kernel3_x0_fu_104_m_axi_gmem_A_ARPROT,
        m_axi_gmem_A_ARQOS => grp_kernel3_x0_fu_104_m_axi_gmem_A_ARQOS,
        m_axi_gmem_A_ARREGION => grp_kernel3_x0_fu_104_m_axi_gmem_A_ARREGION,
        m_axi_gmem_A_ARUSER => grp_kernel3_x0_fu_104_m_axi_gmem_A_ARUSER,
        m_axi_gmem_A_RVALID => gmem_A_RVALID,
        m_axi_gmem_A_RREADY => grp_kernel3_x0_fu_104_m_axi_gmem_A_RREADY,
        m_axi_gmem_A_RDATA => gmem_A_RDATA,
        m_axi_gmem_A_RLAST => gmem_A_RLAST,
        m_axi_gmem_A_RID => gmem_A_RID,
        m_axi_gmem_A_RUSER => gmem_A_RUSER,
        m_axi_gmem_A_RRESP => gmem_A_RRESP,
        m_axi_gmem_A_BVALID => ap_const_logic_0,
        m_axi_gmem_A_BREADY => grp_kernel3_x0_fu_104_m_axi_gmem_A_BREADY,
        m_axi_gmem_A_BRESP => ap_const_lv2_0,
        m_axi_gmem_A_BID => ap_const_lv1_0,
        m_axi_gmem_A_BUSER => ap_const_lv1_0,
        m_axi_gmem_B_AWVALID => grp_kernel3_x0_fu_104_m_axi_gmem_B_AWVALID,
        m_axi_gmem_B_AWREADY => ap_const_logic_0,
        m_axi_gmem_B_AWADDR => grp_kernel3_x0_fu_104_m_axi_gmem_B_AWADDR,
        m_axi_gmem_B_AWID => grp_kernel3_x0_fu_104_m_axi_gmem_B_AWID,
        m_axi_gmem_B_AWLEN => grp_kernel3_x0_fu_104_m_axi_gmem_B_AWLEN,
        m_axi_gmem_B_AWSIZE => grp_kernel3_x0_fu_104_m_axi_gmem_B_AWSIZE,
        m_axi_gmem_B_AWBURST => grp_kernel3_x0_fu_104_m_axi_gmem_B_AWBURST,
        m_axi_gmem_B_AWLOCK => grp_kernel3_x0_fu_104_m_axi_gmem_B_AWLOCK,
        m_axi_gmem_B_AWCACHE => grp_kernel3_x0_fu_104_m_axi_gmem_B_AWCACHE,
        m_axi_gmem_B_AWPROT => grp_kernel3_x0_fu_104_m_axi_gmem_B_AWPROT,
        m_axi_gmem_B_AWQOS => grp_kernel3_x0_fu_104_m_axi_gmem_B_AWQOS,
        m_axi_gmem_B_AWREGION => grp_kernel3_x0_fu_104_m_axi_gmem_B_AWREGION,
        m_axi_gmem_B_AWUSER => grp_kernel3_x0_fu_104_m_axi_gmem_B_AWUSER,
        m_axi_gmem_B_WVALID => grp_kernel3_x0_fu_104_m_axi_gmem_B_WVALID,
        m_axi_gmem_B_WREADY => ap_const_logic_0,
        m_axi_gmem_B_WDATA => grp_kernel3_x0_fu_104_m_axi_gmem_B_WDATA,
        m_axi_gmem_B_WSTRB => grp_kernel3_x0_fu_104_m_axi_gmem_B_WSTRB,
        m_axi_gmem_B_WLAST => grp_kernel3_x0_fu_104_m_axi_gmem_B_WLAST,
        m_axi_gmem_B_WID => grp_kernel3_x0_fu_104_m_axi_gmem_B_WID,
        m_axi_gmem_B_WUSER => grp_kernel3_x0_fu_104_m_axi_gmem_B_WUSER,
        m_axi_gmem_B_ARVALID => grp_kernel3_x0_fu_104_m_axi_gmem_B_ARVALID,
        m_axi_gmem_B_ARREADY => gmem_B_ARREADY,
        m_axi_gmem_B_ARADDR => grp_kernel3_x0_fu_104_m_axi_gmem_B_ARADDR,
        m_axi_gmem_B_ARID => grp_kernel3_x0_fu_104_m_axi_gmem_B_ARID,
        m_axi_gmem_B_ARLEN => grp_kernel3_x0_fu_104_m_axi_gmem_B_ARLEN,
        m_axi_gmem_B_ARSIZE => grp_kernel3_x0_fu_104_m_axi_gmem_B_ARSIZE,
        m_axi_gmem_B_ARBURST => grp_kernel3_x0_fu_104_m_axi_gmem_B_ARBURST,
        m_axi_gmem_B_ARLOCK => grp_kernel3_x0_fu_104_m_axi_gmem_B_ARLOCK,
        m_axi_gmem_B_ARCACHE => grp_kernel3_x0_fu_104_m_axi_gmem_B_ARCACHE,
        m_axi_gmem_B_ARPROT => grp_kernel3_x0_fu_104_m_axi_gmem_B_ARPROT,
        m_axi_gmem_B_ARQOS => grp_kernel3_x0_fu_104_m_axi_gmem_B_ARQOS,
        m_axi_gmem_B_ARREGION => grp_kernel3_x0_fu_104_m_axi_gmem_B_ARREGION,
        m_axi_gmem_B_ARUSER => grp_kernel3_x0_fu_104_m_axi_gmem_B_ARUSER,
        m_axi_gmem_B_RVALID => gmem_B_RVALID,
        m_axi_gmem_B_RREADY => grp_kernel3_x0_fu_104_m_axi_gmem_B_RREADY,
        m_axi_gmem_B_RDATA => gmem_B_RDATA,
        m_axi_gmem_B_RLAST => gmem_B_RLAST,
        m_axi_gmem_B_RID => gmem_B_RID,
        m_axi_gmem_B_RUSER => gmem_B_RUSER,
        m_axi_gmem_B_RRESP => gmem_B_RRESP,
        m_axi_gmem_B_BVALID => ap_const_logic_0,
        m_axi_gmem_B_BREADY => grp_kernel3_x0_fu_104_m_axi_gmem_B_BREADY,
        m_axi_gmem_B_BRESP => ap_const_lv2_0,
        m_axi_gmem_B_BID => ap_const_lv1_0,
        m_axi_gmem_B_BUSER => ap_const_lv1_0,
        A => A_read_reg_154,
        B => B_read_reg_149,
        C_address0 => grp_kernel3_x0_fu_104_C_address0,
        C_ce0 => grp_kernel3_x0_fu_104_C_ce0,
        C_d0 => grp_kernel3_x0_fu_104_C_d0,
        C_q0 => ap_const_lv512_lc_1,
        C_we0 => grp_kernel3_x0_fu_104_C_we0,
        C_address1 => grp_kernel3_x0_fu_104_C_address1,
        C_ce1 => grp_kernel3_x0_fu_104_C_ce1,
        C_d1 => grp_kernel3_x0_fu_104_C_d1,
        C_q1 => ap_const_lv512_lc_1,
        C_we1 => grp_kernel3_x0_fu_104_C_we1,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        A_ap_vld => ap_const_logic_1,
        B_ap_vld => ap_const_logic_1,
        ap_start => grp_kernel3_x0_fu_104_ap_start,
        ap_done => grp_kernel3_x0_fu_104_ap_done,
        ap_ready => grp_kernel3_x0_fu_104_ap_ready,
        ap_idle => grp_kernel3_x0_fu_104_ap_idle,
        ap_continue => grp_kernel3_x0_fu_104_ap_continue);

    grp_kernel3_x1_fu_118 : component top_kernel3_x1
    port map (
        B_address0 => grp_kernel3_x1_fu_118_B_address0,
        B_ce0 => grp_kernel3_x1_fu_118_B_ce0,
        B_d0 => grp_kernel3_x1_fu_118_B_d0,
        B_q0 => temp_xin1_V_q0,
        B_we0 => grp_kernel3_x1_fu_118_B_we0,
        B_address1 => grp_kernel3_x1_fu_118_B_address1,
        B_ce1 => grp_kernel3_x1_fu_118_B_ce1,
        B_d1 => grp_kernel3_x1_fu_118_B_d1,
        B_q1 => temp_xin1_V_q1,
        B_we1 => grp_kernel3_x1_fu_118_B_we1,
        C_address0 => grp_kernel3_x1_fu_118_C_address0,
        C_ce0 => grp_kernel3_x1_fu_118_C_ce0,
        C_d0 => grp_kernel3_x1_fu_118_C_d0,
        C_q0 => ap_const_lv512_lc_1,
        C_we0 => grp_kernel3_x1_fu_118_C_we0,
        C_address1 => grp_kernel3_x1_fu_118_C_address1,
        C_ce1 => grp_kernel3_x1_fu_118_C_ce1,
        C_d1 => grp_kernel3_x1_fu_118_C_d1,
        C_q1 => ap_const_lv512_lc_1,
        C_we1 => grp_kernel3_x1_fu_118_C_we1,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_kernel3_x1_fu_118_ap_start,
        ap_done => grp_kernel3_x1_fu_118_ap_done,
        ap_ready => grp_kernel3_x1_fu_118_ap_ready,
        ap_idle => grp_kernel3_x1_fu_118_ap_idle,
        ap_continue => grp_kernel3_x1_fu_118_ap_continue);

    grp_kernel3_x2_fu_124 : component top_kernel3_x2
    port map (
        m_axi_gmem_C_AWVALID => grp_kernel3_x2_fu_124_m_axi_gmem_C_AWVALID,
        m_axi_gmem_C_AWREADY => gmem_C_AWREADY,
        m_axi_gmem_C_AWADDR => grp_kernel3_x2_fu_124_m_axi_gmem_C_AWADDR,
        m_axi_gmem_C_AWID => grp_kernel3_x2_fu_124_m_axi_gmem_C_AWID,
        m_axi_gmem_C_AWLEN => grp_kernel3_x2_fu_124_m_axi_gmem_C_AWLEN,
        m_axi_gmem_C_AWSIZE => grp_kernel3_x2_fu_124_m_axi_gmem_C_AWSIZE,
        m_axi_gmem_C_AWBURST => grp_kernel3_x2_fu_124_m_axi_gmem_C_AWBURST,
        m_axi_gmem_C_AWLOCK => grp_kernel3_x2_fu_124_m_axi_gmem_C_AWLOCK,
        m_axi_gmem_C_AWCACHE => grp_kernel3_x2_fu_124_m_axi_gmem_C_AWCACHE,
        m_axi_gmem_C_AWPROT => grp_kernel3_x2_fu_124_m_axi_gmem_C_AWPROT,
        m_axi_gmem_C_AWQOS => grp_kernel3_x2_fu_124_m_axi_gmem_C_AWQOS,
        m_axi_gmem_C_AWREGION => grp_kernel3_x2_fu_124_m_axi_gmem_C_AWREGION,
        m_axi_gmem_C_AWUSER => grp_kernel3_x2_fu_124_m_axi_gmem_C_AWUSER,
        m_axi_gmem_C_WVALID => grp_kernel3_x2_fu_124_m_axi_gmem_C_WVALID,
        m_axi_gmem_C_WREADY => gmem_C_WREADY,
        m_axi_gmem_C_WDATA => grp_kernel3_x2_fu_124_m_axi_gmem_C_WDATA,
        m_axi_gmem_C_WSTRB => grp_kernel3_x2_fu_124_m_axi_gmem_C_WSTRB,
        m_axi_gmem_C_WLAST => grp_kernel3_x2_fu_124_m_axi_gmem_C_WLAST,
        m_axi_gmem_C_WID => grp_kernel3_x2_fu_124_m_axi_gmem_C_WID,
        m_axi_gmem_C_WUSER => grp_kernel3_x2_fu_124_m_axi_gmem_C_WUSER,
        m_axi_gmem_C_ARVALID => grp_kernel3_x2_fu_124_m_axi_gmem_C_ARVALID,
        m_axi_gmem_C_ARREADY => ap_const_logic_0,
        m_axi_gmem_C_ARADDR => grp_kernel3_x2_fu_124_m_axi_gmem_C_ARADDR,
        m_axi_gmem_C_ARID => grp_kernel3_x2_fu_124_m_axi_gmem_C_ARID,
        m_axi_gmem_C_ARLEN => grp_kernel3_x2_fu_124_m_axi_gmem_C_ARLEN,
        m_axi_gmem_C_ARSIZE => grp_kernel3_x2_fu_124_m_axi_gmem_C_ARSIZE,
        m_axi_gmem_C_ARBURST => grp_kernel3_x2_fu_124_m_axi_gmem_C_ARBURST,
        m_axi_gmem_C_ARLOCK => grp_kernel3_x2_fu_124_m_axi_gmem_C_ARLOCK,
        m_axi_gmem_C_ARCACHE => grp_kernel3_x2_fu_124_m_axi_gmem_C_ARCACHE,
        m_axi_gmem_C_ARPROT => grp_kernel3_x2_fu_124_m_axi_gmem_C_ARPROT,
        m_axi_gmem_C_ARQOS => grp_kernel3_x2_fu_124_m_axi_gmem_C_ARQOS,
        m_axi_gmem_C_ARREGION => grp_kernel3_x2_fu_124_m_axi_gmem_C_ARREGION,
        m_axi_gmem_C_ARUSER => grp_kernel3_x2_fu_124_m_axi_gmem_C_ARUSER,
        m_axi_gmem_C_RVALID => ap_const_logic_0,
        m_axi_gmem_C_RREADY => grp_kernel3_x2_fu_124_m_axi_gmem_C_RREADY,
        m_axi_gmem_C_RDATA => ap_const_lv512_lc_1,
        m_axi_gmem_C_RLAST => ap_const_logic_0,
        m_axi_gmem_C_RID => ap_const_lv1_0,
        m_axi_gmem_C_RUSER => ap_const_lv1_0,
        m_axi_gmem_C_RRESP => ap_const_lv2_0,
        m_axi_gmem_C_BVALID => gmem_C_BVALID,
        m_axi_gmem_C_BREADY => grp_kernel3_x2_fu_124_m_axi_gmem_C_BREADY,
        m_axi_gmem_C_BRESP => gmem_C_BRESP,
        m_axi_gmem_C_BID => gmem_C_BID,
        m_axi_gmem_C_BUSER => gmem_C_BUSER,
        B_address0 => grp_kernel3_x2_fu_124_B_address0,
        B_ce0 => grp_kernel3_x2_fu_124_B_ce0,
        B_d0 => grp_kernel3_x2_fu_124_B_d0,
        B_q0 => temp_xin2_V_q0,
        B_we0 => grp_kernel3_x2_fu_124_B_we0,
        B_address1 => grp_kernel3_x2_fu_124_B_address1,
        B_ce1 => grp_kernel3_x2_fu_124_B_ce1,
        B_d1 => grp_kernel3_x2_fu_124_B_d1,
        B_q1 => temp_xin2_V_q1,
        B_we1 => grp_kernel3_x2_fu_124_B_we1,
        C => C_read_reg_144,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        C_ap_vld => ap_const_logic_1,
        ap_start => grp_kernel3_x2_fu_124_ap_start,
        ap_done => grp_kernel3_x2_fu_124_ap_done,
        ap_ready => grp_kernel3_x2_fu_124_ap_ready,
        ap_idle => grp_kernel3_x2_fu_124_ap_idle,
        ap_continue => grp_kernel3_x2_fu_124_ap_continue);

    grp_nondf_kernel_cov_x0_fu_132 : component top_nondf_kernel_cov_x0
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_nondf_kernel_cov_x0_fu_132_ap_start,
        ap_done => grp_nondf_kernel_cov_x0_fu_132_ap_done,
        ap_idle => grp_nondf_kernel_cov_x0_fu_132_ap_idle,
        ap_ready => grp_nondf_kernel_cov_x0_fu_132_ap_ready,
        xout_address0 => grp_nondf_kernel_cov_x0_fu_132_xout_address0,
        xout_ce0 => grp_nondf_kernel_cov_x0_fu_132_xout_ce0,
        xout_q0 => temp_xout0_V_q0,
        xin_address0 => grp_nondf_kernel_cov_x0_fu_132_xin_address0,
        xin_ce0 => grp_nondf_kernel_cov_x0_fu_132_xin_ce0,
        xin_we0 => grp_nondf_kernel_cov_x0_fu_132_xin_we0,
        xin_d0 => grp_nondf_kernel_cov_x0_fu_132_xin_d0,
        grp_fu_159_p_din0 => grp_nondf_kernel_cov_x0_fu_132_grp_fu_159_p_din0,
        grp_fu_159_p_din1 => grp_nondf_kernel_cov_x0_fu_132_grp_fu_159_p_din1,
        grp_fu_159_p_dout0 => grp_nondf_kernel_cov_x0_fu_132_grp_fu_159_p_dout0,
        grp_fu_159_p_ce => grp_nondf_kernel_cov_x0_fu_132_grp_fu_159_p_ce,
        grp_fu_163_p_din0 => grp_nondf_kernel_cov_x0_fu_132_grp_fu_163_p_din0,
        grp_fu_163_p_din1 => grp_nondf_kernel_cov_x0_fu_132_grp_fu_163_p_din1,
        grp_fu_163_p_dout0 => grp_nondf_kernel_cov_x0_fu_132_grp_fu_163_p_dout0,
        grp_fu_163_p_ce => grp_nondf_kernel_cov_x0_fu_132_grp_fu_163_p_ce);

    grp_nondf_kernel_cov_x1_fu_138 : component top_nondf_kernel_cov_x1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_nondf_kernel_cov_x1_fu_138_ap_start,
        ap_done => grp_nondf_kernel_cov_x1_fu_138_ap_done,
        ap_idle => grp_nondf_kernel_cov_x1_fu_138_ap_idle,
        ap_ready => grp_nondf_kernel_cov_x1_fu_138_ap_ready,
        xout_address0 => grp_nondf_kernel_cov_x1_fu_138_xout_address0,
        xout_ce0 => grp_nondf_kernel_cov_x1_fu_138_xout_ce0,
        xout_q0 => temp_xout1_V_q0,
        xin_address0 => grp_nondf_kernel_cov_x1_fu_138_xin_address0,
        xin_ce0 => grp_nondf_kernel_cov_x1_fu_138_xin_ce0,
        xin_we0 => grp_nondf_kernel_cov_x1_fu_138_xin_we0,
        xin_d0 => grp_nondf_kernel_cov_x1_fu_138_xin_d0,
        grp_fu_159_p_din0 => grp_nondf_kernel_cov_x1_fu_138_grp_fu_159_p_din0,
        grp_fu_159_p_din1 => grp_nondf_kernel_cov_x1_fu_138_grp_fu_159_p_din1,
        grp_fu_159_p_dout0 => grp_nondf_kernel_cov_x1_fu_138_grp_fu_159_p_dout0,
        grp_fu_159_p_ce => grp_nondf_kernel_cov_x1_fu_138_grp_fu_159_p_ce,
        grp_fu_163_p_din0 => grp_nondf_kernel_cov_x1_fu_138_grp_fu_163_p_din0,
        grp_fu_163_p_din1 => grp_nondf_kernel_cov_x1_fu_138_grp_fu_163_p_din1,
        grp_fu_163_p_dout0 => grp_nondf_kernel_cov_x1_fu_138_grp_fu_163_p_dout0,
        grp_fu_163_p_ce => grp_nondf_kernel_cov_x1_fu_138_grp_fu_163_p_ce);

    mul_512s_512s_512_5_1_U2543 : component top_mul_512s_512s_512_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 512,
        din1_WIDTH => 512,
        dout_WIDTH => 512)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_159_p0,
        din1 => grp_fu_159_p1,
        ce => grp_fu_159_ce,
        dout => grp_fu_159_p2);

    mul_512ns_514ns_1025_5_1_U2544 : component top_mul_512ns_514ns_1025_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 512,
        din1_WIDTH => 514,
        dout_WIDTH => 1025)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_163_p0,
        din1 => grp_fu_163_p1,
        ce => grp_fu_163_ce,
        dout => grp_fu_163_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_state10_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_kernel3_x0_fu_104_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_kernel3_x0_fu_104_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_sync_reg_grp_kernel3_x0_fu_104_ap_done <= ap_const_logic_0;
                elsif ((grp_kernel3_x0_fu_104_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_kernel3_x0_fu_104_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_kernel3_x0_fu_104_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_kernel3_x0_fu_104_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_sync_reg_grp_kernel3_x0_fu_104_ap_ready <= ap_const_logic_0;
                elsif ((grp_kernel3_x0_fu_104_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_kernel3_x0_fu_104_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_kernel3_x1_fu_118_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_kernel3_x1_fu_118_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state6_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                    ap_sync_reg_grp_kernel3_x1_fu_118_ap_done <= ap_const_logic_0;
                elsif ((grp_kernel3_x1_fu_118_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_kernel3_x1_fu_118_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_kernel3_x1_fu_118_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_kernel3_x1_fu_118_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state6_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                    ap_sync_reg_grp_kernel3_x1_fu_118_ap_ready <= ap_const_logic_0;
                elsif ((grp_kernel3_x1_fu_118_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_kernel3_x1_fu_118_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_kernel3_x2_fu_124_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_kernel3_x2_fu_124_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state10_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                    ap_sync_reg_grp_kernel3_x2_fu_124_ap_done <= ap_const_logic_0;
                elsif ((grp_kernel3_x2_fu_124_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_kernel3_x2_fu_124_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_kernel3_x2_fu_124_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_kernel3_x2_fu_124_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state10_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                    ap_sync_reg_grp_kernel3_x2_fu_124_ap_ready <= ap_const_logic_0;
                elsif ((grp_kernel3_x2_fu_124_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_kernel3_x2_fu_124_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_kernel3_x0_fu_104_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_kernel3_x0_fu_104_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_sync_grp_kernel3_x0_fu_104_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or (not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                    grp_kernel3_x0_fu_104_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_kernel3_x0_fu_104_ap_ready = ap_const_logic_1)) then 
                    grp_kernel3_x0_fu_104_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_kernel3_x1_fu_118_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_kernel3_x1_fu_118_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_sync_grp_kernel3_x1_fu_118_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
                    grp_kernel3_x1_fu_118_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_kernel3_x1_fu_118_ap_ready = ap_const_logic_1)) then 
                    grp_kernel3_x1_fu_118_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_kernel3_x2_fu_124_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_kernel3_x2_fu_124_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_sync_grp_kernel3_x2_fu_124_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
                    grp_kernel3_x2_fu_124_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_kernel3_x2_fu_124_ap_ready = ap_const_logic_1)) then 
                    grp_kernel3_x2_fu_124_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_nondf_kernel_cov_x0_fu_132_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_nondf_kernel_cov_x0_fu_132_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_nondf_kernel_cov_x0_fu_132_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_nondf_kernel_cov_x0_fu_132_ap_ready = ap_const_logic_1)) then 
                    grp_nondf_kernel_cov_x0_fu_132_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_nondf_kernel_cov_x1_fu_138_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_nondf_kernel_cov_x1_fu_138_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    grp_nondf_kernel_cov_x1_fu_138_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_nondf_kernel_cov_x1_fu_138_ap_ready = ap_const_logic_1)) then 
                    grp_nondf_kernel_cov_x1_fu_138_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_rst_n_inv_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_n_inv <= ap_rst_reg_1;
        end if;
    end process;

    ap_rst_reg_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_reg_1 <= ap_rst_reg_2;
        end if;
    end process;

    ap_rst_reg_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
                        ap_rst_reg_2 <= not(ap_rst_n);
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                A_read_reg_154 <= A;
                B_read_reg_149 <= B;
                C_read_reg_144 <= C;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, grp_nondf_kernel_cov_x0_fu_132_ap_done, grp_nondf_kernel_cov_x1_fu_138_ap_done, ap_CS_fsm_state2, ap_block_state2_on_subcall_done, ap_CS_fsm_state6, ap_block_state6_on_subcall_done, ap_CS_fsm_state10, ap_block_state10_on_subcall_done, ap_CS_fsm_state4, ap_CS_fsm_state8)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_nondf_kernel_cov_x0_fu_132_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_boolean_0 = ap_block_state6_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((grp_nondf_kernel_cov_x1_fu_138_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_boolean_0 = ap_block_state10_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state10_on_subcall_done_assign_proc : process(ap_sync_grp_kernel3_x2_fu_124_ap_ready, ap_sync_grp_kernel3_x2_fu_124_ap_done)
    begin
                ap_block_state10_on_subcall_done <= ((ap_sync_grp_kernel3_x2_fu_124_ap_ready and ap_sync_grp_kernel3_x2_fu_124_ap_done) = ap_const_logic_0);
    end process;


    ap_block_state1_ignore_call22_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1_ignore_call22 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state2_on_subcall_done_assign_proc : process(ap_sync_grp_kernel3_x0_fu_104_ap_ready, ap_sync_grp_kernel3_x0_fu_104_ap_done)
    begin
                ap_block_state2_on_subcall_done <= ((ap_sync_grp_kernel3_x0_fu_104_ap_ready and ap_sync_grp_kernel3_x0_fu_104_ap_done) = ap_const_logic_0);
    end process;


    ap_block_state6_on_subcall_done_assign_proc : process(ap_sync_grp_kernel3_x1_fu_118_ap_ready, ap_sync_grp_kernel3_x1_fu_118_ap_done)
    begin
                ap_block_state6_on_subcall_done <= ((ap_sync_grp_kernel3_x1_fu_118_ap_ready and ap_sync_grp_kernel3_x1_fu_118_ap_done) = ap_const_logic_0);
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state10, ap_block_state10_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state10_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10, ap_block_state10_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state10_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_sync_grp_kernel3_x0_fu_104_ap_done <= (grp_kernel3_x0_fu_104_ap_done or ap_sync_reg_grp_kernel3_x0_fu_104_ap_done);
    ap_sync_grp_kernel3_x0_fu_104_ap_ready <= (grp_kernel3_x0_fu_104_ap_ready or ap_sync_reg_grp_kernel3_x0_fu_104_ap_ready);
    ap_sync_grp_kernel3_x1_fu_118_ap_done <= (grp_kernel3_x1_fu_118_ap_done or ap_sync_reg_grp_kernel3_x1_fu_118_ap_done);
    ap_sync_grp_kernel3_x1_fu_118_ap_ready <= (grp_kernel3_x1_fu_118_ap_ready or ap_sync_reg_grp_kernel3_x1_fu_118_ap_ready);
    ap_sync_grp_kernel3_x2_fu_124_ap_done <= (grp_kernel3_x2_fu_124_ap_done or ap_sync_reg_grp_kernel3_x2_fu_124_ap_done);
    ap_sync_grp_kernel3_x2_fu_124_ap_ready <= (grp_kernel3_x2_fu_124_ap_ready or ap_sync_reg_grp_kernel3_x2_fu_124_ap_ready);

    gmem_A_ARVALID_assign_proc : process(ap_CS_fsm_state1, grp_kernel3_x0_fu_104_m_axi_gmem_A_ARVALID, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            gmem_A_ARVALID <= grp_kernel3_x0_fu_104_m_axi_gmem_A_ARVALID;
        else 
            gmem_A_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_A_RREADY_assign_proc : process(ap_CS_fsm_state1, grp_kernel3_x0_fu_104_m_axi_gmem_A_RREADY, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            gmem_A_RREADY <= grp_kernel3_x0_fu_104_m_axi_gmem_A_RREADY;
        else 
            gmem_A_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_B_ARVALID_assign_proc : process(ap_CS_fsm_state1, grp_kernel3_x0_fu_104_m_axi_gmem_B_ARVALID, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            gmem_B_ARVALID <= grp_kernel3_x0_fu_104_m_axi_gmem_B_ARVALID;
        else 
            gmem_B_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_B_RREADY_assign_proc : process(ap_CS_fsm_state1, grp_kernel3_x0_fu_104_m_axi_gmem_B_RREADY, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            gmem_B_RREADY <= grp_kernel3_x0_fu_104_m_axi_gmem_B_RREADY;
        else 
            gmem_B_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_C_AWVALID_assign_proc : process(grp_kernel3_x2_fu_124_m_axi_gmem_C_AWVALID, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            gmem_C_AWVALID <= grp_kernel3_x2_fu_124_m_axi_gmem_C_AWVALID;
        else 
            gmem_C_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_C_BREADY_assign_proc : process(grp_kernel3_x2_fu_124_m_axi_gmem_C_BREADY, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            gmem_C_BREADY <= grp_kernel3_x2_fu_124_m_axi_gmem_C_BREADY;
        else 
            gmem_C_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_C_WVALID_assign_proc : process(grp_kernel3_x2_fu_124_m_axi_gmem_C_WVALID, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            gmem_C_WVALID <= grp_kernel3_x2_fu_124_m_axi_gmem_C_WVALID;
        else 
            gmem_C_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_159_ce_assign_proc : process(grp_nondf_kernel_cov_x0_fu_132_grp_fu_159_p_ce, grp_nondf_kernel_cov_x1_fu_138_grp_fu_159_p_ce, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            grp_fu_159_ce <= grp_nondf_kernel_cov_x1_fu_138_grp_fu_159_p_ce;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            grp_fu_159_ce <= grp_nondf_kernel_cov_x0_fu_132_grp_fu_159_p_ce;
        else 
            grp_fu_159_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_159_p0_assign_proc : process(grp_nondf_kernel_cov_x0_fu_132_grp_fu_159_p_din0, grp_nondf_kernel_cov_x1_fu_138_grp_fu_159_p_din0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            grp_fu_159_p0 <= grp_nondf_kernel_cov_x1_fu_138_grp_fu_159_p_din0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            grp_fu_159_p0 <= grp_nondf_kernel_cov_x0_fu_132_grp_fu_159_p_din0;
        end if; 
    end process;


    grp_fu_159_p1_assign_proc : process(grp_nondf_kernel_cov_x0_fu_132_grp_fu_159_p_din1, grp_nondf_kernel_cov_x1_fu_138_grp_fu_159_p_din1, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            grp_fu_159_p1 <= grp_nondf_kernel_cov_x1_fu_138_grp_fu_159_p_din1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            grp_fu_159_p1 <= grp_nondf_kernel_cov_x0_fu_132_grp_fu_159_p_din1;
        end if; 
    end process;


    grp_fu_163_ce_assign_proc : process(grp_nondf_kernel_cov_x0_fu_132_grp_fu_163_p_ce, grp_nondf_kernel_cov_x1_fu_138_grp_fu_163_p_ce, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            grp_fu_163_ce <= grp_nondf_kernel_cov_x1_fu_138_grp_fu_163_p_ce;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            grp_fu_163_ce <= grp_nondf_kernel_cov_x0_fu_132_grp_fu_163_p_ce;
        else 
            grp_fu_163_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_163_p0_assign_proc : process(grp_nondf_kernel_cov_x0_fu_132_grp_fu_163_p_din0, grp_nondf_kernel_cov_x1_fu_138_grp_fu_163_p_din0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            grp_fu_163_p0 <= grp_nondf_kernel_cov_x1_fu_138_grp_fu_163_p_din0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            grp_fu_163_p0 <= grp_nondf_kernel_cov_x0_fu_132_grp_fu_163_p_din0;
        end if; 
    end process;


    grp_fu_163_p1_assign_proc : process(grp_nondf_kernel_cov_x0_fu_132_grp_fu_163_p_din1, grp_nondf_kernel_cov_x1_fu_138_grp_fu_163_p_din1, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            grp_fu_163_p1 <= grp_nondf_kernel_cov_x1_fu_138_grp_fu_163_p_din1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            grp_fu_163_p1 <= grp_nondf_kernel_cov_x0_fu_132_grp_fu_163_p_din1;
        end if; 
    end process;


    grp_kernel3_x0_fu_104_ap_continue_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_kernel3_x0_fu_104_ap_continue <= ap_const_logic_1;
        else 
            grp_kernel3_x0_fu_104_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_kernel3_x0_fu_104_ap_start <= grp_kernel3_x0_fu_104_ap_start_reg;

    grp_kernel3_x1_fu_118_ap_continue_assign_proc : process(ap_CS_fsm_state6, ap_block_state6_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state6_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            grp_kernel3_x1_fu_118_ap_continue <= ap_const_logic_1;
        else 
            grp_kernel3_x1_fu_118_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_kernel3_x1_fu_118_ap_start <= grp_kernel3_x1_fu_118_ap_start_reg;

    grp_kernel3_x2_fu_124_ap_continue_assign_proc : process(ap_CS_fsm_state10, ap_block_state10_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state10_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            grp_kernel3_x2_fu_124_ap_continue <= ap_const_logic_1;
        else 
            grp_kernel3_x2_fu_124_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_kernel3_x2_fu_124_ap_start <= grp_kernel3_x2_fu_124_ap_start_reg;
    grp_nondf_kernel_cov_x0_fu_132_ap_start <= grp_nondf_kernel_cov_x0_fu_132_ap_start_reg;
    grp_nondf_kernel_cov_x0_fu_132_grp_fu_159_p_dout0 <= grp_fu_159_p2;
    grp_nondf_kernel_cov_x0_fu_132_grp_fu_163_p_dout0 <= grp_fu_163_p2;
    grp_nondf_kernel_cov_x1_fu_138_ap_start <= grp_nondf_kernel_cov_x1_fu_138_ap_start_reg;
    grp_nondf_kernel_cov_x1_fu_138_grp_fu_159_p_dout0 <= grp_fu_159_p2;
    grp_nondf_kernel_cov_x1_fu_138_grp_fu_163_p_dout0 <= grp_fu_163_p2;

    temp_xin1_V_address0_assign_proc : process(grp_kernel3_x1_fu_118_B_address0, grp_nondf_kernel_cov_x0_fu_132_xin_address0, ap_CS_fsm_state6, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            temp_xin1_V_address0 <= grp_nondf_kernel_cov_x0_fu_132_xin_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            temp_xin1_V_address0 <= grp_kernel3_x1_fu_118_B_address0;
        else 
            temp_xin1_V_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    temp_xin1_V_ce0_assign_proc : process(grp_kernel3_x1_fu_118_B_ce0, grp_nondf_kernel_cov_x0_fu_132_xin_ce0, ap_CS_fsm_state6, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            temp_xin1_V_ce0 <= grp_nondf_kernel_cov_x0_fu_132_xin_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            temp_xin1_V_ce0 <= grp_kernel3_x1_fu_118_B_ce0;
        else 
            temp_xin1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_xin1_V_ce1_assign_proc : process(grp_kernel3_x1_fu_118_B_ce1, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            temp_xin1_V_ce1 <= grp_kernel3_x1_fu_118_B_ce1;
        else 
            temp_xin1_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    temp_xin1_V_we0_assign_proc : process(grp_nondf_kernel_cov_x0_fu_132_xin_we0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            temp_xin1_V_we0 <= grp_nondf_kernel_cov_x0_fu_132_xin_we0;
        else 
            temp_xin1_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_xin2_V_address0_assign_proc : process(grp_kernel3_x2_fu_124_B_address0, grp_nondf_kernel_cov_x1_fu_138_xin_address0, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            temp_xin2_V_address0 <= grp_nondf_kernel_cov_x1_fu_138_xin_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            temp_xin2_V_address0 <= grp_kernel3_x2_fu_124_B_address0;
        else 
            temp_xin2_V_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    temp_xin2_V_ce0_assign_proc : process(grp_kernel3_x2_fu_124_B_ce0, grp_nondf_kernel_cov_x1_fu_138_xin_ce0, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            temp_xin2_V_ce0 <= grp_nondf_kernel_cov_x1_fu_138_xin_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            temp_xin2_V_ce0 <= grp_kernel3_x2_fu_124_B_ce0;
        else 
            temp_xin2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_xin2_V_ce1_assign_proc : process(grp_kernel3_x2_fu_124_B_ce1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            temp_xin2_V_ce1 <= grp_kernel3_x2_fu_124_B_ce1;
        else 
            temp_xin2_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    temp_xin2_V_we0_assign_proc : process(grp_nondf_kernel_cov_x1_fu_138_xin_we0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            temp_xin2_V_we0 <= grp_nondf_kernel_cov_x1_fu_138_xin_we0;
        else 
            temp_xin2_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_xout0_V_address0_assign_proc : process(grp_kernel3_x0_fu_104_C_address0, grp_nondf_kernel_cov_x0_fu_132_xout_address0, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            temp_xout0_V_address0 <= grp_nondf_kernel_cov_x0_fu_132_xout_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            temp_xout0_V_address0 <= grp_kernel3_x0_fu_104_C_address0;
        else 
            temp_xout0_V_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    temp_xout0_V_ce0_assign_proc : process(grp_kernel3_x0_fu_104_C_ce0, grp_nondf_kernel_cov_x0_fu_132_xout_ce0, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            temp_xout0_V_ce0 <= grp_nondf_kernel_cov_x0_fu_132_xout_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            temp_xout0_V_ce0 <= grp_kernel3_x0_fu_104_C_ce0;
        else 
            temp_xout0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_xout0_V_we0_assign_proc : process(grp_kernel3_x0_fu_104_C_we0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            temp_xout0_V_we0 <= grp_kernel3_x0_fu_104_C_we0;
        else 
            temp_xout0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_xout1_V_address0_assign_proc : process(grp_kernel3_x1_fu_118_C_address0, grp_nondf_kernel_cov_x1_fu_138_xout_address0, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            temp_xout1_V_address0 <= grp_nondf_kernel_cov_x1_fu_138_xout_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            temp_xout1_V_address0 <= grp_kernel3_x1_fu_118_C_address0;
        else 
            temp_xout1_V_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    temp_xout1_V_ce0_assign_proc : process(grp_kernel3_x1_fu_118_C_ce0, grp_nondf_kernel_cov_x1_fu_138_xout_ce0, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            temp_xout1_V_ce0 <= grp_nondf_kernel_cov_x1_fu_138_xout_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            temp_xout1_V_ce0 <= grp_kernel3_x1_fu_118_C_ce0;
        else 
            temp_xout1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_xout1_V_we0_assign_proc : process(grp_kernel3_x1_fu_118_C_we0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            temp_xout1_V_we0 <= grp_kernel3_x1_fu_118_C_we0;
        else 
            temp_xout1_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
