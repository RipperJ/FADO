-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_B_IO_L2_in_x2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    fifo_B_B_IO_L2_in_0_x214_dout : IN STD_LOGIC_VECTOR (255 downto 0);
    fifo_B_B_IO_L2_in_0_x214_empty_n : IN STD_LOGIC;
    fifo_B_B_IO_L2_in_0_x214_read : OUT STD_LOGIC;
    fifo_B_B_IO_L2_in_1_x215_din : OUT STD_LOGIC_VECTOR (255 downto 0);
    fifo_B_B_IO_L2_in_1_x215_full_n : IN STD_LOGIC;
    fifo_B_B_IO_L2_in_1_x215_write : OUT STD_LOGIC;
    fifo_B_PE_0_0_x255_din : OUT STD_LOGIC_VECTOR (255 downto 0);
    fifo_B_PE_0_0_x255_full_n : IN STD_LOGIC;
    fifo_B_PE_0_0_x255_write : OUT STD_LOGIC );
end;


architecture behav of top_B_IO_L2_in_x2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv13_1000 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv13_800 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv16_8000 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv12_400 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal fifo_B_B_IO_L2_in_0_x214_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln890_reg_604 : STD_LOGIC_VECTOR (0 downto 0);
    signal fifo_B_B_IO_L2_in_1_x215_blk_n : STD_LOGIC;
    signal select_ln13597_1_reg_608 : STD_LOGIC_VECTOR (0 downto 0);
    signal fifo_B_PE_0_0_x255_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal icmp_ln890_547_reg_647 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln890_547_reg_647_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten13_reg_148 : STD_LOGIC_VECTOR (12 downto 0);
    signal c3_V_reg_159 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten_reg_170 : STD_LOGIC_VECTOR (12 downto 0);
    signal c4_V_reg_181 : STD_LOGIC_VECTOR (6 downto 0);
    signal c5_V_1_reg_192 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten40_reg_203 : STD_LOGIC_VECTOR (15 downto 0);
    signal c5_V_reg_214 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten22_reg_225 : STD_LOGIC_VECTOR (11 downto 0);
    signal c6_V_reg_236 : STD_LOGIC_VECTOR (6 downto 0);
    signal c7_V_reg_247 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln890_160_fu_258_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln890_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln13597_1_fu_302_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln890_fu_328_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln890_398_fu_388_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln13606_fu_400_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln13606_reg_622 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln691_727_fu_406_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln890_405_fu_418_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln890_158_fu_430_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state5_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state7_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal empty_1464_fu_452_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_1464_reg_642 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln890_547_fu_458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln691_724_fu_464_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln691_724_reg_651 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln890_548_fu_470_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln890_548_reg_656 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln890_400_fu_484_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln890_400_reg_661 : STD_LOGIC_VECTOR (5 downto 0);
    signal and_ln890_fu_504_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln890_reg_667 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_1465_fu_516_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_1465_reg_672 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln890_403_fu_520_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln691_fu_540_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln890_404_fu_554_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state5 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal local_B_pong_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal local_B_pong_V_ce0 : STD_LOGIC;
    signal local_B_pong_V_q0 : STD_LOGIC_VECTOR (255 downto 0);
    signal local_B_pong_V_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal local_B_pong_V_ce1 : STD_LOGIC;
    signal local_B_pong_V_we1 : STD_LOGIC;
    signal ap_phi_mux_c5_V_phi_fu_218_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln13606_1_fu_426_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln890_481_cast_fu_594_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal icmp_ln890_545_fu_276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln691_fu_270_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal cmp_i_i72_mid1_fu_290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp_i_i7252_fu_296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln890_546_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln13597_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln13597_fu_282_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal and_ln13597_fu_322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln890_fu_342_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln691_723_fu_336_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln13606_1_fu_360_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln13606_fu_356_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln13597_2_fu_364_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln890_397_fu_372_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln890_396_fu_348_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1156_cast_fu_380_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln13606_fu_396_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln890_159_fu_412_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal empty_fu_440_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_cast_fu_444_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln13613_fu_436_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln890_549_fu_498_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln890_fu_492_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln890_399_fu_476_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln691_725_fu_510_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln691_fu_534_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln691_726_fu_528_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln890_fu_548_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln890_fu_562_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1157_cast_fu_574_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln13615_fu_565_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_1466_fu_581_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln890_401_fu_568_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln890_402_fu_587_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component top_B_IO_L2_in_x0_local_B_pong_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (255 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (255 downto 0) );
    end component;



begin
    local_B_pong_V_U : component top_B_IO_L2_in_x0_local_B_pong_V
    generic map (
        DataWidth => 256,
        AddressRange => 2048,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => local_B_pong_V_address0,
        ce0 => local_B_pong_V_ce0,
        q0 => local_B_pong_V_q0,
        address1 => local_B_pong_V_address1,
        ce1 => local_B_pong_V_ce1,
        we1 => local_B_pong_V_we1,
        d1 => fifo_B_B_IO_L2_in_0_x214_dout);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state5) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state5)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state5);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c3_V_reg_159_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln890_fu_264_p2 = ap_const_lv1_0))) then 
                c3_V_reg_159 <= select_ln890_fu_328_p3;
            elsif ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c3_V_reg_159 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    c4_V_reg_181_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln890_fu_264_p2 = ap_const_lv1_0))) then 
                c4_V_reg_181 <= select_ln890_398_fu_388_p3;
            elsif ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c4_V_reg_181 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    c5_V_1_reg_192_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln890_fu_264_p2 = ap_const_lv1_0))) then 
                c5_V_1_reg_192 <= add_ln691_727_fu_406_p2;
            elsif ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c5_V_1_reg_192 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    c5_V_reg_214_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                c5_V_reg_214 <= ap_const_lv6_0;
            elsif (((icmp_ln890_547_reg_647 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                c5_V_reg_214 <= select_ln890_400_reg_661;
            end if; 
        end if;
    end process;

    c6_V_reg_236_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                c6_V_reg_236 <= ap_const_lv7_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln890_547_fu_458_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
                c6_V_reg_236 <= select_ln890_403_fu_520_p3;
            end if; 
        end if;
    end process;

    c7_V_reg_247_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                c7_V_reg_247 <= ap_const_lv5_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln890_547_fu_458_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
                c7_V_reg_247 <= select_ln691_fu_540_p3;
            end if; 
        end if;
    end process;

    indvar_flatten13_reg_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln890_fu_264_p2 = ap_const_lv1_0))) then 
                indvar_flatten13_reg_148 <= add_ln890_160_fu_258_p2;
            elsif ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten13_reg_148 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    indvar_flatten22_reg_225_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                indvar_flatten22_reg_225 <= ap_const_lv12_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln890_547_fu_458_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
                indvar_flatten22_reg_225 <= select_ln890_404_fu_554_p3;
            end if; 
        end if;
    end process;

    indvar_flatten40_reg_203_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                indvar_flatten40_reg_203 <= ap_const_lv16_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln890_547_fu_458_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
                indvar_flatten40_reg_203 <= add_ln890_158_fu_430_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln890_fu_264_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_170 <= select_ln890_405_fu_418_p3;
            elsif ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_170 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln890_fu_264_p2 = ap_const_lv1_0))) then
                add_ln13606_reg_622 <= add_ln13606_fu_400_p2;
                select_ln13597_1_reg_608 <= select_ln13597_1_fu_302_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln890_547_fu_458_p2 = ap_const_lv1_0))) then
                add_ln691_724_reg_651 <= add_ln691_724_fu_464_p2;
                and_ln890_reg_667 <= and_ln890_fu_504_p2;
                empty_1465_reg_672 <= empty_1465_fu_516_p1;
                icmp_ln890_548_reg_656 <= icmp_ln890_548_fu_470_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                empty_1464_reg_642 <= empty_1464_fu_452_p2;
                icmp_ln890_547_reg_647 <= icmp_ln890_547_fu_458_p2;
                icmp_ln890_547_reg_647_pp1_iter1_reg <= icmp_ln890_547_reg_647;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln890_reg_604 <= icmp_ln890_fu_264_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln890_547_fu_458_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                select_ln890_400_reg_661 <= select_ln890_400_fu_484_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp1_iter2, ap_enable_reg_pp0_iter0, icmp_ln890_fu_264_p2, ap_enable_reg_pp1_iter0, icmp_ln890_547_fu_458_p2, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln890_fu_264_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln890_fu_264_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln890_547_fu_458_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln890_547_fu_458_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln13606_fu_400_p2 <= std_logic_vector(unsigned(tmp_1156_cast_fu_380_p3) + unsigned(zext_ln13606_fu_396_p1));
    add_ln691_723_fu_336_p2 <= std_logic_vector(unsigned(select_ln13597_fu_282_p3) + unsigned(ap_const_lv7_1));
    add_ln691_724_fu_464_p2 <= std_logic_vector(unsigned(ap_phi_mux_c5_V_phi_fu_218_p4) + unsigned(ap_const_lv6_1));
    add_ln691_725_fu_510_p2 <= std_logic_vector(unsigned(select_ln890_399_fu_476_p3) + unsigned(ap_const_lv7_1));
    add_ln691_726_fu_528_p2 <= std_logic_vector(unsigned(c7_V_reg_247) + unsigned(ap_const_lv5_1));
    add_ln691_727_fu_406_p2 <= std_logic_vector(unsigned(select_ln890_396_fu_348_p3) + unsigned(ap_const_lv6_1));
    add_ln691_fu_270_p2 <= std_logic_vector(unsigned(c3_V_reg_159) + unsigned(ap_const_lv2_1));
    add_ln890_158_fu_430_p2 <= std_logic_vector(unsigned(indvar_flatten40_reg_203) + unsigned(ap_const_lv16_1));
    add_ln890_159_fu_412_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_170) + unsigned(ap_const_lv13_1));
    add_ln890_160_fu_258_p2 <= std_logic_vector(unsigned(indvar_flatten13_reg_148) + unsigned(ap_const_lv13_1));
    add_ln890_fu_548_p2 <= std_logic_vector(unsigned(indvar_flatten22_reg_225) + unsigned(ap_const_lv12_1));
    and_ln13597_fu_322_p2 <= (xor_ln13597_fu_310_p2 and icmp_ln890_546_fu_316_p2);
    and_ln890_fu_504_p2 <= (xor_ln890_fu_492_p2 and icmp_ln890_549_fu_498_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
    ap_CS_fsm_state8 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(fifo_B_B_IO_L2_in_0_x214_empty_n, fifo_B_B_IO_L2_in_1_x215_full_n, ap_enable_reg_pp0_iter1, icmp_ln890_reg_604, select_ln13597_1_reg_608)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((select_ln13597_1_reg_608 = ap_const_lv1_0) and (fifo_B_B_IO_L2_in_1_x215_full_n = ap_const_logic_0)) or ((icmp_ln890_reg_604 = ap_const_lv1_0) and (fifo_B_B_IO_L2_in_0_x214_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(fifo_B_B_IO_L2_in_0_x214_empty_n, fifo_B_B_IO_L2_in_1_x215_full_n, ap_enable_reg_pp0_iter1, icmp_ln890_reg_604, select_ln13597_1_reg_608)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((select_ln13597_1_reg_608 = ap_const_lv1_0) and (fifo_B_B_IO_L2_in_1_x215_full_n = ap_const_logic_0)) or ((icmp_ln890_reg_604 = ap_const_lv1_0) and (fifo_B_B_IO_L2_in_0_x214_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(fifo_B_B_IO_L2_in_0_x214_empty_n, fifo_B_B_IO_L2_in_1_x215_full_n, ap_enable_reg_pp0_iter1, icmp_ln890_reg_604, select_ln13597_1_reg_608)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((select_ln13597_1_reg_608 = ap_const_lv1_0) and (fifo_B_B_IO_L2_in_1_x215_full_n = ap_const_logic_0)) or ((icmp_ln890_reg_604 = ap_const_lv1_0) and (fifo_B_B_IO_L2_in_0_x214_empty_n = ap_const_logic_0))));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_01001_assign_proc : process(fifo_B_PE_0_0_x255_full_n, ap_enable_reg_pp1_iter2, icmp_ln890_547_reg_647_pp1_iter1_reg)
    begin
                ap_block_pp1_stage0_01001 <= ((icmp_ln890_547_reg_647_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (fifo_B_PE_0_0_x255_full_n = ap_const_logic_0));
    end process;


    ap_block_pp1_stage0_11001_assign_proc : process(fifo_B_PE_0_0_x255_full_n, ap_enable_reg_pp1_iter2, icmp_ln890_547_reg_647_pp1_iter1_reg)
    begin
                ap_block_pp1_stage0_11001 <= ((icmp_ln890_547_reg_647_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (fifo_B_PE_0_0_x255_full_n = ap_const_logic_0));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(fifo_B_PE_0_0_x255_full_n, ap_enable_reg_pp1_iter2, icmp_ln890_547_reg_647_pp1_iter1_reg)
    begin
                ap_block_pp1_stage0_subdone <= ((icmp_ln890_547_reg_647_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (fifo_B_PE_0_0_x255_full_n = ap_const_logic_0));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(fifo_B_B_IO_L2_in_0_x214_empty_n, fifo_B_B_IO_L2_in_1_x215_full_n, icmp_ln890_reg_604, select_ln13597_1_reg_608)
    begin
                ap_block_state3_pp0_stage0_iter1 <= (((select_ln13597_1_reg_608 = ap_const_lv1_0) and (fifo_B_B_IO_L2_in_1_x215_full_n = ap_const_logic_0)) or ((icmp_ln890_reg_604 = ap_const_lv1_0) and (fifo_B_B_IO_L2_in_0_x214_empty_n = ap_const_logic_0)));
    end process;

        ap_block_state5_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state7_pp1_stage0_iter2_assign_proc : process(fifo_B_PE_0_0_x255_full_n, icmp_ln890_547_reg_647_pp1_iter1_reg)
    begin
                ap_block_state7_pp1_stage0_iter2 <= ((icmp_ln890_547_reg_647_pp1_iter1_reg = ap_const_lv1_0) and (fifo_B_PE_0_0_x255_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln890_fu_264_p2)
    begin
        if ((icmp_ln890_fu_264_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state5_assign_proc : process(icmp_ln890_547_fu_458_p2)
    begin
        if ((icmp_ln890_547_fu_458_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_c5_V_phi_fu_218_p4_assign_proc : process(ap_block_pp1_stage0, icmp_ln890_547_reg_647, c5_V_reg_214, ap_CS_fsm_pp1_stage0, select_ln890_400_reg_661, ap_enable_reg_pp1_iter1)
    begin
        if (((icmp_ln890_547_reg_647 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_c5_V_phi_fu_218_p4 <= select_ln890_400_reg_661;
        else 
            ap_phi_mux_c5_V_phi_fu_218_p4 <= c5_V_reg_214;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    cmp_i_i7252_fu_296_p2 <= "1" when (c3_V_reg_159 = ap_const_lv2_0) else "0";
    cmp_i_i72_mid1_fu_290_p2 <= "1" when (add_ln691_fu_270_p2 = ap_const_lv2_0) else "0";
    empty_1464_fu_452_p2 <= std_logic_vector(unsigned(tmp_cast_fu_444_p3) + unsigned(zext_ln13613_fu_436_p1));
    empty_1465_fu_516_p1 <= add_ln691_725_fu_510_p2(6 - 1 downto 0);
    empty_1466_fu_581_p2 <= std_logic_vector(unsigned(tmp_1157_cast_fu_574_p3) + unsigned(zext_ln13615_fu_565_p1));
    empty_fu_440_p1 <= c6_V_reg_236(6 - 1 downto 0);

    fifo_B_B_IO_L2_in_0_x214_blk_n_assign_proc : process(fifo_B_B_IO_L2_in_0_x214_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln890_reg_604)
    begin
        if (((icmp_ln890_reg_604 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fifo_B_B_IO_L2_in_0_x214_blk_n <= fifo_B_B_IO_L2_in_0_x214_empty_n;
        else 
            fifo_B_B_IO_L2_in_0_x214_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    fifo_B_B_IO_L2_in_0_x214_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln890_reg_604, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln890_reg_604 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fifo_B_B_IO_L2_in_0_x214_read <= ap_const_logic_1;
        else 
            fifo_B_B_IO_L2_in_0_x214_read <= ap_const_logic_0;
        end if; 
    end process;


    fifo_B_B_IO_L2_in_1_x215_blk_n_assign_proc : process(fifo_B_B_IO_L2_in_1_x215_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, select_ln13597_1_reg_608)
    begin
        if (((select_ln13597_1_reg_608 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fifo_B_B_IO_L2_in_1_x215_blk_n <= fifo_B_B_IO_L2_in_1_x215_full_n;
        else 
            fifo_B_B_IO_L2_in_1_x215_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    fifo_B_B_IO_L2_in_1_x215_din <= fifo_B_B_IO_L2_in_0_x214_dout;

    fifo_B_B_IO_L2_in_1_x215_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, select_ln13597_1_reg_608, ap_block_pp0_stage0_11001)
    begin
        if (((select_ln13597_1_reg_608 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fifo_B_B_IO_L2_in_1_x215_write <= ap_const_logic_1;
        else 
            fifo_B_B_IO_L2_in_1_x215_write <= ap_const_logic_0;
        end if; 
    end process;


    fifo_B_PE_0_0_x255_blk_n_assign_proc : process(fifo_B_PE_0_0_x255_full_n, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0, icmp_ln890_547_reg_647_pp1_iter1_reg)
    begin
        if (((icmp_ln890_547_reg_647_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            fifo_B_PE_0_0_x255_blk_n <= fifo_B_PE_0_0_x255_full_n;
        else 
            fifo_B_PE_0_0_x255_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    fifo_B_PE_0_0_x255_din <= local_B_pong_V_q0;

    fifo_B_PE_0_0_x255_write_assign_proc : process(ap_enable_reg_pp1_iter2, icmp_ln890_547_reg_647_pp1_iter1_reg, ap_block_pp1_stage0_11001)
    begin
        if (((icmp_ln890_547_reg_647_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            fifo_B_PE_0_0_x255_write <= ap_const_logic_1;
        else 
            fifo_B_PE_0_0_x255_write <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln890_545_fu_276_p2 <= "1" when (indvar_flatten_reg_170 = ap_const_lv13_800) else "0";
    icmp_ln890_546_fu_316_p2 <= "1" when (c5_V_1_reg_192 = ap_const_lv6_20) else "0";
    icmp_ln890_547_fu_458_p2 <= "1" when (indvar_flatten40_reg_203 = ap_const_lv16_8000) else "0";
    icmp_ln890_548_fu_470_p2 <= "1" when (indvar_flatten22_reg_225 = ap_const_lv12_400) else "0";
    icmp_ln890_549_fu_498_p2 <= "1" when (c7_V_reg_247 = ap_const_lv5_10) else "0";
    icmp_ln890_fu_264_p2 <= "1" when (indvar_flatten13_reg_148 = ap_const_lv13_1000) else "0";
    local_B_pong_V_address0 <= select_ln890_481_cast_fu_594_p1(11 - 1 downto 0);
    local_B_pong_V_address1 <= zext_ln13606_1_fu_426_p1(11 - 1 downto 0);

    local_B_pong_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            local_B_pong_V_ce0 <= ap_const_logic_1;
        else 
            local_B_pong_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    local_B_pong_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            local_B_pong_V_ce1 <= ap_const_logic_1;
        else 
            local_B_pong_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    local_B_pong_V_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, select_ln13597_1_reg_608, ap_block_pp0_stage0_11001)
    begin
        if (((select_ln13597_1_reg_608 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            local_B_pong_V_we1 <= ap_const_logic_1;
        else 
            local_B_pong_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln691_fu_534_p2 <= (icmp_ln890_548_fu_470_p2 or and_ln890_fu_504_p2);
    or_ln890_fu_342_p2 <= (icmp_ln890_545_fu_276_p2 or and_ln13597_fu_322_p2);
    select_ln13597_1_fu_302_p3 <= 
        cmp_i_i72_mid1_fu_290_p2 when (icmp_ln890_545_fu_276_p2(0) = '1') else 
        cmp_i_i7252_fu_296_p2;
    select_ln13597_2_fu_364_p3 <= 
        ap_const_lv6_0 when (icmp_ln890_545_fu_276_p2(0) = '1') else 
        trunc_ln13606_1_fu_360_p1;
    select_ln13597_fu_282_p3 <= 
        ap_const_lv7_0 when (icmp_ln890_545_fu_276_p2(0) = '1') else 
        c4_V_reg_181;
    select_ln691_fu_540_p3 <= 
        ap_const_lv5_1 when (or_ln691_fu_534_p2(0) = '1') else 
        add_ln691_726_fu_528_p2;
    select_ln890_396_fu_348_p3 <= 
        ap_const_lv6_0 when (or_ln890_fu_342_p2(0) = '1') else 
        c5_V_1_reg_192;
    select_ln890_397_fu_372_p3 <= 
        trunc_ln13606_fu_356_p1 when (and_ln13597_fu_322_p2(0) = '1') else 
        select_ln13597_2_fu_364_p3;
    select_ln890_398_fu_388_p3 <= 
        add_ln691_723_fu_336_p2 when (and_ln13597_fu_322_p2(0) = '1') else 
        select_ln13597_fu_282_p3;
    select_ln890_399_fu_476_p3 <= 
        ap_const_lv7_0 when (icmp_ln890_548_fu_470_p2(0) = '1') else 
        c6_V_reg_236;
    select_ln890_400_fu_484_p3 <= 
        add_ln691_724_fu_464_p2 when (icmp_ln890_548_fu_470_p2(0) = '1') else 
        ap_phi_mux_c5_V_phi_fu_218_p4;
    select_ln890_401_fu_568_p3 <= 
        zext_ln890_fu_562_p1 when (icmp_ln890_548_reg_656(0) = '1') else 
        empty_1464_reg_642;
    select_ln890_402_fu_587_p3 <= 
        empty_1466_fu_581_p2 when (and_ln890_reg_667(0) = '1') else 
        select_ln890_401_fu_568_p3;
    select_ln890_403_fu_520_p3 <= 
        add_ln691_725_fu_510_p2 when (and_ln890_fu_504_p2(0) = '1') else 
        select_ln890_399_fu_476_p3;
    select_ln890_404_fu_554_p3 <= 
        ap_const_lv12_1 when (icmp_ln890_548_fu_470_p2(0) = '1') else 
        add_ln890_fu_548_p2;
    select_ln890_405_fu_418_p3 <= 
        ap_const_lv13_1 when (icmp_ln890_545_fu_276_p2(0) = '1') else 
        add_ln890_159_fu_412_p2;
    select_ln890_481_cast_fu_594_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln890_402_fu_587_p3),64));
    select_ln890_fu_328_p3 <= 
        add_ln691_fu_270_p2 when (icmp_ln890_545_fu_276_p2(0) = '1') else 
        c3_V_reg_159;
    tmp_1156_cast_fu_380_p3 <= (select_ln890_397_fu_372_p3 & ap_const_lv5_0);
    tmp_1157_cast_fu_574_p3 <= (empty_1465_reg_672 & ap_const_lv5_0);
    tmp_cast_fu_444_p3 <= (empty_fu_440_p1 & ap_const_lv5_0);
    trunc_ln13606_1_fu_360_p1 <= c4_V_reg_181(6 - 1 downto 0);
    trunc_ln13606_fu_356_p1 <= add_ln691_723_fu_336_p2(6 - 1 downto 0);
    xor_ln13597_fu_310_p2 <= (icmp_ln890_545_fu_276_p2 xor ap_const_lv1_1);
    xor_ln890_fu_492_p2 <= (icmp_ln890_548_fu_470_p2 xor ap_const_lv1_1);
    zext_ln13606_1_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln13606_reg_622),64));
    zext_ln13606_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln890_396_fu_348_p3),11));
    zext_ln13613_fu_436_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_c5_V_phi_fu_218_p4),11));
    zext_ln13615_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln890_400_reg_661),11));
    zext_ln890_fu_562_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln691_724_reg_651),11));
end behav;
