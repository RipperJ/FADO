-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_nondf_kernel_cov_x1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    xout_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    xout_ce0 : OUT STD_LOGIC;
    xout_q0 : IN STD_LOGIC_VECTOR (511 downto 0);
    xin_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    xin_ce0 : OUT STD_LOGIC;
    xin_we0 : OUT STD_LOGIC;
    xin_d0 : OUT STD_LOGIC_VECTOR (502 downto 0);
    grp_fu_159_p_din0 : OUT STD_LOGIC_VECTOR (511 downto 0);
    grp_fu_159_p_din1 : OUT STD_LOGIC_VECTOR (511 downto 0);
    grp_fu_159_p_dout0 : IN STD_LOGIC_VECTOR (511 downto 0);
    grp_fu_159_p_ce : OUT STD_LOGIC;
    grp_fu_163_p_din0 : OUT STD_LOGIC_VECTOR (511 downto 0);
    grp_fu_163_p_din1 : OUT STD_LOGIC_VECTOR (513 downto 0);
    grp_fu_163_p_dout0 : IN STD_LOGIC_VECTOR (1024 downto 0);
    grp_fu_163_p_ce : OUT STD_LOGIC );
end;


architecture behav of top_nondf_kernel_cov_x1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000001000000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000010000000000000000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000100000000000000000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (28 downto 0) := "00000000001000000000000000000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (28 downto 0) := "00000000010000000000000000000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (28 downto 0) := "00000000100000000000000000000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (28 downto 0) := "00000001000000000000000000000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (28 downto 0) := "00000010000000000000000000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (28 downto 0) := "00000100000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (28 downto 0) := "00001000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (28 downto 0) := "00010000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (28 downto 0) := "00100000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (28 downto 0) := "01000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (28 downto 0) := "10000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv19_40000 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_lv14_1000 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv1025_lc_3 : STD_LOGIC_VECTOR (1024 downto
    constant ap_const_lv32_20A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000001010";
    constant ap_const_lv32_400 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten15_reg_283 : STD_LOGIC_VECTOR (18 downto 0);
    signal i_3_reg_295 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten_reg_306 : STD_LOGIC_VECTOR (13 downto 0);
    signal j_3_reg_317 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_reg_328 : STD_LOGIC_VECTOR (6 downto 0);
    signal conv3_i1613_reg_339 : STD_LOGIC_VECTOR (511 downto 0);
    signal data_V_q0 : STD_LOGIC_VECTOR (511 downto 0);
    signal reg_372 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state19_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state27_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal icmp_ln85_reg_956 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln67_fu_376_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln67_reg_837 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_cast_fu_386_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_cast_reg_842 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln68_fu_400_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln68_reg_850 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal data_V_addr_reg_855 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln68_fu_421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xout_load_reg_868 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln73_fu_427_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln73_reg_873 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln73_1_fu_438_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln73_1_reg_878 : STD_LOGIC_VECTOR (11 downto 0);
    signal mean_V_addr_reg_886 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln73_fu_442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln76_fu_448_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln76_reg_891 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_493_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal add_ln81_fu_499_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln81_reg_909 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_3_cast_fu_509_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_3_cast_reg_914 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln81_fu_517_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln82_fu_523_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln82_reg_923 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal zext_ln82_fu_529_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln82_reg_928 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_V_addr_2_reg_933 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_fu_557_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal sub_ln692_reg_951 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal icmp_ln85_fu_563_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state17_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state33_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln85_reg_956_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln85_fu_581_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln85_reg_960 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln85_1_fu_589_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln85_1_reg_966 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln88_fu_597_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln88_reg_972 : STD_LOGIC_VECTOR (5 downto 0);
    signal and_ln85_fu_613_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln85_reg_977 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln86_fu_619_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln86_reg_982 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln86_fu_625_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln86_reg_987 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln215_fu_633_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln215_reg_992 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln86_3_fu_643_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln86_3_reg_997 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln86_2_fu_659_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln86_2_reg_1002 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state18_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state26_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state34_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal add_ln92_fu_677_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln92_reg_1008 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln92_reg_1008_pp0_iter1_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_8_cast_fu_683_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_8_cast_reg_1013 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln89_fu_701_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln89_reg_1023 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln89_1_fu_706_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln89_1_reg_1028 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln89_1_reg_1028_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln88_fu_722_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln88_reg_1032 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln85_1_fu_738_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln85_1_reg_1042 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state20_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state28_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal select_ln86_1_fu_744_p3 : STD_LOGIC_VECTOR (511 downto 0);
    signal select_ln86_1_reg_1047 : STD_LOGIC_VECTOR (511 downto 0);
    signal data_V_load_3_reg_1052 : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_fu_751_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal mul_ln691_reg_1057 : STD_LOGIC_VECTOR (511 downto 0);
    signal cov_V_addr_reg_1062 : STD_LOGIC_VECTOR (11 downto 0);
    signal cov_V_addr_2_reg_1067 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_756_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal add_ln691_1_reg_1072 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal zext_ln693_fu_768_p1 : STD_LOGIC_VECTOR (1024 downto 0);
    signal trunc_ln693_1_reg_1083 : STD_LOGIC_VECTOR (502 downto 0);
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_state24_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_state32_pp0_stage7_iter1 : BOOLEAN;
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal add_ln95_fu_787_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln95_reg_1088 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal tmp_9_cast_fu_797_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_9_cast_reg_1093 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln96_fu_811_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln96_reg_1101 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal zext_ln97_1_fu_826_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln97_1_reg_1106 : STD_LOGIC_VECTOR (63 downto 0);
    signal cov_V_q0 : STD_LOGIC_VECTOR (502 downto 0);
    signal cov_V_load_reg_1119 : STD_LOGIC_VECTOR (502 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state20 : STD_LOGIC;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal mean_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mean_V_ce0 : STD_LOGIC;
    signal mean_V_we0 : STD_LOGIC;
    signal mean_V_d0 : STD_LOGIC_VECTOR (501 downto 0);
    signal mean_V_q0 : STD_LOGIC_VECTOR (501 downto 0);
    signal data_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal data_V_ce0 : STD_LOGIC;
    signal data_V_we0 : STD_LOGIC;
    signal data_V_d0 : STD_LOGIC_VECTOR (511 downto 0);
    signal cov_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal cov_V_ce0 : STD_LOGIC;
    signal cov_V_we0 : STD_LOGIC;
    signal i_reg_205 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_1_reg_216 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln67_fu_394_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_reg_227 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln76_fu_476_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_reg_238 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_i2614_reg_249 : STD_LOGIC_VECTOR (511 downto 0);
    signal i_1_reg_261 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln82_fu_547_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_2_reg_272 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_phi_mux_indvar_flatten15_phi_fu_287_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_i_3_phi_fu_299_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_310_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_phi_mux_j_3_phi_fu_321_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_phi_mux_k_phi_fu_332_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_phi_mux_conv3_i1613_phi_fu_343_p4 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal i_4_reg_350 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln96_fu_831_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal j_4_reg_361 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal icmp_ln95_fu_805_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln69_1_fu_415_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln73_fu_433_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln691_fu_471_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln692_1_fu_542_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln215_fu_696_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln215_1_fu_733_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln92_1_fu_760_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln88_1_fu_764_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln69_fu_382_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln69_fu_406_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln69_fu_410_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln691_fu_454_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_4_cast_fu_458_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln691_2_fu_466_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal trunc_ln692_fu_505_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln692_fu_533_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln692_fu_537_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_557_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal icmp_ln86_fu_575_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln85_fu_569_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln89_fu_607_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln85_fu_601_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln86_1_fu_637_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln86_fu_654_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln92_fu_665_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_7_cast_fu_669_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln88_fu_651_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln215_fu_690_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_5_cast_fu_712_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln92_fu_719_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln215_1_fu_728_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_751_p0 : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_fu_751_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal grp_fu_771_p0 : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_fu_771_p1 : STD_LOGIC_VECTOR (513 downto 0);
    signal grp_fu_771_p2 : STD_LOGIC_VECTOR (1024 downto 0);
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal trunc_ln97_fu_793_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln97_fu_817_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln97_fu_821_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_751_ce : STD_LOGIC;
    signal grp_fu_771_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_state21_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state29_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_state22_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_state30_pp0_stage5_iter1 : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_state23_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_state31_pp0_stage6_iter1 : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component top_add_512ns_512ns_512_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (511 downto 0);
        din1 : IN STD_LOGIC_VECTOR (511 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (511 downto 0) );
    end component;


    component top_sub_512ns_512ns_512_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (511 downto 0);
        din1 : IN STD_LOGIC_VECTOR (511 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (511 downto 0) );
    end component;


    component top_mul_512s_512s_512_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (511 downto 0);
        din1 : IN STD_LOGIC_VECTOR (511 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (511 downto 0) );
    end component;


    component top_mul_512ns_514ns_1025_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (511 downto 0);
        din1 : IN STD_LOGIC_VECTOR (513 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (1024 downto 0) );
    end component;


    component top_nondf_kernel_cov_x0_mean_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (501 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (501 downto 0) );
    end component;


    component top_nondf_kernel_cov_x0_data_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (511 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (511 downto 0) );
    end component;


    component top_nondf_kernel_cov_x0_cov_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (502 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (502 downto 0) );
    end component;



begin
    mean_V_U : component top_nondf_kernel_cov_x0_mean_V
    generic map (
        DataWidth => 502,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mean_V_address0,
        ce0 => mean_V_ce0,
        we0 => mean_V_we0,
        d0 => mean_V_d0,
        q0 => mean_V_q0);

    data_V_U : component top_nondf_kernel_cov_x0_data_V
    generic map (
        DataWidth => 512,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => data_V_address0,
        ce0 => data_V_ce0,
        we0 => data_V_we0,
        d0 => data_V_d0,
        q0 => data_V_q0);

    cov_V_U : component top_nondf_kernel_cov_x0_cov_V
    generic map (
        DataWidth => 503,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cov_V_address0,
        ce0 => cov_V_ce0,
        we0 => cov_V_we0,
        d0 => trunc_ln693_1_reg_1083,
        q0 => cov_V_q0);

    add_512ns_512ns_512_2_1_U1177 : component top_add_512ns_512ns_512_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 512,
        din1_WIDTH => 512,
        dout_WIDTH => 512)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_372,
        din1 => add_i2614_reg_249,
        ce => ap_const_logic_1,
        dout => grp_fu_493_p2);

    sub_512ns_512ns_512_2_1_U1178 : component top_sub_512ns_512ns_512_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 512,
        din1_WIDTH => 512,
        dout_WIDTH => 512)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_372,
        din1 => grp_fu_557_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_557_p2);

    add_512ns_512ns_512_2_1_U1180 : component top_add_512ns_512ns_512_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 512,
        din1_WIDTH => 512,
        dout_WIDTH => 512)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul_ln691_reg_1057,
        din1 => select_ln86_1_reg_1047,
        ce => ap_const_logic_1,
        dout => grp_fu_756_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state20) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln81_fu_517_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage7_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln81_fu_517_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    add_i2614_reg_249_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln73_fu_442_p2 = ap_const_lv1_0))) then 
                add_i2614_reg_249 <= ap_const_lv512_lc_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                add_i2614_reg_249 <= grp_fu_493_p2;
            end if; 
        end if;
    end process;

    conv3_i1613_reg_339_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln81_fu_517_p2 = ap_const_lv1_1))) then 
                conv3_i1613_reg_339 <= ap_const_lv512_lc_1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln85_reg_956_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                conv3_i1613_reg_339 <= add_ln691_1_reg_1072;
            end if; 
        end if;
    end process;

    i_1_reg_261_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln73_fu_442_p2 = ap_const_lv1_1))) then 
                i_1_reg_261 <= ap_const_lv7_0;
            elsif (((icmp_ln82_fu_547_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                i_1_reg_261 <= add_ln81_reg_909;
            end if; 
        end if;
    end process;

    i_2_reg_238_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln73_fu_442_p2 = ap_const_lv1_0))) then 
                i_2_reg_238 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                i_2_reg_238 <= add_ln76_reg_891;
            end if; 
        end if;
    end process;

    i_3_reg_295_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln81_fu_517_p2 = ap_const_lv1_1))) then 
                i_3_reg_295 <= ap_const_lv7_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln85_reg_956 = ap_const_lv1_0))) then 
                i_3_reg_295 <= select_ln85_1_reg_966;
            end if; 
        end if;
    end process;

    i_4_reg_350_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                i_4_reg_350 <= ap_const_lv7_0;
            elsif (((icmp_ln96_fu_831_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
                i_4_reg_350 <= add_ln95_reg_1088;
            end if; 
        end if;
    end process;

    i_reg_205_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_205 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln68_fu_421_p2 = ap_const_lv1_1))) then 
                i_reg_205 <= add_ln67_reg_837;
            end if; 
        end if;
    end process;

    indvar_flatten15_reg_283_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln81_fu_517_p2 = ap_const_lv1_1))) then 
                indvar_flatten15_reg_283 <= ap_const_lv19_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln85_reg_956 = ap_const_lv1_0))) then 
                indvar_flatten15_reg_283 <= add_ln85_1_reg_1042;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_306_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln81_fu_517_p2 = ap_const_lv1_1))) then 
                indvar_flatten_reg_306 <= ap_const_lv14_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln85_reg_956 = ap_const_lv1_0))) then 
                indvar_flatten_reg_306 <= select_ln86_3_reg_997;
            end if; 
        end if;
    end process;

    j_1_reg_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln67_fu_394_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_1_reg_216 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                j_1_reg_216 <= add_ln68_reg_850;
            end if; 
        end if;
    end process;

    j_2_reg_272_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln81_fu_517_p2 = ap_const_lv1_0))) then 
                j_2_reg_272 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                j_2_reg_272 <= add_ln82_reg_923;
            end if; 
        end if;
    end process;

    j_3_reg_317_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln81_fu_517_p2 = ap_const_lv1_1))) then 
                j_3_reg_317 <= ap_const_lv7_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln85_reg_956 = ap_const_lv1_0))) then 
                j_3_reg_317 <= select_ln86_2_reg_1002;
            end if; 
        end if;
    end process;

    j_4_reg_361_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln95_fu_805_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state36))) then 
                j_4_reg_361 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
                j_4_reg_361 <= add_ln96_reg_1101;
            end if; 
        end if;
    end process;

    j_reg_227_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln67_fu_394_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_227 <= ap_const_lv7_0;
            elsif (((icmp_ln76_fu_476_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                j_reg_227 <= add_ln73_reg_873;
            end if; 
        end if;
    end process;

    k_reg_328_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln81_fu_517_p2 = ap_const_lv1_1))) then 
                k_reg_328 <= ap_const_lv7_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln85_reg_956 = ap_const_lv1_0))) then 
                k_reg_328 <= add_ln89_reg_1023;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln67_reg_837 <= add_ln67_fu_376_p2;
                    tmp_cast_reg_842(11 downto 6) <= tmp_cast_fu_386_p3(11 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln68_reg_850 <= add_ln68_fu_400_p2;
                data_V_addr_reg_855 <= zext_ln69_1_fu_415_p1(12 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln85_reg_956_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                add_ln691_1_reg_1072 <= grp_fu_756_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add_ln73_reg_873 <= add_ln73_fu_427_p2;
                    zext_ln73_1_reg_878(6 downto 0) <= zext_ln73_1_fu_438_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                add_ln76_reg_891 <= add_ln76_fu_448_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                add_ln81_reg_909 <= add_ln81_fu_499_p2;
                    tmp_3_cast_reg_914(11 downto 6) <= tmp_3_cast_fu_509_p3(11 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                add_ln82_reg_923 <= add_ln82_fu_523_p2;
                data_V_addr_2_reg_933 <= zext_ln692_1_fu_542_p1(12 - 1 downto 0);
                    zext_ln82_reg_928(6 downto 0) <= zext_ln82_fu_529_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                add_ln85_1_reg_1042 <= add_ln85_1_fu_738_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln85_reg_956 = ap_const_lv1_0))) then
                add_ln88_reg_1032 <= add_ln88_fu_722_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln85_reg_956 = ap_const_lv1_0))) then
                add_ln89_reg_1023 <= add_ln89_fu_701_p2;
                select_ln86_2_reg_1002 <= select_ln86_2_fu_659_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln85_reg_956 = ap_const_lv1_0))) then
                add_ln92_reg_1008 <= add_ln92_fu_677_p2;
                icmp_ln89_1_reg_1028 <= icmp_ln89_1_fu_706_p2;
                    tmp_8_cast_reg_1013(11 downto 6) <= tmp_8_cast_fu_683_p3(11 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln92_reg_1008_pp0_iter1_reg <= add_ln92_reg_1008;
                icmp_ln89_1_reg_1028_pp0_iter1_reg <= icmp_ln89_1_reg_1028;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                add_ln95_reg_1088 <= add_ln95_fu_787_p2;
                    tmp_9_cast_reg_1093(11 downto 6) <= tmp_9_cast_fu_797_p3(11 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                add_ln96_reg_1101 <= add_ln96_fu_811_p2;
                    zext_ln97_1_reg_1106(11 downto 0) <= zext_ln97_1_fu_826_p1(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln85_fu_563_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln85_reg_977 <= and_ln85_fu_613_p2;
                or_ln86_reg_982 <= or_ln86_fu_619_p2;
                select_ln85_reg_960 <= select_ln85_fu_581_p3;
                select_ln86_reg_987 <= select_ln86_fu_625_p3;
                trunc_ln215_reg_992 <= trunc_ln215_fu_633_p1;
                trunc_ln88_reg_972 <= trunc_ln88_fu_597_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln85_reg_956_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                cov_V_addr_2_reg_1067 <= zext_ln88_1_fu_764_p1(12 - 1 downto 0);
                cov_V_addr_reg_1062 <= zext_ln92_1_fu_760_p1(12 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                cov_V_load_reg_1119 <= cov_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (icmp_ln85_reg_956 = ap_const_lv1_0))) then
                data_V_load_3_reg_1052 <= data_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln85_reg_956 <= icmp_ln85_fu_563_p2;
                icmp_ln85_reg_956_pp0_iter1_reg <= icmp_ln85_reg_956;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln73_fu_442_p2 = ap_const_lv1_0))) then
                mean_V_addr_reg_886 <= zext_ln73_fu_433_p1(6 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln85_reg_956 = ap_const_lv1_0))) then
                mul_ln691_reg_1057 <= grp_fu_159_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln85_reg_956 = ap_const_lv1_0)))) then
                reg_372 <= data_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln85_fu_563_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln85_1_reg_966 <= select_ln85_1_fu_589_p3;
                select_ln86_3_reg_997 <= select_ln86_3_fu_643_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (icmp_ln85_reg_956 = ap_const_lv1_0))) then
                select_ln86_1_reg_1047 <= select_ln86_1_fu_744_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                sub_ln692_reg_951 <= grp_fu_557_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (icmp_ln89_1_reg_1028_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then
                trunc_ln693_1_reg_1083 <= grp_fu_163_p_dout0(1024 downto 522);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                xout_load_reg_868 <= xout_q0;
            end if;
        end if;
    end process;
    tmp_cast_reg_842(5 downto 0) <= "000000";
    zext_ln73_1_reg_878(11 downto 7) <= "00000";
    tmp_3_cast_reg_914(5 downto 0) <= "000000";
    zext_ln82_reg_928(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    tmp_8_cast_reg_1013(5 downto 0) <= "000000";
    tmp_9_cast_reg_1093(5 downto 0) <= "000000";
    zext_ln97_1_reg_1106(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, icmp_ln85_reg_956, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln68_fu_421_p2, ap_CS_fsm_state6, icmp_ln73_fu_442_p2, ap_CS_fsm_state7, ap_CS_fsm_state11, icmp_ln81_fu_517_p2, ap_CS_fsm_state12, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_block_pp0_stage3_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage1_subdone, ap_enable_reg_pp0_iter2, icmp_ln67_fu_394_p2, icmp_ln76_fu_476_p2, icmp_ln82_fu_547_p2, icmp_ln96_fu_831_p2, icmp_ln95_fu_805_p2, ap_block_pp0_stage0_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln67_fu_394_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln68_fu_421_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln73_fu_442_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln76_fu_476_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln81_fu_517_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                if (((icmp_ln82_fu_547_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln85_reg_956 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln85_reg_956 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                if (((icmp_ln95_fu_805_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when ap_ST_fsm_state37 => 
                if (((icmp_ln96_fu_831_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln215_1_fu_728_p2 <= std_logic_vector(unsigned(tmp_8_cast_reg_1013) + unsigned(zext_ln92_fu_719_p1));
    add_ln215_fu_690_p2 <= std_logic_vector(unsigned(tmp_8_cast_fu_683_p3) + unsigned(zext_ln88_fu_651_p1));
    add_ln67_fu_376_p2 <= std_logic_vector(unsigned(i_reg_205) + unsigned(ap_const_lv7_1));
    add_ln68_fu_400_p2 <= std_logic_vector(unsigned(j_1_reg_216) + unsigned(ap_const_lv7_1));
    add_ln691_2_fu_466_p2 <= std_logic_vector(unsigned(tmp_4_cast_fu_458_p3) + unsigned(zext_ln73_1_reg_878));
    add_ln692_fu_537_p2 <= std_logic_vector(unsigned(tmp_3_cast_reg_914) + unsigned(zext_ln692_fu_533_p1));
    add_ln69_fu_410_p2 <= std_logic_vector(unsigned(tmp_cast_reg_842) + unsigned(zext_ln69_fu_406_p1));
    add_ln73_fu_427_p2 <= std_logic_vector(unsigned(j_reg_227) + unsigned(ap_const_lv7_1));
    add_ln76_fu_448_p2 <= std_logic_vector(unsigned(i_2_reg_238) + unsigned(ap_const_lv7_1));
    add_ln81_fu_499_p2 <= std_logic_vector(unsigned(i_1_reg_261) + unsigned(ap_const_lv7_1));
    add_ln82_fu_523_p2 <= std_logic_vector(unsigned(j_2_reg_272) + unsigned(ap_const_lv7_1));
    add_ln85_1_fu_738_p2 <= std_logic_vector(unsigned(indvar_flatten15_reg_283) + unsigned(ap_const_lv19_1));
    add_ln85_fu_569_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_3_phi_fu_299_p4) + unsigned(ap_const_lv7_1));
    add_ln86_1_fu_637_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_310_p4) + unsigned(ap_const_lv14_1));
    add_ln86_fu_654_p2 <= std_logic_vector(unsigned(select_ln85_reg_960) + unsigned(ap_const_lv7_1));
    add_ln88_fu_722_p2 <= std_logic_vector(unsigned(tmp_5_cast_fu_712_p3) + unsigned(zext_ln92_fu_719_p1));
    add_ln89_fu_701_p2 <= std_logic_vector(unsigned(select_ln86_reg_987) + unsigned(ap_const_lv7_1));
    add_ln92_fu_677_p2 <= std_logic_vector(unsigned(tmp_7_cast_fu_669_p3) + unsigned(zext_ln88_fu_651_p1));
    add_ln95_fu_787_p2 <= std_logic_vector(unsigned(i_4_reg_350) + unsigned(ap_const_lv7_1));
    add_ln96_fu_811_p2 <= std_logic_vector(unsigned(j_4_reg_361) + unsigned(ap_const_lv7_1));
    add_ln97_fu_821_p2 <= std_logic_vector(unsigned(tmp_9_cast_reg_1093) + unsigned(zext_ln97_fu_817_p1));
    and_ln85_fu_613_p2 <= (xor_ln85_fu_601_p2 and icmp_ln89_fu_607_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(16);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(17);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(18);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(19);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(20);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(23);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state35 <= ap_CS_fsm(24);
    ap_CS_fsm_state36 <= ap_CS_fsm(25);
    ap_CS_fsm_state37 <= ap_CS_fsm(26);
    ap_CS_fsm_state38 <= ap_CS_fsm(27);
    ap_CS_fsm_state39 <= ap_CS_fsm(28);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage5_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage6_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage7_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state20_assign_proc : process(icmp_ln85_reg_956)
    begin
        if ((icmp_ln85_reg_956 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state20 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state20 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state36, icmp_ln95_fu_805_p2)
    begin
        if ((((icmp_ln95_fu_805_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state36)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_conv3_i1613_phi_fu_343_p4_assign_proc : process(conv3_i1613_reg_339, icmp_ln85_reg_956_pp0_iter1_reg, ap_CS_fsm_pp0_stage3, add_ln691_1_reg_1072, ap_enable_reg_pp0_iter1, ap_block_pp0_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln85_reg_956_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_phi_mux_conv3_i1613_phi_fu_343_p4 <= add_ln691_1_reg_1072;
        else 
            ap_phi_mux_conv3_i1613_phi_fu_343_p4 <= conv3_i1613_reg_339;
        end if; 
    end process;


    ap_phi_mux_i_3_phi_fu_299_p4_assign_proc : process(i_3_reg_295, icmp_ln85_reg_956, ap_CS_fsm_pp0_stage0, select_ln85_1_reg_966, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln85_reg_956 = ap_const_lv1_0))) then 
            ap_phi_mux_i_3_phi_fu_299_p4 <= select_ln85_1_reg_966;
        else 
            ap_phi_mux_i_3_phi_fu_299_p4 <= i_3_reg_295;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten15_phi_fu_287_p4_assign_proc : process(indvar_flatten15_reg_283, icmp_ln85_reg_956, ap_CS_fsm_pp0_stage0, add_ln85_1_reg_1042, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln85_reg_956 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten15_phi_fu_287_p4 <= add_ln85_1_reg_1042;
        else 
            ap_phi_mux_indvar_flatten15_phi_fu_287_p4 <= indvar_flatten15_reg_283;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_310_p4_assign_proc : process(indvar_flatten_reg_306, icmp_ln85_reg_956, ap_CS_fsm_pp0_stage0, select_ln86_3_reg_997, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln85_reg_956 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_310_p4 <= select_ln86_3_reg_997;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_310_p4 <= indvar_flatten_reg_306;
        end if; 
    end process;


    ap_phi_mux_j_3_phi_fu_321_p4_assign_proc : process(j_3_reg_317, icmp_ln85_reg_956, ap_CS_fsm_pp0_stage0, select_ln86_2_reg_1002, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln85_reg_956 = ap_const_lv1_0))) then 
            ap_phi_mux_j_3_phi_fu_321_p4 <= select_ln86_2_reg_1002;
        else 
            ap_phi_mux_j_3_phi_fu_321_p4 <= j_3_reg_317;
        end if; 
    end process;


    ap_phi_mux_k_phi_fu_332_p4_assign_proc : process(k_reg_328, icmp_ln85_reg_956, ap_CS_fsm_pp0_stage0, add_ln89_reg_1023, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln85_reg_956 = ap_const_lv1_0))) then 
            ap_phi_mux_k_phi_fu_332_p4 <= add_ln89_reg_1023;
        else 
            ap_phi_mux_k_phi_fu_332_p4 <= k_reg_328;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state36, icmp_ln95_fu_805_p2)
    begin
        if (((icmp_ln95_fu_805_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    cov_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, cov_V_addr_reg_1062, cov_V_addr_2_reg_1067, ap_CS_fsm_state37, zext_ln97_1_fu_826_p1, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            cov_V_address0 <= zext_ln97_1_fu_826_p1(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            cov_V_address0 <= cov_V_addr_reg_1062;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            cov_V_address0 <= cov_V_addr_2_reg_1067;
        else 
            cov_V_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    cov_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_state37, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            cov_V_ce0 <= ap_const_logic_1;
        else 
            cov_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cov_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln89_1_reg_1028_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln89_1_reg_1028_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln89_1_reg_1028_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            cov_V_we0 <= ap_const_logic_1;
        else 
            cov_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, data_V_addr_reg_855, ap_CS_fsm_state7, ap_CS_fsm_state12, data_V_addr_2_reg_933, ap_CS_fsm_pp0_stage1, ap_CS_fsm_state5, ap_CS_fsm_state16, zext_ln691_fu_471_p1, zext_ln692_1_fu_542_p1, zext_ln215_fu_696_p1, ap_block_pp0_stage1, zext_ln215_1_fu_733_p1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            data_V_address0 <= zext_ln215_1_fu_733_p1(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            data_V_address0 <= zext_ln215_fu_696_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            data_V_address0 <= data_V_addr_2_reg_933;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            data_V_address0 <= zext_ln692_1_fu_542_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            data_V_address0 <= zext_ln691_fu_471_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            data_V_address0 <= data_V_addr_reg_855;
        else 
            data_V_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    data_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage2_11001, ap_CS_fsm_state7, ap_CS_fsm_state12, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_state5, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            data_V_ce0 <= ap_const_logic_1;
        else 
            data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_V_d0_assign_proc : process(xout_load_reg_868, sub_ln692_reg_951, ap_CS_fsm_state5, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            data_V_d0 <= sub_ln692_reg_951;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            data_V_d0 <= xout_load_reg_868;
        else 
            data_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data_V_we0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            data_V_we0 <= ap_const_logic_1;
        else 
            data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_159_p_ce <= ap_const_logic_1;
    grp_fu_159_p_din0 <= data_V_load_3_reg_1052;
    grp_fu_159_p_din1 <= reg_372;
    grp_fu_163_p_ce <= ap_const_logic_1;
    grp_fu_163_p_din0 <= zext_ln693_fu_768_p1(512 - 1 downto 0);
    grp_fu_163_p_din1 <= ap_const_lv1025_lc_3(514 - 1 downto 0);
    grp_fu_557_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mean_V_q0),512));
    grp_fu_751_ce <= ap_const_logic_1;
    grp_fu_751_p0 <= data_V_load_3_reg_1052;
    grp_fu_751_p1 <= reg_372;
    grp_fu_751_p2 <= grp_fu_159_p_dout0;
    grp_fu_771_ce <= ap_const_logic_1;
    grp_fu_771_p0 <= zext_ln693_fu_768_p1(512 - 1 downto 0);
    grp_fu_771_p1 <= ap_const_lv1025_lc_3(514 - 1 downto 0);
    grp_fu_771_p2 <= grp_fu_163_p_dout0;
    icmp_ln67_fu_394_p2 <= "1" when (i_reg_205 = ap_const_lv7_40) else "0";
    icmp_ln68_fu_421_p2 <= "1" when (j_1_reg_216 = ap_const_lv7_40) else "0";
    icmp_ln73_fu_442_p2 <= "1" when (j_reg_227 = ap_const_lv7_40) else "0";
    icmp_ln76_fu_476_p2 <= "1" when (i_2_reg_238 = ap_const_lv7_40) else "0";
    icmp_ln81_fu_517_p2 <= "1" when (i_1_reg_261 = ap_const_lv7_40) else "0";
    icmp_ln82_fu_547_p2 <= "1" when (j_2_reg_272 = ap_const_lv7_40) else "0";
    icmp_ln85_fu_563_p2 <= "1" when (ap_phi_mux_indvar_flatten15_phi_fu_287_p4 = ap_const_lv19_40000) else "0";
    icmp_ln86_fu_575_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_310_p4 = ap_const_lv14_1000) else "0";
    icmp_ln89_1_fu_706_p2 <= "1" when (add_ln89_fu_701_p2 = ap_const_lv7_40) else "0";
    icmp_ln89_fu_607_p2 <= "1" when (ap_phi_mux_k_phi_fu_332_p4 = ap_const_lv7_40) else "0";
    icmp_ln95_fu_805_p2 <= "1" when (i_4_reg_350 = ap_const_lv7_40) else "0";
    icmp_ln96_fu_831_p2 <= "1" when (j_4_reg_361 = ap_const_lv7_40) else "0";

    mean_V_address0_assign_proc : process(ap_CS_fsm_state13, mean_V_addr_reg_886, ap_CS_fsm_state7, zext_ln82_reg_928)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            mean_V_address0 <= zext_ln82_reg_928(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            mean_V_address0 <= mean_V_addr_reg_886;
        else 
            mean_V_address0 <= "XXXXXX";
        end if; 
    end process;


    mean_V_ce0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            mean_V_ce0 <= ap_const_logic_1;
        else 
            mean_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mean_V_d0 <= add_i2614_reg_249(511 downto 10);

    mean_V_we0_assign_proc : process(ap_CS_fsm_state7, icmp_ln76_fu_476_p2)
    begin
        if (((icmp_ln76_fu_476_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            mean_V_we0 <= ap_const_logic_1;
        else 
            mean_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln86_fu_619_p2 <= (icmp_ln86_fu_575_p2 or and_ln85_fu_613_p2);
    select_ln85_1_fu_589_p3 <= 
        add_ln85_fu_569_p2 when (icmp_ln86_fu_575_p2(0) = '1') else 
        ap_phi_mux_i_3_phi_fu_299_p4;
    select_ln85_fu_581_p3 <= 
        ap_const_lv7_0 when (icmp_ln86_fu_575_p2(0) = '1') else 
        ap_phi_mux_j_3_phi_fu_321_p4;
    select_ln86_1_fu_744_p3 <= 
        ap_const_lv512_lc_1 when (or_ln86_reg_982(0) = '1') else 
        ap_phi_mux_conv3_i1613_phi_fu_343_p4;
    select_ln86_2_fu_659_p3 <= 
        add_ln86_fu_654_p2 when (and_ln85_reg_977(0) = '1') else 
        select_ln85_reg_960;
    select_ln86_3_fu_643_p3 <= 
        ap_const_lv14_1 when (icmp_ln86_fu_575_p2(0) = '1') else 
        add_ln86_1_fu_637_p2;
    select_ln86_fu_625_p3 <= 
        ap_const_lv7_0 when (or_ln86_fu_619_p2(0) = '1') else 
        ap_phi_mux_k_phi_fu_332_p4;
    tmp_3_cast_fu_509_p3 <= (trunc_ln692_fu_505_p1 & ap_const_lv6_0);
    tmp_4_cast_fu_458_p3 <= (trunc_ln691_fu_454_p1 & ap_const_lv6_0);
    tmp_5_cast_fu_712_p3 <= (trunc_ln88_reg_972 & ap_const_lv6_0);
    tmp_7_cast_fu_669_p3 <= (trunc_ln92_fu_665_p1 & ap_const_lv6_0);
    tmp_8_cast_fu_683_p3 <= (trunc_ln215_reg_992 & ap_const_lv6_0);
    tmp_9_cast_fu_797_p3 <= (trunc_ln97_fu_793_p1 & ap_const_lv6_0);
    tmp_cast_fu_386_p3 <= (trunc_ln69_fu_382_p1 & ap_const_lv6_0);
    trunc_ln215_fu_633_p1 <= select_ln86_fu_625_p3(6 - 1 downto 0);
    trunc_ln691_fu_454_p1 <= i_2_reg_238(6 - 1 downto 0);
    trunc_ln692_fu_505_p1 <= i_1_reg_261(6 - 1 downto 0);
    trunc_ln69_fu_382_p1 <= i_reg_205(6 - 1 downto 0);
    trunc_ln88_fu_597_p1 <= select_ln85_1_fu_589_p3(6 - 1 downto 0);
    trunc_ln92_fu_665_p1 <= select_ln86_2_fu_659_p3(6 - 1 downto 0);
    trunc_ln97_fu_793_p1 <= i_4_reg_350(6 - 1 downto 0);
    xin_address0 <= zext_ln97_1_reg_1106(12 - 1 downto 0);

    xin_ce0_assign_proc : process(ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            xin_ce0 <= ap_const_logic_1;
        else 
            xin_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    xin_d0 <= cov_V_load_reg_1119;

    xin_we0_assign_proc : process(ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            xin_we0 <= ap_const_logic_1;
        else 
            xin_we0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln85_fu_601_p2 <= (icmp_ln86_fu_575_p2 xor ap_const_lv1_1);
    xout_address0 <= zext_ln69_1_fu_415_p1(12 - 1 downto 0);

    xout_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            xout_ce0 <= ap_const_logic_1;
        else 
            xout_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln215_1_fu_733_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln215_1_fu_728_p2),64));
    zext_ln215_fu_696_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln215_fu_690_p2),64));
    zext_ln691_fu_471_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln691_2_fu_466_p2),64));
    zext_ln692_1_fu_542_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln692_fu_537_p2),64));
    zext_ln692_fu_533_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_2_reg_272),12));
    zext_ln693_fu_768_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln691_1_reg_1072),1025));
    zext_ln69_1_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln69_fu_410_p2),64));
    zext_ln69_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_216),12));
    zext_ln73_1_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_227),12));
    zext_ln73_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_227),64));
    zext_ln82_fu_529_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_2_reg_272),64));
    zext_ln88_1_fu_764_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln88_reg_1032),64));
    zext_ln88_fu_651_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln85_1_reg_966),12));
    zext_ln92_1_fu_760_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln92_reg_1008_pp0_iter1_reg),64));
    zext_ln92_fu_719_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln86_2_reg_1002),12));
    zext_ln97_1_fu_826_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln97_fu_821_p2),64));
    zext_ln97_fu_817_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_4_reg_361),12));
end behav;
