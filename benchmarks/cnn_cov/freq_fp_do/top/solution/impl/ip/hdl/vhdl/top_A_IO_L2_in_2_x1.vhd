-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_A_IO_L2_in_2_x1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    fifo_A_A_IO_L2_in_2_x13_dout : IN STD_LOGIC_VECTOR (255 downto 0);
    fifo_A_A_IO_L2_in_2_x13_empty_n : IN STD_LOGIC;
    fifo_A_A_IO_L2_in_2_x13_read : OUT STD_LOGIC;
    fifo_A_A_IO_L2_in_3_x14_din : OUT STD_LOGIC_VECTOR (255 downto 0);
    fifo_A_A_IO_L2_in_3_x14_full_n : IN STD_LOGIC;
    fifo_A_A_IO_L2_in_3_x14_write : OUT STD_LOGIC;
    fifo_A_PE_2_0_x122_din : OUT STD_LOGIC_VECTOR (255 downto 0);
    fifo_A_PE_2_0_x122_full_n : IN STD_LOGIC;
    fifo_A_PE_2_0_x122_write : OUT STD_LOGIC );
end;


architecture behav of top_A_IO_L2_in_2_x1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv13_1600 : STD_LOGIC_VECTOR (12 downto 0) := "1011000000000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv11_200 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv16_8000 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv12_400 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal fifo_A_A_IO_L2_in_2_x13_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln890_reg_532 : STD_LOGIC_VECTOR (0 downto 0);
    signal fifo_A_A_IO_L2_in_3_x14_blk_n : STD_LOGIC;
    signal select_ln6646_1_reg_536 : STD_LOGIC_VECTOR (0 downto 0);
    signal fifo_A_PE_2_0_x122_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal icmp_ln890_665_reg_580 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln890_665_reg_580_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten13_reg_147 : STD_LOGIC_VECTOR (12 downto 0);
    signal c3_V_reg_158 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_reg_169 : STD_LOGIC_VECTOR (10 downto 0);
    signal c4_V_reg_180 : STD_LOGIC_VECTOR (4 downto 0);
    signal c5_V_32_reg_191 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten33_reg_202 : STD_LOGIC_VECTOR (15 downto 0);
    signal c5_V_reg_213 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten21_reg_224 : STD_LOGIC_VECTOR (11 downto 0);
    signal c7_V_reg_235 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln890_213_fu_246_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln890_fu_252_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln6646_1_fu_290_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln6646_1_reg_536_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln890_fu_316_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln890_532_fu_376_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln6655_fu_388_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln6655_reg_550 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln691_858_fu_394_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln890_535_fu_406_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal local_A_pong_V_addr_reg_565 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_reg_570 : STD_LOGIC_VECTOR (255 downto 0);
    signal add_ln890_211_fu_418_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state6_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state8_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state9_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln890_665_fu_424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln890_665_reg_580_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln890_533_fu_442_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln890_533_reg_584 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln6672_fu_482_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln6672_reg_590 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln691_857_fu_486_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln890_534_fu_498_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal local_A_pong_V_q0 : STD_LOGIC_VECTOR (255 downto 0);
    signal local_A_pong_V_load_reg_610 : STD_LOGIC_VECTOR (255 downto 0);
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state6 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal local_A_pong_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal local_A_pong_V_ce0 : STD_LOGIC;
    signal local_A_pong_V_ce1 : STD_LOGIC;
    signal local_A_pong_V_we1 : STD_LOGIC;
    signal ap_phi_mux_c5_V_phi_fu_217_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln6655_1_fu_414_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln6672_fu_522_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal icmp_ln890_664_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln691_fu_258_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal cmp_i_i72_mid1_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp_i_i7244_fu_284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln89052_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln6646_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln6646_fu_270_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal and_ln6646_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln890_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln691_855_fu_324_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln6655_1_fu_348_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln6655_fu_344_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln6646_2_fu_352_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln890_531_fu_360_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln890_530_fu_336_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1284_cast_fu_368_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln6655_fu_384_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln890_212_fu_400_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln890_666_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln691_856_fu_430_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln890_667_fu_456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln890_fu_450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln890_fu_462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln6667_fu_468_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln6667_fu_474_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln890_fu_492_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_cast_fu_509_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln890_fu_506_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln6672_fu_516_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component top_A_IO_L2_in_0_x1_local_A_pong_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (255 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (255 downto 0) );
    end component;



begin
    local_A_pong_V_U : component top_A_IO_L2_in_0_x1_local_A_pong_V
    generic map (
        DataWidth => 256,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => local_A_pong_V_address0,
        ce0 => local_A_pong_V_ce0,
        q0 => local_A_pong_V_q0,
        address1 => local_A_pong_V_addr_reg_565,
        ce1 => local_A_pong_V_ce1,
        we1 => local_A_pong_V_we1,
        d1 => tmp_reg_570);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state6) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state6)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state6);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c3_V_reg_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln890_fu_252_p2 = ap_const_lv1_0))) then 
                c3_V_reg_158 <= select_ln890_fu_316_p3;
            elsif ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c3_V_reg_158 <= ap_const_lv4_2;
            end if; 
        end if;
    end process;

    c4_V_reg_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln890_fu_252_p2 = ap_const_lv1_0))) then 
                c4_V_reg_180 <= select_ln890_532_fu_376_p3;
            elsif ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c4_V_reg_180 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    c5_V_32_reg_191_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln890_fu_252_p2 = ap_const_lv1_0))) then 
                c5_V_32_reg_191 <= add_ln691_858_fu_394_p2;
            elsif ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c5_V_32_reg_191 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    c5_V_reg_213_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                c5_V_reg_213 <= ap_const_lv6_0;
            elsif (((icmp_ln890_665_reg_580 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                c5_V_reg_213 <= select_ln890_533_reg_584;
            end if; 
        end if;
    end process;

    c7_V_reg_235_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                c7_V_reg_235 <= ap_const_lv5_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln890_665_fu_424_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
                c7_V_reg_235 <= add_ln691_857_fu_486_p2;
            end if; 
        end if;
    end process;

    indvar_flatten13_reg_147_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln890_fu_252_p2 = ap_const_lv1_0))) then 
                indvar_flatten13_reg_147 <= add_ln890_213_fu_246_p2;
            elsif ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten13_reg_147 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    indvar_flatten21_reg_224_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                indvar_flatten21_reg_224 <= ap_const_lv12_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln890_665_fu_424_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
                indvar_flatten21_reg_224 <= select_ln890_534_fu_498_p3;
            end if; 
        end if;
    end process;

    indvar_flatten33_reg_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                indvar_flatten33_reg_202 <= ap_const_lv16_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln890_665_fu_424_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
                indvar_flatten33_reg_202 <= add_ln890_211_fu_418_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_169_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln890_fu_252_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_169 <= select_ln890_535_fu_406_p3;
            elsif ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_169 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln890_fu_252_p2 = ap_const_lv1_0))) then
                add_ln6655_reg_550 <= add_ln6655_fu_388_p2;
                select_ln6646_1_reg_536 <= select_ln6646_1_fu_290_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln890_665_reg_580 <= icmp_ln890_665_fu_424_p2;
                icmp_ln890_665_reg_580_pp1_iter1_reg <= icmp_ln890_665_reg_580;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                icmp_ln890_665_reg_580_pp1_iter2_reg <= icmp_ln890_665_reg_580_pp1_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln890_reg_532 <= icmp_ln890_fu_252_p2;
                select_ln6646_1_reg_536_pp0_iter1_reg <= select_ln6646_1_reg_536;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln890_reg_532 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                local_A_pong_V_addr_reg_565 <= zext_ln6655_1_fu_414_p1(9 - 1 downto 0);
                tmp_reg_570 <= fifo_A_A_IO_L2_in_2_x13_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (icmp_ln890_665_reg_580_pp1_iter1_reg = ap_const_lv1_0))) then
                local_A_pong_V_load_reg_610 <= local_A_pong_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln890_665_fu_424_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                select_ln890_533_reg_584 <= select_ln890_533_fu_442_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln890_665_fu_424_p2 = ap_const_lv1_0))) then
                trunc_ln6672_reg_590 <= trunc_ln6672_fu_482_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter3, ap_enable_reg_pp0_iter0, icmp_ln890_fu_252_p2, ap_enable_reg_pp1_iter0, icmp_ln890_665_fu_424_p2, ap_enable_reg_pp1_iter2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln890_fu_252_p2 = ap_const_lv1_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln890_fu_252_p2 = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln890_665_fu_424_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln890_665_fu_424_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln6655_fu_388_p2 <= std_logic_vector(unsigned(tmp_1284_cast_fu_368_p3) + unsigned(zext_ln6655_fu_384_p1));
    add_ln6672_fu_516_p2 <= std_logic_vector(unsigned(tmp_cast_fu_509_p3) + unsigned(zext_ln890_fu_506_p1));
    add_ln691_855_fu_324_p2 <= std_logic_vector(unsigned(select_ln6646_fu_270_p3) + unsigned(ap_const_lv5_1));
    add_ln691_856_fu_430_p2 <= std_logic_vector(unsigned(ap_phi_mux_c5_V_phi_fu_217_p4) + unsigned(ap_const_lv6_1));
    add_ln691_857_fu_486_p2 <= std_logic_vector(unsigned(select_ln6667_fu_474_p3) + unsigned(ap_const_lv5_1));
    add_ln691_858_fu_394_p2 <= std_logic_vector(unsigned(select_ln890_530_fu_336_p3) + unsigned(ap_const_lv6_1));
    add_ln691_fu_258_p2 <= std_logic_vector(unsigned(c3_V_reg_158) + unsigned(ap_const_lv4_1));
    add_ln890_211_fu_418_p2 <= std_logic_vector(unsigned(indvar_flatten33_reg_202) + unsigned(ap_const_lv16_1));
    add_ln890_212_fu_400_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_169) + unsigned(ap_const_lv11_1));
    add_ln890_213_fu_246_p2 <= std_logic_vector(unsigned(indvar_flatten13_reg_147) + unsigned(ap_const_lv13_1));
    add_ln890_fu_492_p2 <= std_logic_vector(unsigned(indvar_flatten21_reg_224) + unsigned(ap_const_lv12_1));
    and_ln6646_fu_310_p2 <= (xor_ln6646_fu_298_p2 and icmp_ln89052_fu_304_p2);
    and_ln890_fu_462_p2 <= (xor_ln890_fu_450_p2 and icmp_ln890_667_fu_456_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(4);
    ap_CS_fsm_state5 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(fifo_A_A_IO_L2_in_2_x13_empty_n, fifo_A_A_IO_L2_in_3_x14_full_n, ap_enable_reg_pp0_iter1, icmp_ln890_reg_532, select_ln6646_1_reg_536)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((select_ln6646_1_reg_536 = ap_const_lv1_0) and (fifo_A_A_IO_L2_in_3_x14_full_n = ap_const_logic_0)) or ((icmp_ln890_reg_532 = ap_const_lv1_0) and (fifo_A_A_IO_L2_in_2_x13_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(fifo_A_A_IO_L2_in_2_x13_empty_n, fifo_A_A_IO_L2_in_3_x14_full_n, ap_enable_reg_pp0_iter1, icmp_ln890_reg_532, select_ln6646_1_reg_536)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((select_ln6646_1_reg_536 = ap_const_lv1_0) and (fifo_A_A_IO_L2_in_3_x14_full_n = ap_const_logic_0)) or ((icmp_ln890_reg_532 = ap_const_lv1_0) and (fifo_A_A_IO_L2_in_2_x13_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(fifo_A_A_IO_L2_in_2_x13_empty_n, fifo_A_A_IO_L2_in_3_x14_full_n, ap_enable_reg_pp0_iter1, icmp_ln890_reg_532, select_ln6646_1_reg_536)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((select_ln6646_1_reg_536 = ap_const_lv1_0) and (fifo_A_A_IO_L2_in_3_x14_full_n = ap_const_logic_0)) or ((icmp_ln890_reg_532 = ap_const_lv1_0) and (fifo_A_A_IO_L2_in_2_x13_empty_n = ap_const_logic_0))));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_01001_assign_proc : process(fifo_A_PE_2_0_x122_full_n, ap_enable_reg_pp1_iter3, icmp_ln890_665_reg_580_pp1_iter2_reg)
    begin
                ap_block_pp1_stage0_01001 <= ((icmp_ln890_665_reg_580_pp1_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (fifo_A_PE_2_0_x122_full_n = ap_const_logic_0));
    end process;


    ap_block_pp1_stage0_11001_assign_proc : process(fifo_A_PE_2_0_x122_full_n, ap_enable_reg_pp1_iter3, icmp_ln890_665_reg_580_pp1_iter2_reg)
    begin
                ap_block_pp1_stage0_11001 <= ((icmp_ln890_665_reg_580_pp1_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (fifo_A_PE_2_0_x122_full_n = ap_const_logic_0));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(fifo_A_PE_2_0_x122_full_n, ap_enable_reg_pp1_iter3, icmp_ln890_665_reg_580_pp1_iter2_reg)
    begin
                ap_block_pp1_stage0_subdone <= ((icmp_ln890_665_reg_580_pp1_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (fifo_A_PE_2_0_x122_full_n = ap_const_logic_0));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(fifo_A_A_IO_L2_in_2_x13_empty_n, fifo_A_A_IO_L2_in_3_x14_full_n, icmp_ln890_reg_532, select_ln6646_1_reg_536)
    begin
                ap_block_state3_pp0_stage0_iter1 <= (((select_ln6646_1_reg_536 = ap_const_lv1_0) and (fifo_A_A_IO_L2_in_3_x14_full_n = ap_const_logic_0)) or ((icmp_ln890_reg_532 = ap_const_lv1_0) and (fifo_A_A_IO_L2_in_2_x13_empty_n = ap_const_logic_0)));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state9_pp1_stage0_iter3_assign_proc : process(fifo_A_PE_2_0_x122_full_n, icmp_ln890_665_reg_580_pp1_iter2_reg)
    begin
                ap_block_state9_pp1_stage0_iter3 <= ((icmp_ln890_665_reg_580_pp1_iter2_reg = ap_const_lv1_0) and (fifo_A_PE_2_0_x122_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln890_fu_252_p2)
    begin
        if ((icmp_ln890_fu_252_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state6_assign_proc : process(icmp_ln890_665_fu_424_p2)
    begin
        if ((icmp_ln890_665_fu_424_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state6 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_c5_V_phi_fu_217_p4_assign_proc : process(ap_block_pp1_stage0, icmp_ln890_665_reg_580, c5_V_reg_213, ap_CS_fsm_pp1_stage0, select_ln890_533_reg_584, ap_enable_reg_pp1_iter1)
    begin
        if (((icmp_ln890_665_reg_580 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_c5_V_phi_fu_217_p4 <= select_ln890_533_reg_584;
        else 
            ap_phi_mux_c5_V_phi_fu_217_p4 <= c5_V_reg_213;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    cmp_i_i7244_fu_284_p2 <= "1" when (c3_V_reg_158 = ap_const_lv4_2) else "0";
    cmp_i_i72_mid1_fu_278_p2 <= "1" when (add_ln691_fu_258_p2 = ap_const_lv4_2) else "0";

    fifo_A_A_IO_L2_in_2_x13_blk_n_assign_proc : process(fifo_A_A_IO_L2_in_2_x13_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln890_reg_532)
    begin
        if (((icmp_ln890_reg_532 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fifo_A_A_IO_L2_in_2_x13_blk_n <= fifo_A_A_IO_L2_in_2_x13_empty_n;
        else 
            fifo_A_A_IO_L2_in_2_x13_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    fifo_A_A_IO_L2_in_2_x13_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln890_reg_532, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln890_reg_532 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fifo_A_A_IO_L2_in_2_x13_read <= ap_const_logic_1;
        else 
            fifo_A_A_IO_L2_in_2_x13_read <= ap_const_logic_0;
        end if; 
    end process;


    fifo_A_A_IO_L2_in_3_x14_blk_n_assign_proc : process(fifo_A_A_IO_L2_in_3_x14_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, select_ln6646_1_reg_536)
    begin
        if (((select_ln6646_1_reg_536 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fifo_A_A_IO_L2_in_3_x14_blk_n <= fifo_A_A_IO_L2_in_3_x14_full_n;
        else 
            fifo_A_A_IO_L2_in_3_x14_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    fifo_A_A_IO_L2_in_3_x14_din <= fifo_A_A_IO_L2_in_2_x13_dout;

    fifo_A_A_IO_L2_in_3_x14_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, select_ln6646_1_reg_536, ap_block_pp0_stage0_11001)
    begin
        if (((select_ln6646_1_reg_536 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fifo_A_A_IO_L2_in_3_x14_write <= ap_const_logic_1;
        else 
            fifo_A_A_IO_L2_in_3_x14_write <= ap_const_logic_0;
        end if; 
    end process;


    fifo_A_PE_2_0_x122_blk_n_assign_proc : process(fifo_A_PE_2_0_x122_full_n, ap_enable_reg_pp1_iter3, ap_block_pp1_stage0, icmp_ln890_665_reg_580_pp1_iter2_reg)
    begin
        if (((icmp_ln890_665_reg_580_pp1_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            fifo_A_PE_2_0_x122_blk_n <= fifo_A_PE_2_0_x122_full_n;
        else 
            fifo_A_PE_2_0_x122_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    fifo_A_PE_2_0_x122_din <= local_A_pong_V_load_reg_610;

    fifo_A_PE_2_0_x122_write_assign_proc : process(ap_enable_reg_pp1_iter3, icmp_ln890_665_reg_580_pp1_iter2_reg, ap_block_pp1_stage0_11001)
    begin
        if (((icmp_ln890_665_reg_580_pp1_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            fifo_A_PE_2_0_x122_write <= ap_const_logic_1;
        else 
            fifo_A_PE_2_0_x122_write <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln89052_fu_304_p2 <= "1" when (c5_V_32_reg_191 = ap_const_lv6_20) else "0";
    icmp_ln890_664_fu_264_p2 <= "1" when (indvar_flatten_reg_169 = ap_const_lv11_200) else "0";
    icmp_ln890_665_fu_424_p2 <= "1" when (indvar_flatten33_reg_202 = ap_const_lv16_8000) else "0";
    icmp_ln890_666_fu_436_p2 <= "1" when (indvar_flatten21_reg_224 = ap_const_lv12_400) else "0";
    icmp_ln890_667_fu_456_p2 <= "1" when (c7_V_reg_235 = ap_const_lv5_10) else "0";
    icmp_ln890_fu_252_p2 <= "1" when (indvar_flatten13_reg_147 = ap_const_lv13_1600) else "0";
    local_A_pong_V_address0 <= zext_ln6672_fu_522_p1(9 - 1 downto 0);

    local_A_pong_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            local_A_pong_V_ce0 <= ap_const_logic_1;
        else 
            local_A_pong_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    local_A_pong_V_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            local_A_pong_V_ce1 <= ap_const_logic_1;
        else 
            local_A_pong_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    local_A_pong_V_we1_assign_proc : process(ap_block_pp0_stage0_11001, select_ln6646_1_reg_536_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (select_ln6646_1_reg_536_pp0_iter1_reg = ap_const_lv1_1))) then 
            local_A_pong_V_we1 <= ap_const_logic_1;
        else 
            local_A_pong_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln6667_fu_468_p2 <= (icmp_ln890_666_fu_436_p2 or and_ln890_fu_462_p2);
    or_ln890_fu_330_p2 <= (icmp_ln890_664_fu_264_p2 or and_ln6646_fu_310_p2);
    select_ln6646_1_fu_290_p3 <= 
        cmp_i_i72_mid1_fu_278_p2 when (icmp_ln890_664_fu_264_p2(0) = '1') else 
        cmp_i_i7244_fu_284_p2;
    select_ln6646_2_fu_352_p3 <= 
        ap_const_lv4_0 when (icmp_ln890_664_fu_264_p2(0) = '1') else 
        trunc_ln6655_1_fu_348_p1;
    select_ln6646_fu_270_p3 <= 
        ap_const_lv5_0 when (icmp_ln890_664_fu_264_p2(0) = '1') else 
        c4_V_reg_180;
    select_ln6667_fu_474_p3 <= 
        ap_const_lv5_0 when (or_ln6667_fu_468_p2(0) = '1') else 
        c7_V_reg_235;
    select_ln890_530_fu_336_p3 <= 
        ap_const_lv6_0 when (or_ln890_fu_330_p2(0) = '1') else 
        c5_V_32_reg_191;
    select_ln890_531_fu_360_p3 <= 
        trunc_ln6655_fu_344_p1 when (and_ln6646_fu_310_p2(0) = '1') else 
        select_ln6646_2_fu_352_p3;
    select_ln890_532_fu_376_p3 <= 
        add_ln691_855_fu_324_p2 when (and_ln6646_fu_310_p2(0) = '1') else 
        select_ln6646_fu_270_p3;
    select_ln890_533_fu_442_p3 <= 
        add_ln691_856_fu_430_p2 when (icmp_ln890_666_fu_436_p2(0) = '1') else 
        ap_phi_mux_c5_V_phi_fu_217_p4;
    select_ln890_534_fu_498_p3 <= 
        ap_const_lv12_1 when (icmp_ln890_666_fu_436_p2(0) = '1') else 
        add_ln890_fu_492_p2;
    select_ln890_535_fu_406_p3 <= 
        ap_const_lv11_1 when (icmp_ln890_664_fu_264_p2(0) = '1') else 
        add_ln890_212_fu_400_p2;
    select_ln890_fu_316_p3 <= 
        add_ln691_fu_258_p2 when (icmp_ln890_664_fu_264_p2(0) = '1') else 
        c3_V_reg_158;
    tmp_1284_cast_fu_368_p3 <= (select_ln890_531_fu_360_p3 & ap_const_lv5_0);
    tmp_cast_fu_509_p3 <= (trunc_ln6672_reg_590 & ap_const_lv5_0);
    trunc_ln6655_1_fu_348_p1 <= c4_V_reg_180(4 - 1 downto 0);
    trunc_ln6655_fu_344_p1 <= add_ln691_855_fu_324_p2(4 - 1 downto 0);
    trunc_ln6672_fu_482_p1 <= select_ln6667_fu_474_p3(4 - 1 downto 0);
    xor_ln6646_fu_298_p2 <= (icmp_ln890_664_fu_264_p2 xor ap_const_lv1_1);
    xor_ln890_fu_450_p2 <= (icmp_ln890_666_fu_436_p2 xor ap_const_lv1_1);
    zext_ln6655_1_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln6655_reg_550),64));
    zext_ln6655_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln890_530_fu_336_p3),9));
    zext_ln6672_fu_522_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln6672_fu_516_p2),64));
    zext_ln890_fu_506_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln890_533_reg_584),9));
end behav;
