-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_B_IO_L2_in_boundary_x1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    fifo_B_B_IO_L2_in_1_x115_dout : IN STD_LOGIC_VECTOR (255 downto 0);
    fifo_B_B_IO_L2_in_1_x115_empty_n : IN STD_LOGIC;
    fifo_B_B_IO_L2_in_1_x115_read : OUT STD_LOGIC;
    fifo_B_PE_0_1_x169_din : OUT STD_LOGIC_VECTOR (255 downto 0);
    fifo_B_PE_0_1_x169_full_n : IN STD_LOGIC;
    fifo_B_PE_0_1_x169_write : OUT STD_LOGIC );
end;


architecture behav of top_B_IO_L2_in_boundary_x1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv12_800 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv16_8000 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv12_400 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal fifo_B_B_IO_L2_in_1_x115_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln890_reg_460 : STD_LOGIC_VECTOR (0 downto 0);
    signal fifo_B_PE_0_1_x169_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal icmp_ln890_563_reg_489 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln890_563_reg_489_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_126 : STD_LOGIC_VECTOR (11 downto 0);
    signal c4_V_reg_137 : STD_LOGIC_VECTOR (6 downto 0);
    signal c5_V_5_reg_148 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten26_reg_159 : STD_LOGIC_VECTOR (15 downto 0);
    signal c5_V_reg_170 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten8_reg_181 : STD_LOGIC_VECTOR (11 downto 0);
    signal c6_V_reg_192 : STD_LOGIC_VECTOR (6 downto 0);
    signal c7_V_reg_203 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln890_fu_214_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln890_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln890_433_fu_246_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln890_433_reg_464 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln7231_fu_270_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln7231_reg_469 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln691_742_fu_276_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln890_170_fu_286_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state5_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state7_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal empty_1476_fu_308_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_1476_reg_484 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln890_563_fu_314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln691_743_fu_320_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln691_743_reg_493 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln890_564_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln890_564_reg_498 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln890_435_fu_340_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln890_435_reg_503 : STD_LOGIC_VECTOR (5 downto 0);
    signal and_ln890_fu_360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln890_reg_509 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_1477_fu_372_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_1477_reg_514 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln890_438_fu_376_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln691_fu_396_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln890_439_fu_410_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state5 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal local_B_pong_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal local_B_pong_V_ce0 : STD_LOGIC;
    signal local_B_pong_V_q0 : STD_LOGIC_VECTOR (255 downto 0);
    signal local_B_pong_V_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal local_B_pong_V_ce1 : STD_LOGIC;
    signal local_B_pong_V_we1 : STD_LOGIC;
    signal ap_phi_mux_c4_V_phi_fu_141_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_phi_mux_c5_V_phi_fu_174_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln7231_1_fu_282_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln890_520_cast_fu_450_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal icmp_ln89039_fu_232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln691_fu_226_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln7231_fu_254_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln890_fu_238_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1168_cast_fu_258_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln7231_fu_266_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_fu_296_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_cast_fu_300_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln7235_fu_292_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln890_565_fu_354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln890_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln890_434_fu_332_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln691_744_fu_366_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln691_fu_390_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln691_745_fu_384_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln890_169_fu_404_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln890_fu_418_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1169_cast_fu_430_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln7237_fu_421_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_1478_fu_437_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln890_436_fu_424_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln890_437_fu_443_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component top_B_IO_L2_in_x0_local_B_pong_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (255 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (255 downto 0) );
    end component;



begin
    local_B_pong_V_U : component top_B_IO_L2_in_x0_local_B_pong_V
    generic map (
        DataWidth => 256,
        AddressRange => 2048,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => local_B_pong_V_address0,
        ce0 => local_B_pong_V_ce0,
        q0 => local_B_pong_V_q0,
        address1 => local_B_pong_V_address1,
        ce1 => local_B_pong_V_ce1,
        we1 => local_B_pong_V_we1,
        d1 => fifo_B_B_IO_L2_in_1_x115_dout);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state5) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state5)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state5);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c4_V_reg_137_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln890_reg_460 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                c4_V_reg_137 <= select_ln890_433_reg_464;
            elsif ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c4_V_reg_137 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    c5_V_5_reg_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln890_fu_220_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                c5_V_5_reg_148 <= add_ln691_742_fu_276_p2;
            elsif ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c5_V_5_reg_148 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    c5_V_reg_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                c5_V_reg_170 <= ap_const_lv6_0;
            elsif (((icmp_ln890_563_reg_489 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
                c5_V_reg_170 <= select_ln890_435_reg_503;
            end if; 
        end if;
    end process;

    c6_V_reg_192_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                c6_V_reg_192 <= ap_const_lv7_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln890_563_fu_314_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
                c6_V_reg_192 <= select_ln890_438_fu_376_p3;
            end if; 
        end if;
    end process;

    c7_V_reg_203_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                c7_V_reg_203 <= ap_const_lv5_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln890_563_fu_314_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
                c7_V_reg_203 <= select_ln691_fu_396_p3;
            end if; 
        end if;
    end process;

    indvar_flatten26_reg_159_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                indvar_flatten26_reg_159 <= ap_const_lv16_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln890_563_fu_314_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
                indvar_flatten26_reg_159 <= add_ln890_170_fu_286_p2;
            end if; 
        end if;
    end process;

    indvar_flatten8_reg_181_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                indvar_flatten8_reg_181 <= ap_const_lv12_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln890_563_fu_314_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
                indvar_flatten8_reg_181 <= select_ln890_439_fu_410_p3;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln890_fu_220_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_126 <= add_ln890_fu_214_p2;
            elsif ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_126 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln890_563_fu_314_p2 = ap_const_lv1_0))) then
                add_ln691_743_reg_493 <= add_ln691_743_fu_320_p2;
                and_ln890_reg_509 <= and_ln890_fu_360_p2;
                empty_1477_reg_514 <= empty_1477_fu_372_p1;
                icmp_ln890_564_reg_498 <= icmp_ln890_564_fu_326_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln890_fu_220_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln7231_reg_469 <= add_ln7231_fu_270_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                empty_1476_reg_484 <= empty_1476_fu_308_p2;
                icmp_ln890_563_reg_489 <= icmp_ln890_563_fu_314_p2;
                icmp_ln890_563_reg_489_pp1_iter1_reg <= icmp_ln890_563_reg_489;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln890_reg_460 <= icmp_ln890_fu_220_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln890_fu_220_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln890_433_reg_464 <= select_ln890_433_fu_246_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln890_563_fu_314_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                select_ln890_435_reg_503 <= select_ln890_435_fu_340_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp1_iter2, ap_enable_reg_pp0_iter0, icmp_ln890_fu_220_p2, ap_enable_reg_pp1_iter0, icmp_ln890_563_fu_314_p2, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((icmp_ln890_fu_220_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln890_fu_220_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln890_563_fu_314_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln890_563_fu_314_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln691_742_fu_276_p2 <= std_logic_vector(unsigned(select_ln890_fu_238_p3) + unsigned(ap_const_lv6_1));
    add_ln691_743_fu_320_p2 <= std_logic_vector(unsigned(ap_phi_mux_c5_V_phi_fu_174_p4) + unsigned(ap_const_lv6_1));
    add_ln691_744_fu_366_p2 <= std_logic_vector(unsigned(select_ln890_434_fu_332_p3) + unsigned(ap_const_lv7_1));
    add_ln691_745_fu_384_p2 <= std_logic_vector(unsigned(c7_V_reg_203) + unsigned(ap_const_lv5_1));
    add_ln691_fu_226_p2 <= std_logic_vector(unsigned(ap_phi_mux_c4_V_phi_fu_141_p4) + unsigned(ap_const_lv7_1));
    add_ln7231_fu_270_p2 <= std_logic_vector(unsigned(tmp_1168_cast_fu_258_p3) + unsigned(zext_ln7231_fu_266_p1));
    add_ln890_169_fu_404_p2 <= std_logic_vector(unsigned(indvar_flatten8_reg_181) + unsigned(ap_const_lv12_1));
    add_ln890_170_fu_286_p2 <= std_logic_vector(unsigned(indvar_flatten26_reg_159) + unsigned(ap_const_lv16_1));
    add_ln890_fu_214_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_126) + unsigned(ap_const_lv12_1));
    and_ln890_fu_360_p2 <= (xor_ln890_fu_348_p2 and icmp_ln890_565_fu_354_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
    ap_CS_fsm_state8 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(fifo_B_B_IO_L2_in_1_x115_empty_n, ap_enable_reg_pp0_iter1, icmp_ln890_reg_460)
    begin
                ap_block_pp0_stage0_11001 <= ((icmp_ln890_reg_460 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (fifo_B_B_IO_L2_in_1_x115_empty_n = ap_const_logic_0));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(fifo_B_B_IO_L2_in_1_x115_empty_n, ap_enable_reg_pp0_iter1, icmp_ln890_reg_460)
    begin
                ap_block_pp0_stage0_subdone <= ((icmp_ln890_reg_460 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (fifo_B_B_IO_L2_in_1_x115_empty_n = ap_const_logic_0));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_01001_assign_proc : process(fifo_B_PE_0_1_x169_full_n, ap_enable_reg_pp1_iter2, icmp_ln890_563_reg_489_pp1_iter1_reg)
    begin
                ap_block_pp1_stage0_01001 <= ((icmp_ln890_563_reg_489_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (fifo_B_PE_0_1_x169_full_n = ap_const_logic_0));
    end process;


    ap_block_pp1_stage0_11001_assign_proc : process(fifo_B_PE_0_1_x169_full_n, ap_enable_reg_pp1_iter2, icmp_ln890_563_reg_489_pp1_iter1_reg)
    begin
                ap_block_pp1_stage0_11001 <= ((icmp_ln890_563_reg_489_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (fifo_B_PE_0_1_x169_full_n = ap_const_logic_0));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(fifo_B_PE_0_1_x169_full_n, ap_enable_reg_pp1_iter2, icmp_ln890_563_reg_489_pp1_iter1_reg)
    begin
                ap_block_pp1_stage0_subdone <= ((icmp_ln890_563_reg_489_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (fifo_B_PE_0_1_x169_full_n = ap_const_logic_0));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(fifo_B_B_IO_L2_in_1_x115_empty_n, icmp_ln890_reg_460)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((icmp_ln890_reg_460 = ap_const_lv1_0) and (fifo_B_B_IO_L2_in_1_x115_empty_n = ap_const_logic_0));
    end process;

        ap_block_state5_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state7_pp1_stage0_iter2_assign_proc : process(fifo_B_PE_0_1_x169_full_n, icmp_ln890_563_reg_489_pp1_iter1_reg)
    begin
                ap_block_state7_pp1_stage0_iter2 <= ((icmp_ln890_563_reg_489_pp1_iter1_reg = ap_const_lv1_0) and (fifo_B_PE_0_1_x169_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln890_fu_220_p2)
    begin
        if ((icmp_ln890_fu_220_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state5_assign_proc : process(icmp_ln890_563_fu_314_p2)
    begin
        if ((icmp_ln890_563_fu_314_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_c4_V_phi_fu_141_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln890_reg_460, c4_V_reg_137, select_ln890_433_reg_464)
    begin
        if (((icmp_ln890_reg_460 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_c4_V_phi_fu_141_p4 <= select_ln890_433_reg_464;
        else 
            ap_phi_mux_c4_V_phi_fu_141_p4 <= c4_V_reg_137;
        end if; 
    end process;


    ap_phi_mux_c5_V_phi_fu_174_p4_assign_proc : process(ap_block_pp1_stage0, icmp_ln890_563_reg_489, c5_V_reg_170, ap_CS_fsm_pp1_stage0, select_ln890_435_reg_503, ap_enable_reg_pp1_iter1)
    begin
        if (((icmp_ln890_563_reg_489 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_c5_V_phi_fu_174_p4 <= select_ln890_435_reg_503;
        else 
            ap_phi_mux_c5_V_phi_fu_174_p4 <= c5_V_reg_170;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_1476_fu_308_p2 <= std_logic_vector(unsigned(tmp_cast_fu_300_p3) + unsigned(zext_ln7235_fu_292_p1));
    empty_1477_fu_372_p1 <= add_ln691_744_fu_366_p2(6 - 1 downto 0);
    empty_1478_fu_437_p2 <= std_logic_vector(unsigned(tmp_1169_cast_fu_430_p3) + unsigned(zext_ln7237_fu_421_p1));
    empty_fu_296_p1 <= c6_V_reg_192(6 - 1 downto 0);

    fifo_B_B_IO_L2_in_1_x115_blk_n_assign_proc : process(fifo_B_B_IO_L2_in_1_x115_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln890_reg_460)
    begin
        if (((icmp_ln890_reg_460 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fifo_B_B_IO_L2_in_1_x115_blk_n <= fifo_B_B_IO_L2_in_1_x115_empty_n;
        else 
            fifo_B_B_IO_L2_in_1_x115_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    fifo_B_B_IO_L2_in_1_x115_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln890_reg_460, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln890_reg_460 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fifo_B_B_IO_L2_in_1_x115_read <= ap_const_logic_1;
        else 
            fifo_B_B_IO_L2_in_1_x115_read <= ap_const_logic_0;
        end if; 
    end process;


    fifo_B_PE_0_1_x169_blk_n_assign_proc : process(fifo_B_PE_0_1_x169_full_n, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0, icmp_ln890_563_reg_489_pp1_iter1_reg)
    begin
        if (((icmp_ln890_563_reg_489_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            fifo_B_PE_0_1_x169_blk_n <= fifo_B_PE_0_1_x169_full_n;
        else 
            fifo_B_PE_0_1_x169_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    fifo_B_PE_0_1_x169_din <= local_B_pong_V_q0;

    fifo_B_PE_0_1_x169_write_assign_proc : process(ap_enable_reg_pp1_iter2, icmp_ln890_563_reg_489_pp1_iter1_reg, ap_block_pp1_stage0_11001)
    begin
        if (((icmp_ln890_563_reg_489_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            fifo_B_PE_0_1_x169_write <= ap_const_logic_1;
        else 
            fifo_B_PE_0_1_x169_write <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln89039_fu_232_p2 <= "1" when (c5_V_5_reg_148 = ap_const_lv6_20) else "0";
    icmp_ln890_563_fu_314_p2 <= "1" when (indvar_flatten26_reg_159 = ap_const_lv16_8000) else "0";
    icmp_ln890_564_fu_326_p2 <= "1" when (indvar_flatten8_reg_181 = ap_const_lv12_400) else "0";
    icmp_ln890_565_fu_354_p2 <= "1" when (c7_V_reg_203 = ap_const_lv5_10) else "0";
    icmp_ln890_fu_220_p2 <= "1" when (indvar_flatten_reg_126 = ap_const_lv12_800) else "0";
    local_B_pong_V_address0 <= select_ln890_520_cast_fu_450_p1(11 - 1 downto 0);
    local_B_pong_V_address1 <= zext_ln7231_1_fu_282_p1(11 - 1 downto 0);

    local_B_pong_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            local_B_pong_V_ce0 <= ap_const_logic_1;
        else 
            local_B_pong_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    local_B_pong_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            local_B_pong_V_ce1 <= ap_const_logic_1;
        else 
            local_B_pong_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    local_B_pong_V_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln890_reg_460, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln890_reg_460 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            local_B_pong_V_we1 <= ap_const_logic_1;
        else 
            local_B_pong_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln691_fu_390_p2 <= (icmp_ln890_564_fu_326_p2 or and_ln890_fu_360_p2);
    select_ln691_fu_396_p3 <= 
        ap_const_lv5_1 when (or_ln691_fu_390_p2(0) = '1') else 
        add_ln691_745_fu_384_p2;
    select_ln890_433_fu_246_p3 <= 
        add_ln691_fu_226_p2 when (icmp_ln89039_fu_232_p2(0) = '1') else 
        ap_phi_mux_c4_V_phi_fu_141_p4;
    select_ln890_434_fu_332_p3 <= 
        ap_const_lv7_0 when (icmp_ln890_564_fu_326_p2(0) = '1') else 
        c6_V_reg_192;
    select_ln890_435_fu_340_p3 <= 
        add_ln691_743_fu_320_p2 when (icmp_ln890_564_fu_326_p2(0) = '1') else 
        ap_phi_mux_c5_V_phi_fu_174_p4;
    select_ln890_436_fu_424_p3 <= 
        zext_ln890_fu_418_p1 when (icmp_ln890_564_reg_498(0) = '1') else 
        empty_1476_reg_484;
    select_ln890_437_fu_443_p3 <= 
        empty_1478_fu_437_p2 when (and_ln890_reg_509(0) = '1') else 
        select_ln890_436_fu_424_p3;
    select_ln890_438_fu_376_p3 <= 
        add_ln691_744_fu_366_p2 when (and_ln890_fu_360_p2(0) = '1') else 
        select_ln890_434_fu_332_p3;
    select_ln890_439_fu_410_p3 <= 
        ap_const_lv12_1 when (icmp_ln890_564_fu_326_p2(0) = '1') else 
        add_ln890_169_fu_404_p2;
    select_ln890_520_cast_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln890_437_fu_443_p3),64));
    select_ln890_fu_238_p3 <= 
        ap_const_lv6_0 when (icmp_ln89039_fu_232_p2(0) = '1') else 
        c5_V_5_reg_148;
    tmp_1168_cast_fu_258_p3 <= (trunc_ln7231_fu_254_p1 & ap_const_lv5_0);
    tmp_1169_cast_fu_430_p3 <= (empty_1477_reg_514 & ap_const_lv5_0);
    tmp_cast_fu_300_p3 <= (empty_fu_296_p1 & ap_const_lv5_0);
    trunc_ln7231_fu_254_p1 <= select_ln890_433_fu_246_p3(6 - 1 downto 0);
    xor_ln890_fu_348_p2 <= (icmp_ln890_564_fu_326_p2 xor ap_const_lv1_1);
    zext_ln7231_1_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln7231_reg_469),64));
    zext_ln7231_fu_266_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln890_fu_238_p3),11));
    zext_ln7235_fu_292_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_c5_V_phi_fu_174_p4),11));
    zext_ln7237_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln890_435_reg_503),11));
    zext_ln890_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln691_743_reg_493),11));
end behav;
