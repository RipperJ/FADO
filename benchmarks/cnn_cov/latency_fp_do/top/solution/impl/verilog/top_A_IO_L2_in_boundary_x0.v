// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module top_A_IO_L2_in_boundary_x0 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        fifo_A_A_IO_L2_in_12_x013_dout,
        fifo_A_A_IO_L2_in_12_x013_empty_n,
        fifo_A_A_IO_L2_in_12_x013_read,
        fifo_A_PE_12_0_x052_din,
        fifo_A_PE_12_0_x052_full_n,
        fifo_A_PE_12_0_x052_write
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [255:0] fifo_A_A_IO_L2_in_12_x013_dout;
input   fifo_A_A_IO_L2_in_12_x013_empty_n;
output   fifo_A_A_IO_L2_in_12_x013_read;
output  [255:0] fifo_A_PE_12_0_x052_din;
input   fifo_A_PE_12_0_x052_full_n;
output   fifo_A_PE_12_0_x052_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg fifo_A_A_IO_L2_in_12_x013_read;
reg fifo_A_PE_12_0_x052_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    fifo_A_A_IO_L2_in_12_x013_blk_n;
wire    ap_CS_fsm_state4;
reg    fifo_A_PE_12_0_x052_blk_n;
wire    ap_CS_fsm_state8;
wire   [4:0] add_ln691_fu_164_p2;
reg   [4:0] add_ln691_reg_276;
wire    ap_CS_fsm_state2;
wire   [8:0] tmp_505_cast_fu_174_p3;
reg   [8:0] tmp_505_cast_reg_281;
wire   [5:0] add_ln691_1073_fu_188_p2;
reg   [5:0] add_ln691_1073_reg_289;
wire    ap_CS_fsm_state3;
reg   [8:0] local_A_pong_V_addr_reg_294;
wire   [5:0] add_ln691_1074_fu_214_p2;
reg   [5:0] add_ln691_1074_reg_302;
wire    ap_CS_fsm_state5;
wire   [8:0] zext_ln890_fu_220_p1;
reg   [8:0] zext_ln890_reg_307;
wire   [6:0] add_ln691_1075_fu_230_p2;
reg   [6:0] add_ln691_1075_reg_315;
wire    ap_CS_fsm_state6;
wire   [4:0] add_ln691_1076_fu_242_p2;
reg   [4:0] add_ln691_1076_reg_323;
wire    ap_CS_fsm_state7;
wire   [8:0] local_A_pong_V_address0;
reg    local_A_pong_V_ce0;
wire   [255:0] local_A_pong_V_q0;
reg    local_A_pong_V_ce1;
reg    local_A_pong_V_we1;
reg   [4:0] c4_V_reg_109;
wire   [0:0] icmp_ln890_838_fu_208_p2;
reg    ap_block_state1;
reg   [5:0] c5_V_9_reg_120;
wire   [0:0] icmp_ln890_fu_182_p2;
reg   [5:0] c5_V_reg_131;
wire   [0:0] icmp_ln890_839_fu_236_p2;
reg   [6:0] c6_V_reg_142;
wire   [0:0] icmp_ln890_840_fu_270_p2;
wire   [0:0] icmp_ln890_837_fu_224_p2;
reg   [4:0] c7_V_reg_153;
wire   [63:0] zext_ln716_1_fu_203_p1;
wire   [63:0] zext_ln727_fu_265_p1;
wire   [3:0] trunc_ln716_fu_170_p1;
wire   [8:0] zext_ln716_fu_194_p1;
wire   [8:0] add_ln716_fu_198_p2;
wire   [3:0] trunc_ln727_fu_248_p1;
wire   [8:0] tmp_cast_fu_252_p3;
wire   [8:0] add_ln727_fu_260_p2;
reg   [7:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 8'd1;
end

top_A_IO_L2_in_0_x0_local_A_pong_V #(
    .DataWidth( 256 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
local_A_pong_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(local_A_pong_V_address0),
    .ce0(local_A_pong_V_ce0),
    .q0(local_A_pong_V_q0),
    .address1(local_A_pong_V_addr_reg_294),
    .ce1(local_A_pong_V_ce1),
    .we1(local_A_pong_V_we1),
    .d1(fifo_A_A_IO_L2_in_12_x013_dout)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln890_837_fu_224_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        c4_V_reg_109 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln890_838_fu_208_p2 == 1'd1))) begin
        c4_V_reg_109 <= add_ln691_reg_276;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln890_fu_182_p2 == 1'd0))) begin
        c5_V_9_reg_120 <= 6'd0;
    end else if (((fifo_A_A_IO_L2_in_12_x013_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        c5_V_9_reg_120 <= add_ln691_1073_reg_289;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln890_fu_182_p2 == 1'd1))) begin
        c5_V_reg_131 <= 6'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln890_839_fu_236_p2 == 1'd1))) begin
        c5_V_reg_131 <= add_ln691_1074_reg_302;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln890_837_fu_224_p2 == 1'd0))) begin
        c6_V_reg_142 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln890_840_fu_270_p2 == 1'd1))) begin
        c6_V_reg_142 <= add_ln691_1075_reg_315;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln890_839_fu_236_p2 == 1'd0))) begin
        c7_V_reg_153 <= 5'd0;
    end else if (((fifo_A_PE_12_0_x052_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        c7_V_reg_153 <= add_ln691_1076_reg_323;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln691_1073_reg_289 <= add_ln691_1073_fu_188_p2;
        local_A_pong_V_addr_reg_294 <= zext_ln716_1_fu_203_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln691_1074_reg_302 <= add_ln691_1074_fu_214_p2;
        zext_ln890_reg_307[5 : 0] <= zext_ln890_fu_220_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        add_ln691_1075_reg_315 <= add_ln691_1075_fu_230_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        add_ln691_1076_reg_323 <= add_ln691_1076_fu_242_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln691_reg_276 <= add_ln691_fu_164_p2;
        tmp_505_cast_reg_281[8 : 5] <= tmp_505_cast_fu_174_p3[8 : 5];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln890_837_fu_224_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln890_837_fu_224_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        fifo_A_A_IO_L2_in_12_x013_blk_n = fifo_A_A_IO_L2_in_12_x013_empty_n;
    end else begin
        fifo_A_A_IO_L2_in_12_x013_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((fifo_A_A_IO_L2_in_12_x013_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        fifo_A_A_IO_L2_in_12_x013_read = 1'b1;
    end else begin
        fifo_A_A_IO_L2_in_12_x013_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        fifo_A_PE_12_0_x052_blk_n = fifo_A_PE_12_0_x052_full_n;
    end else begin
        fifo_A_PE_12_0_x052_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((fifo_A_PE_12_0_x052_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        fifo_A_PE_12_0_x052_write = 1'b1;
    end else begin
        fifo_A_PE_12_0_x052_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        local_A_pong_V_ce0 = 1'b1;
    end else begin
        local_A_pong_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((fifo_A_A_IO_L2_in_12_x013_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        local_A_pong_V_ce1 = 1'b1;
    end else begin
        local_A_pong_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((fifo_A_A_IO_L2_in_12_x013_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        local_A_pong_V_we1 = 1'b1;
    end else begin
        local_A_pong_V_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln890_fu_182_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln890_838_fu_208_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((fifo_A_A_IO_L2_in_12_x013_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln890_837_fu_224_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln890_839_fu_236_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln890_840_fu_270_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((fifo_A_PE_12_0_x052_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln691_1073_fu_188_p2 = (c5_V_9_reg_120 + 6'd1);

assign add_ln691_1074_fu_214_p2 = (c5_V_reg_131 + 6'd1);

assign add_ln691_1075_fu_230_p2 = (c6_V_reg_142 + 7'd1);

assign add_ln691_1076_fu_242_p2 = (c7_V_reg_153 + 5'd1);

assign add_ln691_fu_164_p2 = (c4_V_reg_109 + 5'd1);

assign add_ln716_fu_198_p2 = (tmp_505_cast_reg_281 + zext_ln716_fu_194_p1);

assign add_ln727_fu_260_p2 = (tmp_cast_fu_252_p3 + zext_ln890_reg_307);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign fifo_A_PE_12_0_x052_din = local_A_pong_V_q0;

assign icmp_ln890_837_fu_224_p2 = ((c5_V_reg_131 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln890_838_fu_208_p2 = ((c5_V_9_reg_120 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln890_839_fu_236_p2 = ((c6_V_reg_142 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln890_840_fu_270_p2 = ((c7_V_reg_153 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln890_fu_182_p2 = ((c4_V_reg_109 == 5'd16) ? 1'b1 : 1'b0);

assign local_A_pong_V_address0 = zext_ln727_fu_265_p1;

assign tmp_505_cast_fu_174_p3 = {{trunc_ln716_fu_170_p1}, {5'd0}};

assign tmp_cast_fu_252_p3 = {{trunc_ln727_fu_248_p1}, {5'd0}};

assign trunc_ln716_fu_170_p1 = c4_V_reg_109[3:0];

assign trunc_ln727_fu_248_p1 = c7_V_reg_153[3:0];

assign zext_ln716_1_fu_203_p1 = add_ln716_fu_198_p2;

assign zext_ln716_fu_194_p1 = c5_V_9_reg_120;

assign zext_ln727_fu_265_p1 = add_ln727_fu_260_p2;

assign zext_ln890_fu_220_p1 = c5_V_reg_131;

always @ (posedge ap_clk) begin
    tmp_505_cast_reg_281[4:0] <= 5'b00000;
    zext_ln890_reg_307[8:6] <= 3'b000;
end

endmodule //top_A_IO_L2_in_boundary_x0
