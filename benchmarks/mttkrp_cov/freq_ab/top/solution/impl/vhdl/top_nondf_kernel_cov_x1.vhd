-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_nondf_kernel_cov_x1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    xout_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    xout_ce0 : OUT STD_LOGIC;
    xout_q0 : IN STD_LOGIC_VECTOR (127 downto 0);
    xin_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    xin_ce0 : OUT STD_LOGIC;
    xin_we0 : OUT STD_LOGIC;
    xin_d0 : OUT STD_LOGIC_VECTOR (118 downto 0) );
end;


architecture behav of top_nondf_kernel_cov_x1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000010000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000100000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000001000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000010000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000100000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000001000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000010000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000100000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000001000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000010000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000100000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000001000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000010000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000100000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (28 downto 0) := "00000000001000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (28 downto 0) := "00000000010000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (28 downto 0) := "00000000100000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (28 downto 0) := "00000001000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (28 downto 0) := "00000010000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (28 downto 0) := "00000100000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (28 downto 0) := "00001000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (28 downto 0) := "00010000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (28 downto 0) := "00100000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (28 downto 0) := "01000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (28 downto 0) := "10000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv13_1000 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv257_lc_3 : STD_LOGIC_VECTOR (256 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000010000000001000000000100000000010000000001000000000100000000010000000001000000000100000000010000000001000000000100000001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_8A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001010";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_240 : STD_LOGIC_VECTOR (12 downto 0);
    signal j_reg_251 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_2_reg_262 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_i3113_reg_273 : STD_LOGIC_VECTOR (127 downto 0);
    signal indvar_flatten8_reg_285 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_1_reg_296 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_2_reg_307 : STD_LOGIC_VECTOR (6 downto 0);
    signal data_V_q0 : STD_LOGIC_VECTOR (127 downto 0);
    signal reg_385 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_state6_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln79_reg_871 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln79_reg_871_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_block_state12_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state13_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state14_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state15_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_state16_pp1_stage0_iter4 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln87_reg_917 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_917_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal data_V_q1 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal add_ln73_fu_390_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln73_reg_829 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_cast_fu_400_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_cast_reg_834 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln73_fu_408_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln74_fu_414_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln74_reg_843 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal data_V_addr_reg_848 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln74_fu_435_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xout_load_reg_861 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln79_1_fu_441_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln79_fu_447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln79_reg_871_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln79_reg_871_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln82_fu_459_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln82_reg_875 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln82_reg_875_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln82_reg_875_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln79_2_fu_473_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln79_2_reg_880 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln79_2_reg_880_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln79_2_reg_880_pp0_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln79_2_reg_880_pp0_iter3_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln691_fu_481_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln691_reg_887 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln82_fu_485_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln82_reg_892 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln82_1_fu_491_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln82_1_reg_897 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln82_1_reg_897_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln82_1_reg_897_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln82_1_reg_897_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln691_fu_525_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal add_ln691_reg_906 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal add_ln87_1_fu_545_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal icmp_ln87_fu_551_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_917_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_917_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln87_fu_569_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln87_reg_921 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln87_1_fu_577_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln87_1_reg_927 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln692_fu_585_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln692_reg_932 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln88_fu_589_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal data_V_addr_2_reg_942 : STD_LOGIC_VECTOR (11 downto 0);
    signal data_V_addr_2_reg_942_pp1_iter2_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal data_V_addr_2_reg_942_pp1_iter3_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal mean_V_q0 : STD_LOGIC_VECTOR (117 downto 0);
    signal mean_V_load_reg_953 : STD_LOGIC_VECTOR (117 downto 0);
    signal sub_ln692_fu_623_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal sub_ln692_reg_958 : STD_LOGIC_VECTOR (127 downto 0);
    signal add_ln91_fu_629_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln91_reg_963 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal zext_ln94_fu_635_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln94_reg_968 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_5_cast_fu_643_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_5_cast_reg_974 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln92_fu_657_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln92_reg_982 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal zext_ln94_1_fu_663_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln94_1_reg_987 : STD_LOGIC_VECTOR (11 downto 0);
    signal cov_V_addr_reg_992 : STD_LOGIC_VECTOR (11 downto 0);
    signal cov_V_addr_2_reg_997 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln95_fu_705_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln95_reg_1005 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal icmp_ln95_fu_743_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_V_load_3_reg_1028 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_fu_759_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal mul_ln691_reg_1033 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal add_ln691_1_fu_764_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal trunc_ln693_1_reg_1043 : STD_LOGIC_VECTOR (118 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal add_ln101_fu_779_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln101_reg_1048 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal tmp_6_cast_fu_789_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_6_cast_reg_1053 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln102_fu_803_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln102_reg_1061 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal zext_ln208_1_fu_818_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln208_1_reg_1066 : STD_LOGIC_VECTOR (63 downto 0);
    signal cov_V_q0 : STD_LOGIC_VECTOR (118 downto 0);
    signal cov_V_load_reg_1079 : STD_LOGIC_VECTOR (118 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state6 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state12 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter4 : STD_LOGIC := '0';
    signal mean_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mean_V_ce0 : STD_LOGIC;
    signal mean_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal mean_V_ce1 : STD_LOGIC;
    signal mean_V_we1 : STD_LOGIC;
    signal mean_V_d1 : STD_LOGIC_VECTOR (117 downto 0);
    signal data_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal data_V_ce0 : STD_LOGIC;
    signal data_V_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal data_V_ce1 : STD_LOGIC;
    signal data_V_we1 : STD_LOGIC;
    signal data_V_d1 : STD_LOGIC_VECTOR (127 downto 0);
    signal cov_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal cov_V_ce0 : STD_LOGIC;
    signal cov_V_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal cov_V_ce1 : STD_LOGIC;
    signal cov_V_we1 : STD_LOGIC;
    signal i_reg_218 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_1_reg_229 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_phi_mux_j_phi_fu_255_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_i_2_phi_fu_266_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_phi_mux_add_i3113_phi_fu_277_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_phi_mux_i_1_phi_fu_300_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal i_3_reg_318 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln92_fu_699_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal j_3_reg_329 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal icmp_ln91_fu_651_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_reg_340 : STD_LOGIC_VECTOR (6 downto 0);
    signal conv3_i2112_reg_351 : STD_LOGIC_VECTOR (127 downto 0);
    signal i_4_reg_363 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln102_fu_823_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_4_reg_374 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal icmp_ln101_fu_797_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln75_1_fu_429_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln691_1_fu_513_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln79_fu_531_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln692_1_fu_615_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln88_fu_602_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln94_2_fu_672_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln98_fu_694_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln215_fu_728_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln215_1_fu_738_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal trunc_ln75_fu_396_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln75_fu_420_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln75_fu_424_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln79_fu_453_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln79_fu_465_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_cast_fu_500_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln691_fu_497_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln691_2_fu_507_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln79_1_fu_518_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal icmp_ln88_fu_563_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln87_fu_557_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_4_cast_fu_595_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln692_fu_606_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln692_fu_609_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal mean_V_load_cast_fu_620_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln94_fu_639_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln94_fu_667_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln98_fu_677_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_7_cast_fu_681_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln98_fu_689_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln215_fu_711_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_10_cast_fu_715_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln215_fu_723_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln215_1_fu_733_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_753_p0 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_fu_753_p1 : STD_LOGIC_VECTOR (129 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_fu_753_p2 : STD_LOGIC_VECTOR (256 downto 0);
    signal trunc_ln208_fu_785_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln208_fu_809_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln208_fu_813_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal grp_fu_753_p00 : STD_LOGIC_VECTOR (256 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component top_mul_128ns_130ns_257_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (127 downto 0);
        din1 : IN STD_LOGIC_VECTOR (129 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (256 downto 0) );
    end component;


    component top_mul_128s_128s_128_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (127 downto 0);
        din1 : IN STD_LOGIC_VECTOR (127 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;


    component top_nondf_kernel_cov_x1_mean_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (117 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (117 downto 0) );
    end component;


    component top_nondf_kernel_cov_x1_data_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (127 downto 0);
        address1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (127 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;


    component top_nondf_kernel_cov_x1_cov_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (118 downto 0);
        address1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (118 downto 0) );
    end component;



begin
    mean_V_U : component top_nondf_kernel_cov_x1_mean_V
    generic map (
        DataWidth => 118,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mean_V_address0,
        ce0 => mean_V_ce0,
        q0 => mean_V_q0,
        address1 => mean_V_address1,
        ce1 => mean_V_ce1,
        we1 => mean_V_we1,
        d1 => mean_V_d1);

    data_V_U : component top_nondf_kernel_cov_x1_data_V
    generic map (
        DataWidth => 128,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => data_V_address0,
        ce0 => data_V_ce0,
        q0 => data_V_q0,
        address1 => data_V_address1,
        ce1 => data_V_ce1,
        we1 => data_V_we1,
        d1 => data_V_d1,
        q1 => data_V_q1);

    cov_V_U : component top_nondf_kernel_cov_x1_cov_V
    generic map (
        DataWidth => 119,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cov_V_address0,
        ce0 => cov_V_ce0,
        q0 => cov_V_q0,
        address1 => cov_V_address1,
        ce1 => cov_V_ce1,
        we1 => cov_V_we1,
        d1 => trunc_ln693_1_reg_1043);

    mul_128ns_130ns_257_5_1_U1104 : component top_mul_128ns_130ns_257_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 128,
        din1_WIDTH => 130,
        dout_WIDTH => 257)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_753_p0,
        din1 => grp_fu_753_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_753_p2);

    mul_128s_128s_128_5_1_U1105 : component top_mul_128s_128s_128_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 128,
        din1_WIDTH => 128,
        dout_WIDTH => 128)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => data_V_load_3_reg_1028,
        din1 => reg_385,
        ce => ap_const_logic_1,
        dout => grp_fu_759_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln73_fu_408_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state6)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state6);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln73_fu_408_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state12) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state12)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state12);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    add_i3113_reg_273_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln73_fu_408_p2 = ap_const_lv1_1))) then 
                add_i3113_reg_273 <= ap_const_lv128_lc_1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln79_reg_871_pp0_iter3_reg = ap_const_lv1_0))) then 
                add_i3113_reg_273 <= add_ln691_reg_906;
            end if; 
        end if;
    end process;

    conv3_i2112_reg_351_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln92_fu_699_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                conv3_i2112_reg_351 <= ap_const_lv128_lc_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                conv3_i2112_reg_351 <= add_ln691_1_fu_764_p2;
            end if; 
        end if;
    end process;

    i_1_reg_296_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                i_1_reg_296 <= ap_const_lv7_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln87_reg_917 = ap_const_lv1_0))) then 
                i_1_reg_296 <= select_ln87_1_reg_927;
            end if; 
        end if;
    end process;

    i_2_reg_262_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln73_fu_408_p2 = ap_const_lv1_1))) then 
                i_2_reg_262 <= ap_const_lv7_0;
            elsif (((icmp_ln79_reg_871 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_2_reg_262 <= add_ln82_reg_892;
            end if; 
        end if;
    end process;

    i_3_reg_318_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                i_3_reg_318 <= ap_const_lv7_0;
            elsif (((icmp_ln92_fu_699_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                i_3_reg_318 <= add_ln91_reg_963;
            end if; 
        end if;
    end process;

    i_4_reg_363_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln91_fu_651_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                i_4_reg_363 <= ap_const_lv7_0;
            elsif (((icmp_ln102_fu_823_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
                i_4_reg_363 <= add_ln101_reg_1048;
            end if; 
        end if;
    end process;

    i_reg_218_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_218 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln74_fu_435_p2 = ap_const_lv1_1))) then 
                i_reg_218 <= add_ln73_reg_829;
            end if; 
        end if;
    end process;

    indvar_flatten8_reg_285_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                indvar_flatten8_reg_285 <= ap_const_lv13_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln87_fu_551_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                indvar_flatten8_reg_285 <= add_ln87_1_fu_545_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_240_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln73_fu_408_p2 = ap_const_lv1_1))) then 
                indvar_flatten_reg_240 <= ap_const_lv13_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln79_fu_447_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                indvar_flatten_reg_240 <= add_ln79_1_fu_441_p2;
            end if; 
        end if;
    end process;

    j_1_reg_229_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln73_fu_408_p2 = ap_const_lv1_0))) then 
                j_1_reg_229 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                j_1_reg_229 <= add_ln74_reg_843;
            end if; 
        end if;
    end process;

    j_2_reg_307_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                j_2_reg_307 <= ap_const_lv7_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln87_fu_551_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                j_2_reg_307 <= add_ln88_fu_589_p2;
            end if; 
        end if;
    end process;

    j_3_reg_329_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln91_fu_651_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                j_3_reg_329 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
                j_3_reg_329 <= add_ln92_reg_982;
            end if; 
        end if;
    end process;

    j_4_reg_374_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln101_fu_797_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state34))) then 
                j_4_reg_374 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                j_4_reg_374 <= add_ln102_reg_1061;
            end if; 
        end if;
    end process;

    j_reg_251_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln73_fu_408_p2 = ap_const_lv1_1))) then 
                j_reg_251 <= ap_const_lv7_0;
            elsif (((icmp_ln79_reg_871 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j_reg_251 <= select_ln79_2_reg_880;
            end if; 
        end if;
    end process;

    k_reg_340_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln92_fu_699_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                k_reg_340 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                k_reg_340 <= add_ln95_reg_1005;
            end if; 
        end if;
    end process;

    reg_385_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                reg_385 <= data_V_q1;
            elsif ((((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln87_reg_917_pp1_iter1_reg = ap_const_lv1_0)) or ((icmp_ln79_reg_871_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
                reg_385 <= data_V_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                add_ln101_reg_1048 <= add_ln101_fu_779_p2;
                    tmp_6_cast_reg_1053(11 downto 6) <= tmp_6_cast_fu_789_p3(11 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                add_ln102_reg_1061 <= add_ln102_fu_803_p2;
                    zext_ln208_1_reg_1066(11 downto 0) <= zext_ln208_1_fu_818_p1(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln79_reg_871_pp0_iter2_reg = ap_const_lv1_0))) then
                add_ln691_reg_906 <= add_ln691_fu_525_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln73_reg_829 <= add_ln73_fu_390_p2;
                    tmp_cast_reg_834(11 downto 6) <= tmp_cast_fu_400_p3(11 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln74_reg_843 <= add_ln74_fu_414_p2;
                data_V_addr_reg_848 <= zext_ln75_1_fu_429_p1(12 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln79_fu_447_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                add_ln82_reg_892 <= add_ln82_fu_485_p2;
                select_ln79_2_reg_880 <= select_ln79_2_fu_473_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                add_ln91_reg_963 <= add_ln91_fu_629_p2;
                    tmp_5_cast_reg_974(11 downto 6) <= tmp_5_cast_fu_643_p3(11 downto 6);
                    zext_ln94_reg_968(6 downto 0) <= zext_ln94_fu_635_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                add_ln92_reg_982 <= add_ln92_fu_657_p2;
                cov_V_addr_2_reg_997 <= zext_ln98_fu_694_p1(12 - 1 downto 0);
                cov_V_addr_reg_992 <= zext_ln94_2_fu_672_p1(12 - 1 downto 0);
                    zext_ln94_1_reg_987(6 downto 0) <= zext_ln94_1_fu_663_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                add_ln95_reg_1005 <= add_ln95_fu_705_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                cov_V_load_reg_1079 <= cov_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln87_reg_917 = ap_const_lv1_0))) then
                data_V_addr_2_reg_942 <= zext_ln692_1_fu_615_p1(12 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                data_V_addr_2_reg_942_pp1_iter2_reg <= data_V_addr_2_reg_942;
                data_V_addr_2_reg_942_pp1_iter3_reg <= data_V_addr_2_reg_942_pp1_iter2_reg;
                icmp_ln87_reg_917_pp1_iter2_reg <= icmp_ln87_reg_917_pp1_iter1_reg;
                icmp_ln87_reg_917_pp1_iter3_reg <= icmp_ln87_reg_917_pp1_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                data_V_load_3_reg_1028 <= data_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln79_reg_871 <= icmp_ln79_fu_447_p2;
                icmp_ln79_reg_871_pp0_iter1_reg <= icmp_ln79_reg_871;
                icmp_ln82_1_reg_897_pp0_iter1_reg <= icmp_ln82_1_reg_897;
                icmp_ln82_reg_875_pp0_iter1_reg <= icmp_ln82_reg_875;
                select_ln79_2_reg_880_pp0_iter1_reg <= select_ln79_2_reg_880;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln79_reg_871_pp0_iter2_reg <= icmp_ln79_reg_871_pp0_iter1_reg;
                icmp_ln79_reg_871_pp0_iter3_reg <= icmp_ln79_reg_871_pp0_iter2_reg;
                icmp_ln82_1_reg_897_pp0_iter2_reg <= icmp_ln82_1_reg_897_pp0_iter1_reg;
                icmp_ln82_1_reg_897_pp0_iter3_reg <= icmp_ln82_1_reg_897_pp0_iter2_reg;
                icmp_ln82_reg_875_pp0_iter2_reg <= icmp_ln82_reg_875_pp0_iter1_reg;
                select_ln79_2_reg_880_pp0_iter2_reg <= select_ln79_2_reg_880_pp0_iter1_reg;
                select_ln79_2_reg_880_pp0_iter3_reg <= select_ln79_2_reg_880_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln79_fu_447_p2 = ap_const_lv1_0))) then
                icmp_ln82_1_reg_897 <= icmp_ln82_1_fu_491_p2;
                icmp_ln82_reg_875 <= icmp_ln82_fu_459_p2;
                trunc_ln691_reg_887 <= trunc_ln691_fu_481_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln87_reg_917 <= icmp_ln87_fu_551_p2;
                icmp_ln87_reg_917_pp1_iter1_reg <= icmp_ln87_reg_917;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln87_reg_917_pp1_iter1_reg = ap_const_lv1_0))) then
                mean_V_load_reg_953 <= mean_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                mul_ln691_reg_1033 <= grp_fu_759_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln87_fu_551_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                select_ln87_1_reg_927 <= select_ln87_1_fu_577_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln87_fu_551_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                select_ln87_reg_921 <= select_ln87_fu_569_p3;
                trunc_ln692_reg_932 <= trunc_ln692_fu_585_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln87_reg_917_pp1_iter2_reg = ap_const_lv1_0))) then
                sub_ln692_reg_958 <= sub_ln692_fu_623_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                trunc_ln693_1_reg_1043 <= grp_fu_753_p2(256 downto 138);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                xout_load_reg_861 <= xout_q0;
            end if;
        end if;
    end process;
    tmp_cast_reg_834(5 downto 0) <= "000000";
    zext_ln94_reg_968(11 downto 7) <= "00000";
    tmp_5_cast_reg_974(5 downto 0) <= "000000";
    zext_ln94_1_reg_987(11 downto 7) <= "00000";
    tmp_6_cast_reg_1053(5 downto 0) <= "000000";
    zext_ln208_1_reg_1066(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln73_fu_408_p2, ap_CS_fsm_state3, icmp_ln74_fu_435_p2, ap_enable_reg_pp0_iter0, icmp_ln79_fu_447_p2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp1_iter0, icmp_ln87_fu_551_p2, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, icmp_ln95_fu_743_p2, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter4, icmp_ln92_fu_699_p2, icmp_ln91_fu_651_p2, icmp_ln102_fu_823_p2, icmp_ln101_fu_797_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln73_fu_408_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln74_fu_435_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln79_fu_447_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln79_fu_447_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln87_fu_551_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln87_fu_551_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((icmp_ln91_fu_651_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state19 => 
                if (((icmp_ln92_fu_699_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                if (((icmp_ln95_fu_743_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state34 => 
                if (((icmp_ln101_fu_797_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state35 => 
                if (((icmp_ln102_fu_823_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln101_fu_779_p2 <= std_logic_vector(unsigned(i_4_reg_363) + unsigned(ap_const_lv7_1));
    add_ln102_fu_803_p2 <= std_logic_vector(unsigned(j_4_reg_374) + unsigned(ap_const_lv7_1));
    add_ln208_fu_813_p2 <= std_logic_vector(unsigned(tmp_6_cast_reg_1053) + unsigned(zext_ln208_fu_809_p1));
    add_ln215_1_fu_733_p2 <= std_logic_vector(unsigned(tmp_10_cast_fu_715_p3) + unsigned(zext_ln94_1_reg_987));
    add_ln215_fu_723_p2 <= std_logic_vector(unsigned(tmp_10_cast_fu_715_p3) + unsigned(zext_ln94_reg_968));
    add_ln691_1_fu_764_p2 <= std_logic_vector(unsigned(mul_ln691_reg_1033) + unsigned(conv3_i2112_reg_351));
    add_ln691_2_fu_507_p2 <= std_logic_vector(unsigned(tmp_3_cast_fu_500_p3) + unsigned(zext_ln691_fu_497_p1));
    add_ln691_fu_525_p2 <= std_logic_vector(signed(reg_385) + signed(select_ln79_1_fu_518_p3));
    add_ln692_fu_609_p2 <= std_logic_vector(unsigned(tmp_4_cast_fu_595_p3) + unsigned(zext_ln692_fu_606_p1));
    add_ln73_fu_390_p2 <= std_logic_vector(unsigned(i_reg_218) + unsigned(ap_const_lv7_1));
    add_ln74_fu_414_p2 <= std_logic_vector(unsigned(j_1_reg_229) + unsigned(ap_const_lv7_1));
    add_ln75_fu_424_p2 <= std_logic_vector(unsigned(tmp_cast_reg_834) + unsigned(zext_ln75_fu_420_p1));
    add_ln79_1_fu_441_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_240) + unsigned(ap_const_lv13_1));
    add_ln79_fu_453_p2 <= std_logic_vector(unsigned(ap_phi_mux_j_phi_fu_255_p4) + unsigned(ap_const_lv7_1));
    add_ln82_fu_485_p2 <= std_logic_vector(unsigned(select_ln79_fu_465_p3) + unsigned(ap_const_lv7_1));
    add_ln87_1_fu_545_p2 <= std_logic_vector(unsigned(indvar_flatten8_reg_285) + unsigned(ap_const_lv13_1));
    add_ln87_fu_557_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_1_phi_fu_300_p4) + unsigned(ap_const_lv7_1));
    add_ln88_fu_589_p2 <= std_logic_vector(unsigned(select_ln87_fu_569_p3) + unsigned(ap_const_lv7_1));
    add_ln91_fu_629_p2 <= std_logic_vector(unsigned(i_3_reg_318) + unsigned(ap_const_lv7_1));
    add_ln92_fu_657_p2 <= std_logic_vector(unsigned(j_3_reg_329) + unsigned(ap_const_lv7_1));
    add_ln94_fu_667_p2 <= std_logic_vector(unsigned(tmp_5_cast_reg_974) + unsigned(zext_ln94_1_fu_663_p1));
    add_ln95_fu_705_p2 <= std_logic_vector(unsigned(k_reg_340) + unsigned(ap_const_lv7_1));
    add_ln98_fu_689_p2 <= std_logic_vector(unsigned(tmp_7_cast_fu_681_p3) + unsigned(zext_ln94_reg_968));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(7);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(6);
    ap_CS_fsm_state17 <= ap_CS_fsm(8);
    ap_CS_fsm_state18 <= ap_CS_fsm(9);
    ap_CS_fsm_state19 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(11);
    ap_CS_fsm_state21 <= ap_CS_fsm(12);
    ap_CS_fsm_state22 <= ap_CS_fsm(13);
    ap_CS_fsm_state26 <= ap_CS_fsm(17);
    ap_CS_fsm_state27 <= ap_CS_fsm(18);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state31 <= ap_CS_fsm(22);
    ap_CS_fsm_state32 <= ap_CS_fsm(23);
    ap_CS_fsm_state33 <= ap_CS_fsm(24);
    ap_CS_fsm_state34 <= ap_CS_fsm(25);
    ap_CS_fsm_state35 <= ap_CS_fsm(26);
    ap_CS_fsm_state36 <= ap_CS_fsm(27);
    ap_CS_fsm_state37 <= ap_CS_fsm(28);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp1_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state6_assign_proc : process(icmp_ln79_fu_447_p2)
    begin
        if ((icmp_ln79_fu_447_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state6 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state12_assign_proc : process(icmp_ln87_fu_551_p2)
    begin
        if ((icmp_ln87_fu_551_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state12 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state34, icmp_ln101_fu_797_p2)
    begin
        if ((((icmp_ln101_fu_797_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state34)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_add_i3113_phi_fu_277_p4_assign_proc : process(add_i3113_reg_273, icmp_ln79_reg_871_pp0_iter3_reg, add_ln691_reg_906, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln79_reg_871_pp0_iter3_reg = ap_const_lv1_0))) then 
            ap_phi_mux_add_i3113_phi_fu_277_p4 <= add_ln691_reg_906;
        else 
            ap_phi_mux_add_i3113_phi_fu_277_p4 <= add_i3113_reg_273;
        end if; 
    end process;


    ap_phi_mux_i_1_phi_fu_300_p4_assign_proc : process(i_1_reg_296, icmp_ln87_reg_917, ap_CS_fsm_pp1_stage0, select_ln87_1_reg_927, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln87_reg_917 = ap_const_lv1_0))) then 
            ap_phi_mux_i_1_phi_fu_300_p4 <= select_ln87_1_reg_927;
        else 
            ap_phi_mux_i_1_phi_fu_300_p4 <= i_1_reg_296;
        end if; 
    end process;


    ap_phi_mux_i_2_phi_fu_266_p4_assign_proc : process(i_2_reg_262, icmp_ln79_reg_871, ap_CS_fsm_pp0_stage0, add_ln82_reg_892, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln79_reg_871 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_i_2_phi_fu_266_p4 <= add_ln82_reg_892;
        else 
            ap_phi_mux_i_2_phi_fu_266_p4 <= i_2_reg_262;
        end if; 
    end process;


    ap_phi_mux_j_phi_fu_255_p4_assign_proc : process(j_reg_251, icmp_ln79_reg_871, ap_CS_fsm_pp0_stage0, select_ln79_2_reg_880, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln79_reg_871 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_j_phi_fu_255_p4 <= select_ln79_2_reg_880;
        else 
            ap_phi_mux_j_phi_fu_255_p4 <= j_reg_251;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state34, icmp_ln101_fu_797_p2)
    begin
        if (((icmp_ln101_fu_797_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    cov_V_address0 <= zext_ln208_1_fu_818_p1(12 - 1 downto 0);

    cov_V_address1_assign_proc : process(cov_V_addr_reg_992, cov_V_addr_2_reg_997, ap_CS_fsm_state33, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            cov_V_address1 <= cov_V_addr_2_reg_997;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            cov_V_address1 <= cov_V_addr_reg_992;
        else 
            cov_V_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    cov_V_ce0_assign_proc : process(ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            cov_V_ce0 <= ap_const_logic_1;
        else 
            cov_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cov_V_ce1_assign_proc : process(ap_CS_fsm_state33, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            cov_V_ce1 <= ap_const_logic_1;
        else 
            cov_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    cov_V_we1_assign_proc : process(ap_CS_fsm_state33, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            cov_V_we1 <= ap_const_logic_1;
        else 
            cov_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    data_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp1_stage0, ap_CS_fsm_state20, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_block_pp0_stage0, ap_block_pp1_stage0, zext_ln691_1_fu_513_p1, zext_ln692_1_fu_615_p1, zext_ln215_1_fu_738_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            data_V_address0 <= zext_ln215_1_fu_738_p1(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            data_V_address0 <= zext_ln692_1_fu_615_p1(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_address0 <= zext_ln691_1_fu_513_p1(12 - 1 downto 0);
        else 
            data_V_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    data_V_address1_assign_proc : process(data_V_addr_reg_848, data_V_addr_2_reg_942_pp1_iter3_reg, ap_CS_fsm_state20, ap_enable_reg_pp1_iter4, ap_CS_fsm_state5, ap_block_pp1_stage0, zext_ln215_fu_728_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            data_V_address1 <= zext_ln215_fu_728_p1(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))) then 
            data_V_address1 <= data_V_addr_2_reg_942_pp1_iter3_reg;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            data_V_address1 <= data_V_addr_reg_848;
        else 
            data_V_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    data_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp1_stage0, ap_CS_fsm_state20, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            data_V_ce0 <= ap_const_logic_1;
        else 
            data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_V_ce1_assign_proc : process(ap_block_pp1_stage0_11001, ap_CS_fsm_state20, ap_enable_reg_pp1_iter4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state20) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1)))) then 
            data_V_ce1 <= ap_const_logic_1;
        else 
            data_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    data_V_d1_assign_proc : process(xout_load_reg_861, sub_ln692_reg_958, ap_enable_reg_pp1_iter4, ap_CS_fsm_state5, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))) then 
            data_V_d1 <= sub_ln692_reg_958;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            data_V_d1 <= xout_load_reg_861;
        else 
            data_V_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data_V_we1_assign_proc : process(ap_block_pp1_stage0_11001, icmp_ln87_reg_917_pp1_iter3_reg, ap_enable_reg_pp1_iter4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (icmp_ln87_reg_917_pp1_iter3_reg = ap_const_lv1_0)))) then 
            data_V_we1 <= ap_const_logic_1;
        else 
            data_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_753_p0 <= grp_fu_753_p00(128 - 1 downto 0);
    grp_fu_753_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(conv3_i2112_reg_351),257));
    grp_fu_753_p1 <= ap_const_lv257_lc_3(130 - 1 downto 0);
    icmp_ln101_fu_797_p2 <= "1" when (i_4_reg_363 = ap_const_lv7_40) else "0";
    icmp_ln102_fu_823_p2 <= "1" when (j_4_reg_374 = ap_const_lv7_40) else "0";
    icmp_ln73_fu_408_p2 <= "1" when (i_reg_218 = ap_const_lv7_40) else "0";
    icmp_ln74_fu_435_p2 <= "1" when (j_1_reg_229 = ap_const_lv7_40) else "0";
    icmp_ln79_fu_447_p2 <= "1" when (indvar_flatten_reg_240 = ap_const_lv13_1000) else "0";
    icmp_ln82_1_fu_491_p2 <= "1" when (add_ln82_fu_485_p2 = ap_const_lv7_40) else "0";
    icmp_ln82_fu_459_p2 <= "1" when (ap_phi_mux_i_2_phi_fu_266_p4 = ap_const_lv7_40) else "0";
    icmp_ln87_fu_551_p2 <= "1" when (indvar_flatten8_reg_285 = ap_const_lv13_1000) else "0";
    icmp_ln88_fu_563_p2 <= "1" when (j_2_reg_307 = ap_const_lv7_40) else "0";
    icmp_ln91_fu_651_p2 <= "1" when (i_3_reg_318 = ap_const_lv7_40) else "0";
    icmp_ln92_fu_699_p2 <= "1" when (j_3_reg_329 = ap_const_lv7_40) else "0";
    icmp_ln95_fu_743_p2 <= "1" when (k_reg_340 = ap_const_lv7_40) else "0";
    mean_V_address0 <= zext_ln88_fu_602_p1(6 - 1 downto 0);
    mean_V_address1 <= zext_ln79_fu_531_p1(6 - 1 downto 0);

    mean_V_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            mean_V_ce0 <= ap_const_logic_1;
        else 
            mean_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mean_V_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            mean_V_ce1 <= ap_const_logic_1;
        else 
            mean_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    mean_V_d1 <= add_ln691_reg_906(127 downto 10);
    mean_V_load_cast_fu_620_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mean_V_load_reg_953),128));

    mean_V_we1_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln82_1_reg_897_pp0_iter3_reg, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln82_1_reg_897_pp0_iter3_reg = ap_const_lv1_1))) then 
            mean_V_we1 <= ap_const_logic_1;
        else 
            mean_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln79_1_fu_518_p3 <= 
        ap_const_lv128_lc_1 when (icmp_ln82_reg_875_pp0_iter2_reg(0) = '1') else 
        ap_phi_mux_add_i3113_phi_fu_277_p4;
    select_ln79_2_fu_473_p3 <= 
        add_ln79_fu_453_p2 when (icmp_ln82_fu_459_p2(0) = '1') else 
        ap_phi_mux_j_phi_fu_255_p4;
    select_ln79_fu_465_p3 <= 
        ap_const_lv7_0 when (icmp_ln82_fu_459_p2(0) = '1') else 
        ap_phi_mux_i_2_phi_fu_266_p4;
    select_ln87_1_fu_577_p3 <= 
        add_ln87_fu_557_p2 when (icmp_ln88_fu_563_p2(0) = '1') else 
        ap_phi_mux_i_1_phi_fu_300_p4;
    select_ln87_fu_569_p3 <= 
        ap_const_lv7_0 when (icmp_ln88_fu_563_p2(0) = '1') else 
        j_2_reg_307;
    sub_ln692_fu_623_p2 <= std_logic_vector(signed(reg_385) - signed(mean_V_load_cast_fu_620_p1));
    tmp_10_cast_fu_715_p3 <= (trunc_ln215_fu_711_p1 & ap_const_lv6_0);
    tmp_3_cast_fu_500_p3 <= (trunc_ln691_reg_887 & ap_const_lv6_0);
    tmp_4_cast_fu_595_p3 <= (trunc_ln692_reg_932 & ap_const_lv6_0);
    tmp_5_cast_fu_643_p3 <= (trunc_ln94_fu_639_p1 & ap_const_lv6_0);
    tmp_6_cast_fu_789_p3 <= (trunc_ln208_fu_785_p1 & ap_const_lv6_0);
    tmp_7_cast_fu_681_p3 <= (trunc_ln98_fu_677_p1 & ap_const_lv6_0);
    tmp_cast_fu_400_p3 <= (trunc_ln75_fu_396_p1 & ap_const_lv6_0);
    trunc_ln208_fu_785_p1 <= i_4_reg_363(6 - 1 downto 0);
    trunc_ln215_fu_711_p1 <= k_reg_340(6 - 1 downto 0);
    trunc_ln691_fu_481_p1 <= select_ln79_fu_465_p3(6 - 1 downto 0);
    trunc_ln692_fu_585_p1 <= select_ln87_1_fu_577_p3(6 - 1 downto 0);
    trunc_ln75_fu_396_p1 <= i_reg_218(6 - 1 downto 0);
    trunc_ln94_fu_639_p1 <= i_3_reg_318(6 - 1 downto 0);
    trunc_ln98_fu_677_p1 <= j_3_reg_329(6 - 1 downto 0);
    xin_address0 <= zext_ln208_1_reg_1066(12 - 1 downto 0);

    xin_ce0_assign_proc : process(ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            xin_ce0 <= ap_const_logic_1;
        else 
            xin_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    xin_d0 <= cov_V_load_reg_1079;

    xin_we0_assign_proc : process(ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            xin_we0 <= ap_const_logic_1;
        else 
            xin_we0 <= ap_const_logic_0;
        end if; 
    end process;

    xout_address0 <= zext_ln75_1_fu_429_p1(12 - 1 downto 0);

    xout_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            xout_ce0 <= ap_const_logic_1;
        else 
            xout_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln208_1_fu_818_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln208_fu_813_p2),64));
    zext_ln208_fu_809_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_4_reg_374),12));
    zext_ln215_1_fu_738_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln215_1_fu_733_p2),64));
    zext_ln215_fu_728_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln215_fu_723_p2),64));
    zext_ln691_1_fu_513_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln691_2_fu_507_p2),64));
    zext_ln691_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln79_2_reg_880),12));
    zext_ln692_1_fu_615_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln692_fu_609_p2),64));
    zext_ln692_fu_606_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln87_reg_921),12));
    zext_ln75_1_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_fu_424_p2),64));
    zext_ln75_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_229),12));
    zext_ln79_fu_531_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln79_2_reg_880_pp0_iter3_reg),64));
    zext_ln88_fu_602_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln87_reg_921),64));
    zext_ln94_1_fu_663_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_3_reg_329),12));
    zext_ln94_2_fu_672_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln94_fu_667_p2),64));
    zext_ln94_fu_635_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_318),12));
    zext_ln98_fu_694_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln98_fu_689_p2),64));
end behav;
