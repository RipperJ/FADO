// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module top_nondf_kernel_cov_x1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        xout_address0,
        xout_ce0,
        xout_q0,
        xin_address0,
        xin_ce0,
        xin_we0,
        xin_d0
);

parameter    ap_ST_fsm_state1 = 29'd1;
parameter    ap_ST_fsm_state2 = 29'd2;
parameter    ap_ST_fsm_state3 = 29'd4;
parameter    ap_ST_fsm_state4 = 29'd8;
parameter    ap_ST_fsm_state5 = 29'd16;
parameter    ap_ST_fsm_pp0_stage0 = 29'd32;
parameter    ap_ST_fsm_state11 = 29'd64;
parameter    ap_ST_fsm_pp1_stage0 = 29'd128;
parameter    ap_ST_fsm_state17 = 29'd256;
parameter    ap_ST_fsm_state18 = 29'd512;
parameter    ap_ST_fsm_state19 = 29'd1024;
parameter    ap_ST_fsm_state20 = 29'd2048;
parameter    ap_ST_fsm_state21 = 29'd4096;
parameter    ap_ST_fsm_state22 = 29'd8192;
parameter    ap_ST_fsm_state23 = 29'd16384;
parameter    ap_ST_fsm_state24 = 29'd32768;
parameter    ap_ST_fsm_state25 = 29'd65536;
parameter    ap_ST_fsm_state26 = 29'd131072;
parameter    ap_ST_fsm_state27 = 29'd262144;
parameter    ap_ST_fsm_state28 = 29'd524288;
parameter    ap_ST_fsm_state29 = 29'd1048576;
parameter    ap_ST_fsm_state30 = 29'd2097152;
parameter    ap_ST_fsm_state31 = 29'd4194304;
parameter    ap_ST_fsm_state32 = 29'd8388608;
parameter    ap_ST_fsm_state33 = 29'd16777216;
parameter    ap_ST_fsm_state34 = 29'd33554432;
parameter    ap_ST_fsm_state35 = 29'd67108864;
parameter    ap_ST_fsm_state36 = 29'd134217728;
parameter    ap_ST_fsm_state37 = 29'd268435456;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] xout_address0;
output   xout_ce0;
input  [127:0] xout_q0;
output  [11:0] xin_address0;
output   xin_ce0;
output   xin_we0;
output  [118:0] xin_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg xout_ce0;
reg xin_ce0;
reg xin_we0;

(* fsm_encoding = "none" *) reg   [28:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [12:0] indvar_flatten_reg_240;
reg   [6:0] j_reg_251;
reg   [6:0] i_2_reg_262;
reg   [127:0] add_i3113_reg_273;
reg   [12:0] indvar_flatten8_reg_285;
reg   [6:0] i_1_reg_296;
reg   [6:0] j_2_reg_307;
wire   [127:0] data_V_q0;
reg  signed [127:0] reg_385;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_state6_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_state8_pp0_stage0_iter2;
wire    ap_block_state9_pp0_stage0_iter3;
wire    ap_block_state10_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln79_reg_871;
reg   [0:0] icmp_ln79_reg_871_pp0_iter1_reg;
reg    ap_enable_reg_pp1_iter2;
wire    ap_block_state12_pp1_stage0_iter0;
wire    ap_block_state13_pp1_stage0_iter1;
wire    ap_block_state14_pp1_stage0_iter2;
wire    ap_block_state15_pp1_stage0_iter3;
wire    ap_block_state16_pp1_stage0_iter4;
wire    ap_block_pp1_stage0_11001;
reg   [0:0] icmp_ln87_reg_917;
reg   [0:0] icmp_ln87_reg_917_pp1_iter1_reg;
wire   [127:0] data_V_q1;
wire    ap_CS_fsm_state21;
wire   [6:0] add_ln73_fu_390_p2;
reg   [6:0] add_ln73_reg_829;
wire    ap_CS_fsm_state2;
wire   [11:0] tmp_cast_fu_400_p3;
reg   [11:0] tmp_cast_reg_834;
wire   [0:0] icmp_ln73_fu_408_p2;
wire   [6:0] add_ln74_fu_414_p2;
reg   [6:0] add_ln74_reg_843;
wire    ap_CS_fsm_state3;
reg   [11:0] data_V_addr_reg_848;
wire   [0:0] icmp_ln74_fu_435_p2;
reg   [127:0] xout_load_reg_861;
wire    ap_CS_fsm_state4;
wire   [12:0] add_ln79_1_fu_441_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln79_fu_447_p2;
reg   [0:0] icmp_ln79_reg_871_pp0_iter2_reg;
reg   [0:0] icmp_ln79_reg_871_pp0_iter3_reg;
wire   [0:0] icmp_ln82_fu_459_p2;
reg   [0:0] icmp_ln82_reg_875;
reg   [0:0] icmp_ln82_reg_875_pp0_iter1_reg;
reg   [0:0] icmp_ln82_reg_875_pp0_iter2_reg;
wire   [6:0] select_ln79_2_fu_473_p3;
reg   [6:0] select_ln79_2_reg_880;
reg   [6:0] select_ln79_2_reg_880_pp0_iter1_reg;
reg   [6:0] select_ln79_2_reg_880_pp0_iter2_reg;
reg   [6:0] select_ln79_2_reg_880_pp0_iter3_reg;
wire   [5:0] trunc_ln691_fu_481_p1;
reg   [5:0] trunc_ln691_reg_887;
wire   [6:0] add_ln82_fu_485_p2;
reg   [6:0] add_ln82_reg_892;
wire   [0:0] icmp_ln82_1_fu_491_p2;
reg   [0:0] icmp_ln82_1_reg_897;
reg   [0:0] icmp_ln82_1_reg_897_pp0_iter1_reg;
reg   [0:0] icmp_ln82_1_reg_897_pp0_iter2_reg;
reg   [0:0] icmp_ln82_1_reg_897_pp0_iter3_reg;
wire   [127:0] add_ln691_fu_525_p2;
reg   [127:0] add_ln691_reg_906;
reg    ap_enable_reg_pp0_iter3;
wire   [12:0] add_ln87_1_fu_545_p2;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire   [0:0] icmp_ln87_fu_551_p2;
reg   [0:0] icmp_ln87_reg_917_pp1_iter2_reg;
reg   [0:0] icmp_ln87_reg_917_pp1_iter3_reg;
wire   [6:0] select_ln87_fu_569_p3;
reg   [6:0] select_ln87_reg_921;
wire   [6:0] select_ln87_1_fu_577_p3;
reg   [6:0] select_ln87_1_reg_927;
wire   [5:0] trunc_ln692_fu_585_p1;
reg   [5:0] trunc_ln692_reg_932;
wire   [6:0] add_ln88_fu_589_p2;
reg   [11:0] data_V_addr_2_reg_942;
reg   [11:0] data_V_addr_2_reg_942_pp1_iter2_reg;
reg   [11:0] data_V_addr_2_reg_942_pp1_iter3_reg;
wire   [117:0] mean_V_q0;
reg   [117:0] mean_V_load_reg_953;
wire   [127:0] sub_ln692_fu_623_p2;
reg   [127:0] sub_ln692_reg_958;
wire   [6:0] add_ln91_fu_629_p2;
reg   [6:0] add_ln91_reg_963;
wire    ap_CS_fsm_state18;
wire   [11:0] zext_ln94_fu_635_p1;
reg   [11:0] zext_ln94_reg_968;
wire   [11:0] tmp_5_cast_fu_643_p3;
reg   [11:0] tmp_5_cast_reg_974;
wire   [6:0] add_ln92_fu_657_p2;
reg   [6:0] add_ln92_reg_982;
wire    ap_CS_fsm_state19;
wire   [11:0] zext_ln94_1_fu_663_p1;
reg   [11:0] zext_ln94_1_reg_987;
reg   [11:0] cov_V_addr_reg_992;
reg   [11:0] cov_V_addr_2_reg_997;
wire   [6:0] add_ln95_fu_705_p2;
reg   [6:0] add_ln95_reg_1005;
wire    ap_CS_fsm_state20;
wire   [0:0] icmp_ln95_fu_743_p2;
reg  signed [127:0] data_V_load_3_reg_1028;
wire   [127:0] grp_fu_759_p2;
reg   [127:0] mul_ln691_reg_1033;
wire    ap_CS_fsm_state26;
wire   [127:0] add_ln691_1_fu_764_p2;
wire    ap_CS_fsm_state27;
reg   [118:0] trunc_ln693_1_reg_1043;
wire    ap_CS_fsm_state31;
wire   [6:0] add_ln101_fu_779_p2;
reg   [6:0] add_ln101_reg_1048;
wire    ap_CS_fsm_state34;
wire   [11:0] tmp_6_cast_fu_789_p3;
reg   [11:0] tmp_6_cast_reg_1053;
wire   [6:0] add_ln102_fu_803_p2;
reg   [6:0] add_ln102_reg_1061;
wire    ap_CS_fsm_state35;
wire   [63:0] zext_ln208_1_fu_818_p1;
reg   [63:0] zext_ln208_1_reg_1066;
wire   [118:0] cov_V_q0;
reg   [118:0] cov_V_load_reg_1079;
wire    ap_CS_fsm_state36;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state6;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter4;
wire    ap_CS_fsm_state11;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state12;
reg    ap_enable_reg_pp1_iter1;
reg    ap_enable_reg_pp1_iter3;
reg    ap_enable_reg_pp1_iter4;
wire   [5:0] mean_V_address0;
reg    mean_V_ce0;
wire   [5:0] mean_V_address1;
reg    mean_V_ce1;
reg    mean_V_we1;
wire   [117:0] mean_V_d1;
reg   [11:0] data_V_address0;
reg    data_V_ce0;
reg   [11:0] data_V_address1;
reg    data_V_ce1;
reg    data_V_we1;
reg   [127:0] data_V_d1;
wire   [11:0] cov_V_address0;
reg    cov_V_ce0;
reg   [11:0] cov_V_address1;
reg    cov_V_ce1;
reg    cov_V_we1;
reg   [6:0] i_reg_218;
reg   [6:0] j_1_reg_229;
wire    ap_CS_fsm_state5;
reg   [6:0] ap_phi_mux_j_phi_fu_255_p4;
wire    ap_block_pp0_stage0;
reg   [6:0] ap_phi_mux_i_2_phi_fu_266_p4;
reg   [127:0] ap_phi_mux_add_i3113_phi_fu_277_p4;
reg   [6:0] ap_phi_mux_i_1_phi_fu_300_p4;
wire    ap_block_pp1_stage0;
reg   [6:0] i_3_reg_318;
wire   [0:0] icmp_ln92_fu_699_p2;
wire    ap_CS_fsm_state17;
reg   [6:0] j_3_reg_329;
wire    ap_CS_fsm_state33;
wire   [0:0] icmp_ln91_fu_651_p2;
reg   [6:0] k_reg_340;
reg   [127:0] conv3_i2112_reg_351;
reg   [6:0] i_4_reg_363;
wire   [0:0] icmp_ln102_fu_823_p2;
reg   [6:0] j_4_reg_374;
wire    ap_CS_fsm_state37;
wire   [0:0] icmp_ln101_fu_797_p2;
wire   [63:0] zext_ln75_1_fu_429_p1;
wire   [63:0] zext_ln691_1_fu_513_p1;
wire   [63:0] zext_ln79_fu_531_p1;
wire   [63:0] zext_ln692_1_fu_615_p1;
wire   [63:0] zext_ln88_fu_602_p1;
wire   [63:0] zext_ln94_2_fu_672_p1;
wire   [63:0] zext_ln98_fu_694_p1;
wire   [63:0] zext_ln215_fu_728_p1;
wire   [63:0] zext_ln215_1_fu_738_p1;
wire    ap_CS_fsm_state32;
wire   [5:0] trunc_ln75_fu_396_p1;
wire   [11:0] zext_ln75_fu_420_p1;
wire   [11:0] add_ln75_fu_424_p2;
wire   [6:0] add_ln79_fu_453_p2;
wire   [6:0] select_ln79_fu_465_p3;
wire   [11:0] tmp_3_cast_fu_500_p3;
wire   [11:0] zext_ln691_fu_497_p1;
wire   [11:0] add_ln691_2_fu_507_p2;
wire   [127:0] select_ln79_1_fu_518_p3;
wire   [0:0] icmp_ln88_fu_563_p2;
wire   [6:0] add_ln87_fu_557_p2;
wire   [11:0] tmp_4_cast_fu_595_p3;
wire   [11:0] zext_ln692_fu_606_p1;
wire   [11:0] add_ln692_fu_609_p2;
wire   [127:0] mean_V_load_cast_fu_620_p1;
wire   [5:0] trunc_ln94_fu_639_p1;
wire   [11:0] add_ln94_fu_667_p2;
wire   [5:0] trunc_ln98_fu_677_p1;
wire   [11:0] tmp_7_cast_fu_681_p3;
wire   [11:0] add_ln98_fu_689_p2;
wire   [5:0] trunc_ln215_fu_711_p1;
wire   [11:0] tmp_10_cast_fu_715_p3;
wire   [11:0] add_ln215_fu_723_p2;
wire   [11:0] add_ln215_1_fu_733_p2;
wire   [127:0] grp_fu_753_p0;
wire   [129:0] grp_fu_753_p1;
wire    ap_CS_fsm_state22;
wire   [256:0] grp_fu_753_p2;
wire   [5:0] trunc_ln208_fu_785_p1;
wire   [11:0] zext_ln208_fu_809_p1;
wire   [11:0] add_ln208_fu_813_p2;
reg   [28:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire   [256:0] grp_fu_753_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 29'd1;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
end

top_nondf_kernel_cov_x1_mean_V #(
    .DataWidth( 118 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
mean_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mean_V_address0),
    .ce0(mean_V_ce0),
    .q0(mean_V_q0),
    .address1(mean_V_address1),
    .ce1(mean_V_ce1),
    .we1(mean_V_we1),
    .d1(mean_V_d1)
);

top_nondf_kernel_cov_x1_data_V #(
    .DataWidth( 128 ),
    .AddressRange( 4096 ),
    .AddressWidth( 12 ))
data_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(data_V_address0),
    .ce0(data_V_ce0),
    .q0(data_V_q0),
    .address1(data_V_address1),
    .ce1(data_V_ce1),
    .we1(data_V_we1),
    .d1(data_V_d1),
    .q1(data_V_q1)
);

top_nondf_kernel_cov_x1_cov_V #(
    .DataWidth( 119 ),
    .AddressRange( 4096 ),
    .AddressWidth( 12 ))
cov_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(cov_V_address0),
    .ce0(cov_V_ce0),
    .q0(cov_V_q0),
    .address1(cov_V_address1),
    .ce1(cov_V_ce1),
    .we1(cov_V_we1),
    .d1(trunc_ln693_1_reg_1043)
);

top_mul_128ns_130ns_257_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 128 ),
    .din1_WIDTH( 130 ),
    .dout_WIDTH( 257 ))
mul_128ns_130ns_257_5_1_U1104(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_753_p0),
    .din1(grp_fu_753_p1),
    .ce(1'b1),
    .dout(grp_fu_753_p2)
);

top_mul_128s_128s_128_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 128 ),
    .din1_WIDTH( 128 ),
    .dout_WIDTH( 128 ))
mul_128s_128s_128_5_1_U1105(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(data_V_load_3_reg_1028),
    .din1(reg_385),
    .ce(1'b1),
    .dout(grp_fu_759_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state6) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln73_fu_408_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state6)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state6);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln73_fu_408_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state12) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state12)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state12);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_enable_reg_pp1_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln73_fu_408_p2 == 1'd1))) begin
        add_i3113_reg_273 <= 128'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln79_reg_871_pp0_iter3_reg == 1'd0))) begin
        add_i3113_reg_273 <= add_ln691_reg_906;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln92_fu_699_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state19))) begin
        conv3_i2112_reg_351 <= 128'd0;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        conv3_i2112_reg_351 <= add_ln691_1_fu_764_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        i_1_reg_296 <= 7'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln87_reg_917 == 1'd0))) begin
        i_1_reg_296 <= select_ln87_1_reg_927;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln73_fu_408_p2 == 1'd1))) begin
        i_2_reg_262 <= 7'd0;
    end else if (((icmp_ln79_reg_871 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_2_reg_262 <= add_ln82_reg_892;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        i_3_reg_318 <= 7'd0;
    end else if (((icmp_ln92_fu_699_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state19))) begin
        i_3_reg_318 <= add_ln91_reg_963;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln91_fu_651_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
        i_4_reg_363 <= 7'd0;
    end else if (((icmp_ln102_fu_823_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state35))) begin
        i_4_reg_363 <= add_ln101_reg_1048;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_218 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln74_fu_435_p2 == 1'd1))) begin
        i_reg_218 <= add_ln73_reg_829;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        indvar_flatten8_reg_285 <= 13'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln87_fu_551_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        indvar_flatten8_reg_285 <= add_ln87_1_fu_545_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln73_fu_408_p2 == 1'd1))) begin
        indvar_flatten_reg_240 <= 13'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln79_fu_447_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        indvar_flatten_reg_240 <= add_ln79_1_fu_441_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln73_fu_408_p2 == 1'd0))) begin
        j_1_reg_229 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        j_1_reg_229 <= add_ln74_reg_843;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        j_2_reg_307 <= 7'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln87_fu_551_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        j_2_reg_307 <= add_ln88_fu_589_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln91_fu_651_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state18))) begin
        j_3_reg_329 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        j_3_reg_329 <= add_ln92_reg_982;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln101_fu_797_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state34))) begin
        j_4_reg_374 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        j_4_reg_374 <= add_ln102_reg_1061;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln73_fu_408_p2 == 1'd1))) begin
        j_reg_251 <= 7'd0;
    end else if (((icmp_ln79_reg_871 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_reg_251 <= select_ln79_2_reg_880;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln92_fu_699_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state19))) begin
        k_reg_340 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        k_reg_340 <= add_ln95_reg_1005;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        reg_385 <= data_V_q1;
    end else if ((((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln87_reg_917_pp1_iter1_reg == 1'd0)) | ((icmp_ln79_reg_871_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        reg_385 <= data_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        add_ln101_reg_1048 <= add_ln101_fu_779_p2;
        tmp_6_cast_reg_1053[11 : 6] <= tmp_6_cast_fu_789_p3[11 : 6];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        add_ln102_reg_1061 <= add_ln102_fu_803_p2;
        zext_ln208_1_reg_1066[11 : 0] <= zext_ln208_1_fu_818_p1[11 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln79_reg_871_pp0_iter2_reg == 1'd0))) begin
        add_ln691_reg_906 <= add_ln691_fu_525_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln73_reg_829 <= add_ln73_fu_390_p2;
        tmp_cast_reg_834[11 : 6] <= tmp_cast_fu_400_p3[11 : 6];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln74_reg_843 <= add_ln74_fu_414_p2;
        data_V_addr_reg_848 <= zext_ln75_1_fu_429_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln79_fu_447_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln82_reg_892 <= add_ln82_fu_485_p2;
        select_ln79_2_reg_880 <= select_ln79_2_fu_473_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        add_ln91_reg_963 <= add_ln91_fu_629_p2;
        tmp_5_cast_reg_974[11 : 6] <= tmp_5_cast_fu_643_p3[11 : 6];
        zext_ln94_reg_968[6 : 0] <= zext_ln94_fu_635_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        add_ln92_reg_982 <= add_ln92_fu_657_p2;
        cov_V_addr_2_reg_997 <= zext_ln98_fu_694_p1;
        cov_V_addr_reg_992 <= zext_ln94_2_fu_672_p1;
        zext_ln94_1_reg_987[6 : 0] <= zext_ln94_1_fu_663_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        add_ln95_reg_1005 <= add_ln95_fu_705_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        cov_V_load_reg_1079 <= cov_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln87_reg_917 == 1'd0))) begin
        data_V_addr_2_reg_942 <= zext_ln692_1_fu_615_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        data_V_addr_2_reg_942_pp1_iter2_reg <= data_V_addr_2_reg_942;
        data_V_addr_2_reg_942_pp1_iter3_reg <= data_V_addr_2_reg_942_pp1_iter2_reg;
        icmp_ln87_reg_917_pp1_iter2_reg <= icmp_ln87_reg_917_pp1_iter1_reg;
        icmp_ln87_reg_917_pp1_iter3_reg <= icmp_ln87_reg_917_pp1_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        data_V_load_3_reg_1028 <= data_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln79_reg_871 <= icmp_ln79_fu_447_p2;
        icmp_ln79_reg_871_pp0_iter1_reg <= icmp_ln79_reg_871;
        icmp_ln82_1_reg_897_pp0_iter1_reg <= icmp_ln82_1_reg_897;
        icmp_ln82_reg_875_pp0_iter1_reg <= icmp_ln82_reg_875;
        select_ln79_2_reg_880_pp0_iter1_reg <= select_ln79_2_reg_880;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln79_reg_871_pp0_iter2_reg <= icmp_ln79_reg_871_pp0_iter1_reg;
        icmp_ln79_reg_871_pp0_iter3_reg <= icmp_ln79_reg_871_pp0_iter2_reg;
        icmp_ln82_1_reg_897_pp0_iter2_reg <= icmp_ln82_1_reg_897_pp0_iter1_reg;
        icmp_ln82_1_reg_897_pp0_iter3_reg <= icmp_ln82_1_reg_897_pp0_iter2_reg;
        icmp_ln82_reg_875_pp0_iter2_reg <= icmp_ln82_reg_875_pp0_iter1_reg;
        select_ln79_2_reg_880_pp0_iter2_reg <= select_ln79_2_reg_880_pp0_iter1_reg;
        select_ln79_2_reg_880_pp0_iter3_reg <= select_ln79_2_reg_880_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln79_fu_447_p2 == 1'd0))) begin
        icmp_ln82_1_reg_897 <= icmp_ln82_1_fu_491_p2;
        icmp_ln82_reg_875 <= icmp_ln82_fu_459_p2;
        trunc_ln691_reg_887 <= trunc_ln691_fu_481_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln87_reg_917 <= icmp_ln87_fu_551_p2;
        icmp_ln87_reg_917_pp1_iter1_reg <= icmp_ln87_reg_917;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln87_reg_917_pp1_iter1_reg == 1'd0))) begin
        mean_V_load_reg_953 <= mean_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        mul_ln691_reg_1033 <= grp_fu_759_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln87_fu_551_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        select_ln87_1_reg_927 <= select_ln87_1_fu_577_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln87_fu_551_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        select_ln87_reg_921 <= select_ln87_fu_569_p3;
        trunc_ln692_reg_932 <= trunc_ln692_fu_585_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln87_reg_917_pp1_iter2_reg == 1'd0))) begin
        sub_ln692_reg_958 <= sub_ln692_fu_623_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        trunc_ln693_1_reg_1043 <= {{grp_fu_753_p2[256:138]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        xout_load_reg_861 <= xout_q0;
    end
end

always @ (*) begin
    if ((icmp_ln79_fu_447_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state6 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state6 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln87_fu_551_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state12 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state12 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln101_fu_797_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state34)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln79_reg_871_pp0_iter3_reg == 1'd0))) begin
        ap_phi_mux_add_i3113_phi_fu_277_p4 = add_ln691_reg_906;
    end else begin
        ap_phi_mux_add_i3113_phi_fu_277_p4 = add_i3113_reg_273;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln87_reg_917 == 1'd0))) begin
        ap_phi_mux_i_1_phi_fu_300_p4 = select_ln87_1_reg_927;
    end else begin
        ap_phi_mux_i_1_phi_fu_300_p4 = i_1_reg_296;
    end
end

always @ (*) begin
    if (((icmp_ln79_reg_871 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_i_2_phi_fu_266_p4 = add_ln82_reg_892;
    end else begin
        ap_phi_mux_i_2_phi_fu_266_p4 = i_2_reg_262;
    end
end

always @ (*) begin
    if (((icmp_ln79_reg_871 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_j_phi_fu_255_p4 = select_ln79_2_reg_880;
    end else begin
        ap_phi_mux_j_phi_fu_255_p4 = j_reg_251;
    end
end

always @ (*) begin
    if (((icmp_ln101_fu_797_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state34))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        cov_V_address1 = cov_V_addr_2_reg_997;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        cov_V_address1 = cov_V_addr_reg_992;
    end else begin
        cov_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        cov_V_ce0 = 1'b1;
    end else begin
        cov_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state33))) begin
        cov_V_ce1 = 1'b1;
    end else begin
        cov_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state33))) begin
        cov_V_we1 = 1'b1;
    end else begin
        cov_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        data_V_address0 = zext_ln215_1_fu_738_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        data_V_address0 = zext_ln692_1_fu_615_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_address0 = zext_ln691_1_fu_513_p1;
    end else begin
        data_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        data_V_address1 = zext_ln215_fu_728_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        data_V_address1 = data_V_addr_2_reg_942_pp1_iter3_reg;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        data_V_address1 = data_V_addr_reg_848;
    end else begin
        data_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        data_V_ce0 = 1'b1;
    end else begin
        data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state20) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter4 == 1'b1)))) begin
        data_V_ce1 = 1'b1;
    end else begin
        data_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        data_V_d1 = sub_ln692_reg_958;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        data_V_d1 = xout_load_reg_861;
    end else begin
        data_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter4 == 1'b1) & (icmp_ln87_reg_917_pp1_iter3_reg == 1'd0)))) begin
        data_V_we1 = 1'b1;
    end else begin
        data_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        mean_V_ce0 = 1'b1;
    end else begin
        mean_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        mean_V_ce1 = 1'b1;
    end else begin
        mean_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln82_1_reg_897_pp0_iter3_reg == 1'd1))) begin
        mean_V_we1 = 1'b1;
    end else begin
        mean_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        xin_ce0 = 1'b1;
    end else begin
        xin_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        xin_we0 = 1'b1;
    end else begin
        xin_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        xout_ce0 = 1'b1;
    end else begin
        xout_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln73_fu_408_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln74_fu_435_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln79_fu_447_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln79_fu_447_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (icmp_ln87_fu_551_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter4 == 1'b1) & (ap_enable_reg_pp1_iter3 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter4 == 1'b1) & (ap_enable_reg_pp1_iter3 == 1'b0)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (icmp_ln87_fu_551_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            if (((icmp_ln91_fu_651_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state19 : begin
            if (((icmp_ln92_fu_699_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state20 : begin
            if (((icmp_ln95_fu_743_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state34 : begin
            if (((icmp_ln101_fu_797_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state34))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state35 : begin
            if (((icmp_ln102_fu_823_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state35))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln101_fu_779_p2 = (i_4_reg_363 + 7'd1);

assign add_ln102_fu_803_p2 = (j_4_reg_374 + 7'd1);

assign add_ln208_fu_813_p2 = (tmp_6_cast_reg_1053 + zext_ln208_fu_809_p1);

assign add_ln215_1_fu_733_p2 = (tmp_10_cast_fu_715_p3 + zext_ln94_1_reg_987);

assign add_ln215_fu_723_p2 = (tmp_10_cast_fu_715_p3 + zext_ln94_reg_968);

assign add_ln691_1_fu_764_p2 = (mul_ln691_reg_1033 + conv3_i2112_reg_351);

assign add_ln691_2_fu_507_p2 = (tmp_3_cast_fu_500_p3 + zext_ln691_fu_497_p1);

assign add_ln691_fu_525_p2 = ($signed(reg_385) + $signed(select_ln79_1_fu_518_p3));

assign add_ln692_fu_609_p2 = (tmp_4_cast_fu_595_p3 + zext_ln692_fu_606_p1);

assign add_ln73_fu_390_p2 = (i_reg_218 + 7'd1);

assign add_ln74_fu_414_p2 = (j_1_reg_229 + 7'd1);

assign add_ln75_fu_424_p2 = (tmp_cast_reg_834 + zext_ln75_fu_420_p1);

assign add_ln79_1_fu_441_p2 = (indvar_flatten_reg_240 + 13'd1);

assign add_ln79_fu_453_p2 = (ap_phi_mux_j_phi_fu_255_p4 + 7'd1);

assign add_ln82_fu_485_p2 = (select_ln79_fu_465_p3 + 7'd1);

assign add_ln87_1_fu_545_p2 = (indvar_flatten8_reg_285 + 13'd1);

assign add_ln87_fu_557_p2 = (ap_phi_mux_i_1_phi_fu_300_p4 + 7'd1);

assign add_ln88_fu_589_p2 = (select_ln87_fu_569_p3 + 7'd1);

assign add_ln91_fu_629_p2 = (i_3_reg_318 + 7'd1);

assign add_ln92_fu_657_p2 = (j_3_reg_329 + 7'd1);

assign add_ln94_fu_667_p2 = (tmp_5_cast_reg_974 + zext_ln94_1_fu_663_p1);

assign add_ln95_fu_705_p2 = (k_reg_340 + 7'd1);

assign add_ln98_fu_689_p2 = (tmp_7_cast_fu_681_p3 + zext_ln94_reg_968);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign cov_V_address0 = zext_ln208_1_fu_818_p1;

assign grp_fu_753_p0 = grp_fu_753_p00;

assign grp_fu_753_p00 = conv3_i2112_reg_351;

assign grp_fu_753_p1 = 257'd340614998755660788452097358758680985857;

assign icmp_ln101_fu_797_p2 = ((i_4_reg_363 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln102_fu_823_p2 = ((j_4_reg_374 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln73_fu_408_p2 = ((i_reg_218 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln74_fu_435_p2 = ((j_1_reg_229 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln79_fu_447_p2 = ((indvar_flatten_reg_240 == 13'd4096) ? 1'b1 : 1'b0);

assign icmp_ln82_1_fu_491_p2 = ((add_ln82_fu_485_p2 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln82_fu_459_p2 = ((ap_phi_mux_i_2_phi_fu_266_p4 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln87_fu_551_p2 = ((indvar_flatten8_reg_285 == 13'd4096) ? 1'b1 : 1'b0);

assign icmp_ln88_fu_563_p2 = ((j_2_reg_307 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln91_fu_651_p2 = ((i_3_reg_318 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln92_fu_699_p2 = ((j_3_reg_329 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln95_fu_743_p2 = ((k_reg_340 == 7'd64) ? 1'b1 : 1'b0);

assign mean_V_address0 = zext_ln88_fu_602_p1;

assign mean_V_address1 = zext_ln79_fu_531_p1;

assign mean_V_d1 = {{add_ln691_reg_906[127:10]}};

assign mean_V_load_cast_fu_620_p1 = mean_V_load_reg_953;

assign select_ln79_1_fu_518_p3 = ((icmp_ln82_reg_875_pp0_iter2_reg[0:0] == 1'b1) ? 128'd0 : ap_phi_mux_add_i3113_phi_fu_277_p4);

assign select_ln79_2_fu_473_p3 = ((icmp_ln82_fu_459_p2[0:0] == 1'b1) ? add_ln79_fu_453_p2 : ap_phi_mux_j_phi_fu_255_p4);

assign select_ln79_fu_465_p3 = ((icmp_ln82_fu_459_p2[0:0] == 1'b1) ? 7'd0 : ap_phi_mux_i_2_phi_fu_266_p4);

assign select_ln87_1_fu_577_p3 = ((icmp_ln88_fu_563_p2[0:0] == 1'b1) ? add_ln87_fu_557_p2 : ap_phi_mux_i_1_phi_fu_300_p4);

assign select_ln87_fu_569_p3 = ((icmp_ln88_fu_563_p2[0:0] == 1'b1) ? 7'd0 : j_2_reg_307);

assign sub_ln692_fu_623_p2 = ($signed(reg_385) - $signed(mean_V_load_cast_fu_620_p1));

assign tmp_10_cast_fu_715_p3 = {{trunc_ln215_fu_711_p1}, {6'd0}};

assign tmp_3_cast_fu_500_p3 = {{trunc_ln691_reg_887}, {6'd0}};

assign tmp_4_cast_fu_595_p3 = {{trunc_ln692_reg_932}, {6'd0}};

assign tmp_5_cast_fu_643_p3 = {{trunc_ln94_fu_639_p1}, {6'd0}};

assign tmp_6_cast_fu_789_p3 = {{trunc_ln208_fu_785_p1}, {6'd0}};

assign tmp_7_cast_fu_681_p3 = {{trunc_ln98_fu_677_p1}, {6'd0}};

assign tmp_cast_fu_400_p3 = {{trunc_ln75_fu_396_p1}, {6'd0}};

assign trunc_ln208_fu_785_p1 = i_4_reg_363[5:0];

assign trunc_ln215_fu_711_p1 = k_reg_340[5:0];

assign trunc_ln691_fu_481_p1 = select_ln79_fu_465_p3[5:0];

assign trunc_ln692_fu_585_p1 = select_ln87_1_fu_577_p3[5:0];

assign trunc_ln75_fu_396_p1 = i_reg_218[5:0];

assign trunc_ln94_fu_639_p1 = i_3_reg_318[5:0];

assign trunc_ln98_fu_677_p1 = j_3_reg_329[5:0];

assign xin_address0 = zext_ln208_1_reg_1066;

assign xin_d0 = cov_V_load_reg_1079;

assign xout_address0 = zext_ln75_1_fu_429_p1;

assign zext_ln208_1_fu_818_p1 = add_ln208_fu_813_p2;

assign zext_ln208_fu_809_p1 = j_4_reg_374;

assign zext_ln215_1_fu_738_p1 = add_ln215_1_fu_733_p2;

assign zext_ln215_fu_728_p1 = add_ln215_fu_723_p2;

assign zext_ln691_1_fu_513_p1 = add_ln691_2_fu_507_p2;

assign zext_ln691_fu_497_p1 = select_ln79_2_reg_880;

assign zext_ln692_1_fu_615_p1 = add_ln692_fu_609_p2;

assign zext_ln692_fu_606_p1 = select_ln87_reg_921;

assign zext_ln75_1_fu_429_p1 = add_ln75_fu_424_p2;

assign zext_ln75_fu_420_p1 = j_1_reg_229;

assign zext_ln79_fu_531_p1 = select_ln79_2_reg_880_pp0_iter3_reg;

assign zext_ln88_fu_602_p1 = select_ln87_reg_921;

assign zext_ln94_1_fu_663_p1 = j_3_reg_329;

assign zext_ln94_2_fu_672_p1 = add_ln94_fu_667_p2;

assign zext_ln94_fu_635_p1 = i_3_reg_318;

assign zext_ln98_fu_694_p1 = add_ln98_fu_689_p2;

always @ (posedge ap_clk) begin
    tmp_cast_reg_834[5:0] <= 6'b000000;
    zext_ln94_reg_968[11:7] <= 5'b00000;
    tmp_5_cast_reg_974[5:0] <= 6'b000000;
    zext_ln94_1_reg_987[11:7] <= 5'b00000;
    tmp_6_cast_reg_1053[5:0] <= 6'b000000;
    zext_ln208_1_reg_1066[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
end

endmodule //top_nondf_kernel_cov_x1
