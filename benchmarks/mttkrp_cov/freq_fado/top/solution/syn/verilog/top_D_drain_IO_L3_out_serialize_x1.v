// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module top_D_drain_IO_L3_out_serialize_x1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        m_axi_gmem_D_AWVALID,
        m_axi_gmem_D_AWREADY,
        m_axi_gmem_D_AWADDR,
        m_axi_gmem_D_AWID,
        m_axi_gmem_D_AWLEN,
        m_axi_gmem_D_AWSIZE,
        m_axi_gmem_D_AWBURST,
        m_axi_gmem_D_AWLOCK,
        m_axi_gmem_D_AWCACHE,
        m_axi_gmem_D_AWPROT,
        m_axi_gmem_D_AWQOS,
        m_axi_gmem_D_AWREGION,
        m_axi_gmem_D_AWUSER,
        m_axi_gmem_D_WVALID,
        m_axi_gmem_D_WREADY,
        m_axi_gmem_D_WDATA,
        m_axi_gmem_D_WSTRB,
        m_axi_gmem_D_WLAST,
        m_axi_gmem_D_WID,
        m_axi_gmem_D_WUSER,
        m_axi_gmem_D_ARVALID,
        m_axi_gmem_D_ARREADY,
        m_axi_gmem_D_ARADDR,
        m_axi_gmem_D_ARID,
        m_axi_gmem_D_ARLEN,
        m_axi_gmem_D_ARSIZE,
        m_axi_gmem_D_ARBURST,
        m_axi_gmem_D_ARLOCK,
        m_axi_gmem_D_ARCACHE,
        m_axi_gmem_D_ARPROT,
        m_axi_gmem_D_ARQOS,
        m_axi_gmem_D_ARREGION,
        m_axi_gmem_D_ARUSER,
        m_axi_gmem_D_RVALID,
        m_axi_gmem_D_RREADY,
        m_axi_gmem_D_RDATA,
        m_axi_gmem_D_RLAST,
        m_axi_gmem_D_RID,
        m_axi_gmem_D_RUSER,
        m_axi_gmem_D_RRESP,
        m_axi_gmem_D_BVALID,
        m_axi_gmem_D_BREADY,
        m_axi_gmem_D_BRESP,
        m_axi_gmem_D_BID,
        m_axi_gmem_D_BUSER,
        fifo_D_drain_local_in_dout,
        fifo_D_drain_local_in_empty_n,
        fifo_D_drain_local_in_read,
        D_dout,
        D_empty_n,
        D_read
);

parameter    ap_ST_fsm_state1 = 73'd1;
parameter    ap_ST_fsm_state2 = 73'd2;
parameter    ap_ST_fsm_state3 = 73'd4;
parameter    ap_ST_fsm_state4 = 73'd8;
parameter    ap_ST_fsm_state5 = 73'd16;
parameter    ap_ST_fsm_state6 = 73'd32;
parameter    ap_ST_fsm_state7 = 73'd64;
parameter    ap_ST_fsm_state8 = 73'd128;
parameter    ap_ST_fsm_state9 = 73'd256;
parameter    ap_ST_fsm_state10 = 73'd512;
parameter    ap_ST_fsm_state11 = 73'd1024;
parameter    ap_ST_fsm_state12 = 73'd2048;
parameter    ap_ST_fsm_state13 = 73'd4096;
parameter    ap_ST_fsm_state14 = 73'd8192;
parameter    ap_ST_fsm_state15 = 73'd16384;
parameter    ap_ST_fsm_state16 = 73'd32768;
parameter    ap_ST_fsm_state17 = 73'd65536;
parameter    ap_ST_fsm_state18 = 73'd131072;
parameter    ap_ST_fsm_state19 = 73'd262144;
parameter    ap_ST_fsm_state20 = 73'd524288;
parameter    ap_ST_fsm_state21 = 73'd1048576;
parameter    ap_ST_fsm_state22 = 73'd2097152;
parameter    ap_ST_fsm_state23 = 73'd4194304;
parameter    ap_ST_fsm_state24 = 73'd8388608;
parameter    ap_ST_fsm_state25 = 73'd16777216;
parameter    ap_ST_fsm_state26 = 73'd33554432;
parameter    ap_ST_fsm_state27 = 73'd67108864;
parameter    ap_ST_fsm_state28 = 73'd134217728;
parameter    ap_ST_fsm_state29 = 73'd268435456;
parameter    ap_ST_fsm_state30 = 73'd536870912;
parameter    ap_ST_fsm_state31 = 73'd1073741824;
parameter    ap_ST_fsm_state32 = 73'd2147483648;
parameter    ap_ST_fsm_state33 = 73'd4294967296;
parameter    ap_ST_fsm_state34 = 73'd8589934592;
parameter    ap_ST_fsm_state35 = 73'd17179869184;
parameter    ap_ST_fsm_state36 = 73'd34359738368;
parameter    ap_ST_fsm_state37 = 73'd68719476736;
parameter    ap_ST_fsm_state38 = 73'd137438953472;
parameter    ap_ST_fsm_state39 = 73'd274877906944;
parameter    ap_ST_fsm_state40 = 73'd549755813888;
parameter    ap_ST_fsm_state41 = 73'd1099511627776;
parameter    ap_ST_fsm_state42 = 73'd2199023255552;
parameter    ap_ST_fsm_state43 = 73'd4398046511104;
parameter    ap_ST_fsm_state44 = 73'd8796093022208;
parameter    ap_ST_fsm_state45 = 73'd17592186044416;
parameter    ap_ST_fsm_state46 = 73'd35184372088832;
parameter    ap_ST_fsm_state47 = 73'd70368744177664;
parameter    ap_ST_fsm_state48 = 73'd140737488355328;
parameter    ap_ST_fsm_state49 = 73'd281474976710656;
parameter    ap_ST_fsm_state50 = 73'd562949953421312;
parameter    ap_ST_fsm_state51 = 73'd1125899906842624;
parameter    ap_ST_fsm_state52 = 73'd2251799813685248;
parameter    ap_ST_fsm_state53 = 73'd4503599627370496;
parameter    ap_ST_fsm_state54 = 73'd9007199254740992;
parameter    ap_ST_fsm_state55 = 73'd18014398509481984;
parameter    ap_ST_fsm_state56 = 73'd36028797018963968;
parameter    ap_ST_fsm_state57 = 73'd72057594037927936;
parameter    ap_ST_fsm_state58 = 73'd144115188075855872;
parameter    ap_ST_fsm_state59 = 73'd288230376151711744;
parameter    ap_ST_fsm_state60 = 73'd576460752303423488;
parameter    ap_ST_fsm_state61 = 73'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 73'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 73'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 73'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 73'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 73'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 73'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 73'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 73'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 73'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 73'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 73'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 73'd4722366482869645213696;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_D_AWVALID;
input   m_axi_gmem_D_AWREADY;
output  [63:0] m_axi_gmem_D_AWADDR;
output  [0:0] m_axi_gmem_D_AWID;
output  [31:0] m_axi_gmem_D_AWLEN;
output  [2:0] m_axi_gmem_D_AWSIZE;
output  [1:0] m_axi_gmem_D_AWBURST;
output  [1:0] m_axi_gmem_D_AWLOCK;
output  [3:0] m_axi_gmem_D_AWCACHE;
output  [2:0] m_axi_gmem_D_AWPROT;
output  [3:0] m_axi_gmem_D_AWQOS;
output  [3:0] m_axi_gmem_D_AWREGION;
output  [0:0] m_axi_gmem_D_AWUSER;
output   m_axi_gmem_D_WVALID;
input   m_axi_gmem_D_WREADY;
output  [511:0] m_axi_gmem_D_WDATA;
output  [63:0] m_axi_gmem_D_WSTRB;
output   m_axi_gmem_D_WLAST;
output  [0:0] m_axi_gmem_D_WID;
output  [0:0] m_axi_gmem_D_WUSER;
output   m_axi_gmem_D_ARVALID;
input   m_axi_gmem_D_ARREADY;
output  [63:0] m_axi_gmem_D_ARADDR;
output  [0:0] m_axi_gmem_D_ARID;
output  [31:0] m_axi_gmem_D_ARLEN;
output  [2:0] m_axi_gmem_D_ARSIZE;
output  [1:0] m_axi_gmem_D_ARBURST;
output  [1:0] m_axi_gmem_D_ARLOCK;
output  [3:0] m_axi_gmem_D_ARCACHE;
output  [2:0] m_axi_gmem_D_ARPROT;
output  [3:0] m_axi_gmem_D_ARQOS;
output  [3:0] m_axi_gmem_D_ARREGION;
output  [0:0] m_axi_gmem_D_ARUSER;
input   m_axi_gmem_D_RVALID;
output   m_axi_gmem_D_RREADY;
input  [511:0] m_axi_gmem_D_RDATA;
input   m_axi_gmem_D_RLAST;
input  [0:0] m_axi_gmem_D_RID;
input  [0:0] m_axi_gmem_D_RUSER;
input  [1:0] m_axi_gmem_D_RRESP;
input   m_axi_gmem_D_BVALID;
output   m_axi_gmem_D_BREADY;
input  [1:0] m_axi_gmem_D_BRESP;
input  [0:0] m_axi_gmem_D_BID;
input  [0:0] m_axi_gmem_D_BUSER;
input  [127:0] fifo_D_drain_local_in_dout;
input   fifo_D_drain_local_in_empty_n;
output   fifo_D_drain_local_in_read;
input  [63:0] D_dout;
input   D_empty_n;
output   D_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_gmem_D_AWVALID;
reg m_axi_gmem_D_WVALID;
reg m_axi_gmem_D_BREADY;
reg fifo_D_drain_local_in_read;
reg D_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [72:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    gmem_D_blk_n_AW;
wire    ap_CS_fsm_state2;
reg    gmem_D_blk_n_W;
wire    ap_CS_fsm_state5;
reg    gmem_D_blk_n_B;
wire    ap_CS_fsm_state73;
reg    fifo_D_drain_local_in_blk_n;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln878_fu_190_p2;
reg    D_blk_n;
reg   [57:0] trunc_ln_reg_269;
wire   [10:0] add_ln26293_fu_172_p2;
reg   [10:0] add_ln26293_reg_280;
wire    ap_CS_fsm_state3;
wire   [2:0] add_ln691_fu_184_p2;
reg    ap_block_state4;
reg   [10:0] phi_ln26293_reg_130;
reg   [2:0] p_V_reg_141;
wire   [0:0] icmp_ln26293_fu_178_p2;
wire  signed [63:0] sext_ln26304_fu_162_p1;
reg   [127:0] p_Repl2_s_fu_86;
wire   [1:0] trunc_ln26301_fu_196_p1;
reg   [127:0] p_Repl2_961_fu_90;
reg   [127:0] p_Repl2_962_fu_94;
reg   [127:0] p_Repl2_963_fu_98;
reg    ap_block_state1;
reg   [72:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 73'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state73) & (m_axi_gmem_D_BVALID == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln878_fu_190_p2 == 1'd0) & (fifo_D_drain_local_in_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln878_fu_190_p2 == 1'd0))) begin
        p_V_reg_141 <= add_ln691_fu_184_p2;
    end else if (((icmp_ln26293_fu_178_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        p_V_reg_141 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (m_axi_gmem_D_WREADY == 1'b1))) begin
        phi_ln26293_reg_130 <= add_ln26293_reg_280;
    end else if (((m_axi_gmem_D_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_ln26293_reg_130 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln26293_reg_280 <= add_ln26293_fu_172_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln878_fu_190_p2 == 1'd0) & (fifo_D_drain_local_in_empty_n == 1'b0)) & (trunc_ln26301_fu_196_p1 == 2'd1) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln878_fu_190_p2 == 1'd0))) begin
        p_Repl2_961_fu_90 <= fifo_D_drain_local_in_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln878_fu_190_p2 == 1'd0) & (fifo_D_drain_local_in_empty_n == 1'b0)) & (trunc_ln26301_fu_196_p1 == 2'd2) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln878_fu_190_p2 == 1'd0))) begin
        p_Repl2_962_fu_94 <= fifo_D_drain_local_in_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln878_fu_190_p2 == 1'd0) & (fifo_D_drain_local_in_empty_n == 1'b0)) & (trunc_ln26301_fu_196_p1 == 2'd3) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln878_fu_190_p2 == 1'd0))) begin
        p_Repl2_963_fu_98 <= fifo_D_drain_local_in_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln878_fu_190_p2 == 1'd0) & (fifo_D_drain_local_in_empty_n == 1'b0)) & (trunc_ln26301_fu_196_p1 == 2'd0) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln878_fu_190_p2 == 1'd0))) begin
        p_Repl2_s_fu_86 <= fifo_D_drain_local_in_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        trunc_ln_reg_269 <= {{D_dout[63:6]}};
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        D_blk_n = D_empty_n;
    end else begin
        D_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (1'b0 == D_empty_n)) & (1'b1 == ap_CS_fsm_state1))) begin
        D_read = 1'b1;
    end else begin
        D_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state73) & (m_axi_gmem_D_BVALID == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state73) & (m_axi_gmem_D_BVALID == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln878_fu_190_p2 == 1'd0))) begin
        fifo_D_drain_local_in_blk_n = fifo_D_drain_local_in_empty_n;
    end else begin
        fifo_D_drain_local_in_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((icmp_ln878_fu_190_p2 == 1'd0) & (fifo_D_drain_local_in_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln878_fu_190_p2 == 1'd0))) begin
        fifo_D_drain_local_in_read = 1'b1;
    end else begin
        fifo_D_drain_local_in_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        gmem_D_blk_n_AW = m_axi_gmem_D_AWREADY;
    end else begin
        gmem_D_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        gmem_D_blk_n_B = m_axi_gmem_D_BVALID;
    end else begin
        gmem_D_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        gmem_D_blk_n_W = m_axi_gmem_D_WREADY;
    end else begin
        gmem_D_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((m_axi_gmem_D_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_gmem_D_AWVALID = 1'b1;
    end else begin
        m_axi_gmem_D_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state73) & (m_axi_gmem_D_BVALID == 1'b1))) begin
        m_axi_gmem_D_BREADY = 1'b1;
    end else begin
        m_axi_gmem_D_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (m_axi_gmem_D_WREADY == 1'b1))) begin
        m_axi_gmem_D_WVALID = 1'b1;
    end else begin
        m_axi_gmem_D_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (1'b0 == D_empty_n)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((m_axi_gmem_D_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln26293_fu_178_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~((icmp_ln878_fu_190_p2 == 1'd0) & (fifo_D_drain_local_in_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln878_fu_190_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else if ((~((icmp_ln878_fu_190_p2 == 1'd0) & (fifo_D_drain_local_in_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln878_fu_190_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (m_axi_gmem_D_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            if (((1'b1 == ap_CS_fsm_state73) & (m_axi_gmem_D_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln26293_fu_172_p2 = (phi_ln26293_reg_130 + 11'd1);

assign add_ln691_fu_184_p2 = (p_V_reg_141 + 3'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (1'b0 == D_empty_n));
end

always @ (*) begin
    ap_block_state4 = ((icmp_ln878_fu_190_p2 == 1'd0) & (fifo_D_drain_local_in_empty_n == 1'b0));
end

assign icmp_ln26293_fu_178_p2 = ((phi_ln26293_reg_130 == 11'd1024) ? 1'b1 : 1'b0);

assign icmp_ln878_fu_190_p2 = ((p_V_reg_141 == 3'd4) ? 1'b1 : 1'b0);

assign m_axi_gmem_D_ARADDR = 64'd0;

assign m_axi_gmem_D_ARBURST = 2'd0;

assign m_axi_gmem_D_ARCACHE = 4'd0;

assign m_axi_gmem_D_ARID = 1'd0;

assign m_axi_gmem_D_ARLEN = 32'd0;

assign m_axi_gmem_D_ARLOCK = 2'd0;

assign m_axi_gmem_D_ARPROT = 3'd0;

assign m_axi_gmem_D_ARQOS = 4'd0;

assign m_axi_gmem_D_ARREGION = 4'd0;

assign m_axi_gmem_D_ARSIZE = 3'd0;

assign m_axi_gmem_D_ARUSER = 1'd0;

assign m_axi_gmem_D_ARVALID = 1'b0;

assign m_axi_gmem_D_AWADDR = sext_ln26304_fu_162_p1;

assign m_axi_gmem_D_AWBURST = 2'd0;

assign m_axi_gmem_D_AWCACHE = 4'd0;

assign m_axi_gmem_D_AWID = 1'd0;

assign m_axi_gmem_D_AWLEN = 32'd1024;

assign m_axi_gmem_D_AWLOCK = 2'd0;

assign m_axi_gmem_D_AWPROT = 3'd0;

assign m_axi_gmem_D_AWQOS = 4'd0;

assign m_axi_gmem_D_AWREGION = 4'd0;

assign m_axi_gmem_D_AWSIZE = 3'd0;

assign m_axi_gmem_D_AWUSER = 1'd0;

assign m_axi_gmem_D_RREADY = 1'b0;

assign m_axi_gmem_D_WDATA = {{{{p_Repl2_963_fu_98}, {p_Repl2_962_fu_94}}, {p_Repl2_961_fu_90}}, {p_Repl2_s_fu_86}};

assign m_axi_gmem_D_WID = 1'd0;

assign m_axi_gmem_D_WLAST = 1'b0;

assign m_axi_gmem_D_WSTRB = 64'd18446744073709551615;

assign m_axi_gmem_D_WUSER = 1'd0;

assign sext_ln26304_fu_162_p1 = $signed(trunc_ln_reg_269);

assign trunc_ln26301_fu_196_p1 = p_V_reg_141[1:0];

endmodule //top_D_drain_IO_L3_out_serialize_x1
