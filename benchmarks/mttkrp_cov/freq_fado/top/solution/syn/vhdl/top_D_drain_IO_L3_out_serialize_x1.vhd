-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_D_drain_IO_L3_out_serialize_x1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_D_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_D_AWREADY : IN STD_LOGIC;
    m_axi_gmem_D_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_D_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_D_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_D_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_D_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_D_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_D_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_D_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_D_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_D_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_D_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_D_WVALID : OUT STD_LOGIC;
    m_axi_gmem_D_WREADY : IN STD_LOGIC;
    m_axi_gmem_D_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_gmem_D_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_D_WLAST : OUT STD_LOGIC;
    m_axi_gmem_D_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_D_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_D_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_D_ARREADY : IN STD_LOGIC;
    m_axi_gmem_D_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_D_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_D_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_D_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_D_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_D_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_D_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_D_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_D_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_D_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_D_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_D_RVALID : IN STD_LOGIC;
    m_axi_gmem_D_RREADY : OUT STD_LOGIC;
    m_axi_gmem_D_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_gmem_D_RLAST : IN STD_LOGIC;
    m_axi_gmem_D_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_D_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_D_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_D_BVALID : IN STD_LOGIC;
    m_axi_gmem_D_BREADY : OUT STD_LOGIC;
    m_axi_gmem_D_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_D_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_D_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    fifo_D_drain_local_in_dout : IN STD_LOGIC_VECTOR (127 downto 0);
    fifo_D_drain_local_in_empty_n : IN STD_LOGIC;
    fifo_D_drain_local_in_read : OUT STD_LOGIC;
    D_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    D_empty_n : IN STD_LOGIC;
    D_read : OUT STD_LOGIC );
end;


architecture behav of top_D_drain_IO_L3_out_serialize_x1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (72 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (72 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (72 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (72 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (72 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (72 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (72 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (72 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (72 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (72 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_400 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010000000000";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal gmem_D_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal gmem_D_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal gmem_D_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal fifo_D_drain_local_in_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln878_fu_190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal D_blk_n : STD_LOGIC;
    signal trunc_ln_reg_269 : STD_LOGIC_VECTOR (57 downto 0);
    signal add_ln26293_fu_172_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26293_reg_280 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln691_fu_184_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_state4 : BOOLEAN;
    signal phi_ln26293_reg_130 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_V_reg_141 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln26293_fu_178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln26304_fu_162_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Repl2_s_fu_86 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln26301_fu_196_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_Repl2_961_fu_90 : STD_LOGIC_VECTOR (127 downto 0);
    signal p_Repl2_962_fu_94 : STD_LOGIC_VECTOR (127 downto 0);
    signal p_Repl2_963_fu_98 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (72 downto 0);
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state73) and (m_axi_gmem_D_BVALID = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    p_V_reg_141_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln878_fu_190_p2 = ap_const_lv1_0) and (fifo_D_drain_local_in_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln878_fu_190_p2 = ap_const_lv1_0))) then 
                p_V_reg_141 <= add_ln691_fu_184_p2;
            elsif (((icmp_ln26293_fu_178_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                p_V_reg_141 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    phi_ln26293_reg_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (m_axi_gmem_D_WREADY = ap_const_logic_1))) then 
                phi_ln26293_reg_130 <= add_ln26293_reg_280;
            elsif (((m_axi_gmem_D_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_ln26293_reg_130 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln26293_reg_280 <= add_ln26293_fu_172_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln878_fu_190_p2 = ap_const_lv1_0) and (fifo_D_drain_local_in_empty_n = ap_const_logic_0))) and (trunc_ln26301_fu_196_p1 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln878_fu_190_p2 = ap_const_lv1_0))) then
                p_Repl2_961_fu_90 <= fifo_D_drain_local_in_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln878_fu_190_p2 = ap_const_lv1_0) and (fifo_D_drain_local_in_empty_n = ap_const_logic_0))) and (trunc_ln26301_fu_196_p1 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln878_fu_190_p2 = ap_const_lv1_0))) then
                p_Repl2_962_fu_94 <= fifo_D_drain_local_in_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln878_fu_190_p2 = ap_const_lv1_0) and (fifo_D_drain_local_in_empty_n = ap_const_logic_0))) and (trunc_ln26301_fu_196_p1 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln878_fu_190_p2 = ap_const_lv1_0))) then
                p_Repl2_963_fu_98 <= fifo_D_drain_local_in_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln878_fu_190_p2 = ap_const_lv1_0) and (fifo_D_drain_local_in_empty_n = ap_const_logic_0))) and (trunc_ln26301_fu_196_p1 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln878_fu_190_p2 = ap_const_lv1_0))) then
                p_Repl2_s_fu_86 <= fifo_D_drain_local_in_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                trunc_ln_reg_269 <= D_dout(63 downto 6);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, m_axi_gmem_D_AWREADY, m_axi_gmem_D_WREADY, m_axi_gmem_D_BVALID, fifo_D_drain_local_in_empty_n, D_empty_n, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state73, ap_CS_fsm_state4, icmp_ln878_fu_190_p2, ap_CS_fsm_state3, icmp_ln26293_fu_178_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (ap_const_logic_0 = D_empty_n))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((m_axi_gmem_D_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln26293_fu_178_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state4 => 
                if ((not(((icmp_ln878_fu_190_p2 = ap_const_lv1_0) and (fifo_D_drain_local_in_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln878_fu_190_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif ((not(((icmp_ln878_fu_190_p2 = ap_const_lv1_0) and (fifo_D_drain_local_in_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln878_fu_190_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (m_axi_gmem_D_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state73) and (m_axi_gmem_D_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state73;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    D_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, D_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            D_blk_n <= D_empty_n;
        else 
            D_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    D_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, D_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (ap_const_logic_0 = D_empty_n))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            D_read <= ap_const_logic_1;
        else 
            D_read <= ap_const_logic_0;
        end if; 
    end process;

    add_ln26293_fu_172_p2 <= std_logic_vector(unsigned(phi_ln26293_reg_130) + unsigned(ap_const_lv11_1));
    add_ln691_fu_184_p2 <= std_logic_vector(unsigned(p_V_reg_141) + unsigned(ap_const_lv3_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state73 <= ap_CS_fsm(72);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, D_empty_n)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (ap_const_logic_0 = D_empty_n));
    end process;


    ap_block_state4_assign_proc : process(fifo_D_drain_local_in_empty_n, icmp_ln878_fu_190_p2)
    begin
                ap_block_state4 <= ((icmp_ln878_fu_190_p2 = ap_const_lv1_0) and (fifo_D_drain_local_in_empty_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, m_axi_gmem_D_BVALID, ap_CS_fsm_state73)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state73) and (m_axi_gmem_D_BVALID = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(m_axi_gmem_D_BVALID, ap_CS_fsm_state73)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state73) and (m_axi_gmem_D_BVALID = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    fifo_D_drain_local_in_blk_n_assign_proc : process(fifo_D_drain_local_in_empty_n, ap_CS_fsm_state4, icmp_ln878_fu_190_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln878_fu_190_p2 = ap_const_lv1_0))) then 
            fifo_D_drain_local_in_blk_n <= fifo_D_drain_local_in_empty_n;
        else 
            fifo_D_drain_local_in_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    fifo_D_drain_local_in_read_assign_proc : process(fifo_D_drain_local_in_empty_n, ap_CS_fsm_state4, icmp_ln878_fu_190_p2)
    begin
        if ((not(((icmp_ln878_fu_190_p2 = ap_const_lv1_0) and (fifo_D_drain_local_in_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln878_fu_190_p2 = ap_const_lv1_0))) then 
            fifo_D_drain_local_in_read <= ap_const_logic_1;
        else 
            fifo_D_drain_local_in_read <= ap_const_logic_0;
        end if; 
    end process;


    gmem_D_blk_n_AW_assign_proc : process(m_axi_gmem_D_AWREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            gmem_D_blk_n_AW <= m_axi_gmem_D_AWREADY;
        else 
            gmem_D_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_D_blk_n_B_assign_proc : process(m_axi_gmem_D_BVALID, ap_CS_fsm_state73)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            gmem_D_blk_n_B <= m_axi_gmem_D_BVALID;
        else 
            gmem_D_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_D_blk_n_W_assign_proc : process(m_axi_gmem_D_WREADY, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            gmem_D_blk_n_W <= m_axi_gmem_D_WREADY;
        else 
            gmem_D_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    icmp_ln26293_fu_178_p2 <= "1" when (phi_ln26293_reg_130 = ap_const_lv11_400) else "0";
    icmp_ln878_fu_190_p2 <= "1" when (p_V_reg_141 = ap_const_lv3_4) else "0";
    m_axi_gmem_D_ARADDR <= ap_const_lv64_0;
    m_axi_gmem_D_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_D_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_D_ARID <= ap_const_lv1_0;
    m_axi_gmem_D_ARLEN <= ap_const_lv32_0;
    m_axi_gmem_D_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_D_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_D_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_D_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_D_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_D_ARUSER <= ap_const_lv1_0;
    m_axi_gmem_D_ARVALID <= ap_const_logic_0;
    m_axi_gmem_D_AWADDR <= sext_ln26304_fu_162_p1;
    m_axi_gmem_D_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_D_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_D_AWID <= ap_const_lv1_0;
    m_axi_gmem_D_AWLEN <= ap_const_lv32_400;
    m_axi_gmem_D_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_D_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_D_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_D_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_D_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_D_AWUSER <= ap_const_lv1_0;

    m_axi_gmem_D_AWVALID_assign_proc : process(m_axi_gmem_D_AWREADY, ap_CS_fsm_state2)
    begin
        if (((m_axi_gmem_D_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_gmem_D_AWVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_D_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_D_BREADY_assign_proc : process(m_axi_gmem_D_BVALID, ap_CS_fsm_state73)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state73) and (m_axi_gmem_D_BVALID = ap_const_logic_1))) then 
            m_axi_gmem_D_BREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_D_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_D_RREADY <= ap_const_logic_0;
    m_axi_gmem_D_WDATA <= (((p_Repl2_963_fu_98 & p_Repl2_962_fu_94) & p_Repl2_961_fu_90) & p_Repl2_s_fu_86);
    m_axi_gmem_D_WID <= ap_const_lv1_0;
    m_axi_gmem_D_WLAST <= ap_const_logic_0;
    m_axi_gmem_D_WSTRB <= ap_const_lv64_FFFFFFFFFFFFFFFF;
    m_axi_gmem_D_WUSER <= ap_const_lv1_0;

    m_axi_gmem_D_WVALID_assign_proc : process(m_axi_gmem_D_WREADY, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (m_axi_gmem_D_WREADY = ap_const_logic_1))) then 
            m_axi_gmem_D_WVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_D_WVALID <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln26304_fu_162_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_reg_269),64));

    trunc_ln26301_fu_196_p1 <= p_V_reg_141(2 - 1 downto 0);
end behav;
