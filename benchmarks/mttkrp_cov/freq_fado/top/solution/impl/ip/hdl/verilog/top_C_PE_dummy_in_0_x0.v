// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module top_C_PE_dummy_in_0_x0 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        fifo_C_PE_4_0_x0105_dout,
        fifo_C_PE_4_0_x0105_empty_n,
        fifo_C_PE_4_0_x0105_read
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [255:0] fifo_C_PE_4_0_x0105_dout;
input   fifo_C_PE_4_0_x0105_empty_n;
output   fifo_C_PE_4_0_x0105_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg fifo_C_PE_4_0_x0105_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    fifo_C_PE_4_0_x0105_blk_n;
wire    ap_CS_fsm_state8;
wire   [0:0] icmp_ln890_1153_fu_251_p2;
wire   [2:0] add_ln691_fu_173_p2;
reg   [2:0] add_ln691_reg_257;
wire    ap_CS_fsm_state2;
wire   [2:0] add_ln691_1119_fu_185_p2;
reg   [2:0] add_ln691_1119_reg_265;
wire    ap_CS_fsm_state3;
wire   [7:0] c2_V_82_fu_197_p2;
reg   [7:0] c2_V_82_reg_273;
wire    ap_CS_fsm_state4;
wire   [1:0] add_ln691_1121_fu_209_p2;
reg   [1:0] add_ln691_1121_reg_281;
wire    ap_CS_fsm_state5;
wire   [5:0] add_ln691_1122_fu_221_p2;
reg   [5:0] add_ln691_1122_reg_289;
wire    ap_CS_fsm_state6;
wire   [3:0] add_ln691_1123_fu_233_p2;
reg   [3:0] add_ln691_1123_reg_297;
wire    ap_CS_fsm_state7;
wire   [4:0] add_ln691_1124_fu_245_p2;
reg    ap_block_state8;
reg   [2:0] c0_V_reg_96;
wire   [0:0] icmp_ln890_1149_fu_191_p2;
reg    ap_block_state1;
reg   [2:0] c1_V_reg_107;
wire   [0:0] icmp_ln890_fu_179_p2;
wire   [0:0] icmp_ln9118_fu_203_p2;
reg   [7:0] c2_V_reg_118;
wire   [0:0] icmp_ln890_1150_fu_215_p2;
reg   [1:0] c5_V_reg_129;
wire   [0:0] icmp_ln890_1151_fu_227_p2;
reg   [5:0] c6_V_reg_140;
wire   [0:0] icmp_ln890_1152_fu_239_p2;
reg   [3:0] c7_V_reg_151;
reg   [4:0] c8_V_reg_162;
reg   [7:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 8'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln890_fu_179_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        c0_V_reg_96 <= 3'd0;
    end else if (((icmp_ln890_1149_fu_191_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        c0_V_reg_96 <= add_ln691_reg_257;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln9118_fu_203_p2 == 1'd1))) begin
        c1_V_reg_107 <= add_ln691_1119_reg_265;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln890_fu_179_p2 == 1'd0))) begin
        c1_V_reg_107 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln890_1149_fu_191_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        c2_V_reg_118 <= 8'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln890_1150_fu_215_p2 == 1'd1))) begin
        c2_V_reg_118 <= c2_V_82_reg_273;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln9118_fu_203_p2 == 1'd0))) begin
        c5_V_reg_129 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln890_1151_fu_227_p2 == 1'd1))) begin
        c5_V_reg_129 <= add_ln691_1121_reg_281;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln890_1150_fu_215_p2 == 1'd0))) begin
        c6_V_reg_140 <= 6'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln890_1152_fu_239_p2 == 1'd1))) begin
        c6_V_reg_140 <= add_ln691_1122_reg_289;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln890_1151_fu_227_p2 == 1'd0))) begin
        c7_V_reg_151 <= 4'd0;
    end else if ((~((icmp_ln890_1153_fu_251_p2 == 1'd0) & (fifo_C_PE_4_0_x0105_empty_n == 1'b0)) & (icmp_ln890_1153_fu_251_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        c7_V_reg_151 <= add_ln691_1123_reg_297;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln890_1152_fu_239_p2 == 1'd0))) begin
        c8_V_reg_162 <= 5'd0;
    end else if ((~((icmp_ln890_1153_fu_251_p2 == 1'd0) & (fifo_C_PE_4_0_x0105_empty_n == 1'b0)) & (icmp_ln890_1153_fu_251_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        c8_V_reg_162 <= add_ln691_1124_fu_245_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln691_1119_reg_265 <= add_ln691_1119_fu_185_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln691_1121_reg_281 <= add_ln691_1121_fu_209_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        add_ln691_1122_reg_289 <= add_ln691_1122_fu_221_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        add_ln691_1123_reg_297 <= add_ln691_1123_fu_233_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln691_reg_257 <= add_ln691_fu_173_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        c2_V_82_reg_273 <= c2_V_82_fu_197_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln890_fu_179_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln890_fu_179_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln890_1153_fu_251_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        fifo_C_PE_4_0_x0105_blk_n = fifo_C_PE_4_0_x0105_empty_n;
    end else begin
        fifo_C_PE_4_0_x0105_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((icmp_ln890_1153_fu_251_p2 == 1'd0) & (fifo_C_PE_4_0_x0105_empty_n == 1'b0)) & (icmp_ln890_1153_fu_251_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        fifo_C_PE_4_0_x0105_read = 1'b1;
    end else begin
        fifo_C_PE_4_0_x0105_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln890_fu_179_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln890_1149_fu_191_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln9118_fu_203_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln890_1150_fu_215_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln890_1151_fu_227_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln890_1152_fu_239_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if ((~((icmp_ln890_1153_fu_251_p2 == 1'd0) & (fifo_C_PE_4_0_x0105_empty_n == 1'b0)) & (icmp_ln890_1153_fu_251_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else if ((~((icmp_ln890_1153_fu_251_p2 == 1'd0) & (fifo_C_PE_4_0_x0105_empty_n == 1'b0)) & (icmp_ln890_1153_fu_251_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln691_1119_fu_185_p2 = (c1_V_reg_107 + 3'd1);

assign add_ln691_1121_fu_209_p2 = (c5_V_reg_129 + 2'd1);

assign add_ln691_1122_fu_221_p2 = (c6_V_reg_140 + 6'd1);

assign add_ln691_1123_fu_233_p2 = (c7_V_reg_151 + 4'd1);

assign add_ln691_1124_fu_245_p2 = (c8_V_reg_162 + 5'd1);

assign add_ln691_fu_173_p2 = (c0_V_reg_96 + 3'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state8 = ((icmp_ln890_1153_fu_251_p2 == 1'd0) & (fifo_C_PE_4_0_x0105_empty_n == 1'b0));
end

assign c2_V_82_fu_197_p2 = (c2_V_reg_118 + 8'd1);

assign icmp_ln890_1149_fu_191_p2 = ((c1_V_reg_107 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln890_1150_fu_215_p2 = ((c5_V_reg_129 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln890_1151_fu_227_p2 = ((c6_V_reg_140 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln890_1152_fu_239_p2 = ((c7_V_reg_151 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln890_1153_fu_251_p2 = ((c8_V_reg_162 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln890_fu_179_p2 = ((c0_V_reg_96 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln9118_fu_203_p2 = ((c2_V_reg_118 == 8'd128) ? 1'b1 : 1'b0);

endmodule //top_C_PE_dummy_in_0_x0
