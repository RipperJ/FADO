-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_D_drain_IO_L3_out_serialize_x0 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    fifo_D_drain_D_drain_IO_L3_out_serialize_x04_dout : IN STD_LOGIC_VECTOR (127 downto 0);
    fifo_D_drain_D_drain_IO_L3_out_serialize_x04_empty_n : IN STD_LOGIC;
    fifo_D_drain_D_drain_IO_L3_out_serialize_x04_read : OUT STD_LOGIC;
    D_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    D_ce0 : OUT STD_LOGIC;
    D_we0 : OUT STD_LOGIC;
    D_d0 : OUT STD_LOGIC_VECTOR (127 downto 0) );
end;


architecture behav of top_D_drain_IO_L3_out_serialize_x0 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal fifo_D_drain_D_drain_IO_L3_out_serialize_x04_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln878_1_fu_108_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_V_1_fu_90_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_V_1_reg_144 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln691_fu_102_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_state3 : BOOLEAN;
    signal i_V_reg_67 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal p_V_reg_79 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln878_fu_96_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln534_fu_133_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Repl2_s_fu_44 : STD_LOGIC_VECTOR (127 downto 0);
    signal icmp_ln12251_fu_118_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln12251_fu_114_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln878_fu_96_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_V_reg_67_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln878_1_fu_108_p2 = ap_const_lv1_0) and (fifo_D_drain_D_drain_IO_L3_out_serialize_x04_empty_n = ap_const_logic_0))) and (icmp_ln878_1_fu_108_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_V_reg_67 <= i_V_1_reg_144;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_V_reg_67 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    p_V_reg_79_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln878_1_fu_108_p2 = ap_const_lv1_0) and (fifo_D_drain_D_drain_IO_L3_out_serialize_x04_empty_n = ap_const_logic_0))) and (icmp_ln878_1_fu_108_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                p_V_reg_79 <= add_ln691_fu_102_p2;
            elsif (((icmp_ln878_fu_96_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_V_reg_79 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_V_1_reg_144 <= i_V_1_fu_90_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln878_1_fu_108_p2 = ap_const_lv1_0) and (fifo_D_drain_D_drain_IO_L3_out_serialize_x04_empty_n = ap_const_logic_0))) and (icmp_ln12251_fu_118_p2 = ap_const_lv1_1) and (icmp_ln878_1_fu_108_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                p_Repl2_s_fu_44 <= fifo_D_drain_D_drain_IO_L3_out_serialize_x04_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, fifo_D_drain_D_drain_IO_L3_out_serialize_x04_empty_n, ap_CS_fsm_state3, icmp_ln878_1_fu_108_p2, ap_CS_fsm_state2, icmp_ln878_fu_96_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln878_fu_96_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not(((icmp_ln878_1_fu_108_p2 = ap_const_lv1_0) and (fifo_D_drain_D_drain_IO_L3_out_serialize_x04_empty_n = ap_const_logic_0))) and (icmp_ln878_1_fu_108_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not(((icmp_ln878_1_fu_108_p2 = ap_const_lv1_0) and (fifo_D_drain_D_drain_IO_L3_out_serialize_x04_empty_n = ap_const_logic_0))) and (icmp_ln878_1_fu_108_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    D_address0 <= zext_ln534_fu_133_p1(12 - 1 downto 0);

    D_ce0_assign_proc : process(fifo_D_drain_D_drain_IO_L3_out_serialize_x04_empty_n, ap_CS_fsm_state3, icmp_ln878_1_fu_108_p2)
    begin
        if ((not(((icmp_ln878_1_fu_108_p2 = ap_const_lv1_0) and (fifo_D_drain_D_drain_IO_L3_out_serialize_x04_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            D_ce0 <= ap_const_logic_1;
        else 
            D_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    D_d0 <= p_Repl2_s_fu_44;

    D_we0_assign_proc : process(fifo_D_drain_D_drain_IO_L3_out_serialize_x04_empty_n, ap_CS_fsm_state3, icmp_ln878_1_fu_108_p2)
    begin
        if ((not(((icmp_ln878_1_fu_108_p2 = ap_const_lv1_0) and (fifo_D_drain_D_drain_IO_L3_out_serialize_x04_empty_n = ap_const_logic_0))) and (icmp_ln878_1_fu_108_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            D_we0 <= ap_const_logic_1;
        else 
            D_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln691_fu_102_p2 <= std_logic_vector(unsigned(p_V_reg_79) + unsigned(ap_const_lv3_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state3_assign_proc : process(fifo_D_drain_D_drain_IO_L3_out_serialize_x04_empty_n, icmp_ln878_1_fu_108_p2)
    begin
                ap_block_state3 <= ((icmp_ln878_1_fu_108_p2 = ap_const_lv1_0) and (fifo_D_drain_D_drain_IO_L3_out_serialize_x04_empty_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, icmp_ln878_fu_96_p2)
    begin
        if (((icmp_ln878_fu_96_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln878_fu_96_p2)
    begin
        if (((icmp_ln878_fu_96_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    fifo_D_drain_D_drain_IO_L3_out_serialize_x04_blk_n_assign_proc : process(fifo_D_drain_D_drain_IO_L3_out_serialize_x04_empty_n, ap_CS_fsm_state3, icmp_ln878_1_fu_108_p2)
    begin
        if (((icmp_ln878_1_fu_108_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            fifo_D_drain_D_drain_IO_L3_out_serialize_x04_blk_n <= fifo_D_drain_D_drain_IO_L3_out_serialize_x04_empty_n;
        else 
            fifo_D_drain_D_drain_IO_L3_out_serialize_x04_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    fifo_D_drain_D_drain_IO_L3_out_serialize_x04_read_assign_proc : process(fifo_D_drain_D_drain_IO_L3_out_serialize_x04_empty_n, ap_CS_fsm_state3, icmp_ln878_1_fu_108_p2)
    begin
        if ((not(((icmp_ln878_1_fu_108_p2 = ap_const_lv1_0) and (fifo_D_drain_D_drain_IO_L3_out_serialize_x04_empty_n = ap_const_logic_0))) and (icmp_ln878_1_fu_108_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            fifo_D_drain_D_drain_IO_L3_out_serialize_x04_read <= ap_const_logic_1;
        else 
            fifo_D_drain_D_drain_IO_L3_out_serialize_x04_read <= ap_const_logic_0;
        end if; 
    end process;

    i_V_1_fu_90_p2 <= std_logic_vector(unsigned(i_V_reg_67) + unsigned(ap_const_lv11_1));
    icmp_ln12251_fu_118_p2 <= "1" when (trunc_ln12251_fu_114_p1 = ap_const_lv2_0) else "0";
    icmp_ln878_1_fu_108_p2 <= "1" when (p_V_reg_79 = ap_const_lv3_4) else "0";
    icmp_ln878_fu_96_p2 <= "1" when (i_V_reg_67 = ap_const_lv11_400) else "0";
    trunc_ln12251_fu_114_p1 <= p_V_reg_79(2 - 1 downto 0);
    zext_ln534_fu_133_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_V_reg_67),64));
end behav;
