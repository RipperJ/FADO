-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_nondf_kernel_cov_x1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    xout_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    xout_ce0 : OUT STD_LOGIC;
    xout_q0 : IN STD_LOGIC_VECTOR (127 downto 0);
    xin_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    xin_ce0 : OUT STD_LOGIC;
    xin_we0 : OUT STD_LOGIC;
    xin_d0 : OUT STD_LOGIC_VECTOR (118 downto 0) );
end;


architecture behav of top_nondf_kernel_cov_x1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000010000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000100000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (17 downto 0) := "000000000001000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (17 downto 0) := "000000000100000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (17 downto 0) := "000000001000000000";
    constant ap_ST_fsm_pp2_stage1 : STD_LOGIC_VECTOR (17 downto 0) := "000000010000000000";
    constant ap_ST_fsm_pp2_stage2 : STD_LOGIC_VECTOR (17 downto 0) := "000000100000000000";
    constant ap_ST_fsm_pp2_stage3 : STD_LOGIC_VECTOR (17 downto 0) := "000001000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (17 downto 0) := "000010000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (17 downto 0) := "000100000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (17 downto 0) := "001000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (17 downto 0) := "010000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv13_1000 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv19_40000 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_lv14_1000 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv257_lc_3 : STD_LOGIC_VECTOR (256 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000010000000001000000000100000000010000000001000000000100000000010000000001000000000100000000010000000001000000000100000001";
    constant ap_const_lv32_8A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001010";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_258 : STD_LOGIC_VECTOR (12 downto 0);
    signal j_reg_269 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_2_reg_280 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_i3113_reg_291 : STD_LOGIC_VECTOR (127 downto 0);
    signal indvar_flatten8_reg_303 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_1_reg_314 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_2_reg_325 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten36_reg_336 : STD_LOGIC_VECTOR (18 downto 0);
    signal i_3_reg_348 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten21_reg_359 : STD_LOGIC_VECTOR (13 downto 0);
    signal j_3_reg_370 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_reg_381 : STD_LOGIC_VECTOR (6 downto 0);
    signal conv3_i2112_reg_392 : STD_LOGIC_VECTOR (127 downto 0);
    signal data_V_q0 : STD_LOGIC_VECTOR (127 downto 0);
    signal reg_425 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_state6_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln79_reg_989 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln79_reg_989_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage2 : signal is "none";
    signal ap_block_state20_pp2_stage2_iter0 : BOOLEAN;
    signal ap_block_state24_pp2_stage2_iter1 : BOOLEAN;
    signal ap_block_state28_pp2_stage2_iter2 : BOOLEAN;
    signal ap_block_state32_pp2_stage2_iter3 : BOOLEAN;
    signal ap_block_pp2_stage2_11001 : BOOLEAN;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_block_state12_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state13_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state14_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state15_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_state16_pp1_stage0_iter4 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln87_reg_1035 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_1035_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal data_V_q1 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal icmp_ln91_reg_1081 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln73_fu_430_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln73_reg_947 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_cast_fu_440_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_cast_reg_952 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln73_fu_448_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln74_fu_454_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln74_reg_961 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal data_V_addr_reg_966 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln74_fu_475_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xout_load_reg_979 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln79_1_fu_481_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln79_fu_487_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln79_reg_989_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln79_reg_989_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln82_fu_499_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln82_reg_993 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln82_reg_993_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln82_reg_993_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln79_2_fu_513_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln79_2_reg_998 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln79_2_reg_998_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln79_2_reg_998_pp0_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln79_2_reg_998_pp0_iter3_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln691_fu_521_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln691_reg_1005 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln82_fu_525_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln82_reg_1010 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln82_1_fu_531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln82_1_reg_1015 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln82_1_reg_1015_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln82_1_reg_1015_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln82_1_reg_1015_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln691_fu_565_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal add_ln691_reg_1024 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal add_ln87_1_fu_585_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal icmp_ln87_fu_591_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_1035_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_1035_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln87_fu_609_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln87_reg_1039 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln87_1_fu_617_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln87_1_reg_1045 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln692_fu_625_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln692_reg_1050 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln88_fu_629_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal data_V_addr_2_reg_1060 : STD_LOGIC_VECTOR (11 downto 0);
    signal data_V_addr_2_reg_1060_pp1_iter2_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal data_V_addr_2_reg_1060_pp1_iter3_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal mean_V_q0 : STD_LOGIC_VECTOR (117 downto 0);
    signal mean_V_load_reg_1071 : STD_LOGIC_VECTOR (117 downto 0);
    signal sub_ln692_fu_663_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal sub_ln692_reg_1076 : STD_LOGIC_VECTOR (127 downto 0);
    signal icmp_ln91_fu_669_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state18_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state22_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state26_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state30_pp2_stage0_iter3 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln91_reg_1081_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln91_reg_1081_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln91_1_fu_695_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln91_1_reg_1085 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln94_fu_703_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln94_reg_1091 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln92_fu_731_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln92_reg_1096 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln92_reg_1096_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln92_fu_737_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln92_reg_1101 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln92_2_fu_745_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln92_2_reg_1106 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln98_fu_753_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln98_reg_1112 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln215_fu_757_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln215_reg_1117 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln92_3_fu_767_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln92_3_reg_1122 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln98_fu_795_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln98_reg_1127 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_pp2_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage1 : signal is "none";
    signal ap_block_state19_pp2_stage1_iter0 : BOOLEAN;
    signal ap_block_state23_pp2_stage1_iter1 : BOOLEAN;
    signal ap_block_state27_pp2_stage1_iter2 : BOOLEAN;
    signal ap_block_state31_pp2_stage1_iter3 : BOOLEAN;
    signal ap_block_pp2_stage1_11001 : BOOLEAN;
    signal add_ln98_reg_1127_pp2_iter1_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln94_fu_801_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln94_reg_1132 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln94_reg_1132_pp2_iter1_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln95_fu_836_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln95_reg_1147 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln95_1_fu_841_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln95_1_reg_1152 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln95_1_reg_1152_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln95_1_reg_1152_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln95_1_reg_1152_pp2_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal data_V_load_3_reg_1156 : STD_LOGIC_VECTOR (127 downto 0);
    signal add_ln91_1_fu_847_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln91_1_reg_1161 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_CS_fsm_pp2_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage3 : signal is "none";
    signal ap_block_state21_pp2_stage3_iter0 : BOOLEAN;
    signal ap_block_state25_pp2_stage3_iter1 : BOOLEAN;
    signal ap_block_state29_pp2_stage3_iter2 : BOOLEAN;
    signal ap_block_state33_pp2_stage3_iter3 : BOOLEAN;
    signal ap_block_pp2_stage3_11001 : BOOLEAN;
    signal grp_fu_853_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal mul_ln691_reg_1166 : STD_LOGIC_VECTOR (127 downto 0);
    signal cov_V_addr_reg_1171 : STD_LOGIC_VECTOR (11 downto 0);
    signal cov_V_addr_reg_1171_pp2_iter3_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal cov_V_addr_2_reg_1176 : STD_LOGIC_VECTOR (11 downto 0);
    signal cov_V_addr_2_reg_1176_pp2_iter3_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln691_1_fu_873_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal add_ln691_1_reg_1181 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal trunc_ln693_1_reg_1192 : STD_LOGIC_VECTOR (118 downto 0);
    signal add_ln101_fu_897_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln101_reg_1197 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal tmp_9_cast_fu_907_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_9_cast_reg_1202 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln102_fu_921_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln102_reg_1210 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal zext_ln208_1_fu_936_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln208_1_reg_1215 : STD_LOGIC_VECTOR (63 downto 0);
    signal cov_V_q0 : STD_LOGIC_VECTOR (118 downto 0);
    signal cov_V_load_reg_1228 : STD_LOGIC_VECTOR (118 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state6 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state12 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter4 : STD_LOGIC := '0';
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_block_pp2_stage3_subdone : BOOLEAN;
    signal ap_condition_pp2_flush_enable : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_condition_pp2_exit_iter2_state26 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter3 : STD_LOGIC := '0';
    signal mean_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mean_V_ce0 : STD_LOGIC;
    signal mean_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal mean_V_ce1 : STD_LOGIC;
    signal mean_V_we1 : STD_LOGIC;
    signal mean_V_d1 : STD_LOGIC_VECTOR (117 downto 0);
    signal data_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal data_V_ce0 : STD_LOGIC;
    signal data_V_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal data_V_ce1 : STD_LOGIC;
    signal data_V_we1 : STD_LOGIC;
    signal data_V_d1 : STD_LOGIC_VECTOR (127 downto 0);
    signal cov_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal cov_V_ce0 : STD_LOGIC;
    signal cov_V_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal cov_V_ce1 : STD_LOGIC;
    signal cov_V_we1 : STD_LOGIC;
    signal i_reg_236 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_1_reg_247 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_phi_mux_j_phi_fu_273_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_i_2_phi_fu_284_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_phi_mux_add_i3113_phi_fu_295_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_phi_mux_i_1_phi_fu_318_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_indvar_flatten36_phi_fu_340_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal ap_phi_mux_i_3_phi_fu_352_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_phi_mux_indvar_flatten21_phi_fu_363_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_phi_mux_j_3_phi_fu_374_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_phi_mux_k_phi_fu_385_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_phi_mux_conv3_i2112_phi_fu_396_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal i_4_reg_403 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln102_fu_941_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal j_4_reg_414 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal icmp_ln101_fu_915_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln75_1_fu_469_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln691_1_fu_553_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln79_fu_571_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln692_1_fu_655_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln88_fu_642_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln215_fu_820_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage1 : BOOLEAN;
    signal zext_ln215_1_fu_831_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln98_1_fu_865_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln94_1_fu_869_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage2 : BOOLEAN;
    signal ap_block_pp2_stage3 : BOOLEAN;
    signal trunc_ln75_fu_436_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln75_fu_460_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln75_fu_464_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln79_fu_493_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln79_fu_505_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_cast_fu_540_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln691_fu_537_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln691_2_fu_547_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln79_1_fu_558_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal icmp_ln88_fu_603_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln87_fu_597_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_4_cast_fu_635_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln692_fu_646_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln692_fu_649_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal mean_V_load_cast_fu_660_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal icmp_ln92_fu_681_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln91_fu_675_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln95_fu_713_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln91_fu_707_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln91_fu_687_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal and_ln91_fu_719_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln92_fu_725_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln92_1_fu_761_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_7_cast_fu_788_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln94_fu_775_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_5_cast_fu_778_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln98_fu_785_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_8_cast_fu_807_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln215_fu_814_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln215_1_fu_825_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln92_1_fu_858_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_fu_881_p0 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_fu_881_p1 : STD_LOGIC_VECTOR (129 downto 0);
    signal grp_fu_881_p2 : STD_LOGIC_VECTOR (256 downto 0);
    signal trunc_ln208_fu_903_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln208_fu_927_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln208_fu_931_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_block_pp2_stage1_subdone : BOOLEAN;
    signal ap_block_pp2_stage2_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal grp_fu_881_p00 : STD_LOGIC_VECTOR (256 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component top_mul_128s_128s_128_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (127 downto 0);
        din1 : IN STD_LOGIC_VECTOR (127 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;


    component top_mul_128ns_130ns_257_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (127 downto 0);
        din1 : IN STD_LOGIC_VECTOR (129 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (256 downto 0) );
    end component;


    component top_nondf_kernel_cov_x1_mean_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (117 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (117 downto 0) );
    end component;


    component top_nondf_kernel_cov_x1_data_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (127 downto 0);
        address1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (127 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;


    component top_nondf_kernel_cov_x1_cov_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (118 downto 0);
        address1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (118 downto 0) );
    end component;



begin
    mean_V_U : component top_nondf_kernel_cov_x1_mean_V
    generic map (
        DataWidth => 118,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mean_V_address0,
        ce0 => mean_V_ce0,
        q0 => mean_V_q0,
        address1 => mean_V_address1,
        ce1 => mean_V_ce1,
        we1 => mean_V_we1,
        d1 => mean_V_d1);

    data_V_U : component top_nondf_kernel_cov_x1_data_V
    generic map (
        DataWidth => 128,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => data_V_address0,
        ce0 => data_V_ce0,
        q0 => data_V_q0,
        address1 => data_V_address1,
        ce1 => data_V_ce1,
        we1 => data_V_we1,
        d1 => data_V_d1,
        q1 => data_V_q1);

    cov_V_U : component top_nondf_kernel_cov_x1_cov_V
    generic map (
        DataWidth => 119,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cov_V_address0,
        ce0 => cov_V_ce0,
        q0 => cov_V_q0,
        address1 => cov_V_address1,
        ce1 => cov_V_ce1,
        we1 => cov_V_we1,
        d1 => trunc_ln693_1_reg_1192);

    mul_128s_128s_128_5_1_U1089 : component top_mul_128s_128s_128_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 128,
        din1_WIDTH => 128,
        dout_WIDTH => 128)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => data_V_load_3_reg_1156,
        din1 => reg_425,
        ce => ap_const_logic_1,
        dout => grp_fu_853_p2);

    mul_128ns_130ns_257_5_1_U1090 : component top_mul_128ns_130ns_257_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 128,
        din1_WIDTH => 130,
        dout_WIDTH => 257)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_881_p0,
        din1 => grp_fu_881_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_881_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln73_fu_448_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state6)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state6);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln73_fu_448_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state12) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state12)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state12);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp2_flush_enable)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3))) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3))) then
                    if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_condition_pp2_exit_iter2_state26))) then 
                        ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage3_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter2_state26) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3))) then 
                    ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter1;
                elsif (((ap_const_boolean_0 = ap_block_pp2_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3))) then 
                    ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                    ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    add_i3113_reg_291_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln73_fu_448_p2 = ap_const_lv1_1))) then 
                add_i3113_reg_291 <= ap_const_lv128_lc_1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln79_reg_989_pp0_iter3_reg = ap_const_lv1_0))) then 
                add_i3113_reg_291 <= add_ln691_reg_1024;
            end if; 
        end if;
    end process;

    conv3_i2112_reg_392_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                conv3_i2112_reg_392 <= ap_const_lv128_lc_1;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (icmp_ln91_reg_1081_pp2_iter2_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                conv3_i2112_reg_392 <= add_ln691_1_reg_1181;
            end if; 
        end if;
    end process;

    i_1_reg_314_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                i_1_reg_314 <= ap_const_lv7_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln87_reg_1035 = ap_const_lv1_0))) then 
                i_1_reg_314 <= select_ln87_1_reg_1045;
            end if; 
        end if;
    end process;

    i_2_reg_280_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln73_fu_448_p2 = ap_const_lv1_1))) then 
                i_2_reg_280 <= ap_const_lv7_0;
            elsif (((icmp_ln79_reg_989 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_2_reg_280 <= add_ln82_reg_1010;
            end if; 
        end if;
    end process;

    i_3_reg_348_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                i_3_reg_348 <= ap_const_lv7_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln91_reg_1081 = ap_const_lv1_0))) then 
                i_3_reg_348 <= select_ln91_1_reg_1085;
            end if; 
        end if;
    end process;

    i_4_reg_403_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                i_4_reg_403 <= ap_const_lv7_0;
            elsif (((icmp_ln102_fu_941_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state36))) then 
                i_4_reg_403 <= add_ln101_reg_1197;
            end if; 
        end if;
    end process;

    i_reg_236_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_236 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln74_fu_475_p2 = ap_const_lv1_1))) then 
                i_reg_236 <= add_ln73_reg_947;
            end if; 
        end if;
    end process;

    indvar_flatten21_reg_359_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                indvar_flatten21_reg_359 <= ap_const_lv14_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln91_reg_1081 = ap_const_lv1_0))) then 
                indvar_flatten21_reg_359 <= select_ln92_3_reg_1122;
            end if; 
        end if;
    end process;

    indvar_flatten36_reg_336_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                indvar_flatten36_reg_336 <= ap_const_lv19_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln91_reg_1081 = ap_const_lv1_0))) then 
                indvar_flatten36_reg_336 <= add_ln91_1_reg_1161;
            end if; 
        end if;
    end process;

    indvar_flatten8_reg_303_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                indvar_flatten8_reg_303 <= ap_const_lv13_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln87_fu_591_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                indvar_flatten8_reg_303 <= add_ln87_1_fu_585_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_258_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln73_fu_448_p2 = ap_const_lv1_1))) then 
                indvar_flatten_reg_258 <= ap_const_lv13_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln79_fu_487_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                indvar_flatten_reg_258 <= add_ln79_1_fu_481_p2;
            end if; 
        end if;
    end process;

    j_1_reg_247_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln73_fu_448_p2 = ap_const_lv1_0))) then 
                j_1_reg_247 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                j_1_reg_247 <= add_ln74_reg_961;
            end if; 
        end if;
    end process;

    j_2_reg_325_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                j_2_reg_325 <= ap_const_lv7_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln87_fu_591_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                j_2_reg_325 <= add_ln88_fu_629_p2;
            end if; 
        end if;
    end process;

    j_3_reg_370_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                j_3_reg_370 <= ap_const_lv7_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln91_reg_1081 = ap_const_lv1_0))) then 
                j_3_reg_370 <= select_ln92_2_reg_1106;
            end if; 
        end if;
    end process;

    j_4_reg_414_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln101_fu_915_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
                j_4_reg_414 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
                j_4_reg_414 <= add_ln102_reg_1210;
            end if; 
        end if;
    end process;

    j_reg_269_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln73_fu_448_p2 = ap_const_lv1_1))) then 
                j_reg_269 <= ap_const_lv7_0;
            elsif (((icmp_ln79_reg_989 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j_reg_269 <= select_ln79_2_reg_998;
            end if; 
        end if;
    end process;

    k_reg_381_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                k_reg_381 <= ap_const_lv7_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln91_reg_1081 = ap_const_lv1_0))) then 
                k_reg_381 <= add_ln95_reg_1147;
            end if; 
        end if;
    end process;

    reg_425_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (icmp_ln91_reg_1081 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
                reg_425 <= data_V_q1;
            elsif ((((icmp_ln79_reg_989_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln87_reg_1035_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)))) then 
                reg_425 <= data_V_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                add_ln101_reg_1197 <= add_ln101_fu_897_p2;
                    tmp_9_cast_reg_1202(11 downto 6) <= tmp_9_cast_fu_907_p3(11 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                add_ln102_reg_1210 <= add_ln102_fu_921_p2;
                    zext_ln208_1_reg_1215(11 downto 0) <= zext_ln208_1_fu_936_p1(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (icmp_ln91_reg_1081_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                add_ln691_1_reg_1181 <= add_ln691_1_fu_873_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln79_reg_989_pp0_iter2_reg = ap_const_lv1_0))) then
                add_ln691_reg_1024 <= add_ln691_fu_565_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln73_reg_947 <= add_ln73_fu_430_p2;
                    tmp_cast_reg_952(11 downto 6) <= tmp_cast_fu_440_p3(11 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln74_reg_961 <= add_ln74_fu_454_p2;
                data_V_addr_reg_966 <= zext_ln75_1_fu_469_p1(12 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln79_fu_487_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                add_ln82_reg_1010 <= add_ln82_fu_525_p2;
                select_ln79_2_reg_998 <= select_ln79_2_fu_513_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then
                add_ln91_1_reg_1161 <= add_ln91_1_fu_847_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (icmp_ln91_reg_1081 = ap_const_lv1_0))) then
                add_ln94_reg_1132 <= add_ln94_fu_801_p2;
                add_ln98_reg_1127 <= add_ln98_fu_795_p2;
                icmp_ln95_1_reg_1152 <= icmp_ln95_1_fu_841_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then
                add_ln94_reg_1132_pp2_iter1_reg <= add_ln94_reg_1132;
                add_ln98_reg_1127_pp2_iter1_reg <= add_ln98_reg_1127;
                icmp_ln95_1_reg_1152_pp2_iter1_reg <= icmp_ln95_1_reg_1152;
                icmp_ln95_1_reg_1152_pp2_iter2_reg <= icmp_ln95_1_reg_1152_pp2_iter1_reg;
                icmp_ln95_1_reg_1152_pp2_iter3_reg <= icmp_ln95_1_reg_1152_pp2_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (icmp_ln91_reg_1081 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then
                add_ln95_reg_1147 <= add_ln95_fu_836_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln91_reg_1081_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                cov_V_addr_2_reg_1176 <= zext_ln94_1_fu_869_p1(12 - 1 downto 0);
                cov_V_addr_reg_1171 <= zext_ln98_1_fu_865_p1(12 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                cov_V_addr_2_reg_1176_pp2_iter3_reg <= cov_V_addr_2_reg_1176;
                cov_V_addr_reg_1171_pp2_iter3_reg <= cov_V_addr_reg_1171;
                icmp_ln91_reg_1081 <= icmp_ln91_fu_669_p2;
                icmp_ln91_reg_1081_pp2_iter1_reg <= icmp_ln91_reg_1081;
                icmp_ln91_reg_1081_pp2_iter2_reg <= icmp_ln91_reg_1081_pp2_iter1_reg;
                or_ln92_reg_1096_pp2_iter1_reg <= or_ln92_reg_1096;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                cov_V_load_reg_1228 <= cov_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln87_reg_1035 = ap_const_lv1_0))) then
                data_V_addr_2_reg_1060 <= zext_ln692_1_fu_655_p1(12 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                data_V_addr_2_reg_1060_pp1_iter2_reg <= data_V_addr_2_reg_1060;
                data_V_addr_2_reg_1060_pp1_iter3_reg <= data_V_addr_2_reg_1060_pp1_iter2_reg;
                icmp_ln87_reg_1035_pp1_iter2_reg <= icmp_ln87_reg_1035_pp1_iter1_reg;
                icmp_ln87_reg_1035_pp1_iter3_reg <= icmp_ln87_reg_1035_pp1_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (icmp_ln91_reg_1081 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then
                data_V_load_3_reg_1156 <= data_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln79_reg_989 <= icmp_ln79_fu_487_p2;
                icmp_ln79_reg_989_pp0_iter1_reg <= icmp_ln79_reg_989;
                icmp_ln82_1_reg_1015_pp0_iter1_reg <= icmp_ln82_1_reg_1015;
                icmp_ln82_reg_993_pp0_iter1_reg <= icmp_ln82_reg_993;
                select_ln79_2_reg_998_pp0_iter1_reg <= select_ln79_2_reg_998;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln79_reg_989_pp0_iter2_reg <= icmp_ln79_reg_989_pp0_iter1_reg;
                icmp_ln79_reg_989_pp0_iter3_reg <= icmp_ln79_reg_989_pp0_iter2_reg;
                icmp_ln82_1_reg_1015_pp0_iter2_reg <= icmp_ln82_1_reg_1015_pp0_iter1_reg;
                icmp_ln82_1_reg_1015_pp0_iter3_reg <= icmp_ln82_1_reg_1015_pp0_iter2_reg;
                icmp_ln82_reg_993_pp0_iter2_reg <= icmp_ln82_reg_993_pp0_iter1_reg;
                select_ln79_2_reg_998_pp0_iter2_reg <= select_ln79_2_reg_998_pp0_iter1_reg;
                select_ln79_2_reg_998_pp0_iter3_reg <= select_ln79_2_reg_998_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln79_fu_487_p2 = ap_const_lv1_0))) then
                icmp_ln82_1_reg_1015 <= icmp_ln82_1_fu_531_p2;
                icmp_ln82_reg_993 <= icmp_ln82_fu_499_p2;
                trunc_ln691_reg_1005 <= trunc_ln691_fu_521_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln87_reg_1035 <= icmp_ln87_fu_591_p2;
                icmp_ln87_reg_1035_pp1_iter1_reg <= icmp_ln87_reg_1035;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln87_reg_1035_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then
                mean_V_load_reg_1071 <= mean_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage3_11001) and (icmp_ln91_reg_1081_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3))) then
                mul_ln691_reg_1166 <= grp_fu_853_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln91_fu_669_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                or_ln92_reg_1096 <= or_ln92_fu_731_p2;
                select_ln92_reg_1101 <= select_ln92_fu_737_p3;
                trunc_ln215_reg_1117 <= trunc_ln215_fu_757_p1;
                trunc_ln94_reg_1091 <= trunc_ln94_fu_703_p1;
                trunc_ln98_reg_1112 <= trunc_ln98_fu_753_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln87_fu_591_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                select_ln87_1_reg_1045 <= select_ln87_1_fu_617_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln87_fu_591_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                select_ln87_reg_1039 <= select_ln87_fu_609_p3;
                trunc_ln692_reg_1050 <= trunc_ln692_fu_625_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln91_fu_669_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then
                select_ln91_1_reg_1085 <= select_ln91_1_fu_695_p3;
                select_ln92_2_reg_1106 <= select_ln92_2_fu_745_p3;
                select_ln92_3_reg_1122 <= select_ln92_3_fu_767_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln87_reg_1035_pp1_iter2_reg = ap_const_lv1_0))) then
                sub_ln692_reg_1076 <= sub_ln692_fu_663_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (icmp_ln95_1_reg_1152_pp2_iter2_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then
                trunc_ln693_1_reg_1192 <= grp_fu_881_p2(256 downto 138);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                xout_load_reg_979 <= xout_q0;
            end if;
        end if;
    end process;
    tmp_cast_reg_952(5 downto 0) <= "000000";
    tmp_9_cast_reg_1202(5 downto 0) <= "000000";
    zext_ln208_1_reg_1215(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln73_fu_448_p2, ap_CS_fsm_state3, icmp_ln74_fu_475_p2, ap_enable_reg_pp0_iter0, icmp_ln79_fu_487_p2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp1_iter0, icmp_ln87_fu_591_p2, ap_CS_fsm_pp2_stage0, ap_CS_fsm_pp2_stage3, ap_enable_reg_pp2_iter2, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter4, ap_block_pp2_stage3_subdone, ap_enable_reg_pp2_iter1, ap_condition_pp2_exit_iter2_state26, ap_enable_reg_pp2_iter3, icmp_ln102_fu_941_p2, icmp_ln101_fu_915_p2, ap_block_pp2_stage0_subdone, ap_block_pp2_stage1_subdone, ap_block_pp2_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln73_fu_448_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln74_fu_475_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln79_fu_487_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln79_fu_487_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln87_fu_591_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln87_fu_591_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_pp2_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp2_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                end if;
            when ap_ST_fsm_pp2_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp2_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage2;
                end if;
            when ap_ST_fsm_pp2_stage3 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp2_stage3_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter2_state26) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3))) and (ap_const_boolean_0 = ap_block_pp2_stage3_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp2_stage3_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter2_state26) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage3;
                end if;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                if (((icmp_ln101_fu_915_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_state36 => 
                if (((icmp_ln102_fu_941_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln101_fu_897_p2 <= std_logic_vector(unsigned(i_4_reg_403) + unsigned(ap_const_lv7_1));
    add_ln102_fu_921_p2 <= std_logic_vector(unsigned(j_4_reg_414) + unsigned(ap_const_lv7_1));
    add_ln208_fu_931_p2 <= std_logic_vector(unsigned(tmp_9_cast_reg_1202) + unsigned(zext_ln208_fu_927_p1));
    add_ln215_1_fu_825_p2 <= std_logic_vector(unsigned(tmp_8_cast_fu_807_p3) + unsigned(zext_ln98_fu_785_p1));
    add_ln215_fu_814_p2 <= std_logic_vector(unsigned(tmp_8_cast_fu_807_p3) + unsigned(zext_ln94_fu_775_p1));
    add_ln691_1_fu_873_p2 <= std_logic_vector(unsigned(mul_ln691_reg_1166) + unsigned(select_ln92_1_fu_858_p3));
    add_ln691_2_fu_547_p2 <= std_logic_vector(unsigned(tmp_3_cast_fu_540_p3) + unsigned(zext_ln691_fu_537_p1));
    add_ln691_fu_565_p2 <= std_logic_vector(signed(reg_425) + signed(select_ln79_1_fu_558_p3));
    add_ln692_fu_649_p2 <= std_logic_vector(unsigned(tmp_4_cast_fu_635_p3) + unsigned(zext_ln692_fu_646_p1));
    add_ln73_fu_430_p2 <= std_logic_vector(unsigned(i_reg_236) + unsigned(ap_const_lv7_1));
    add_ln74_fu_454_p2 <= std_logic_vector(unsigned(j_1_reg_247) + unsigned(ap_const_lv7_1));
    add_ln75_fu_464_p2 <= std_logic_vector(unsigned(tmp_cast_reg_952) + unsigned(zext_ln75_fu_460_p1));
    add_ln79_1_fu_481_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_258) + unsigned(ap_const_lv13_1));
    add_ln79_fu_493_p2 <= std_logic_vector(unsigned(ap_phi_mux_j_phi_fu_273_p4) + unsigned(ap_const_lv7_1));
    add_ln82_fu_525_p2 <= std_logic_vector(unsigned(select_ln79_fu_505_p3) + unsigned(ap_const_lv7_1));
    add_ln87_1_fu_585_p2 <= std_logic_vector(unsigned(indvar_flatten8_reg_303) + unsigned(ap_const_lv13_1));
    add_ln87_fu_597_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_1_phi_fu_318_p4) + unsigned(ap_const_lv7_1));
    add_ln88_fu_629_p2 <= std_logic_vector(unsigned(select_ln87_fu_609_p3) + unsigned(ap_const_lv7_1));
    add_ln91_1_fu_847_p2 <= std_logic_vector(unsigned(indvar_flatten36_reg_336) + unsigned(ap_const_lv19_1));
    add_ln91_fu_675_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_3_phi_fu_352_p4) + unsigned(ap_const_lv7_1));
    add_ln92_1_fu_761_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten21_phi_fu_363_p4) + unsigned(ap_const_lv14_1));
    add_ln92_fu_725_p2 <= std_logic_vector(unsigned(select_ln91_fu_687_p3) + unsigned(ap_const_lv7_1));
    add_ln94_fu_801_p2 <= std_logic_vector(unsigned(tmp_5_cast_fu_778_p3) + unsigned(zext_ln98_fu_785_p1));
    add_ln95_fu_836_p2 <= std_logic_vector(unsigned(select_ln92_reg_1101) + unsigned(ap_const_lv7_1));
    add_ln98_fu_795_p2 <= std_logic_vector(unsigned(tmp_7_cast_fu_788_p3) + unsigned(zext_ln94_fu_775_p1));
    and_ln91_fu_719_p2 <= (xor_ln91_fu_707_p2 and icmp_ln95_fu_713_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(7);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(9);
    ap_CS_fsm_pp2_stage1 <= ap_CS_fsm(10);
    ap_CS_fsm_pp2_stage2 <= ap_CS_fsm(11);
    ap_CS_fsm_pp2_stage3 <= ap_CS_fsm(12);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(6);
    ap_CS_fsm_state17 <= ap_CS_fsm(8);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state34 <= ap_CS_fsm(13);
    ap_CS_fsm_state35 <= ap_CS_fsm(14);
    ap_CS_fsm_state36 <= ap_CS_fsm(15);
    ap_CS_fsm_state37 <= ap_CS_fsm(16);
    ap_CS_fsm_state38 <= ap_CS_fsm(17);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp1_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp2_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp2_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp2_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp2_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp2_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp2_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp2_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp2_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp2_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp2_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp2_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp2_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp2_stage3_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state6_assign_proc : process(icmp_ln79_fu_487_p2)
    begin
        if ((icmp_ln79_fu_487_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state6 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state12_assign_proc : process(icmp_ln87_fu_591_p2)
    begin
        if ((icmp_ln87_fu_591_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state12 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter2_state26_assign_proc : process(ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then 
            ap_condition_pp2_exit_iter2_state26 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter2_state26 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_flush_enable_assign_proc : process(icmp_ln91_reg_1081, ap_CS_fsm_pp2_stage3, ap_block_pp2_stage3_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3) and (icmp_ln91_reg_1081 = ap_const_lv1_1))) then 
            ap_condition_pp2_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp2_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state35, icmp_ln101_fu_915_p2)
    begin
        if ((((icmp_ln101_fu_915_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state35)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter3)
    begin
        if (((ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_add_i3113_phi_fu_295_p4_assign_proc : process(add_i3113_reg_291, icmp_ln79_reg_989_pp0_iter3_reg, add_ln691_reg_1024, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln79_reg_989_pp0_iter3_reg = ap_const_lv1_0))) then 
            ap_phi_mux_add_i3113_phi_fu_295_p4 <= add_ln691_reg_1024;
        else 
            ap_phi_mux_add_i3113_phi_fu_295_p4 <= add_i3113_reg_291;
        end if; 
    end process;


    ap_phi_mux_conv3_i2112_phi_fu_396_p4_assign_proc : process(conv3_i2112_reg_392, ap_CS_fsm_pp2_stage0, icmp_ln91_reg_1081_pp2_iter2_reg, add_ln691_1_reg_1181, ap_enable_reg_pp2_iter3, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (icmp_ln91_reg_1081_pp2_iter2_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_conv3_i2112_phi_fu_396_p4 <= add_ln691_1_reg_1181;
        else 
            ap_phi_mux_conv3_i2112_phi_fu_396_p4 <= conv3_i2112_reg_392;
        end if; 
    end process;


    ap_phi_mux_i_1_phi_fu_318_p4_assign_proc : process(i_1_reg_314, icmp_ln87_reg_1035, ap_CS_fsm_pp1_stage0, select_ln87_1_reg_1045, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln87_reg_1035 = ap_const_lv1_0))) then 
            ap_phi_mux_i_1_phi_fu_318_p4 <= select_ln87_1_reg_1045;
        else 
            ap_phi_mux_i_1_phi_fu_318_p4 <= i_1_reg_314;
        end if; 
    end process;


    ap_phi_mux_i_2_phi_fu_284_p4_assign_proc : process(i_2_reg_280, icmp_ln79_reg_989, ap_CS_fsm_pp0_stage0, add_ln82_reg_1010, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln79_reg_989 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_i_2_phi_fu_284_p4 <= add_ln82_reg_1010;
        else 
            ap_phi_mux_i_2_phi_fu_284_p4 <= i_2_reg_280;
        end if; 
    end process;


    ap_phi_mux_i_3_phi_fu_352_p4_assign_proc : process(i_3_reg_348, icmp_ln91_reg_1081, ap_CS_fsm_pp2_stage0, select_ln91_1_reg_1085, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln91_reg_1081 = ap_const_lv1_0))) then 
            ap_phi_mux_i_3_phi_fu_352_p4 <= select_ln91_1_reg_1085;
        else 
            ap_phi_mux_i_3_phi_fu_352_p4 <= i_3_reg_348;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten21_phi_fu_363_p4_assign_proc : process(indvar_flatten21_reg_359, icmp_ln91_reg_1081, ap_CS_fsm_pp2_stage0, select_ln92_3_reg_1122, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln91_reg_1081 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten21_phi_fu_363_p4 <= select_ln92_3_reg_1122;
        else 
            ap_phi_mux_indvar_flatten21_phi_fu_363_p4 <= indvar_flatten21_reg_359;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten36_phi_fu_340_p4_assign_proc : process(indvar_flatten36_reg_336, icmp_ln91_reg_1081, ap_CS_fsm_pp2_stage0, add_ln91_1_reg_1161, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln91_reg_1081 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten36_phi_fu_340_p4 <= add_ln91_1_reg_1161;
        else 
            ap_phi_mux_indvar_flatten36_phi_fu_340_p4 <= indvar_flatten36_reg_336;
        end if; 
    end process;


    ap_phi_mux_j_3_phi_fu_374_p4_assign_proc : process(j_3_reg_370, icmp_ln91_reg_1081, ap_CS_fsm_pp2_stage0, select_ln92_2_reg_1106, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln91_reg_1081 = ap_const_lv1_0))) then 
            ap_phi_mux_j_3_phi_fu_374_p4 <= select_ln92_2_reg_1106;
        else 
            ap_phi_mux_j_3_phi_fu_374_p4 <= j_3_reg_370;
        end if; 
    end process;


    ap_phi_mux_j_phi_fu_273_p4_assign_proc : process(j_reg_269, icmp_ln79_reg_989, ap_CS_fsm_pp0_stage0, select_ln79_2_reg_998, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln79_reg_989 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_j_phi_fu_273_p4 <= select_ln79_2_reg_998;
        else 
            ap_phi_mux_j_phi_fu_273_p4 <= j_reg_269;
        end if; 
    end process;


    ap_phi_mux_k_phi_fu_385_p4_assign_proc : process(k_reg_381, icmp_ln91_reg_1081, ap_CS_fsm_pp2_stage0, add_ln95_reg_1147, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln91_reg_1081 = ap_const_lv1_0))) then 
            ap_phi_mux_k_phi_fu_385_p4 <= add_ln95_reg_1147;
        else 
            ap_phi_mux_k_phi_fu_385_p4 <= k_reg_381;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state35, icmp_ln101_fu_915_p2)
    begin
        if (((icmp_ln101_fu_915_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    cov_V_address0 <= zext_ln208_1_fu_936_p1(12 - 1 downto 0);

    cov_V_address1_assign_proc : process(ap_CS_fsm_pp2_stage2, ap_CS_fsm_pp2_stage3, cov_V_addr_reg_1171_pp2_iter3_reg, cov_V_addr_2_reg_1176_pp2_iter3_reg, ap_enable_reg_pp2_iter3, ap_block_pp2_stage2, ap_block_pp2_stage3)
    begin
        if ((ap_enable_reg_pp2_iter3 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp2_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3))) then 
                cov_V_address1 <= cov_V_addr_reg_1171_pp2_iter3_reg;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then 
                cov_V_address1 <= cov_V_addr_2_reg_1176_pp2_iter3_reg;
            else 
                cov_V_address1 <= "XXXXXXXXXXXX";
            end if;
        else 
            cov_V_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    cov_V_ce0_assign_proc : process(ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            cov_V_ce0 <= ap_const_logic_1;
        else 
            cov_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cov_V_ce1_assign_proc : process(ap_CS_fsm_pp2_stage2, ap_block_pp2_stage2_11001, ap_CS_fsm_pp2_stage3, ap_block_pp2_stage3_11001, ap_enable_reg_pp2_iter3)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage3_11001) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3)) or ((ap_const_boolean_0 = ap_block_pp2_stage2_11001) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2)))) then 
            cov_V_ce1 <= ap_const_logic_1;
        else 
            cov_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    cov_V_we1_assign_proc : process(ap_CS_fsm_pp2_stage2, ap_block_pp2_stage2_11001, icmp_ln95_1_reg_1152_pp2_iter3_reg, ap_CS_fsm_pp2_stage3, ap_block_pp2_stage3_11001, ap_enable_reg_pp2_iter3)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage3_11001) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (icmp_ln95_1_reg_1152_pp2_iter3_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3)) or ((ap_const_boolean_0 = ap_block_pp2_stage2_11001) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (icmp_ln95_1_reg_1152_pp2_iter3_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2)))) then 
            cov_V_we1 <= ap_const_logic_1;
        else 
            cov_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    data_V_address0_assign_proc : process(ap_enable_reg_pp2_iter0, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp2_stage1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_block_pp0_stage0, ap_block_pp1_stage0, zext_ln691_1_fu_553_p1, zext_ln692_1_fu_655_p1, ap_block_pp2_stage1, zext_ln215_1_fu_831_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            data_V_address0 <= zext_ln215_1_fu_831_p1(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            data_V_address0 <= zext_ln692_1_fu_655_p1(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_address0 <= zext_ln691_1_fu_553_p1(12 - 1 downto 0);
        else 
            data_V_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    data_V_address1_assign_proc : process(ap_enable_reg_pp2_iter0, data_V_addr_reg_966, data_V_addr_2_reg_1060_pp1_iter3_reg, ap_CS_fsm_pp2_stage1, ap_enable_reg_pp1_iter4, ap_CS_fsm_state5, ap_block_pp1_stage0, zext_ln215_fu_820_p1, ap_block_pp2_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            data_V_address1 <= zext_ln215_fu_820_p1(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))) then 
            data_V_address1 <= data_V_addr_2_reg_1060_pp1_iter3_reg;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            data_V_address1 <= data_V_addr_reg_966;
        else 
            data_V_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    data_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            data_V_ce0 <= ap_const_logic_1;
        else 
            data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_V_ce1_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_enable_reg_pp1_iter4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1)))) then 
            data_V_ce1 <= ap_const_logic_1;
        else 
            data_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    data_V_d1_assign_proc : process(xout_load_reg_979, sub_ln692_reg_1076, ap_enable_reg_pp1_iter4, ap_CS_fsm_state5, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))) then 
            data_V_d1 <= sub_ln692_reg_1076;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            data_V_d1 <= xout_load_reg_979;
        else 
            data_V_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data_V_we1_assign_proc : process(ap_block_pp1_stage0_11001, icmp_ln87_reg_1035_pp1_iter3_reg, ap_enable_reg_pp1_iter4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (icmp_ln87_reg_1035_pp1_iter3_reg = ap_const_lv1_0)))) then 
            data_V_we1 <= ap_const_logic_1;
        else 
            data_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_881_p0 <= grp_fu_881_p00(128 - 1 downto 0);
    grp_fu_881_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln691_1_reg_1181),257));
    grp_fu_881_p1 <= ap_const_lv257_lc_3(130 - 1 downto 0);
    icmp_ln101_fu_915_p2 <= "1" when (i_4_reg_403 = ap_const_lv7_40) else "0";
    icmp_ln102_fu_941_p2 <= "1" when (j_4_reg_414 = ap_const_lv7_40) else "0";
    icmp_ln73_fu_448_p2 <= "1" when (i_reg_236 = ap_const_lv7_40) else "0";
    icmp_ln74_fu_475_p2 <= "1" when (j_1_reg_247 = ap_const_lv7_40) else "0";
    icmp_ln79_fu_487_p2 <= "1" when (indvar_flatten_reg_258 = ap_const_lv13_1000) else "0";
    icmp_ln82_1_fu_531_p2 <= "1" when (add_ln82_fu_525_p2 = ap_const_lv7_40) else "0";
    icmp_ln82_fu_499_p2 <= "1" when (ap_phi_mux_i_2_phi_fu_284_p4 = ap_const_lv7_40) else "0";
    icmp_ln87_fu_591_p2 <= "1" when (indvar_flatten8_reg_303 = ap_const_lv13_1000) else "0";
    icmp_ln88_fu_603_p2 <= "1" when (j_2_reg_325 = ap_const_lv7_40) else "0";
    icmp_ln91_fu_669_p2 <= "1" when (ap_phi_mux_indvar_flatten36_phi_fu_340_p4 = ap_const_lv19_40000) else "0";
    icmp_ln92_fu_681_p2 <= "1" when (ap_phi_mux_indvar_flatten21_phi_fu_363_p4 = ap_const_lv14_1000) else "0";
    icmp_ln95_1_fu_841_p2 <= "1" when (add_ln95_fu_836_p2 = ap_const_lv7_40) else "0";
    icmp_ln95_fu_713_p2 <= "1" when (ap_phi_mux_k_phi_fu_385_p4 = ap_const_lv7_40) else "0";
    mean_V_address0 <= zext_ln88_fu_642_p1(6 - 1 downto 0);
    mean_V_address1 <= zext_ln79_fu_571_p1(6 - 1 downto 0);

    mean_V_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            mean_V_ce0 <= ap_const_logic_1;
        else 
            mean_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mean_V_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            mean_V_ce1 <= ap_const_logic_1;
        else 
            mean_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    mean_V_d1 <= add_ln691_reg_1024(127 downto 10);
    mean_V_load_cast_fu_660_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mean_V_load_reg_1071),128));

    mean_V_we1_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln82_1_reg_1015_pp0_iter3_reg, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln82_1_reg_1015_pp0_iter3_reg = ap_const_lv1_1))) then 
            mean_V_we1 <= ap_const_logic_1;
        else 
            mean_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln92_fu_731_p2 <= (icmp_ln92_fu_681_p2 or and_ln91_fu_719_p2);
    select_ln79_1_fu_558_p3 <= 
        ap_const_lv128_lc_1 when (icmp_ln82_reg_993_pp0_iter2_reg(0) = '1') else 
        ap_phi_mux_add_i3113_phi_fu_295_p4;
    select_ln79_2_fu_513_p3 <= 
        add_ln79_fu_493_p2 when (icmp_ln82_fu_499_p2(0) = '1') else 
        ap_phi_mux_j_phi_fu_273_p4;
    select_ln79_fu_505_p3 <= 
        ap_const_lv7_0 when (icmp_ln82_fu_499_p2(0) = '1') else 
        ap_phi_mux_i_2_phi_fu_284_p4;
    select_ln87_1_fu_617_p3 <= 
        add_ln87_fu_597_p2 when (icmp_ln88_fu_603_p2(0) = '1') else 
        ap_phi_mux_i_1_phi_fu_318_p4;
    select_ln87_fu_609_p3 <= 
        ap_const_lv7_0 when (icmp_ln88_fu_603_p2(0) = '1') else 
        j_2_reg_325;
    select_ln91_1_fu_695_p3 <= 
        add_ln91_fu_675_p2 when (icmp_ln92_fu_681_p2(0) = '1') else 
        ap_phi_mux_i_3_phi_fu_352_p4;
    select_ln91_fu_687_p3 <= 
        ap_const_lv7_0 when (icmp_ln92_fu_681_p2(0) = '1') else 
        ap_phi_mux_j_3_phi_fu_374_p4;
    select_ln92_1_fu_858_p3 <= 
        ap_const_lv128_lc_1 when (or_ln92_reg_1096_pp2_iter1_reg(0) = '1') else 
        ap_phi_mux_conv3_i2112_phi_fu_396_p4;
    select_ln92_2_fu_745_p3 <= 
        add_ln92_fu_725_p2 when (and_ln91_fu_719_p2(0) = '1') else 
        select_ln91_fu_687_p3;
    select_ln92_3_fu_767_p3 <= 
        ap_const_lv14_1 when (icmp_ln92_fu_681_p2(0) = '1') else 
        add_ln92_1_fu_761_p2;
    select_ln92_fu_737_p3 <= 
        ap_const_lv7_0 when (or_ln92_fu_731_p2(0) = '1') else 
        ap_phi_mux_k_phi_fu_385_p4;
    sub_ln692_fu_663_p2 <= std_logic_vector(signed(reg_425) - signed(mean_V_load_cast_fu_660_p1));
    tmp_3_cast_fu_540_p3 <= (trunc_ln691_reg_1005 & ap_const_lv6_0);
    tmp_4_cast_fu_635_p3 <= (trunc_ln692_reg_1050 & ap_const_lv6_0);
    tmp_5_cast_fu_778_p3 <= (trunc_ln94_reg_1091 & ap_const_lv6_0);
    tmp_7_cast_fu_788_p3 <= (trunc_ln98_reg_1112 & ap_const_lv6_0);
    tmp_8_cast_fu_807_p3 <= (trunc_ln215_reg_1117 & ap_const_lv6_0);
    tmp_9_cast_fu_907_p3 <= (trunc_ln208_fu_903_p1 & ap_const_lv6_0);
    tmp_cast_fu_440_p3 <= (trunc_ln75_fu_436_p1 & ap_const_lv6_0);
    trunc_ln208_fu_903_p1 <= i_4_reg_403(6 - 1 downto 0);
    trunc_ln215_fu_757_p1 <= select_ln92_fu_737_p3(6 - 1 downto 0);
    trunc_ln691_fu_521_p1 <= select_ln79_fu_505_p3(6 - 1 downto 0);
    trunc_ln692_fu_625_p1 <= select_ln87_1_fu_617_p3(6 - 1 downto 0);
    trunc_ln75_fu_436_p1 <= i_reg_236(6 - 1 downto 0);
    trunc_ln94_fu_703_p1 <= select_ln91_1_fu_695_p3(6 - 1 downto 0);
    trunc_ln98_fu_753_p1 <= select_ln92_2_fu_745_p3(6 - 1 downto 0);
    xin_address0 <= zext_ln208_1_reg_1215(12 - 1 downto 0);

    xin_ce0_assign_proc : process(ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            xin_ce0 <= ap_const_logic_1;
        else 
            xin_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    xin_d0 <= cov_V_load_reg_1228;

    xin_we0_assign_proc : process(ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            xin_we0 <= ap_const_logic_1;
        else 
            xin_we0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln91_fu_707_p2 <= (icmp_ln92_fu_681_p2 xor ap_const_lv1_1);
    xout_address0 <= zext_ln75_1_fu_469_p1(12 - 1 downto 0);

    xout_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            xout_ce0 <= ap_const_logic_1;
        else 
            xout_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln208_1_fu_936_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln208_fu_931_p2),64));
    zext_ln208_fu_927_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_4_reg_414),12));
    zext_ln215_1_fu_831_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln215_1_fu_825_p2),64));
    zext_ln215_fu_820_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln215_fu_814_p2),64));
    zext_ln691_1_fu_553_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln691_2_fu_547_p2),64));
    zext_ln691_fu_537_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln79_2_reg_998),12));
    zext_ln692_1_fu_655_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln692_fu_649_p2),64));
    zext_ln692_fu_646_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln87_reg_1039),12));
    zext_ln75_1_fu_469_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_fu_464_p2),64));
    zext_ln75_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_247),12));
    zext_ln79_fu_571_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln79_2_reg_998_pp0_iter3_reg),64));
    zext_ln88_fu_642_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln87_reg_1039),64));
    zext_ln94_1_fu_869_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln94_reg_1132_pp2_iter1_reg),64));
    zext_ln94_fu_775_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln91_1_reg_1085),12));
    zext_ln98_1_fu_865_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln98_reg_1127_pp2_iter1_reg),64));
    zext_ln98_fu_785_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln92_2_reg_1106),12));
end behav;
