-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_nondf_kernel_cov_x0 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    xout_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    xout_ce0 : OUT STD_LOGIC;
    xout_q0 : IN STD_LOGIC_VECTOR (511 downto 0);
    xin_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    xin_ce0 : OUT STD_LOGIC;
    xin_we0 : OUT STD_LOGIC;
    xin_d0 : OUT STD_LOGIC_VECTOR (118 downto 0) );
end;


architecture behav of top_nondf_kernel_cov_x0 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (33 downto 0) := "0000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (33 downto 0) := "0000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (33 downto 0) := "0000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (33 downto 0) := "0000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (33 downto 0) := "0000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (33 downto 0) := "0000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (33 downto 0) := "0001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (33 downto 0) := "0010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (33 downto 0) := "0100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (33 downto 0) := "1000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv257_lc_3 : STD_LOGIC_VECTOR (256 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000010000000001000000000100000000010000000001000000000100000000010000000001000000000100000000010000000001000000000100000001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_8A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001010";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal data_V_q0 : STD_LOGIC_VECTOR (127 downto 0);
    signal reg_330 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal data_V_q1 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal add_ln29_fu_335_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln29_reg_726 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_cast_fu_345_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_cast_reg_731 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln30_fu_359_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln30_reg_739 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal data_V_addr_reg_744 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln30_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln208_fu_386_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln208_reg_757 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln35_fu_390_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln35_reg_762 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln35_1_fu_401_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln35_1_reg_767 : STD_LOGIC_VECTOR (11 downto 0);
    signal mean_V_addr_reg_775 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln35_fu_405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln38_fu_411_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln38_reg_780 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal add_ln691_fu_456_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal add_ln43_fu_462_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln43_reg_798 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_13_cast_fu_472_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_13_cast_reg_803 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln44_fu_486_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln44_reg_811 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal zext_ln44_fu_492_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln44_reg_816 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_V_addr_6_reg_821 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln692_fu_520_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal sub_ln692_reg_834 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal add_ln47_fu_526_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln47_reg_839 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal zext_ln50_fu_532_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln50_reg_844 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_15_cast_fu_540_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_15_cast_reg_850 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln48_fu_554_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln48_reg_858 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal zext_ln50_1_fu_560_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln50_1_reg_863 : STD_LOGIC_VECTOR (11 downto 0);
    signal cov_V_addr_reg_868 : STD_LOGIC_VECTOR (11 downto 0);
    signal cov_V_addr_4_reg_873 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln51_fu_602_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln51_reg_881 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal icmp_ln51_fu_640_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_V_load_6_reg_904 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_fu_656_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal mul_ln691_reg_909 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal add_ln691_2_fu_661_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal trunc_ln693_2_reg_919 : STD_LOGIC_VECTOR (118 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal add_ln57_fu_676_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln57_reg_924 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal tmp_16_cast_fu_686_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_16_cast_reg_929 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln58_fu_700_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln58_reg_937 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal zext_ln208_2_fu_715_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln208_2_reg_942 : STD_LOGIC_VECTOR (63 downto 0);
    signal cov_V_q0 : STD_LOGIC_VECTOR (118 downto 0);
    signal cov_V_load_reg_955 : STD_LOGIC_VECTOR (118 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal mean_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mean_V_ce0 : STD_LOGIC;
    signal mean_V_we0 : STD_LOGIC;
    signal mean_V_d0 : STD_LOGIC_VECTOR (117 downto 0);
    signal mean_V_q0 : STD_LOGIC_VECTOR (117 downto 0);
    signal data_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal data_V_ce0 : STD_LOGIC;
    signal data_V_we0 : STD_LOGIC;
    signal data_V_d0 : STD_LOGIC_VECTOR (127 downto 0);
    signal data_V_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal data_V_ce1 : STD_LOGIC;
    signal cov_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal cov_V_ce0 : STD_LOGIC;
    signal cov_V_we0 : STD_LOGIC;
    signal i_reg_185 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_5_reg_196 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln29_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_reg_207 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln38_fu_439_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_6_reg_218 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_i3113_reg_229 : STD_LOGIC_VECTOR (127 downto 0);
    signal i_5_reg_241 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln44_fu_510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_6_reg_252 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal icmp_ln43_fu_480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_7_reg_263 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln48_fu_596_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_7_reg_274 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal icmp_ln47_fu_548_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_reg_285 : STD_LOGIC_VECTOR (6 downto 0);
    signal conv3_i2112_reg_296 : STD_LOGIC_VECTOR (127 downto 0);
    signal i_8_reg_308 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln58_fu_720_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_8_reg_319 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal icmp_ln57_fu_694_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln31_1_fu_374_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_fu_396_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln691_fu_434_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln692_2_fu_505_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln50_2_fu_569_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_fu_591_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln215_fu_625_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln215_2_fu_635_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal trunc_ln31_fu_341_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln31_fu_365_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln31_fu_369_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln691_fu_417_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_14_cast_fu_421_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln691_3_fu_429_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln692_fu_468_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln692_fu_496_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln692_fu_500_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal mean_V_load_cast_fu_516_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln50_fu_536_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln50_fu_564_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln54_fu_574_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_17_cast_fu_578_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln54_fu_586_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln215_fu_608_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_20_cast_fu_612_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln215_fu_620_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln215_2_fu_630_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_650_p0 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_fu_650_p1 : STD_LOGIC_VECTOR (129 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal grp_fu_650_p2 : STD_LOGIC_VECTOR (256 downto 0);
    signal trunc_ln208_1_fu_682_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln208_fu_706_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln208_fu_710_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_650_p00 : STD_LOGIC_VECTOR (256 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component top_mul_128ns_130ns_257_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (127 downto 0);
        din1 : IN STD_LOGIC_VECTOR (129 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (256 downto 0) );
    end component;


    component top_mul_128s_128s_128_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (127 downto 0);
        din1 : IN STD_LOGIC_VECTOR (127 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;


    component top_nondf_kernel_cov_x0_mean_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (117 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (117 downto 0) );
    end component;


    component top_nondf_kernel_cov_x0_data_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (127 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (127 downto 0);
        address1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;


    component top_nondf_kernel_cov_x0_cov_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (118 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (118 downto 0) );
    end component;



begin
    mean_V_U : component top_nondf_kernel_cov_x0_mean_V
    generic map (
        DataWidth => 118,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mean_V_address0,
        ce0 => mean_V_ce0,
        we0 => mean_V_we0,
        d0 => mean_V_d0,
        q0 => mean_V_q0);

    data_V_U : component top_nondf_kernel_cov_x0_data_V
    generic map (
        DataWidth => 128,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => data_V_address0,
        ce0 => data_V_ce0,
        we0 => data_V_we0,
        d0 => data_V_d0,
        q0 => data_V_q0,
        address1 => data_V_address1,
        ce1 => data_V_ce1,
        q1 => data_V_q1);

    cov_V_U : component top_nondf_kernel_cov_x0_cov_V
    generic map (
        DataWidth => 119,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cov_V_address0,
        ce0 => cov_V_ce0,
        we0 => cov_V_we0,
        d0 => trunc_ln693_2_reg_919,
        q0 => cov_V_q0);

    mul_128ns_130ns_257_5_1_U807 : component top_mul_128ns_130ns_257_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 128,
        din1_WIDTH => 130,
        dout_WIDTH => 257)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_650_p0,
        din1 => grp_fu_650_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_650_p2);

    mul_128s_128s_128_5_1_U808 : component top_mul_128s_128s_128_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 128,
        din1_WIDTH => 128,
        dout_WIDTH => 128)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => data_V_load_6_reg_904,
        din1 => reg_330,
        ce => ap_const_logic_1,
        dout => grp_fu_656_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    add_i3113_reg_229_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln35_fu_405_p2 = ap_const_lv1_0))) then 
                add_i3113_reg_229 <= ap_const_lv128_lc_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                add_i3113_reg_229 <= add_ln691_fu_456_p2;
            end if; 
        end if;
    end process;

    conv3_i2112_reg_296_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln48_fu_596_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                conv3_i2112_reg_296 <= ap_const_lv128_lc_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                conv3_i2112_reg_296 <= add_ln691_2_fu_661_p2;
            end if; 
        end if;
    end process;

    i_5_reg_241_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln35_fu_405_p2 = ap_const_lv1_1))) then 
                i_5_reg_241 <= ap_const_lv7_0;
            elsif (((icmp_ln44_fu_510_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                i_5_reg_241 <= add_ln43_reg_798;
            end if; 
        end if;
    end process;

    i_6_reg_218_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln35_fu_405_p2 = ap_const_lv1_0))) then 
                i_6_reg_218 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i_6_reg_218 <= add_ln38_reg_780;
            end if; 
        end if;
    end process;

    i_7_reg_263_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln43_fu_480_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                i_7_reg_263 <= ap_const_lv7_0;
            elsif (((icmp_ln48_fu_596_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                i_7_reg_263 <= add_ln47_reg_839;
            end if; 
        end if;
    end process;

    i_8_reg_308_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln47_fu_548_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                i_8_reg_308 <= ap_const_lv7_0;
            elsif (((icmp_ln58_fu_720_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
                i_8_reg_308 <= add_ln57_reg_924;
            end if; 
        end if;
    end process;

    i_reg_185_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_185 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln30_fu_380_p2 = ap_const_lv1_1))) then 
                i_reg_185 <= add_ln29_reg_726;
            end if; 
        end if;
    end process;

    j_5_reg_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln29_fu_353_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_5_reg_196 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                j_5_reg_196 <= add_ln30_reg_739;
            end if; 
        end if;
    end process;

    j_6_reg_252_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln43_fu_480_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                j_6_reg_252 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                j_6_reg_252 <= add_ln44_reg_811;
            end if; 
        end if;
    end process;

    j_7_reg_274_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln47_fu_548_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                j_7_reg_274 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                j_7_reg_274 <= add_ln48_reg_858;
            end if; 
        end if;
    end process;

    j_8_reg_319_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln57_fu_694_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state31))) then 
                j_8_reg_319 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                j_8_reg_319 <= add_ln58_reg_937;
            end if; 
        end if;
    end process;

    j_reg_207_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln29_fu_353_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_207 <= ap_const_lv7_0;
            elsif (((icmp_ln38_fu_439_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                j_reg_207 <= add_ln35_reg_762;
            end if; 
        end if;
    end process;

    k_reg_285_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln48_fu_596_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                k_reg_285 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                k_reg_285 <= add_ln51_reg_881;
            end if; 
        end if;
    end process;

    reg_330_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                reg_330 <= data_V_q1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                reg_330 <= data_V_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln29_reg_726 <= add_ln29_fu_335_p2;
                    tmp_cast_reg_731(11 downto 6) <= tmp_cast_fu_345_p3(11 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln30_reg_739 <= add_ln30_fu_359_p2;
                data_V_addr_reg_744 <= zext_ln31_1_fu_374_p1(12 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add_ln35_reg_762 <= add_ln35_fu_390_p2;
                    zext_ln35_1_reg_767(6 downto 0) <= zext_ln35_1_fu_401_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                add_ln38_reg_780 <= add_ln38_fu_411_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                add_ln43_reg_798 <= add_ln43_fu_462_p2;
                    tmp_13_cast_reg_803(11 downto 6) <= tmp_13_cast_fu_472_p3(11 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                add_ln44_reg_811 <= add_ln44_fu_486_p2;
                data_V_addr_6_reg_821 <= zext_ln692_2_fu_505_p1(12 - 1 downto 0);
                    zext_ln44_reg_816(6 downto 0) <= zext_ln44_fu_492_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                add_ln47_reg_839 <= add_ln47_fu_526_p2;
                    tmp_15_cast_reg_850(11 downto 6) <= tmp_15_cast_fu_540_p3(11 downto 6);
                    zext_ln50_reg_844(6 downto 0) <= zext_ln50_fu_532_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                add_ln48_reg_858 <= add_ln48_fu_554_p2;
                cov_V_addr_4_reg_873 <= zext_ln54_fu_591_p1(12 - 1 downto 0);
                cov_V_addr_reg_868 <= zext_ln50_2_fu_569_p1(12 - 1 downto 0);
                    zext_ln50_1_reg_863(6 downto 0) <= zext_ln50_1_fu_560_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                add_ln51_reg_881 <= add_ln51_fu_602_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                add_ln57_reg_924 <= add_ln57_fu_676_p2;
                    tmp_16_cast_reg_929(11 downto 6) <= tmp_16_cast_fu_686_p3(11 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                add_ln58_reg_937 <= add_ln58_fu_700_p2;
                    zext_ln208_2_reg_942(11 downto 0) <= zext_ln208_2_fu_715_p1(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                cov_V_load_reg_955 <= cov_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                data_V_load_6_reg_904 <= data_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln35_fu_405_p2 = ap_const_lv1_0))) then
                mean_V_addr_reg_775 <= zext_ln35_fu_396_p1(6 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                mul_ln691_reg_909 <= grp_fu_656_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                sub_ln692_reg_834 <= sub_ln692_fu_520_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                trunc_ln208_reg_757 <= trunc_ln208_fu_386_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                trunc_ln693_2_reg_919 <= grp_fu_650_p2(256 downto 138);
            end if;
        end if;
    end process;
    tmp_cast_reg_731(5 downto 0) <= "000000";
    zext_ln35_1_reg_767(11 downto 7) <= "00000";
    tmp_13_cast_reg_803(5 downto 0) <= "000000";
    zext_ln44_reg_816(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln50_reg_844(11 downto 7) <= "00000";
    tmp_15_cast_reg_850(5 downto 0) <= "000000";
    zext_ln50_1_reg_863(11 downto 7) <= "00000";
    tmp_16_cast_reg_929(5 downto 0) <= "000000";
    zext_ln208_2_reg_942(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln30_fu_380_p2, ap_CS_fsm_state6, icmp_ln35_fu_405_p2, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, icmp_ln51_fu_640_p2, ap_CS_fsm_state31, ap_CS_fsm_state32, icmp_ln29_fu_353_p2, icmp_ln38_fu_439_p2, icmp_ln44_fu_510_p2, icmp_ln43_fu_480_p2, icmp_ln48_fu_596_p2, icmp_ln47_fu_548_p2, icmp_ln58_fu_720_p2, icmp_ln57_fu_694_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln29_fu_353_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln30_fu_380_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln35_fu_405_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln38_fu_439_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state10 => 
                if (((icmp_ln43_fu_480_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                if (((icmp_ln44_fu_510_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state15 => 
                if (((icmp_ln47_fu_548_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                if (((icmp_ln48_fu_596_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                if (((icmp_ln51_fu_640_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state31 => 
                if (((icmp_ln57_fu_694_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state32 => 
                if (((icmp_ln58_fu_720_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln208_fu_710_p2 <= std_logic_vector(unsigned(tmp_16_cast_reg_929) + unsigned(zext_ln208_fu_706_p1));
    add_ln215_2_fu_630_p2 <= std_logic_vector(unsigned(tmp_20_cast_fu_612_p3) + unsigned(zext_ln50_1_reg_863));
    add_ln215_fu_620_p2 <= std_logic_vector(unsigned(tmp_20_cast_fu_612_p3) + unsigned(zext_ln50_reg_844));
    add_ln29_fu_335_p2 <= std_logic_vector(unsigned(i_reg_185) + unsigned(ap_const_lv7_1));
    add_ln30_fu_359_p2 <= std_logic_vector(unsigned(j_5_reg_196) + unsigned(ap_const_lv7_1));
    add_ln31_fu_369_p2 <= std_logic_vector(unsigned(tmp_cast_reg_731) + unsigned(zext_ln31_fu_365_p1));
    add_ln35_fu_390_p2 <= std_logic_vector(unsigned(j_reg_207) + unsigned(ap_const_lv7_1));
    add_ln38_fu_411_p2 <= std_logic_vector(unsigned(i_6_reg_218) + unsigned(ap_const_lv7_1));
    add_ln43_fu_462_p2 <= std_logic_vector(unsigned(i_5_reg_241) + unsigned(ap_const_lv7_1));
    add_ln44_fu_486_p2 <= std_logic_vector(unsigned(j_6_reg_252) + unsigned(ap_const_lv7_1));
    add_ln47_fu_526_p2 <= std_logic_vector(unsigned(i_7_reg_263) + unsigned(ap_const_lv7_1));
    add_ln48_fu_554_p2 <= std_logic_vector(unsigned(j_7_reg_274) + unsigned(ap_const_lv7_1));
    add_ln50_fu_564_p2 <= std_logic_vector(unsigned(tmp_15_cast_reg_850) + unsigned(zext_ln50_1_fu_560_p1));
    add_ln51_fu_602_p2 <= std_logic_vector(unsigned(k_reg_285) + unsigned(ap_const_lv7_1));
    add_ln54_fu_586_p2 <= std_logic_vector(unsigned(tmp_17_cast_fu_578_p3) + unsigned(zext_ln50_reg_844));
    add_ln57_fu_676_p2 <= std_logic_vector(unsigned(i_8_reg_308) + unsigned(ap_const_lv7_1));
    add_ln58_fu_700_p2 <= std_logic_vector(unsigned(j_8_reg_319) + unsigned(ap_const_lv7_1));
    add_ln691_2_fu_661_p2 <= std_logic_vector(unsigned(mul_ln691_reg_909) + unsigned(conv3_i2112_reg_296));
    add_ln691_3_fu_429_p2 <= std_logic_vector(unsigned(tmp_14_cast_fu_421_p3) + unsigned(zext_ln35_1_reg_767));
    add_ln691_fu_456_p2 <= std_logic_vector(signed(reg_330) + signed(add_i3113_reg_229));
    add_ln692_fu_500_p2 <= std_logic_vector(unsigned(tmp_13_cast_reg_803) + unsigned(zext_ln692_fu_496_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state31, icmp_ln57_fu_694_p2)
    begin
        if ((((icmp_ln57_fu_694_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state31)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state31, icmp_ln57_fu_694_p2)
    begin
        if (((icmp_ln57_fu_694_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    cov_V_address0_assign_proc : process(cov_V_addr_reg_868, cov_V_addr_4_reg_873, ap_CS_fsm_state32, zext_ln208_2_fu_715_p1, ap_CS_fsm_state30, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            cov_V_address0 <= zext_ln208_2_fu_715_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            cov_V_address0 <= cov_V_addr_4_reg_873;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            cov_V_address0 <= cov_V_addr_reg_868;
        else 
            cov_V_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    cov_V_ce0_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state30, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            cov_V_ce0 <= ap_const_logic_1;
        else 
            cov_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cov_V_we0_assign_proc : process(ap_CS_fsm_state30, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            cov_V_we0 <= ap_const_logic_1;
        else 
            cov_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_V_address0_assign_proc : process(data_V_addr_reg_744, ap_CS_fsm_state7, ap_CS_fsm_state11, data_V_addr_6_reg_821, ap_CS_fsm_state17, ap_CS_fsm_state5, ap_CS_fsm_state14, zext_ln691_fu_434_p1, zext_ln692_2_fu_505_p1, zext_ln215_2_fu_635_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            data_V_address0 <= zext_ln215_2_fu_635_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            data_V_address0 <= data_V_addr_6_reg_821;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            data_V_address0 <= zext_ln692_2_fu_505_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            data_V_address0 <= zext_ln691_fu_434_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            data_V_address0 <= data_V_addr_reg_744;
        else 
            data_V_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;

    data_V_address1 <= zext_ln215_fu_625_p1(12 - 1 downto 0);

    data_V_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state17, ap_CS_fsm_state5, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            data_V_ce0 <= ap_const_logic_1;
        else 
            data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_V_ce1_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            data_V_ce1 <= ap_const_logic_1;
        else 
            data_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    data_V_d0_assign_proc : process(trunc_ln208_reg_757, sub_ln692_reg_834, ap_CS_fsm_state5, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            data_V_d0 <= sub_ln692_reg_834;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            data_V_d0 <= trunc_ln208_reg_757;
        else 
            data_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data_V_we0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            data_V_we0 <= ap_const_logic_1;
        else 
            data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_650_p0 <= grp_fu_650_p00(128 - 1 downto 0);
    grp_fu_650_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(conv3_i2112_reg_296),257));
    grp_fu_650_p1 <= ap_const_lv257_lc_3(130 - 1 downto 0);
    icmp_ln29_fu_353_p2 <= "1" when (i_reg_185 = ap_const_lv7_40) else "0";
    icmp_ln30_fu_380_p2 <= "1" when (j_5_reg_196 = ap_const_lv7_40) else "0";
    icmp_ln35_fu_405_p2 <= "1" when (j_reg_207 = ap_const_lv7_40) else "0";
    icmp_ln38_fu_439_p2 <= "1" when (i_6_reg_218 = ap_const_lv7_40) else "0";
    icmp_ln43_fu_480_p2 <= "1" when (i_5_reg_241 = ap_const_lv7_40) else "0";
    icmp_ln44_fu_510_p2 <= "1" when (j_6_reg_252 = ap_const_lv7_40) else "0";
    icmp_ln47_fu_548_p2 <= "1" when (i_7_reg_263 = ap_const_lv7_40) else "0";
    icmp_ln48_fu_596_p2 <= "1" when (j_7_reg_274 = ap_const_lv7_40) else "0";
    icmp_ln51_fu_640_p2 <= "1" when (k_reg_285 = ap_const_lv7_40) else "0";
    icmp_ln57_fu_694_p2 <= "1" when (i_8_reg_308 = ap_const_lv7_40) else "0";
    icmp_ln58_fu_720_p2 <= "1" when (j_8_reg_319 = ap_const_lv7_40) else "0";

    mean_V_address0_assign_proc : process(ap_CS_fsm_state12, mean_V_addr_reg_775, ap_CS_fsm_state7, zext_ln44_reg_816)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            mean_V_address0 <= zext_ln44_reg_816(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            mean_V_address0 <= mean_V_addr_reg_775;
        else 
            mean_V_address0 <= "XXXXXX";
        end if; 
    end process;


    mean_V_ce0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            mean_V_ce0 <= ap_const_logic_1;
        else 
            mean_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mean_V_d0 <= add_i3113_reg_229(127 downto 10);
    mean_V_load_cast_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mean_V_q0),128));

    mean_V_we0_assign_proc : process(ap_CS_fsm_state7, icmp_ln38_fu_439_p2)
    begin
        if (((icmp_ln38_fu_439_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            mean_V_we0 <= ap_const_logic_1;
        else 
            mean_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln692_fu_520_p2 <= std_logic_vector(signed(reg_330) - signed(mean_V_load_cast_fu_516_p1));
    tmp_13_cast_fu_472_p3 <= (trunc_ln692_fu_468_p1 & ap_const_lv6_0);
    tmp_14_cast_fu_421_p3 <= (trunc_ln691_fu_417_p1 & ap_const_lv6_0);
    tmp_15_cast_fu_540_p3 <= (trunc_ln50_fu_536_p1 & ap_const_lv6_0);
    tmp_16_cast_fu_686_p3 <= (trunc_ln208_1_fu_682_p1 & ap_const_lv6_0);
    tmp_17_cast_fu_578_p3 <= (trunc_ln54_fu_574_p1 & ap_const_lv6_0);
    tmp_20_cast_fu_612_p3 <= (trunc_ln215_fu_608_p1 & ap_const_lv6_0);
    tmp_cast_fu_345_p3 <= (trunc_ln31_fu_341_p1 & ap_const_lv6_0);
    trunc_ln208_1_fu_682_p1 <= i_8_reg_308(6 - 1 downto 0);
    trunc_ln208_fu_386_p1 <= xout_q0(128 - 1 downto 0);
    trunc_ln215_fu_608_p1 <= k_reg_285(6 - 1 downto 0);
    trunc_ln31_fu_341_p1 <= i_reg_185(6 - 1 downto 0);
    trunc_ln50_fu_536_p1 <= i_7_reg_263(6 - 1 downto 0);
    trunc_ln54_fu_574_p1 <= j_7_reg_274(6 - 1 downto 0);
    trunc_ln691_fu_417_p1 <= i_6_reg_218(6 - 1 downto 0);
    trunc_ln692_fu_468_p1 <= i_5_reg_241(6 - 1 downto 0);
    xin_address0 <= zext_ln208_2_reg_942(12 - 1 downto 0);

    xin_ce0_assign_proc : process(ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            xin_ce0 <= ap_const_logic_1;
        else 
            xin_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    xin_d0 <= cov_V_load_reg_955;

    xin_we0_assign_proc : process(ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            xin_we0 <= ap_const_logic_1;
        else 
            xin_we0 <= ap_const_logic_0;
        end if; 
    end process;

    xout_address0 <= zext_ln31_1_fu_374_p1(12 - 1 downto 0);

    xout_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            xout_ce0 <= ap_const_logic_1;
        else 
            xout_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln208_2_fu_715_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln208_fu_710_p2),64));
    zext_ln208_fu_706_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_8_reg_319),12));
    zext_ln215_2_fu_635_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln215_2_fu_630_p2),64));
    zext_ln215_fu_625_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln215_fu_620_p2),64));
    zext_ln31_1_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln31_fu_369_p2),64));
    zext_ln31_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_5_reg_196),12));
    zext_ln35_1_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_207),12));
    zext_ln35_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_207),64));
    zext_ln44_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_6_reg_252),64));
    zext_ln50_1_fu_560_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_7_reg_274),12));
    zext_ln50_2_fu_569_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln50_fu_564_p2),64));
    zext_ln50_fu_532_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_7_reg_263),12));
    zext_ln54_fu_591_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln54_fu_586_p2),64));
    zext_ln691_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln691_3_fu_429_p2),64));
    zext_ln692_2_fu_505_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln692_fu_500_p2),64));
    zext_ln692_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_6_reg_252),12));
end behav;
