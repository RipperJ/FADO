#include <ap_int.h>
#include <hls_stream.h>

/* Data Type */
typedef float A_t1;
typedef float B_t1;
typedef float C_t1;
typedef float D_t1;
typedef ap_uint<512> A_t16;
typedef ap_uint<256> A_t8;
typedef ap_uint<512> B_t16;
typedef ap_uint<256> B_t8;
typedef ap_uint<512> C_t16;
typedef ap_uint<256> C_t8;
typedef ap_uint<512> D_t16;
typedef ap_uint<128> D_t4;
typedef ap_uint<128> DATA_TYPE;
/* Data Type */

void nondf_kernel_cov_x0(DATA_TYPE float_n, ap_uint<512> xout[4096], ap_uint<512> xin[4096]) {
#pragma HLS INLINE off
#pragma HLS INTERFACE ap_memory port = xout
#pragma HLS INTERFACE ap_memory port = xin
    int i, j, k;
    DATA_TYPE mean[64];
    DATA_TYPE data[64][64];
    DATA_TYPE cov[64][64];

nondf_kernel_cov_x0_loop_1:     for (i = 0; i < 64; i++) {     // SKIP_DSE
nondf_kernel_cov_x0_loop_2:         for (j = 0; j < 64; j++) { // SKIP_DSE
            data[i][j] = xout[64 * i + j];
        }
    }

nondf_kernel_cov_x0_loop_3:     for (j = 0; j < 64; j++) // {"mean": 1, "data": 2}
    {
        mean[j] = 0;
nondf_kernel_cov_x0_loop_4:         for (i = 0; i < 64; i++) // {"mean": 1, "data": 1}
            mean[j] += data[i][j];
        mean[j] /= float_n;
    }

nondf_kernel_cov_x0_loop_5:     for (i = 0; i < 64; i++)     // {"data": 1}
nondf_kernel_cov_x0_loop_6:         for (j = 0; j < 64; j++) // {"mean": 1, "data": 2}
            data[i][j] -= mean[j];

nondf_kernel_cov_x0_loop_7:     for (i = 0; i < 64; i++)     // {"data": 2, "cov": 2, "cov": 1}
nondf_kernel_cov_x0_loop_8:         for (j = 0; j < 64; j++) // {"data": 2, "cov": 2, "cov": 1}
        {
            cov[i][j] = 0;
nondf_kernel_cov_x0_loop_9:             for (k = 0; k < 64; k++) // {"data": 1}
                cov[i][j] += data[k][i] * data[k][j];
            cov[i][j] /= (float_n - 1);
            cov[j][i] = cov[i][j];
        }

nondf_kernel_cov_x0_loop_10:     for (i = 0; i < 64; i++) {     // SKIP_DSE
nondf_kernel_cov_x0_loop_11:         for (j = 0; j < 64; j++) { // SKIP_DSE
            xin[64 * i + j] = cov[i][j];
        }
    }
}

void nondf_kernel_cov_x1(DATA_TYPE float_n, ap_uint<512> xout[4096], ap_uint<512> xin[4096]) {
#pragma HLS INLINE off
#pragma HLS INTERFACE ap_memory port = xout
#pragma HLS INTERFACE ap_memory port = xin
    int i, j, k;
    DATA_TYPE mean[64];
    DATA_TYPE data[64][64];
    DATA_TYPE cov[64][64];

nondf_kernel_cov_x1_loop_1:     for (i = 0; i < 64; i++) {     // SKIP_DSE
nondf_kernel_cov_x1_loop_2:         for (j = 0; j < 64; j++) { // SKIP_DSE
            data[i][j] = xout[64 * i + j];
        }
    }

nondf_kernel_cov_x1_loop_3:     for (j = 0; j < 64; j++) // {"mean": 1, "data": 2}
    {
        mean[j] = 0;
nondf_kernel_cov_x1_loop_4:         for (i = 0; i < 64; i++) // {"mean": 1, "data": 1}
            mean[j] += data[i][j];
        mean[j] /= float_n;
    }

nondf_kernel_cov_x1_loop_5:     for (i = 0; i < 64; i++)     // {"data": 1}
nondf_kernel_cov_x1_loop_6:         for (j = 0; j < 64; j++) // {"mean": 1, "data": 2}
            data[i][j] -= mean[j];

nondf_kernel_cov_x1_loop_7:     for (i = 0; i < 64; i++)     // {"data": 2, "cov": 2, "cov": 1}
nondf_kernel_cov_x1_loop_8:         for (j = 0; j < 64; j++) // {"data": 2, "cov": 2, "cov": 1}
        {
            cov[i][j] = 0;
nondf_kernel_cov_x1_loop_9:             for (k = 0; k < 64; k++) // {"data": 1}
                cov[i][j] += data[k][i] * data[k][j];
            cov[i][j] /= (float_n - 1);
            cov[j][i] = cov[i][j];
        }

nondf_kernel_cov_x1_loop_10:     for (i = 0; i < 64; i++) {     // SKIP_DSE
nondf_kernel_cov_x1_loop_11:         for (j = 0; j < 64; j++) { // SKIP_DSE
            xin[64 * i + j] = cov[i][j];
        }
    }
}

/* Module Definition */
void A_IO_L3_in_x0(hls::stream<A_t16> &fifo_A_in, hls::stream<A_t16> &fifo_A_local_out) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    /* Variable Declaration */

A_IO_L3_in_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
A_IO_L3_in_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
A_IO_L3_in_x0_loop_3:             for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                // array
                // io_L3
A_IO_L3_in_x0_loop_4:                 for (ap_uint<3> c3 = 0; c3 <= 3; c3 += 1) {
                    // io_L2
A_IO_L3_in_x0_loop_5:                     for (ap_uint<5> c4 = 0; c4 <= 15; c4 += 1)
A_IO_L3_in_x0_loop_6:                         for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1) {
                            // access_coalesce
                            // access_serialize
A_IO_L3_in_x0_loop_7:                             for (ap_uint<5> c6 = 0; c6 <= 15; c6 += 1) {

                                {
                                    A_t16 in_data;
                                    A_t16 out_data;
                                    in_data = fifo_A_in.read();
                                    out_data = in_data;
                                    fifo_A_local_out.write(out_data);
                                }
                            }
                        }
                }
            }
}
/* Module Definition */

/* Module Definition */
void A_IO_L3_in_serialize_x0(A_t16 *A, hls::stream<A_t16> &fifo_A_local_out) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    /* Variable Declaration */

A_IO_L3_in_serialize_x0_loop_1:     for (ap_uint<24> i = 0; i < 1024; i++) {

        A_t16 fifo_data;
        fifo_data = A[i];
        fifo_A_local_out.write(fifo_data);
    }
}
/* Module Definition */

/* Module Definition */
void A_IO_L2_in_0_x0(int idx, hls::stream<A_t16> &fifo_A_in, hls::stream<A_t16> &fifo_A_out, hls::stream<A_t8> &fifo_A_local_out) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx; // module id
    A_t16 local_A_ping[16][2][16];
    A_t16 local_A_pong[16][2][16];
    bool arb = 0;
    bool inter_trans_en = 1;
    bool intra_trans_en = 0;
    int c0, c0_prev;
    int c1, c1_prev;
    int c2, c2_prev;
    /* Variable Declaration */

A_IO_L2_in_0_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
A_IO_L2_in_0_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
A_IO_L2_in_0_x0_loop_3:             for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                // array
                // io_L3
                {
                    if (arb == 0) {
                        if (inter_trans_en) {
A_IO_L2_in_0_x0_loop_4:                             for (ap_uint<3> c3 = p0; c3 <= 3; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 2 max = 4
                                // io_L2
                                if (c3 == p0) {
A_IO_L2_in_0_x0_loop_5:                                     for (ap_uint<5> c4 = 0; c4 <= 15; c4 += 1)
A_IO_L2_in_0_x0_loop_6:                                         for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1) {
                                            // access_coalesce
A_IO_L2_in_0_x0_loop_7:                                             for (ap_uint<5> c6 = 0; c6 <= 15; c6 += 1) {

                                                {
                                                    A_t16 in_data;
                                                    A_t16 out_data;
                                                    in_data = fifo_A_in.read();
                                                    out_data = in_data;
                                                    local_A_pong[c4][c5][c6] = out_data;
                                                }
                                            }
                                        }
                                } else {
A_IO_L2_in_0_x0_loop_8:                                     for (ap_uint<5> c4 = 0; c4 <= 15; c4 += 1)
A_IO_L2_in_0_x0_loop_9:                                         for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1) {
                                            // access_coalesce
A_IO_L2_in_0_x0_loop_10:                                             for (ap_uint<5> c6 = 0; c6 <= 15; c6 += 1) {

                                                {
                                                    A_t16 in_data;
                                                    A_t16 out_data;
                                                    in_data = fifo_A_in.read();
                                                    out_data = in_data;
                                                    fifo_A_out.write(out_data);
                                                }
                                            }
                                        }
                                }
                            }
                        }
                        A_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                        /* Variable Declaration */

                        if (intra_trans_en) {
A_IO_L2_in_0_x0_loop_11:                             for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
A_IO_L2_in_0_x0_loop_12:                                 for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                    // latency
A_IO_L2_in_0_x0_loop_13:                                     for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                        // latency
A_IO_L2_in_0_x0_loop_14:                                         for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                            // simd
                                            {
                                                A_t16 in_data;
                                                A_t8 out_data;
                                                in_data = local_A_ping[c8][c5][8 * c6 / 16];
A_IO_L2_in_0_x0_loop_15:                                                 for (ap_uint<2> n = 0; n < 2; n++) {
                                                    data_split[n] = in_data(255, 0);
                                                    in_data = in_data >> 256;
                                                }
                                                int split_idx = (c6) % 2;
                                                out_data = data_split[split_idx];
                                                fifo_A_local_out.write(out_data);
                                            }
                                        }
                                    }
                                }
                        }
                    } else {
                        if (inter_trans_en) {
A_IO_L2_in_0_x0_loop_16:                             for (ap_uint<3> c3 = p0; c3 <= 3; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 2 max = 4
                                // io_L2
                                if (c3 == p0) {
A_IO_L2_in_0_x0_loop_17:                                     for (ap_uint<5> c4 = 0; c4 <= 15; c4 += 1)
A_IO_L2_in_0_x0_loop_18:                                         for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1) {
                                            // access_coalesce
A_IO_L2_in_0_x0_loop_19:                                             for (ap_uint<5> c6 = 0; c6 <= 15; c6 += 1) {

                                                {
                                                    A_t16 in_data;
                                                    A_t16 out_data;
                                                    in_data = fifo_A_in.read();
                                                    out_data = in_data;
                                                    local_A_ping[c4][c5][c6] = out_data;
                                                }
                                            }
                                        }
                                } else {
A_IO_L2_in_0_x0_loop_20:                                     for (ap_uint<5> c4 = 0; c4 <= 15; c4 += 1)
A_IO_L2_in_0_x0_loop_21:                                         for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1) {
                                            // access_coalesce
A_IO_L2_in_0_x0_loop_22:                                             for (ap_uint<5> c6 = 0; c6 <= 15; c6 += 1) {

                                                {
                                                    A_t16 in_data;
                                                    A_t16 out_data;
                                                    in_data = fifo_A_in.read();
                                                    out_data = in_data;
                                                    fifo_A_out.write(out_data);
                                                }
                                            }
                                        }
                                }
                            }
                        }
                        A_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                        /* Variable Declaration */

                        if (intra_trans_en) {
A_IO_L2_in_0_x0_loop_23:                             for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
A_IO_L2_in_0_x0_loop_24:                                 for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                    // latency
A_IO_L2_in_0_x0_loop_25:                                     for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                        // latency
A_IO_L2_in_0_x0_loop_26:                                         for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                            // simd
                                            {
                                                A_t16 in_data;
                                                A_t8 out_data;
                                                in_data = local_A_pong[c8][c5][8 * c6 / 16];
A_IO_L2_in_0_x0_loop_27:                                                 for (ap_uint<2> n = 0; n < 2; n++) {
                                                    data_split[n] = in_data(255, 0);
                                                    in_data = in_data >> 256;
                                                }
                                                int split_idx = (c6) % 2;
                                                out_data = data_split[split_idx];
                                                fifo_A_local_out.write(out_data);
                                            }
                                        }
                                    }
                                }
                        }
                    }
                    intra_trans_en = 1;
                    arb = !arb;
                    c0_prev = c0;
                    c1_prev = c1;
                    c2_prev = c2;
                }
            }
    if (arb == 0) {
        A_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
        /* Variable Declaration */

        if (intra_trans_en) {
A_IO_L2_in_0_x0_loop_28:             for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
A_IO_L2_in_0_x0_loop_29:                 for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                    // latency
A_IO_L2_in_0_x0_loop_30:                     for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                        // latency
A_IO_L2_in_0_x0_loop_31:                         for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                            // simd
                            {
                                A_t16 in_data;
                                A_t8 out_data;
                                in_data = local_A_ping[c8][c5][8 * c6 / 16];
A_IO_L2_in_0_x0_loop_32:                                 for (ap_uint<2> n = 0; n < 2; n++) {
                                    data_split[n] = in_data(255, 0);
                                    in_data = in_data >> 256;
                                }
                                int split_idx = (c6) % 2;
                                out_data = data_split[split_idx];
                                fifo_A_local_out.write(out_data);
                            }
                        }
                    }
                }
        }
    } else {
        A_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
        /* Variable Declaration */

        if (intra_trans_en) {
A_IO_L2_in_0_x0_loop_33:             for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
A_IO_L2_in_0_x0_loop_34:                 for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                    // latency
A_IO_L2_in_0_x0_loop_35:                     for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                        // latency
A_IO_L2_in_0_x0_loop_36:                         for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                            // simd
                            {
                                A_t16 in_data;
                                A_t8 out_data;
                                in_data = local_A_pong[c8][c5][8 * c6 / 16];
A_IO_L2_in_0_x0_loop_37:                                 for (ap_uint<2> n = 0; n < 2; n++) {
                                    data_split[n] = in_data(255, 0);
                                    in_data = in_data >> 256;
                                }
                                int split_idx = (c6) % 2;
                                out_data = data_split[split_idx];
                                fifo_A_local_out.write(out_data);
                            }
                        }
                    }
                }
        }
    }
}
/* Module Definition */

/* Module Definition */
void A_IO_L2_in_1_x0(int idx, hls::stream<A_t16> &fifo_A_in, hls::stream<A_t16> &fifo_A_out, hls::stream<A_t8> &fifo_A_local_out) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx; // module id
    A_t16 local_A_ping[16][2][16];
    A_t16 local_A_pong[16][2][16];
    bool arb = 0;
    bool inter_trans_en = 1;
    bool intra_trans_en = 0;
    int c0, c0_prev;
    int c1, c1_prev;
    int c2, c2_prev;
    /* Variable Declaration */

A_IO_L2_in_1_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
A_IO_L2_in_1_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
A_IO_L2_in_1_x0_loop_3:             for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                // array
                // io_L3
                {
                    if (arb == 0) {
                        if (inter_trans_en) {
A_IO_L2_in_1_x0_loop_4:                             for (ap_uint<3> c3 = p0; c3 <= 3; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 2 max = 4
                                // io_L2
                                if (c3 == p0) {
A_IO_L2_in_1_x0_loop_5:                                     for (ap_uint<5> c4 = 0; c4 <= 15; c4 += 1)
A_IO_L2_in_1_x0_loop_6:                                         for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1) {
                                            // access_coalesce
A_IO_L2_in_1_x0_loop_7:                                             for (ap_uint<5> c6 = 0; c6 <= 15; c6 += 1) {

                                                {
                                                    A_t16 in_data;
                                                    A_t16 out_data;
                                                    in_data = fifo_A_in.read();
                                                    out_data = in_data;
                                                    local_A_pong[c4][c5][c6] = out_data;
                                                }
                                            }
                                        }
                                } else {
A_IO_L2_in_1_x0_loop_8:                                     for (ap_uint<5> c4 = 0; c4 <= 15; c4 += 1)
A_IO_L2_in_1_x0_loop_9:                                         for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1) {
                                            // access_coalesce
A_IO_L2_in_1_x0_loop_10:                                             for (ap_uint<5> c6 = 0; c6 <= 15; c6 += 1) {

                                                {
                                                    A_t16 in_data;
                                                    A_t16 out_data;
                                                    in_data = fifo_A_in.read();
                                                    out_data = in_data;
                                                    fifo_A_out.write(out_data);
                                                }
                                            }
                                        }
                                }
                            }
                        }
                        A_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                        /* Variable Declaration */

                        if (intra_trans_en) {
A_IO_L2_in_1_x0_loop_11:                             for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
A_IO_L2_in_1_x0_loop_12:                                 for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                    // latency
A_IO_L2_in_1_x0_loop_13:                                     for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                        // latency
A_IO_L2_in_1_x0_loop_14:                                         for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                            // simd
                                            {
                                                A_t16 in_data;
                                                A_t8 out_data;
                                                in_data = local_A_ping[c8][c5][8 * c6 / 16];
A_IO_L2_in_1_x0_loop_15:                                                 for (ap_uint<2> n = 0; n < 2; n++) {
                                                    data_split[n] = in_data(255, 0);
                                                    in_data = in_data >> 256;
                                                }
                                                int split_idx = (c6) % 2;
                                                out_data = data_split[split_idx];
                                                fifo_A_local_out.write(out_data);
                                            }
                                        }
                                    }
                                }
                        }
                    } else {
                        if (inter_trans_en) {
A_IO_L2_in_1_x0_loop_16:                             for (ap_uint<3> c3 = p0; c3 <= 3; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 2 max = 4
                                // io_L2
                                if (c3 == p0) {
A_IO_L2_in_1_x0_loop_17:                                     for (ap_uint<5> c4 = 0; c4 <= 15; c4 += 1)
A_IO_L2_in_1_x0_loop_18:                                         for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1) {
                                            // access_coalesce
A_IO_L2_in_1_x0_loop_19:                                             for (ap_uint<5> c6 = 0; c6 <= 15; c6 += 1) {

                                                {
                                                    A_t16 in_data;
                                                    A_t16 out_data;
                                                    in_data = fifo_A_in.read();
                                                    out_data = in_data;
                                                    local_A_ping[c4][c5][c6] = out_data;
                                                }
                                            }
                                        }
                                } else {
A_IO_L2_in_1_x0_loop_20:                                     for (ap_uint<5> c4 = 0; c4 <= 15; c4 += 1)
A_IO_L2_in_1_x0_loop_21:                                         for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1) {
                                            // access_coalesce
A_IO_L2_in_1_x0_loop_22:                                             for (ap_uint<5> c6 = 0; c6 <= 15; c6 += 1) {

                                                {
                                                    A_t16 in_data;
                                                    A_t16 out_data;
                                                    in_data = fifo_A_in.read();
                                                    out_data = in_data;
                                                    fifo_A_out.write(out_data);
                                                }
                                            }
                                        }
                                }
                            }
                        }
                        A_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                        /* Variable Declaration */

                        if (intra_trans_en) {
A_IO_L2_in_1_x0_loop_23:                             for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
A_IO_L2_in_1_x0_loop_24:                                 for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                    // latency
A_IO_L2_in_1_x0_loop_25:                                     for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                        // latency
A_IO_L2_in_1_x0_loop_26:                                         for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                            // simd
                                            {
                                                A_t16 in_data;
                                                A_t8 out_data;
                                                in_data = local_A_pong[c8][c5][8 * c6 / 16];
A_IO_L2_in_1_x0_loop_27:                                                 for (ap_uint<2> n = 0; n < 2; n++) {
                                                    data_split[n] = in_data(255, 0);
                                                    in_data = in_data >> 256;
                                                }
                                                int split_idx = (c6) % 2;
                                                out_data = data_split[split_idx];
                                                fifo_A_local_out.write(out_data);
                                            }
                                        }
                                    }
                                }
                        }
                    }
                    intra_trans_en = 1;
                    arb = !arb;
                    c0_prev = c0;
                    c1_prev = c1;
                    c2_prev = c2;
                }
            }
    if (arb == 0) {
        A_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
        /* Variable Declaration */

        if (intra_trans_en) {
A_IO_L2_in_1_x0_loop_28:             for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
A_IO_L2_in_1_x0_loop_29:                 for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                    // latency
A_IO_L2_in_1_x0_loop_30:                     for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                        // latency
A_IO_L2_in_1_x0_loop_31:                         for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                            // simd
                            {
                                A_t16 in_data;
                                A_t8 out_data;
                                in_data = local_A_ping[c8][c5][8 * c6 / 16];
A_IO_L2_in_1_x0_loop_32:                                 for (ap_uint<2> n = 0; n < 2; n++) {
                                    data_split[n] = in_data(255, 0);
                                    in_data = in_data >> 256;
                                }
                                int split_idx = (c6) % 2;
                                out_data = data_split[split_idx];
                                fifo_A_local_out.write(out_data);
                            }
                        }
                    }
                }
        }
    } else {
        A_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
        /* Variable Declaration */

        if (intra_trans_en) {
A_IO_L2_in_1_x0_loop_33:             for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
A_IO_L2_in_1_x0_loop_34:                 for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                    // latency
A_IO_L2_in_1_x0_loop_35:                     for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                        // latency
A_IO_L2_in_1_x0_loop_36:                         for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                            // simd
                            {
                                A_t16 in_data;
                                A_t8 out_data;
                                in_data = local_A_pong[c8][c5][8 * c6 / 16];
A_IO_L2_in_1_x0_loop_37:                                 for (ap_uint<2> n = 0; n < 2; n++) {
                                    data_split[n] = in_data(255, 0);
                                    in_data = in_data >> 256;
                                }
                                int split_idx = (c6) % 2;
                                out_data = data_split[split_idx];
                                fifo_A_local_out.write(out_data);
                            }
                        }
                    }
                }
        }
    }
}
/* Module Definition */

/* Module Definition */
void A_IO_L2_in_2_x0(int idx, hls::stream<A_t16> &fifo_A_in, hls::stream<A_t16> &fifo_A_out, hls::stream<A_t8> &fifo_A_local_out) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx; // module id
    A_t16 local_A_ping[16][2][16];
    A_t16 local_A_pong[16][2][16];
    bool arb = 0;
    bool inter_trans_en = 1;
    bool intra_trans_en = 0;
    int c0, c0_prev;
    int c1, c1_prev;
    int c2, c2_prev;
    /* Variable Declaration */

A_IO_L2_in_2_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
A_IO_L2_in_2_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
A_IO_L2_in_2_x0_loop_3:             for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                // array
                // io_L3
                {
                    if (arb == 0) {
                        if (inter_trans_en) {
A_IO_L2_in_2_x0_loop_4:                             for (ap_uint<3> c3 = p0; c3 <= 3; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 2 max = 4
                                // io_L2
                                if (c3 == p0) {
A_IO_L2_in_2_x0_loop_5:                                     for (ap_uint<5> c4 = 0; c4 <= 15; c4 += 1)
A_IO_L2_in_2_x0_loop_6:                                         for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1) {
                                            // access_coalesce
A_IO_L2_in_2_x0_loop_7:                                             for (ap_uint<5> c6 = 0; c6 <= 15; c6 += 1) {

                                                {
                                                    A_t16 in_data;
                                                    A_t16 out_data;
                                                    in_data = fifo_A_in.read();
                                                    out_data = in_data;
                                                    local_A_pong[c4][c5][c6] = out_data;
                                                }
                                            }
                                        }
                                } else {
A_IO_L2_in_2_x0_loop_8:                                     for (ap_uint<5> c4 = 0; c4 <= 15; c4 += 1)
A_IO_L2_in_2_x0_loop_9:                                         for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1) {
                                            // access_coalesce
A_IO_L2_in_2_x0_loop_10:                                             for (ap_uint<5> c6 = 0; c6 <= 15; c6 += 1) {

                                                {
                                                    A_t16 in_data;
                                                    A_t16 out_data;
                                                    in_data = fifo_A_in.read();
                                                    out_data = in_data;
                                                    fifo_A_out.write(out_data);
                                                }
                                            }
                                        }
                                }
                            }
                        }
                        A_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                        /* Variable Declaration */

                        if (intra_trans_en) {
A_IO_L2_in_2_x0_loop_11:                             for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
A_IO_L2_in_2_x0_loop_12:                                 for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                    // latency
A_IO_L2_in_2_x0_loop_13:                                     for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                        // latency
A_IO_L2_in_2_x0_loop_14:                                         for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                            // simd
                                            {
                                                A_t16 in_data;
                                                A_t8 out_data;
                                                in_data = local_A_ping[c8][c5][8 * c6 / 16];
A_IO_L2_in_2_x0_loop_15:                                                 for (ap_uint<2> n = 0; n < 2; n++) {
                                                    data_split[n] = in_data(255, 0);
                                                    in_data = in_data >> 256;
                                                }
                                                int split_idx = (c6) % 2;
                                                out_data = data_split[split_idx];
                                                fifo_A_local_out.write(out_data);
                                            }
                                        }
                                    }
                                }
                        }
                    } else {
                        if (inter_trans_en) {
A_IO_L2_in_2_x0_loop_16:                             for (ap_uint<3> c3 = p0; c3 <= 3; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 2 max = 4
                                // io_L2
                                if (c3 == p0) {
A_IO_L2_in_2_x0_loop_17:                                     for (ap_uint<5> c4 = 0; c4 <= 15; c4 += 1)
A_IO_L2_in_2_x0_loop_18:                                         for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1) {
                                            // access_coalesce
A_IO_L2_in_2_x0_loop_19:                                             for (ap_uint<5> c6 = 0; c6 <= 15; c6 += 1) {

                                                {
                                                    A_t16 in_data;
                                                    A_t16 out_data;
                                                    in_data = fifo_A_in.read();
                                                    out_data = in_data;
                                                    local_A_ping[c4][c5][c6] = out_data;
                                                }
                                            }
                                        }
                                } else {
A_IO_L2_in_2_x0_loop_20:                                     for (ap_uint<5> c4 = 0; c4 <= 15; c4 += 1)
A_IO_L2_in_2_x0_loop_21:                                         for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1) {
                                            // access_coalesce
A_IO_L2_in_2_x0_loop_22:                                             for (ap_uint<5> c6 = 0; c6 <= 15; c6 += 1) {

                                                {
                                                    A_t16 in_data;
                                                    A_t16 out_data;
                                                    in_data = fifo_A_in.read();
                                                    out_data = in_data;
                                                    fifo_A_out.write(out_data);
                                                }
                                            }
                                        }
                                }
                            }
                        }
                        A_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                        /* Variable Declaration */

                        if (intra_trans_en) {
A_IO_L2_in_2_x0_loop_23:                             for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
A_IO_L2_in_2_x0_loop_24:                                 for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                    // latency
A_IO_L2_in_2_x0_loop_25:                                     for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                        // latency
A_IO_L2_in_2_x0_loop_26:                                         for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                            // simd
                                            {
                                                A_t16 in_data;
                                                A_t8 out_data;
                                                in_data = local_A_pong[c8][c5][8 * c6 / 16];
A_IO_L2_in_2_x0_loop_27:                                                 for (ap_uint<2> n = 0; n < 2; n++) {
                                                    data_split[n] = in_data(255, 0);
                                                    in_data = in_data >> 256;
                                                }
                                                int split_idx = (c6) % 2;
                                                out_data = data_split[split_idx];
                                                fifo_A_local_out.write(out_data);
                                            }
                                        }
                                    }
                                }
                        }
                    }
                    intra_trans_en = 1;
                    arb = !arb;
                    c0_prev = c0;
                    c1_prev = c1;
                    c2_prev = c2;
                }
            }
    if (arb == 0) {
        A_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
        /* Variable Declaration */

        if (intra_trans_en) {
A_IO_L2_in_2_x0_loop_28:             for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
A_IO_L2_in_2_x0_loop_29:                 for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                    // latency
A_IO_L2_in_2_x0_loop_30:                     for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                        // latency
A_IO_L2_in_2_x0_loop_31:                         for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                            // simd
                            {
                                A_t16 in_data;
                                A_t8 out_data;
                                in_data = local_A_ping[c8][c5][8 * c6 / 16];
A_IO_L2_in_2_x0_loop_32:                                 for (ap_uint<2> n = 0; n < 2; n++) {
                                    data_split[n] = in_data(255, 0);
                                    in_data = in_data >> 256;
                                }
                                int split_idx = (c6) % 2;
                                out_data = data_split[split_idx];
                                fifo_A_local_out.write(out_data);
                            }
                        }
                    }
                }
        }
    } else {
        A_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
        /* Variable Declaration */

        if (intra_trans_en) {
A_IO_L2_in_2_x0_loop_33:             for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
A_IO_L2_in_2_x0_loop_34:                 for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                    // latency
A_IO_L2_in_2_x0_loop_35:                     for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                        // latency
A_IO_L2_in_2_x0_loop_36:                         for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                            // simd
                            {
                                A_t16 in_data;
                                A_t8 out_data;
                                in_data = local_A_pong[c8][c5][8 * c6 / 16];
A_IO_L2_in_2_x0_loop_37:                                 for (ap_uint<2> n = 0; n < 2; n++) {
                                    data_split[n] = in_data(255, 0);
                                    in_data = in_data >> 256;
                                }
                                int split_idx = (c6) % 2;
                                out_data = data_split[split_idx];
                                fifo_A_local_out.write(out_data);
                            }
                        }
                    }
                }
        }
    }
}
/* Module Definition */

/* Module Definition */
void A_IO_L2_in_boundary_x0(int idx, hls::stream<A_t16> &fifo_A_in, hls::stream<A_t8> &fifo_A_local_out) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx; // module id
    A_t16 local_A_ping[16][2][16];
    A_t16 local_A_pong[16][2][16];
    bool arb = 0;
    bool inter_trans_en = 1;
    bool intra_trans_en = 0;
    int c0, c0_prev;
    int c1, c1_prev;
    int c2, c2_prev;
    /* Variable Declaration */

    {
A_IO_L2_in_boundary_x0_loop_1:         for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
A_IO_L2_in_boundary_x0_loop_2:             for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
A_IO_L2_in_boundary_x0_loop_3:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // io_L3
                    {
                        if (arb == 0) {
                            if (inter_trans_en) {
A_IO_L2_in_boundary_x0_loop_4:                                 for (ap_uint<3> c3 = p0; c3 <= 3; c3 += 1)
#pragma HLS LOOP_TRIPCOUNT min = 1 max = 1
                                    if (c3 == p0) {
                                        // io_L2
A_IO_L2_in_boundary_x0_loop_5:                                         for (ap_uint<5> c4 = 0; c4 <= 15; c4 += 1)
A_IO_L2_in_boundary_x0_loop_6:                                             for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1) {
                                                // access_coalesce
A_IO_L2_in_boundary_x0_loop_7:                                                 for (ap_uint<5> c6 = 0; c6 <= 15; c6 += 1) {

                                                    {
                                                        A_t16 in_data;
                                                        A_t16 out_data;
                                                        in_data = fifo_A_in.read();
                                                        out_data = in_data;
                                                        local_A_pong[c4][c5][c6] = out_data;
                                                    }
                                                }
                                            }
                                    }
                            }
                            A_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                            /* Variable Declaration */

                            if (intra_trans_en) {
A_IO_L2_in_boundary_x0_loop_8:                                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
A_IO_L2_in_boundary_x0_loop_9:                                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                        // latency
A_IO_L2_in_boundary_x0_loop_10:                                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                            // latency
A_IO_L2_in_boundary_x0_loop_11:                                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                                // simd
                                                {
                                                    A_t16 in_data;
                                                    A_t8 out_data;
                                                    in_data = local_A_ping[c8][c5][8 * c6 / 16];
A_IO_L2_in_boundary_x0_loop_12:                                                     for (ap_uint<2> n = 0; n < 2; n++) {
                                                        data_split[n] = in_data(255, 0);
                                                        in_data = in_data >> 256;
                                                    }
                                                    int split_idx = (c6) % 2;
                                                    out_data = data_split[split_idx];
                                                    fifo_A_local_out.write(out_data);
                                                }
                                            }
                                        }
                                    }
                            }
                        } else {
                            if (inter_trans_en) {
A_IO_L2_in_boundary_x0_loop_13:                                 for (ap_uint<3> c3 = p0; c3 <= 3; c3 += 1)
#pragma HLS LOOP_TRIPCOUNT min = 1 max = 1
                                    if (c3 == p0) {
                                        // io_L2
A_IO_L2_in_boundary_x0_loop_14:                                         for (ap_uint<5> c4 = 0; c4 <= 15; c4 += 1)
A_IO_L2_in_boundary_x0_loop_15:                                             for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1) {
                                                // access_coalesce
A_IO_L2_in_boundary_x0_loop_16:                                                 for (ap_uint<5> c6 = 0; c6 <= 15; c6 += 1) {

                                                    {
                                                        A_t16 in_data;
                                                        A_t16 out_data;
                                                        in_data = fifo_A_in.read();
                                                        out_data = in_data;
                                                        local_A_ping[c4][c5][c6] = out_data;
                                                    }
                                                }
                                            }
                                    }
                            }
                            A_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                            /* Variable Declaration */

                            if (intra_trans_en) {
A_IO_L2_in_boundary_x0_loop_17:                                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
A_IO_L2_in_boundary_x0_loop_18:                                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                        // latency
A_IO_L2_in_boundary_x0_loop_19:                                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                            // latency
A_IO_L2_in_boundary_x0_loop_20:                                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                                // simd
                                                {
                                                    A_t16 in_data;
                                                    A_t8 out_data;
                                                    in_data = local_A_pong[c8][c5][8 * c6 / 16];
A_IO_L2_in_boundary_x0_loop_21:                                                     for (ap_uint<2> n = 0; n < 2; n++) {
                                                        data_split[n] = in_data(255, 0);
                                                        in_data = in_data >> 256;
                                                    }
                                                    int split_idx = (c6) % 2;
                                                    out_data = data_split[split_idx];
                                                    fifo_A_local_out.write(out_data);
                                                }
                                            }
                                        }
                                    }
                            }
                        }
                        intra_trans_en = 1;
                        arb = !arb;
                        c0_prev = c0;
                        c1_prev = c1;
                        c2_prev = c2;
                    }
                }
        if (arb == 0) {
            A_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
            /* Variable Declaration */

            if (intra_trans_en) {
A_IO_L2_in_boundary_x0_loop_22:                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
A_IO_L2_in_boundary_x0_loop_23:                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                        // latency
A_IO_L2_in_boundary_x0_loop_24:                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                            // latency
A_IO_L2_in_boundary_x0_loop_25:                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                // simd
                                {
                                    A_t16 in_data;
                                    A_t8 out_data;
                                    in_data = local_A_ping[c8][c5][8 * c6 / 16];
A_IO_L2_in_boundary_x0_loop_26:                                     for (ap_uint<2> n = 0; n < 2; n++) {
                                        data_split[n] = in_data(255, 0);
                                        in_data = in_data >> 256;
                                    }
                                    int split_idx = (c6) % 2;
                                    out_data = data_split[split_idx];
                                    fifo_A_local_out.write(out_data);
                                }
                            }
                        }
                    }
            }
        } else {
            A_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
            /* Variable Declaration */

            if (intra_trans_en) {
A_IO_L2_in_boundary_x0_loop_27:                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
A_IO_L2_in_boundary_x0_loop_28:                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                        // latency
A_IO_L2_in_boundary_x0_loop_29:                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                            // latency
A_IO_L2_in_boundary_x0_loop_30:                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                // simd
                                {
                                    A_t16 in_data;
                                    A_t8 out_data;
                                    in_data = local_A_pong[c8][c5][8 * c6 / 16];
A_IO_L2_in_boundary_x0_loop_31:                                     for (ap_uint<2> n = 0; n < 2; n++) {
                                        data_split[n] = in_data(255, 0);
                                        in_data = in_data >> 256;
                                    }
                                    int split_idx = (c6) % 2;
                                    out_data = data_split[split_idx];
                                    fifo_A_local_out.write(out_data);
                                }
                            }
                        }
                    }
            }
        }
    }
}
/* Module Definition */

/* Module Definition */
void B_IO_L3_in_x0(hls::stream<B_t8> &fifo_B_in, hls::stream<B_t8> &fifo_B_local_out) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    /* Variable Declaration */

B_IO_L3_in_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
B_IO_L3_in_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
B_IO_L3_in_x0_loop_3:             for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                // array
                // io_L3
B_IO_L3_in_x0_loop_4:                 for (int c3 = 0; c3 <= 7; c3 += 1) {
                    if (c3 > -8 * c1 + 41)
                        break;
                    // io_L2
B_IO_L3_in_x0_loop_5:                     for (ap_uint<2> c4 = 0; c4 <= 1; c4 += 1) {

                        // access_coalesce
                        // access_serialize
                        {
                            B_t8 in_data;
                            B_t8 out_data;
                            in_data = fifo_B_in.read();
                            out_data = in_data;
                            fifo_B_local_out.write(out_data);
                        }
                    }
                }
            }
}
/* Module Definition */

/* Module Definition */
void B_IO_L3_in_serialize_x0(B_t16 *B, hls::stream<B_t8> &fifo_B_local_out) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    /* Variable Declaration */

    B_t8 fifo_data;
    B_t16 mem_data;
B_IO_L3_in_serialize_x0_loop_1:     for (ap_uint<16> i = 0; i < 1024; i++) {

        mem_data = B[i];
B_IO_L3_in_serialize_x0_loop_2:         for (ap_uint<2> p = 0; p < 2; p++) {
            fifo_data = mem_data(255, 0);
            mem_data = mem_data >> 256;
            fifo_B_local_out.write(fifo_data);
        }
    }
}
/* Module Definition */

/* Module Definition */
void B_IO_L2_in_0_x0(int idx, hls::stream<B_t8> &fifo_B_in, hls::stream<B_t8> &fifo_B_out, hls::stream<float> &fifo_B_local_out) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx; // module id
    B_t8 local_B_ping[2][1];
    B_t8 local_B_pong[2][1];
    bool arb = 0;
    bool inter_trans_en = 1;
    bool intra_trans_en = 0;
    int c0, c0_prev;
    int c1, c1_prev;
    int c2, c2_prev;
    /* Variable Declaration */

    {
B_IO_L2_in_0_x0_loop_1:         for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
B_IO_L2_in_0_x0_loop_2:             for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
B_IO_L2_in_0_x0_loop_3:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // io_L3
                    {
                        if (arb == 0) {
                            if (inter_trans_en) {
B_IO_L2_in_0_x0_loop_4:                                 for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 2 max = 8
                                    if (c3 > -8 * c1 + 41)
                                        break;
                                    // io_L2
                                    if (c3 == p0) {
B_IO_L2_in_0_x0_loop_5:                                         for (ap_uint<2> c4 = 0; c4 <= 1; c4 += 1) {

                                            // access_coalesce
                                            {
                                                B_t8 in_data;
                                                B_t8 out_data;
                                                in_data = fifo_B_in.read();
                                                out_data = in_data;
                                                local_B_pong[c4][0] = out_data;
                                            }
                                        }
                                    } else {
B_IO_L2_in_0_x0_loop_6:                                         for (ap_uint<2> c4 = 0; c4 <= 1; c4 += 1) {

                                            // access_coalesce
                                            {
                                                B_t8 in_data;
                                                B_t8 out_data;
                                                in_data = fifo_B_in.read();
                                                out_data = in_data;
                                                fifo_B_out.write(out_data);
                                            }
                                        }
                                    }
                                }
                            }
                            ap_uint<32> data_split[8];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                            /* Variable Declaration */

                            if (intra_trans_en) {
B_IO_L2_in_0_x0_loop_7:                                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_IO_L2_in_0_x0_loop_8:                                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                        // latency
B_IO_L2_in_0_x0_loop_9:                                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                            // latency
B_IO_L2_in_0_x0_loop_10:                                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                                // simd
                                                {
                                                    B_t8 in_data;
                                                    B_t1 out_data;
                                                    in_data = local_B_ping[c5][c7 / 8];
B_IO_L2_in_0_x0_loop_11:                                                     for (ap_uint<4> n = 0; n < 8; n++) {
                                                        data_split[n] = in_data(31, 0);
                                                        in_data = in_data >> 32;
                                                    }
                                                    int split_idx = (c7) % 8;
                                                    union {
                                                        unsigned int ui;
                                                        float ut;
                                                    } u;
                                                    u.ui = (unsigned int)data_split[split_idx];
                                                    out_data = u.ut;
                                                    fifo_B_local_out.write(out_data);
                                                }
                                            }
                                        }
                                    }
                            }
                        } else {
                            if (inter_trans_en) {
B_IO_L2_in_0_x0_loop_12:                                 for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 2 max = 8
                                    if (c3 > -8 * c1 + 41)
                                        break;
                                    // io_L2
                                    if (c3 == p0) {
B_IO_L2_in_0_x0_loop_13:                                         for (ap_uint<2> c4 = 0; c4 <= 1; c4 += 1) {

                                            // access_coalesce
                                            {
                                                B_t8 in_data;
                                                B_t8 out_data;
                                                in_data = fifo_B_in.read();
                                                out_data = in_data;
                                                local_B_ping[c4][0] = out_data;
                                            }
                                        }
                                    } else {
B_IO_L2_in_0_x0_loop_14:                                         for (ap_uint<2> c4 = 0; c4 <= 1; c4 += 1) {

                                            // access_coalesce
                                            {
                                                B_t8 in_data;
                                                B_t8 out_data;
                                                in_data = fifo_B_in.read();
                                                out_data = in_data;
                                                fifo_B_out.write(out_data);
                                            }
                                        }
                                    }
                                }
                            }
                            ap_uint<32> data_split[8];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                            /* Variable Declaration */

                            if (intra_trans_en) {
B_IO_L2_in_0_x0_loop_15:                                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_IO_L2_in_0_x0_loop_16:                                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                        // latency
B_IO_L2_in_0_x0_loop_17:                                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                            // latency
B_IO_L2_in_0_x0_loop_18:                                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                                // simd
                                                {
                                                    B_t8 in_data;
                                                    B_t1 out_data;
                                                    in_data = local_B_pong[c5][c7 / 8];
B_IO_L2_in_0_x0_loop_19:                                                     for (ap_uint<4> n = 0; n < 8; n++) {
                                                        data_split[n] = in_data(31, 0);
                                                        in_data = in_data >> 32;
                                                    }
                                                    int split_idx = (c7) % 8;
                                                    union {
                                                        unsigned int ui;
                                                        float ut;
                                                    } u;
                                                    u.ui = (unsigned int)data_split[split_idx];
                                                    out_data = u.ut;
                                                    fifo_B_local_out.write(out_data);
                                                }
                                            }
                                        }
                                    }
                            }
                        }
                        intra_trans_en = 1;
                        arb = !arb;
                        c0_prev = c0;
                        c1_prev = c1;
                        c2_prev = c2;
                    }
                }
        if (arb == 0) {
            ap_uint<32> data_split[8];
#pragma HLS ARRAY_PARTITION variable = data_split complete
            /* Variable Declaration */

            if (intra_trans_en) {
B_IO_L2_in_0_x0_loop_20:                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_IO_L2_in_0_x0_loop_21:                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                        // latency
B_IO_L2_in_0_x0_loop_22:                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                            // latency
B_IO_L2_in_0_x0_loop_23:                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                // simd
                                {
                                    B_t8 in_data;
                                    B_t1 out_data;
                                    in_data = local_B_ping[c5][c7 / 8];
B_IO_L2_in_0_x0_loop_24:                                     for (ap_uint<4> n = 0; n < 8; n++) {
                                        data_split[n] = in_data(31, 0);
                                        in_data = in_data >> 32;
                                    }
                                    int split_idx = (c7) % 8;
                                    union {
                                        unsigned int ui;
                                        float ut;
                                    } u;
                                    u.ui = (unsigned int)data_split[split_idx];
                                    out_data = u.ut;
                                    fifo_B_local_out.write(out_data);
                                }
                            }
                        }
                    }
            }
        } else {
            ap_uint<32> data_split[8];
#pragma HLS ARRAY_PARTITION variable = data_split complete
            /* Variable Declaration */

            if (intra_trans_en) {
B_IO_L2_in_0_x0_loop_25:                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_IO_L2_in_0_x0_loop_26:                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                        // latency
B_IO_L2_in_0_x0_loop_27:                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                            // latency
B_IO_L2_in_0_x0_loop_28:                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                // simd
                                {
                                    B_t8 in_data;
                                    B_t1 out_data;
                                    in_data = local_B_pong[c5][c7 / 8];
B_IO_L2_in_0_x0_loop_29:                                     for (ap_uint<4> n = 0; n < 8; n++) {
                                        data_split[n] = in_data(31, 0);
                                        in_data = in_data >> 32;
                                    }
                                    int split_idx = (c7) % 8;
                                    union {
                                        unsigned int ui;
                                        float ut;
                                    } u;
                                    u.ui = (unsigned int)data_split[split_idx];
                                    out_data = u.ut;
                                    fifo_B_local_out.write(out_data);
                                }
                            }
                        }
                    }
            }
        }
    }
}
/* Module Definition */

/* Module Definition */
void B_IO_L2_in_1_x0(int idx, hls::stream<B_t8> &fifo_B_in, hls::stream<B_t8> &fifo_B_out, hls::stream<float> &fifo_B_local_out) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx; // module id
    B_t8 local_B_ping[2][1];
    B_t8 local_B_pong[2][1];
    bool arb = 0;
    bool inter_trans_en = 1;
    bool intra_trans_en = 0;
    int c0, c0_prev;
    int c1, c1_prev;
    int c2, c2_prev;
    /* Variable Declaration */

    {
B_IO_L2_in_1_x0_loop_1:         for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
B_IO_L2_in_1_x0_loop_2:             for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
B_IO_L2_in_1_x0_loop_3:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // io_L3
                    {
                        if (arb == 0) {
                            if (inter_trans_en) {
B_IO_L2_in_1_x0_loop_4:                                 for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 2 max = 8
                                    if (c3 > -8 * c1 + 41)
                                        break;
                                    // io_L2
                                    if (c3 == p0) {
B_IO_L2_in_1_x0_loop_5:                                         for (ap_uint<2> c4 = 0; c4 <= 1; c4 += 1) {

                                            // access_coalesce
                                            {
                                                B_t8 in_data;
                                                B_t8 out_data;
                                                in_data = fifo_B_in.read();
                                                out_data = in_data;
                                                local_B_pong[c4][0] = out_data;
                                            }
                                        }
                                    } else {
B_IO_L2_in_1_x0_loop_6:                                         for (ap_uint<2> c4 = 0; c4 <= 1; c4 += 1) {

                                            // access_coalesce
                                            {
                                                B_t8 in_data;
                                                B_t8 out_data;
                                                in_data = fifo_B_in.read();
                                                out_data = in_data;
                                                fifo_B_out.write(out_data);
                                            }
                                        }
                                    }
                                }
                            }
                            ap_uint<32> data_split[8];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                            /* Variable Declaration */

                            if (intra_trans_en) {
B_IO_L2_in_1_x0_loop_7:                                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_IO_L2_in_1_x0_loop_8:                                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                        // latency
B_IO_L2_in_1_x0_loop_9:                                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                            // latency
B_IO_L2_in_1_x0_loop_10:                                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                                // simd
                                                {
                                                    B_t8 in_data;
                                                    B_t1 out_data;
                                                    in_data = local_B_ping[c5][c7 / 8];
B_IO_L2_in_1_x0_loop_11:                                                     for (ap_uint<4> n = 0; n < 8; n++) {
                                                        data_split[n] = in_data(31, 0);
                                                        in_data = in_data >> 32;
                                                    }
                                                    int split_idx = (c7) % 8;
                                                    union {
                                                        unsigned int ui;
                                                        float ut;
                                                    } u;
                                                    u.ui = (unsigned int)data_split[split_idx];
                                                    out_data = u.ut;
                                                    fifo_B_local_out.write(out_data);
                                                }
                                            }
                                        }
                                    }
                            }
                        } else {
                            if (inter_trans_en) {
B_IO_L2_in_1_x0_loop_12:                                 for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 2 max = 8
                                    if (c3 > -8 * c1 + 41)
                                        break;
                                    // io_L2
                                    if (c3 == p0) {
B_IO_L2_in_1_x0_loop_13:                                         for (ap_uint<2> c4 = 0; c4 <= 1; c4 += 1) {

                                            // access_coalesce
                                            {
                                                B_t8 in_data;
                                                B_t8 out_data;
                                                in_data = fifo_B_in.read();
                                                out_data = in_data;
                                                local_B_ping[c4][0] = out_data;
                                            }
                                        }
                                    } else {
B_IO_L2_in_1_x0_loop_14:                                         for (ap_uint<2> c4 = 0; c4 <= 1; c4 += 1) {

                                            // access_coalesce
                                            {
                                                B_t8 in_data;
                                                B_t8 out_data;
                                                in_data = fifo_B_in.read();
                                                out_data = in_data;
                                                fifo_B_out.write(out_data);
                                            }
                                        }
                                    }
                                }
                            }
                            ap_uint<32> data_split[8];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                            /* Variable Declaration */

                            if (intra_trans_en) {
B_IO_L2_in_1_x0_loop_15:                                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_IO_L2_in_1_x0_loop_16:                                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                        // latency
B_IO_L2_in_1_x0_loop_17:                                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                            // latency
B_IO_L2_in_1_x0_loop_18:                                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                                // simd
                                                {
                                                    B_t8 in_data;
                                                    B_t1 out_data;
                                                    in_data = local_B_pong[c5][c7 / 8];
B_IO_L2_in_1_x0_loop_19:                                                     for (ap_uint<4> n = 0; n < 8; n++) {
                                                        data_split[n] = in_data(31, 0);
                                                        in_data = in_data >> 32;
                                                    }
                                                    int split_idx = (c7) % 8;
                                                    union {
                                                        unsigned int ui;
                                                        float ut;
                                                    } u;
                                                    u.ui = (unsigned int)data_split[split_idx];
                                                    out_data = u.ut;
                                                    fifo_B_local_out.write(out_data);
                                                }
                                            }
                                        }
                                    }
                            }
                        }
                        intra_trans_en = 1;
                        arb = !arb;
                        c0_prev = c0;
                        c1_prev = c1;
                        c2_prev = c2;
                    }
                }
        if (arb == 0) {
            ap_uint<32> data_split[8];
#pragma HLS ARRAY_PARTITION variable = data_split complete
            /* Variable Declaration */

            if (intra_trans_en) {
B_IO_L2_in_1_x0_loop_20:                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_IO_L2_in_1_x0_loop_21:                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                        // latency
B_IO_L2_in_1_x0_loop_22:                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                            // latency
B_IO_L2_in_1_x0_loop_23:                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                // simd
                                {
                                    B_t8 in_data;
                                    B_t1 out_data;
                                    in_data = local_B_ping[c5][c7 / 8];
B_IO_L2_in_1_x0_loop_24:                                     for (ap_uint<4> n = 0; n < 8; n++) {
                                        data_split[n] = in_data(31, 0);
                                        in_data = in_data >> 32;
                                    }
                                    int split_idx = (c7) % 8;
                                    union {
                                        unsigned int ui;
                                        float ut;
                                    } u;
                                    u.ui = (unsigned int)data_split[split_idx];
                                    out_data = u.ut;
                                    fifo_B_local_out.write(out_data);
                                }
                            }
                        }
                    }
            }
        } else {
            ap_uint<32> data_split[8];
#pragma HLS ARRAY_PARTITION variable = data_split complete
            /* Variable Declaration */

            if (intra_trans_en) {
B_IO_L2_in_1_x0_loop_25:                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_IO_L2_in_1_x0_loop_26:                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                        // latency
B_IO_L2_in_1_x0_loop_27:                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                            // latency
B_IO_L2_in_1_x0_loop_28:                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                // simd
                                {
                                    B_t8 in_data;
                                    B_t1 out_data;
                                    in_data = local_B_pong[c5][c7 / 8];
B_IO_L2_in_1_x0_loop_29:                                     for (ap_uint<4> n = 0; n < 8; n++) {
                                        data_split[n] = in_data(31, 0);
                                        in_data = in_data >> 32;
                                    }
                                    int split_idx = (c7) % 8;
                                    union {
                                        unsigned int ui;
                                        float ut;
                                    } u;
                                    u.ui = (unsigned int)data_split[split_idx];
                                    out_data = u.ut;
                                    fifo_B_local_out.write(out_data);
                                }
                            }
                        }
                    }
            }
        }
    }
}
/* Module Definition */

/* Module Definition */
void B_IO_L2_in_2_x0(int idx, hls::stream<B_t8> &fifo_B_in, hls::stream<B_t8> &fifo_B_out, hls::stream<float> &fifo_B_local_out) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx; // module id
    B_t8 local_B_ping[2][1];
    B_t8 local_B_pong[2][1];
    bool arb = 0;
    bool inter_trans_en = 1;
    bool intra_trans_en = 0;
    int c0, c0_prev;
    int c1, c1_prev;
    int c2, c2_prev;
    /* Variable Declaration */

    {
B_IO_L2_in_2_x0_loop_1:         for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
B_IO_L2_in_2_x0_loop_2:             for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
B_IO_L2_in_2_x0_loop_3:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // io_L3
                    {
                        if (arb == 0) {
                            if (inter_trans_en) {
B_IO_L2_in_2_x0_loop_4:                                 for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 2 max = 8
                                    if (c3 > -8 * c1 + 41)
                                        break;
                                    // io_L2
                                    if (c3 == p0) {
B_IO_L2_in_2_x0_loop_5:                                         for (ap_uint<2> c4 = 0; c4 <= 1; c4 += 1) {

                                            // access_coalesce
                                            {
                                                B_t8 in_data;
                                                B_t8 out_data;
                                                in_data = fifo_B_in.read();
                                                out_data = in_data;
                                                local_B_pong[c4][0] = out_data;
                                            }
                                        }
                                    } else {
B_IO_L2_in_2_x0_loop_6:                                         for (ap_uint<2> c4 = 0; c4 <= 1; c4 += 1) {

                                            // access_coalesce
                                            {
                                                B_t8 in_data;
                                                B_t8 out_data;
                                                in_data = fifo_B_in.read();
                                                out_data = in_data;
                                                fifo_B_out.write(out_data);
                                            }
                                        }
                                    }
                                }
                            }
                            ap_uint<32> data_split[8];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                            /* Variable Declaration */

                            if (intra_trans_en) {
B_IO_L2_in_2_x0_loop_7:                                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_IO_L2_in_2_x0_loop_8:                                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                        // latency
B_IO_L2_in_2_x0_loop_9:                                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                            // latency
B_IO_L2_in_2_x0_loop_10:                                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                                // simd
                                                {
                                                    B_t8 in_data;
                                                    B_t1 out_data;
                                                    in_data = local_B_ping[c5][c7 / 8];
B_IO_L2_in_2_x0_loop_11:                                                     for (ap_uint<4> n = 0; n < 8; n++) {
                                                        data_split[n] = in_data(31, 0);
                                                        in_data = in_data >> 32;
                                                    }
                                                    int split_idx = (c7) % 8;
                                                    union {
                                                        unsigned int ui;
                                                        float ut;
                                                    } u;
                                                    u.ui = (unsigned int)data_split[split_idx];
                                                    out_data = u.ut;
                                                    fifo_B_local_out.write(out_data);
                                                }
                                            }
                                        }
                                    }
                            }
                        } else {
                            if (inter_trans_en) {
B_IO_L2_in_2_x0_loop_12:                                 for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 2 max = 8
                                    if (c3 > -8 * c1 + 41)
                                        break;
                                    // io_L2
                                    if (c3 == p0) {
B_IO_L2_in_2_x0_loop_13:                                         for (ap_uint<2> c4 = 0; c4 <= 1; c4 += 1) {

                                            // access_coalesce
                                            {
                                                B_t8 in_data;
                                                B_t8 out_data;
                                                in_data = fifo_B_in.read();
                                                out_data = in_data;
                                                local_B_ping[c4][0] = out_data;
                                            }
                                        }
                                    } else {
B_IO_L2_in_2_x0_loop_14:                                         for (ap_uint<2> c4 = 0; c4 <= 1; c4 += 1) {

                                            // access_coalesce
                                            {
                                                B_t8 in_data;
                                                B_t8 out_data;
                                                in_data = fifo_B_in.read();
                                                out_data = in_data;
                                                fifo_B_out.write(out_data);
                                            }
                                        }
                                    }
                                }
                            }
                            ap_uint<32> data_split[8];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                            /* Variable Declaration */

                            if (intra_trans_en) {
B_IO_L2_in_2_x0_loop_15:                                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_IO_L2_in_2_x0_loop_16:                                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                        // latency
B_IO_L2_in_2_x0_loop_17:                                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                            // latency
B_IO_L2_in_2_x0_loop_18:                                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                                // simd
                                                {
                                                    B_t8 in_data;
                                                    B_t1 out_data;
                                                    in_data = local_B_pong[c5][c7 / 8];
B_IO_L2_in_2_x0_loop_19:                                                     for (ap_uint<4> n = 0; n < 8; n++) {
                                                        data_split[n] = in_data(31, 0);
                                                        in_data = in_data >> 32;
                                                    }
                                                    int split_idx = (c7) % 8;
                                                    union {
                                                        unsigned int ui;
                                                        float ut;
                                                    } u;
                                                    u.ui = (unsigned int)data_split[split_idx];
                                                    out_data = u.ut;
                                                    fifo_B_local_out.write(out_data);
                                                }
                                            }
                                        }
                                    }
                            }
                        }
                        intra_trans_en = 1;
                        arb = !arb;
                        c0_prev = c0;
                        c1_prev = c1;
                        c2_prev = c2;
                    }
                }
        if (arb == 0) {
            ap_uint<32> data_split[8];
#pragma HLS ARRAY_PARTITION variable = data_split complete
            /* Variable Declaration */

            if (intra_trans_en) {
B_IO_L2_in_2_x0_loop_20:                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_IO_L2_in_2_x0_loop_21:                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                        // latency
B_IO_L2_in_2_x0_loop_22:                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                            // latency
B_IO_L2_in_2_x0_loop_23:                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                // simd
                                {
                                    B_t8 in_data;
                                    B_t1 out_data;
                                    in_data = local_B_ping[c5][c7 / 8];
B_IO_L2_in_2_x0_loop_24:                                     for (ap_uint<4> n = 0; n < 8; n++) {
                                        data_split[n] = in_data(31, 0);
                                        in_data = in_data >> 32;
                                    }
                                    int split_idx = (c7) % 8;
                                    union {
                                        unsigned int ui;
                                        float ut;
                                    } u;
                                    u.ui = (unsigned int)data_split[split_idx];
                                    out_data = u.ut;
                                    fifo_B_local_out.write(out_data);
                                }
                            }
                        }
                    }
            }
        } else {
            ap_uint<32> data_split[8];
#pragma HLS ARRAY_PARTITION variable = data_split complete
            /* Variable Declaration */

            if (intra_trans_en) {
B_IO_L2_in_2_x0_loop_25:                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_IO_L2_in_2_x0_loop_26:                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                        // latency
B_IO_L2_in_2_x0_loop_27:                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                            // latency
B_IO_L2_in_2_x0_loop_28:                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                // simd
                                {
                                    B_t8 in_data;
                                    B_t1 out_data;
                                    in_data = local_B_pong[c5][c7 / 8];
B_IO_L2_in_2_x0_loop_29:                                     for (ap_uint<4> n = 0; n < 8; n++) {
                                        data_split[n] = in_data(31, 0);
                                        in_data = in_data >> 32;
                                    }
                                    int split_idx = (c7) % 8;
                                    union {
                                        unsigned int ui;
                                        float ut;
                                    } u;
                                    u.ui = (unsigned int)data_split[split_idx];
                                    out_data = u.ut;
                                    fifo_B_local_out.write(out_data);
                                }
                            }
                        }
                    }
            }
        }
    }
}
/* Module Definition */

/* Module Definition */
void B_IO_L2_in_3_x0(int idx, hls::stream<B_t8> &fifo_B_in, hls::stream<B_t8> &fifo_B_out, hls::stream<float> &fifo_B_local_out) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx; // module id
    B_t8 local_B_ping[2][1];
    B_t8 local_B_pong[2][1];
    bool arb = 0;
    bool inter_trans_en = 1;
    bool intra_trans_en = 0;
    int c0, c0_prev;
    int c1, c1_prev;
    int c2, c2_prev;
    /* Variable Declaration */

    {
B_IO_L2_in_3_x0_loop_1:         for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
B_IO_L2_in_3_x0_loop_2:             for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
B_IO_L2_in_3_x0_loop_3:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // io_L3
                    {
                        if (arb == 0) {
                            if (inter_trans_en) {
B_IO_L2_in_3_x0_loop_4:                                 for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 2 max = 8
                                    if (c3 > -8 * c1 + 41)
                                        break;
                                    // io_L2
                                    if (c3 == p0) {
B_IO_L2_in_3_x0_loop_5:                                         for (ap_uint<2> c4 = 0; c4 <= 1; c4 += 1) {

                                            // access_coalesce
                                            {
                                                B_t8 in_data;
                                                B_t8 out_data;
                                                in_data = fifo_B_in.read();
                                                out_data = in_data;
                                                local_B_pong[c4][0] = out_data;
                                            }
                                        }
                                    } else {
B_IO_L2_in_3_x0_loop_6:                                         for (ap_uint<2> c4 = 0; c4 <= 1; c4 += 1) {

                                            // access_coalesce
                                            {
                                                B_t8 in_data;
                                                B_t8 out_data;
                                                in_data = fifo_B_in.read();
                                                out_data = in_data;
                                                fifo_B_out.write(out_data);
                                            }
                                        }
                                    }
                                }
                            }
                            ap_uint<32> data_split[8];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                            /* Variable Declaration */

                            if (intra_trans_en) {
B_IO_L2_in_3_x0_loop_7:                                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_IO_L2_in_3_x0_loop_8:                                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                        // latency
B_IO_L2_in_3_x0_loop_9:                                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                            // latency
B_IO_L2_in_3_x0_loop_10:                                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                                // simd
                                                {
                                                    B_t8 in_data;
                                                    B_t1 out_data;
                                                    in_data = local_B_ping[c5][c7 / 8];
B_IO_L2_in_3_x0_loop_11:                                                     for (ap_uint<4> n = 0; n < 8; n++) {
                                                        data_split[n] = in_data(31, 0);
                                                        in_data = in_data >> 32;
                                                    }
                                                    int split_idx = (c7) % 8;
                                                    union {
                                                        unsigned int ui;
                                                        float ut;
                                                    } u;
                                                    u.ui = (unsigned int)data_split[split_idx];
                                                    out_data = u.ut;
                                                    fifo_B_local_out.write(out_data);
                                                }
                                            }
                                        }
                                    }
                            }
                        } else {
                            if (inter_trans_en) {
B_IO_L2_in_3_x0_loop_12:                                 for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 2 max = 8
                                    if (c3 > -8 * c1 + 41)
                                        break;
                                    // io_L2
                                    if (c3 == p0) {
B_IO_L2_in_3_x0_loop_13:                                         for (ap_uint<2> c4 = 0; c4 <= 1; c4 += 1) {

                                            // access_coalesce
                                            {
                                                B_t8 in_data;
                                                B_t8 out_data;
                                                in_data = fifo_B_in.read();
                                                out_data = in_data;
                                                local_B_ping[c4][0] = out_data;
                                            }
                                        }
                                    } else {
B_IO_L2_in_3_x0_loop_14:                                         for (ap_uint<2> c4 = 0; c4 <= 1; c4 += 1) {

                                            // access_coalesce
                                            {
                                                B_t8 in_data;
                                                B_t8 out_data;
                                                in_data = fifo_B_in.read();
                                                out_data = in_data;
                                                fifo_B_out.write(out_data);
                                            }
                                        }
                                    }
                                }
                            }
                            ap_uint<32> data_split[8];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                            /* Variable Declaration */

                            if (intra_trans_en) {
B_IO_L2_in_3_x0_loop_15:                                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_IO_L2_in_3_x0_loop_16:                                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                        // latency
B_IO_L2_in_3_x0_loop_17:                                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                            // latency
B_IO_L2_in_3_x0_loop_18:                                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                                // simd
                                                {
                                                    B_t8 in_data;
                                                    B_t1 out_data;
                                                    in_data = local_B_pong[c5][c7 / 8];
B_IO_L2_in_3_x0_loop_19:                                                     for (ap_uint<4> n = 0; n < 8; n++) {
                                                        data_split[n] = in_data(31, 0);
                                                        in_data = in_data >> 32;
                                                    }
                                                    int split_idx = (c7) % 8;
                                                    union {
                                                        unsigned int ui;
                                                        float ut;
                                                    } u;
                                                    u.ui = (unsigned int)data_split[split_idx];
                                                    out_data = u.ut;
                                                    fifo_B_local_out.write(out_data);
                                                }
                                            }
                                        }
                                    }
                            }
                        }
                        intra_trans_en = 1;
                        arb = !arb;
                        c0_prev = c0;
                        c1_prev = c1;
                        c2_prev = c2;
                    }
                }
        if (arb == 0) {
            ap_uint<32> data_split[8];
#pragma HLS ARRAY_PARTITION variable = data_split complete
            /* Variable Declaration */

            if (intra_trans_en) {
B_IO_L2_in_3_x0_loop_20:                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_IO_L2_in_3_x0_loop_21:                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                        // latency
B_IO_L2_in_3_x0_loop_22:                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                            // latency
B_IO_L2_in_3_x0_loop_23:                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                // simd
                                {
                                    B_t8 in_data;
                                    B_t1 out_data;
                                    in_data = local_B_ping[c5][c7 / 8];
B_IO_L2_in_3_x0_loop_24:                                     for (ap_uint<4> n = 0; n < 8; n++) {
                                        data_split[n] = in_data(31, 0);
                                        in_data = in_data >> 32;
                                    }
                                    int split_idx = (c7) % 8;
                                    union {
                                        unsigned int ui;
                                        float ut;
                                    } u;
                                    u.ui = (unsigned int)data_split[split_idx];
                                    out_data = u.ut;
                                    fifo_B_local_out.write(out_data);
                                }
                            }
                        }
                    }
            }
        } else {
            ap_uint<32> data_split[8];
#pragma HLS ARRAY_PARTITION variable = data_split complete
            /* Variable Declaration */

            if (intra_trans_en) {
B_IO_L2_in_3_x0_loop_25:                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_IO_L2_in_3_x0_loop_26:                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                        // latency
B_IO_L2_in_3_x0_loop_27:                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                            // latency
B_IO_L2_in_3_x0_loop_28:                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                // simd
                                {
                                    B_t8 in_data;
                                    B_t1 out_data;
                                    in_data = local_B_pong[c5][c7 / 8];
B_IO_L2_in_3_x0_loop_29:                                     for (ap_uint<4> n = 0; n < 8; n++) {
                                        data_split[n] = in_data(31, 0);
                                        in_data = in_data >> 32;
                                    }
                                    int split_idx = (c7) % 8;
                                    union {
                                        unsigned int ui;
                                        float ut;
                                    } u;
                                    u.ui = (unsigned int)data_split[split_idx];
                                    out_data = u.ut;
                                    fifo_B_local_out.write(out_data);
                                }
                            }
                        }
                    }
            }
        }
    }
}
/* Module Definition */

/* Module Definition */
void B_IO_L2_in_4_x0(int idx, hls::stream<B_t8> &fifo_B_in, hls::stream<B_t8> &fifo_B_out, hls::stream<float> &fifo_B_local_out) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx; // module id
    B_t8 local_B_ping[2][1];
    B_t8 local_B_pong[2][1];
    bool arb = 0;
    bool inter_trans_en = 1;
    bool intra_trans_en = 0;
    int c0, c0_prev;
    int c1, c1_prev;
    int c2, c2_prev;
    /* Variable Declaration */

    {
B_IO_L2_in_4_x0_loop_1:         for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
B_IO_L2_in_4_x0_loop_2:             for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
B_IO_L2_in_4_x0_loop_3:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // io_L3
                    {
                        if (arb == 0) {
                            if (inter_trans_en) {
B_IO_L2_in_4_x0_loop_4:                                 for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 2 max = 8
                                    if (c3 > -8 * c1 + 41)
                                        break;
                                    // io_L2
                                    if (c3 == p0) {
B_IO_L2_in_4_x0_loop_5:                                         for (ap_uint<2> c4 = 0; c4 <= 1; c4 += 1) {

                                            // access_coalesce
                                            {
                                                B_t8 in_data;
                                                B_t8 out_data;
                                                in_data = fifo_B_in.read();
                                                out_data = in_data;
                                                local_B_pong[c4][0] = out_data;
                                            }
                                        }
                                    } else {
B_IO_L2_in_4_x0_loop_6:                                         for (ap_uint<2> c4 = 0; c4 <= 1; c4 += 1) {

                                            // access_coalesce
                                            {
                                                B_t8 in_data;
                                                B_t8 out_data;
                                                in_data = fifo_B_in.read();
                                                out_data = in_data;
                                                fifo_B_out.write(out_data);
                                            }
                                        }
                                    }
                                }
                            }
                            ap_uint<32> data_split[8];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                            /* Variable Declaration */

                            if (intra_trans_en) {
B_IO_L2_in_4_x0_loop_7:                                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_IO_L2_in_4_x0_loop_8:                                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                        // latency
B_IO_L2_in_4_x0_loop_9:                                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                            // latency
B_IO_L2_in_4_x0_loop_10:                                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                                // simd
                                                {
                                                    B_t8 in_data;
                                                    B_t1 out_data;
                                                    in_data = local_B_ping[c5][c7 / 8];
B_IO_L2_in_4_x0_loop_11:                                                     for (ap_uint<4> n = 0; n < 8; n++) {
                                                        data_split[n] = in_data(31, 0);
                                                        in_data = in_data >> 32;
                                                    }
                                                    int split_idx = (c7) % 8;
                                                    union {
                                                        unsigned int ui;
                                                        float ut;
                                                    } u;
                                                    u.ui = (unsigned int)data_split[split_idx];
                                                    out_data = u.ut;
                                                    fifo_B_local_out.write(out_data);
                                                }
                                            }
                                        }
                                    }
                            }
                        } else {
                            if (inter_trans_en) {
B_IO_L2_in_4_x0_loop_12:                                 for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 2 max = 8
                                    if (c3 > -8 * c1 + 41)
                                        break;
                                    // io_L2
                                    if (c3 == p0) {
B_IO_L2_in_4_x0_loop_13:                                         for (ap_uint<2> c4 = 0; c4 <= 1; c4 += 1) {

                                            // access_coalesce
                                            {
                                                B_t8 in_data;
                                                B_t8 out_data;
                                                in_data = fifo_B_in.read();
                                                out_data = in_data;
                                                local_B_ping[c4][0] = out_data;
                                            }
                                        }
                                    } else {
B_IO_L2_in_4_x0_loop_14:                                         for (ap_uint<2> c4 = 0; c4 <= 1; c4 += 1) {

                                            // access_coalesce
                                            {
                                                B_t8 in_data;
                                                B_t8 out_data;
                                                in_data = fifo_B_in.read();
                                                out_data = in_data;
                                                fifo_B_out.write(out_data);
                                            }
                                        }
                                    }
                                }
                            }
                            ap_uint<32> data_split[8];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                            /* Variable Declaration */

                            if (intra_trans_en) {
B_IO_L2_in_4_x0_loop_15:                                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_IO_L2_in_4_x0_loop_16:                                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                        // latency
B_IO_L2_in_4_x0_loop_17:                                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                            // latency
B_IO_L2_in_4_x0_loop_18:                                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                                // simd
                                                {
                                                    B_t8 in_data;
                                                    B_t1 out_data;
                                                    in_data = local_B_pong[c5][c7 / 8];
B_IO_L2_in_4_x0_loop_19:                                                     for (ap_uint<4> n = 0; n < 8; n++) {
                                                        data_split[n] = in_data(31, 0);
                                                        in_data = in_data >> 32;
                                                    }
                                                    int split_idx = (c7) % 8;
                                                    union {
                                                        unsigned int ui;
                                                        float ut;
                                                    } u;
                                                    u.ui = (unsigned int)data_split[split_idx];
                                                    out_data = u.ut;
                                                    fifo_B_local_out.write(out_data);
                                                }
                                            }
                                        }
                                    }
                            }
                        }
                        intra_trans_en = 1;
                        arb = !arb;
                        c0_prev = c0;
                        c1_prev = c1;
                        c2_prev = c2;
                    }
                }
        if (arb == 0) {
            ap_uint<32> data_split[8];
#pragma HLS ARRAY_PARTITION variable = data_split complete
            /* Variable Declaration */

            if (intra_trans_en) {
B_IO_L2_in_4_x0_loop_20:                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_IO_L2_in_4_x0_loop_21:                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                        // latency
B_IO_L2_in_4_x0_loop_22:                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                            // latency
B_IO_L2_in_4_x0_loop_23:                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                // simd
                                {
                                    B_t8 in_data;
                                    B_t1 out_data;
                                    in_data = local_B_ping[c5][c7 / 8];
B_IO_L2_in_4_x0_loop_24:                                     for (ap_uint<4> n = 0; n < 8; n++) {
                                        data_split[n] = in_data(31, 0);
                                        in_data = in_data >> 32;
                                    }
                                    int split_idx = (c7) % 8;
                                    union {
                                        unsigned int ui;
                                        float ut;
                                    } u;
                                    u.ui = (unsigned int)data_split[split_idx];
                                    out_data = u.ut;
                                    fifo_B_local_out.write(out_data);
                                }
                            }
                        }
                    }
            }
        } else {
            ap_uint<32> data_split[8];
#pragma HLS ARRAY_PARTITION variable = data_split complete
            /* Variable Declaration */

            if (intra_trans_en) {
B_IO_L2_in_4_x0_loop_25:                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_IO_L2_in_4_x0_loop_26:                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                        // latency
B_IO_L2_in_4_x0_loop_27:                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                            // latency
B_IO_L2_in_4_x0_loop_28:                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                // simd
                                {
                                    B_t8 in_data;
                                    B_t1 out_data;
                                    in_data = local_B_pong[c5][c7 / 8];
B_IO_L2_in_4_x0_loop_29:                                     for (ap_uint<4> n = 0; n < 8; n++) {
                                        data_split[n] = in_data(31, 0);
                                        in_data = in_data >> 32;
                                    }
                                    int split_idx = (c7) % 8;
                                    union {
                                        unsigned int ui;
                                        float ut;
                                    } u;
                                    u.ui = (unsigned int)data_split[split_idx];
                                    out_data = u.ut;
                                    fifo_B_local_out.write(out_data);
                                }
                            }
                        }
                    }
            }
        }
    }
}
/* Module Definition */

/* Module Definition */
void B_IO_L2_in_5_x0(int idx, hls::stream<B_t8> &fifo_B_in, hls::stream<B_t8> &fifo_B_out, hls::stream<float> &fifo_B_local_out) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx; // module id
    B_t8 local_B_ping[2][1];
    B_t8 local_B_pong[2][1];
    bool arb = 0;
    bool inter_trans_en = 1;
    bool intra_trans_en = 0;
    int c0, c0_prev;
    int c1, c1_prev;
    int c2, c2_prev;
    /* Variable Declaration */

    {
B_IO_L2_in_5_x0_loop_1:         for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
B_IO_L2_in_5_x0_loop_2:             for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
B_IO_L2_in_5_x0_loop_3:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // io_L3
                    {
                        if (arb == 0) {
                            if (inter_trans_en) {
B_IO_L2_in_5_x0_loop_4:                                 for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 2 max = 8
                                    if (c3 > -8 * c1 + 41)
                                        break;
                                    // io_L2
                                    if (c3 == p0) {
B_IO_L2_in_5_x0_loop_5:                                         for (ap_uint<2> c4 = 0; c4 <= 1; c4 += 1) {

                                            // access_coalesce
                                            {
                                                B_t8 in_data;
                                                B_t8 out_data;
                                                in_data = fifo_B_in.read();
                                                out_data = in_data;
                                                local_B_pong[c4][0] = out_data;
                                            }
                                        }
                                    } else {
B_IO_L2_in_5_x0_loop_6:                                         for (ap_uint<2> c4 = 0; c4 <= 1; c4 += 1) {

                                            // access_coalesce
                                            {
                                                B_t8 in_data;
                                                B_t8 out_data;
                                                in_data = fifo_B_in.read();
                                                out_data = in_data;
                                                fifo_B_out.write(out_data);
                                            }
                                        }
                                    }
                                }
                            }
                            ap_uint<32> data_split[8];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                            /* Variable Declaration */

                            if (intra_trans_en) {
B_IO_L2_in_5_x0_loop_7:                                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_IO_L2_in_5_x0_loop_8:                                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                        // latency
B_IO_L2_in_5_x0_loop_9:                                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                            // latency
B_IO_L2_in_5_x0_loop_10:                                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                                // simd
                                                {
                                                    B_t8 in_data;
                                                    B_t1 out_data;
                                                    in_data = local_B_ping[c5][c7 / 8];
B_IO_L2_in_5_x0_loop_11:                                                     for (ap_uint<4> n = 0; n < 8; n++) {
                                                        data_split[n] = in_data(31, 0);
                                                        in_data = in_data >> 32;
                                                    }
                                                    int split_idx = (c7) % 8;
                                                    union {
                                                        unsigned int ui;
                                                        float ut;
                                                    } u;
                                                    u.ui = (unsigned int)data_split[split_idx];
                                                    out_data = u.ut;
                                                    fifo_B_local_out.write(out_data);
                                                }
                                            }
                                        }
                                    }
                            }
                        } else {
                            if (inter_trans_en) {
B_IO_L2_in_5_x0_loop_12:                                 for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 2 max = 8
                                    if (c3 > -8 * c1 + 41)
                                        break;
                                    // io_L2
                                    if (c3 == p0) {
B_IO_L2_in_5_x0_loop_13:                                         for (ap_uint<2> c4 = 0; c4 <= 1; c4 += 1) {

                                            // access_coalesce
                                            {
                                                B_t8 in_data;
                                                B_t8 out_data;
                                                in_data = fifo_B_in.read();
                                                out_data = in_data;
                                                local_B_ping[c4][0] = out_data;
                                            }
                                        }
                                    } else {
B_IO_L2_in_5_x0_loop_14:                                         for (ap_uint<2> c4 = 0; c4 <= 1; c4 += 1) {

                                            // access_coalesce
                                            {
                                                B_t8 in_data;
                                                B_t8 out_data;
                                                in_data = fifo_B_in.read();
                                                out_data = in_data;
                                                fifo_B_out.write(out_data);
                                            }
                                        }
                                    }
                                }
                            }
                            ap_uint<32> data_split[8];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                            /* Variable Declaration */

                            if (intra_trans_en) {
B_IO_L2_in_5_x0_loop_15:                                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_IO_L2_in_5_x0_loop_16:                                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                        // latency
B_IO_L2_in_5_x0_loop_17:                                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                            // latency
B_IO_L2_in_5_x0_loop_18:                                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                                // simd
                                                {
                                                    B_t8 in_data;
                                                    B_t1 out_data;
                                                    in_data = local_B_pong[c5][c7 / 8];
B_IO_L2_in_5_x0_loop_19:                                                     for (ap_uint<4> n = 0; n < 8; n++) {
                                                        data_split[n] = in_data(31, 0);
                                                        in_data = in_data >> 32;
                                                    }
                                                    int split_idx = (c7) % 8;
                                                    union {
                                                        unsigned int ui;
                                                        float ut;
                                                    } u;
                                                    u.ui = (unsigned int)data_split[split_idx];
                                                    out_data = u.ut;
                                                    fifo_B_local_out.write(out_data);
                                                }
                                            }
                                        }
                                    }
                            }
                        }
                        intra_trans_en = 1;
                        arb = !arb;
                        c0_prev = c0;
                        c1_prev = c1;
                        c2_prev = c2;
                    }
                }
        if (arb == 0) {
            ap_uint<32> data_split[8];
#pragma HLS ARRAY_PARTITION variable = data_split complete
            /* Variable Declaration */

            if (intra_trans_en) {
B_IO_L2_in_5_x0_loop_20:                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_IO_L2_in_5_x0_loop_21:                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                        // latency
B_IO_L2_in_5_x0_loop_22:                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                            // latency
B_IO_L2_in_5_x0_loop_23:                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                // simd
                                {
                                    B_t8 in_data;
                                    B_t1 out_data;
                                    in_data = local_B_ping[c5][c7 / 8];
B_IO_L2_in_5_x0_loop_24:                                     for (ap_uint<4> n = 0; n < 8; n++) {
                                        data_split[n] = in_data(31, 0);
                                        in_data = in_data >> 32;
                                    }
                                    int split_idx = (c7) % 8;
                                    union {
                                        unsigned int ui;
                                        float ut;
                                    } u;
                                    u.ui = (unsigned int)data_split[split_idx];
                                    out_data = u.ut;
                                    fifo_B_local_out.write(out_data);
                                }
                            }
                        }
                    }
            }
        } else {
            ap_uint<32> data_split[8];
#pragma HLS ARRAY_PARTITION variable = data_split complete
            /* Variable Declaration */

            if (intra_trans_en) {
B_IO_L2_in_5_x0_loop_25:                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_IO_L2_in_5_x0_loop_26:                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                        // latency
B_IO_L2_in_5_x0_loop_27:                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                            // latency
B_IO_L2_in_5_x0_loop_28:                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                // simd
                                {
                                    B_t8 in_data;
                                    B_t1 out_data;
                                    in_data = local_B_pong[c5][c7 / 8];
B_IO_L2_in_5_x0_loop_29:                                     for (ap_uint<4> n = 0; n < 8; n++) {
                                        data_split[n] = in_data(31, 0);
                                        in_data = in_data >> 32;
                                    }
                                    int split_idx = (c7) % 8;
                                    union {
                                        unsigned int ui;
                                        float ut;
                                    } u;
                                    u.ui = (unsigned int)data_split[split_idx];
                                    out_data = u.ut;
                                    fifo_B_local_out.write(out_data);
                                }
                            }
                        }
                    }
            }
        }
    }
}
/* Module Definition */

/* Module Definition */
void B_IO_L2_in_6_x0(int idx, hls::stream<B_t8> &fifo_B_in, hls::stream<B_t8> &fifo_B_out, hls::stream<float> &fifo_B_local_out) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx; // module id
    B_t8 local_B_ping[2][1];
    B_t8 local_B_pong[2][1];
    bool arb = 0;
    bool inter_trans_en = 1;
    bool intra_trans_en = 0;
    int c0, c0_prev;
    int c1, c1_prev;
    int c2, c2_prev;
    /* Variable Declaration */

    {
B_IO_L2_in_6_x0_loop_1:         for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
B_IO_L2_in_6_x0_loop_2:             for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
B_IO_L2_in_6_x0_loop_3:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // io_L3
                    {
                        if (arb == 0) {
                            if (inter_trans_en) {
B_IO_L2_in_6_x0_loop_4:                                 for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 2 max = 8
                                    if (c3 > -8 * c1 + 41)
                                        break;
                                    // io_L2
                                    if (c3 == p0) {
B_IO_L2_in_6_x0_loop_5:                                         for (ap_uint<2> c4 = 0; c4 <= 1; c4 += 1) {

                                            // access_coalesce
                                            {
                                                B_t8 in_data;
                                                B_t8 out_data;
                                                in_data = fifo_B_in.read();
                                                out_data = in_data;
                                                local_B_pong[c4][0] = out_data;
                                            }
                                        }
                                    } else {
B_IO_L2_in_6_x0_loop_6:                                         for (ap_uint<2> c4 = 0; c4 <= 1; c4 += 1) {

                                            // access_coalesce
                                            {
                                                B_t8 in_data;
                                                B_t8 out_data;
                                                in_data = fifo_B_in.read();
                                                out_data = in_data;
                                                fifo_B_out.write(out_data);
                                            }
                                        }
                                    }
                                }
                            }
                            ap_uint<32> data_split[8];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                            /* Variable Declaration */

                            if (intra_trans_en) {
B_IO_L2_in_6_x0_loop_7:                                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_IO_L2_in_6_x0_loop_8:                                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                        // latency
B_IO_L2_in_6_x0_loop_9:                                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                            // latency
B_IO_L2_in_6_x0_loop_10:                                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                                // simd
                                                {
                                                    B_t8 in_data;
                                                    B_t1 out_data;
                                                    in_data = local_B_ping[c5][c7 / 8];
B_IO_L2_in_6_x0_loop_11:                                                     for (ap_uint<4> n = 0; n < 8; n++) {
                                                        data_split[n] = in_data(31, 0);
                                                        in_data = in_data >> 32;
                                                    }
                                                    int split_idx = (c7) % 8;
                                                    union {
                                                        unsigned int ui;
                                                        float ut;
                                                    } u;
                                                    u.ui = (unsigned int)data_split[split_idx];
                                                    out_data = u.ut;
                                                    fifo_B_local_out.write(out_data);
                                                }
                                            }
                                        }
                                    }
                            }
                        } else {
                            if (inter_trans_en) {
B_IO_L2_in_6_x0_loop_12:                                 for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 2 max = 8
                                    if (c3 > -8 * c1 + 41)
                                        break;
                                    // io_L2
                                    if (c3 == p0) {
B_IO_L2_in_6_x0_loop_13:                                         for (ap_uint<2> c4 = 0; c4 <= 1; c4 += 1) {

                                            // access_coalesce
                                            {
                                                B_t8 in_data;
                                                B_t8 out_data;
                                                in_data = fifo_B_in.read();
                                                out_data = in_data;
                                                local_B_ping[c4][0] = out_data;
                                            }
                                        }
                                    } else {
B_IO_L2_in_6_x0_loop_14:                                         for (ap_uint<2> c4 = 0; c4 <= 1; c4 += 1) {

                                            // access_coalesce
                                            {
                                                B_t8 in_data;
                                                B_t8 out_data;
                                                in_data = fifo_B_in.read();
                                                out_data = in_data;
                                                fifo_B_out.write(out_data);
                                            }
                                        }
                                    }
                                }
                            }
                            ap_uint<32> data_split[8];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                            /* Variable Declaration */

                            if (intra_trans_en) {
B_IO_L2_in_6_x0_loop_15:                                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_IO_L2_in_6_x0_loop_16:                                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                        // latency
B_IO_L2_in_6_x0_loop_17:                                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                            // latency
B_IO_L2_in_6_x0_loop_18:                                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                                // simd
                                                {
                                                    B_t8 in_data;
                                                    B_t1 out_data;
                                                    in_data = local_B_pong[c5][c7 / 8];
B_IO_L2_in_6_x0_loop_19:                                                     for (ap_uint<4> n = 0; n < 8; n++) {
                                                        data_split[n] = in_data(31, 0);
                                                        in_data = in_data >> 32;
                                                    }
                                                    int split_idx = (c7) % 8;
                                                    union {
                                                        unsigned int ui;
                                                        float ut;
                                                    } u;
                                                    u.ui = (unsigned int)data_split[split_idx];
                                                    out_data = u.ut;
                                                    fifo_B_local_out.write(out_data);
                                                }
                                            }
                                        }
                                    }
                            }
                        }
                        intra_trans_en = 1;
                        arb = !arb;
                        c0_prev = c0;
                        c1_prev = c1;
                        c2_prev = c2;
                    }
                }
        if (arb == 0) {
            ap_uint<32> data_split[8];
#pragma HLS ARRAY_PARTITION variable = data_split complete
            /* Variable Declaration */

            if (intra_trans_en) {
B_IO_L2_in_6_x0_loop_20:                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_IO_L2_in_6_x0_loop_21:                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                        // latency
B_IO_L2_in_6_x0_loop_22:                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                            // latency
B_IO_L2_in_6_x0_loop_23:                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                // simd
                                {
                                    B_t8 in_data;
                                    B_t1 out_data;
                                    in_data = local_B_ping[c5][c7 / 8];
B_IO_L2_in_6_x0_loop_24:                                     for (ap_uint<4> n = 0; n < 8; n++) {
                                        data_split[n] = in_data(31, 0);
                                        in_data = in_data >> 32;
                                    }
                                    int split_idx = (c7) % 8;
                                    union {
                                        unsigned int ui;
                                        float ut;
                                    } u;
                                    u.ui = (unsigned int)data_split[split_idx];
                                    out_data = u.ut;
                                    fifo_B_local_out.write(out_data);
                                }
                            }
                        }
                    }
            }
        } else {
            ap_uint<32> data_split[8];
#pragma HLS ARRAY_PARTITION variable = data_split complete
            /* Variable Declaration */

            if (intra_trans_en) {
B_IO_L2_in_6_x0_loop_25:                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_IO_L2_in_6_x0_loop_26:                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                        // latency
B_IO_L2_in_6_x0_loop_27:                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                            // latency
B_IO_L2_in_6_x0_loop_28:                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                // simd
                                {
                                    B_t8 in_data;
                                    B_t1 out_data;
                                    in_data = local_B_pong[c5][c7 / 8];
B_IO_L2_in_6_x0_loop_29:                                     for (ap_uint<4> n = 0; n < 8; n++) {
                                        data_split[n] = in_data(31, 0);
                                        in_data = in_data >> 32;
                                    }
                                    int split_idx = (c7) % 8;
                                    union {
                                        unsigned int ui;
                                        float ut;
                                    } u;
                                    u.ui = (unsigned int)data_split[split_idx];
                                    out_data = u.ut;
                                    fifo_B_local_out.write(out_data);
                                }
                            }
                        }
                    }
            }
        }
    }
}
/* Module Definition */

/* Module Definition */
void B_IO_L2_in_boundary_x0(int idx, hls::stream<B_t8> &fifo_B_in, hls::stream<float> &fifo_B_local_out) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx; // module id
    B_t8 local_B_ping[2][1];
    B_t8 local_B_pong[2][1];
    bool arb = 0;
    bool inter_trans_en = 1;
    bool intra_trans_en = 0;
    int c0, c0_prev;
    int c1, c1_prev;
    int c2, c2_prev;
    /* Variable Declaration */

    {
B_IO_L2_in_boundary_x0_loop_1:         for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
B_IO_L2_in_boundary_x0_loop_2:             for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
B_IO_L2_in_boundary_x0_loop_3:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // io_L3
                    {
                        if (arb == 0) {
                            if (inter_trans_en) {
B_IO_L2_in_boundary_x0_loop_4:                                 for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 1 max = 1
                                    if (c3 > -8 * c1 + 41)
                                        break;
                                    if (c3 == p0) {
                                        // io_L2
B_IO_L2_in_boundary_x0_loop_5:                                         for (ap_uint<2> c4 = 0; c4 <= 1; c4 += 1) {

                                            // access_coalesce
                                            {
                                                B_t8 in_data;
                                                B_t8 out_data;
                                                in_data = fifo_B_in.read();
                                                out_data = in_data;
                                                local_B_pong[c4][0] = out_data;
                                            }
                                        }
                                    }
                                }
                            }
                            ap_uint<32> data_split[8];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                            /* Variable Declaration */

                            if (intra_trans_en) {
B_IO_L2_in_boundary_x0_loop_6:                                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_IO_L2_in_boundary_x0_loop_7:                                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                        // latency
B_IO_L2_in_boundary_x0_loop_8:                                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                            // latency
B_IO_L2_in_boundary_x0_loop_9:                                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                                // simd
                                                {
                                                    B_t8 in_data;
                                                    B_t1 out_data;
                                                    in_data = local_B_ping[c5][c7 / 8];
B_IO_L2_in_boundary_x0_loop_10:                                                     for (ap_uint<4> n = 0; n < 8; n++) {
                                                        data_split[n] = in_data(31, 0);
                                                        in_data = in_data >> 32;
                                                    }
                                                    int split_idx = (c7) % 8;
                                                    union {
                                                        unsigned int ui;
                                                        float ut;
                                                    } u;
                                                    u.ui = (unsigned int)data_split[split_idx];
                                                    out_data = u.ut;
                                                    fifo_B_local_out.write(out_data);
                                                }
                                            }
                                        }
                                    }
                            }
                        } else {
                            if (inter_trans_en) {
B_IO_L2_in_boundary_x0_loop_11:                                 for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 1 max = 1
                                    if (c3 > -8 * c1 + 41)
                                        break;
                                    if (c3 == p0) {
                                        // io_L2
B_IO_L2_in_boundary_x0_loop_12:                                         for (ap_uint<2> c4 = 0; c4 <= 1; c4 += 1) {

                                            // access_coalesce
                                            {
                                                B_t8 in_data;
                                                B_t8 out_data;
                                                in_data = fifo_B_in.read();
                                                out_data = in_data;
                                                local_B_ping[c4][0] = out_data;
                                            }
                                        }
                                    }
                                }
                            }
                            ap_uint<32> data_split[8];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                            /* Variable Declaration */

                            if (intra_trans_en) {
B_IO_L2_in_boundary_x0_loop_13:                                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_IO_L2_in_boundary_x0_loop_14:                                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                        // latency
B_IO_L2_in_boundary_x0_loop_15:                                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                            // latency
B_IO_L2_in_boundary_x0_loop_16:                                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                                // simd
                                                {
                                                    B_t8 in_data;
                                                    B_t1 out_data;
                                                    in_data = local_B_pong[c5][c7 / 8];
B_IO_L2_in_boundary_x0_loop_17:                                                     for (ap_uint<4> n = 0; n < 8; n++) {
                                                        data_split[n] = in_data(31, 0);
                                                        in_data = in_data >> 32;
                                                    }
                                                    int split_idx = (c7) % 8;
                                                    union {
                                                        unsigned int ui;
                                                        float ut;
                                                    } u;
                                                    u.ui = (unsigned int)data_split[split_idx];
                                                    out_data = u.ut;
                                                    fifo_B_local_out.write(out_data);
                                                }
                                            }
                                        }
                                    }
                            }
                        }
                        intra_trans_en = 1;
                        arb = !arb;
                        c0_prev = c0;
                        c1_prev = c1;
                        c2_prev = c2;
                    }
                }
        if (arb == 0) {
            ap_uint<32> data_split[8];
#pragma HLS ARRAY_PARTITION variable = data_split complete
            /* Variable Declaration */

            if (intra_trans_en) {
B_IO_L2_in_boundary_x0_loop_18:                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_IO_L2_in_boundary_x0_loop_19:                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                        // latency
B_IO_L2_in_boundary_x0_loop_20:                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                            // latency
B_IO_L2_in_boundary_x0_loop_21:                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                // simd
                                {
                                    B_t8 in_data;
                                    B_t1 out_data;
                                    in_data = local_B_ping[c5][c7 / 8];
B_IO_L2_in_boundary_x0_loop_22:                                     for (ap_uint<4> n = 0; n < 8; n++) {
                                        data_split[n] = in_data(31, 0);
                                        in_data = in_data >> 32;
                                    }
                                    int split_idx = (c7) % 8;
                                    union {
                                        unsigned int ui;
                                        float ut;
                                    } u;
                                    u.ui = (unsigned int)data_split[split_idx];
                                    out_data = u.ut;
                                    fifo_B_local_out.write(out_data);
                                }
                            }
                        }
                    }
            }
        } else {
            ap_uint<32> data_split[8];
#pragma HLS ARRAY_PARTITION variable = data_split complete
            /* Variable Declaration */

            if (intra_trans_en) {
B_IO_L2_in_boundary_x0_loop_23:                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_IO_L2_in_boundary_x0_loop_24:                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                        // latency
B_IO_L2_in_boundary_x0_loop_25:                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                            // latency
B_IO_L2_in_boundary_x0_loop_26:                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                // simd
                                {
                                    B_t8 in_data;
                                    B_t1 out_data;
                                    in_data = local_B_pong[c5][c7 / 8];
B_IO_L2_in_boundary_x0_loop_27:                                     for (ap_uint<4> n = 0; n < 8; n++) {
                                        data_split[n] = in_data(31, 0);
                                        in_data = in_data >> 32;
                                    }
                                    int split_idx = (c7) % 8;
                                    union {
                                        unsigned int ui;
                                        float ut;
                                    } u;
                                    u.ui = (unsigned int)data_split[split_idx];
                                    out_data = u.ut;
                                    fifo_B_local_out.write(out_data);
                                }
                            }
                        }
                    }
            }
        }
    }
}
/* Module Definition */

/* Module Definition */
void C_IO_L3_in_x0(hls::stream<C_t16> &fifo_C_in, hls::stream<C_t16> &fifo_C_local_out) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    /* Variable Declaration */

C_IO_L3_in_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
C_IO_L3_in_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
            // array
            // io_L3
C_IO_L3_in_x0_loop_3:             for (int c3 = 0; c3 <= 7; c3 += 1) {
                if (c3 > -8 * c1 + 41)
                    break;
                // io_L2
C_IO_L3_in_x0_loop_4:                 for (ap_uint<4> c4 = 0; c4 <= 7; c4 += 1) {
                    // access_coalesce
                    // access_serialize
C_IO_L3_in_x0_loop_5:                     for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {

                        {
                            C_t16 in_data;
                            C_t16 out_data;
                            in_data = fifo_C_in.read();
                            out_data = in_data;
                            fifo_C_local_out.write(out_data);
                        }
                    }
                }
            }
        }
}
/* Module Definition */

/* Module Definition */
void C_IO_L3_in_serialize_x0(C_t16 *C, hls::stream<C_t16> &fifo_C_local_out) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    /* Variable Declaration */

C_IO_L3_in_serialize_x0_loop_1:     for (ap_uint<23> i = 0; i < 1024; i++) {

        C_t16 fifo_data;
        fifo_data = C[i];
        fifo_C_local_out.write(fifo_data);
    }
}
/* Module Definition */

/* Module Definition */
void C_IO_L2_in_0_x0(int idx, hls::stream<C_t16> &fifo_C_in, hls::stream<C_t16> &fifo_C_out, hls::stream<C_t8> &fifo_C_local_out) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx; // module id
    C_t16 local_C_ping[8][16];
    C_t16 local_C_pong[8][16];
    bool arb = 0;
    bool inter_trans_en = 1;
    bool intra_trans_en = 0;
    int c0, c0_prev;
    int c1, c1_prev;
    /* Variable Declaration */

    {
C_IO_L2_in_0_x0_loop_1:         for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
C_IO_L2_in_0_x0_loop_2:             for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
                // array
                // io_L3
                {
                    if (arb == 0) {
                        if (inter_trans_en) {
C_IO_L2_in_0_x0_loop_3:                             for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 1 max = 8
                                if (c3 > -8 * c1 + 41)
                                    break;
                                // io_L2
                                if (c3 == p0) {
C_IO_L2_in_0_x0_loop_4:                                     for (ap_uint<4> c4 = 0; c4 <= 7; c4 += 1) {
                                        // access_coalesce
C_IO_L2_in_0_x0_loop_5:                                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {

                                            {
                                                C_t16 in_data;
                                                C_t16 out_data;
                                                in_data = fifo_C_in.read();
                                                out_data = in_data;
                                                local_C_pong[c4][c5] = out_data;
                                            }
                                        }
                                    }
                                } else {
C_IO_L2_in_0_x0_loop_6:                                     for (ap_uint<4> c4 = 0; c4 <= 7; c4 += 1) {
                                        // access_coalesce
C_IO_L2_in_0_x0_loop_7:                                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {

                                            {
                                                C_t16 in_data;
                                                C_t16 out_data;
                                                in_data = fifo_C_in.read();
                                                out_data = in_data;
                                                fifo_C_out.write(out_data);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        C_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                        /* Variable Declaration */

                        if (intra_trans_en) {
C_IO_L2_in_0_x0_loop_8:                             for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                                // array
                                // io_L3
                                // io_L2
                                // io_L1
                                // pe
C_IO_L2_in_0_x0_loop_9:                                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_IO_L2_in_0_x0_loop_10:                                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                        // latency
C_IO_L2_in_0_x0_loop_11:                                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                            // latency
C_IO_L2_in_0_x0_loop_12:                                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                                // simd
                                                {
                                                    C_t16 in_data;
                                                    C_t8 out_data;
                                                    in_data = local_C_ping[c7][8 * c6 / 16];
C_IO_L2_in_0_x0_loop_13:                                                     for (ap_uint<2> n = 0; n < 2; n++) {
                                                        data_split[n] = in_data(255, 0);
                                                        in_data = in_data >> 256;
                                                    }
                                                    int split_idx = (c6) % 2;
                                                    out_data = data_split[split_idx];
                                                    fifo_C_local_out.write(out_data);
                                                }
                                            }
                                        }
                                    }
                            }
                        }
                    } else {
                        if (inter_trans_en) {
C_IO_L2_in_0_x0_loop_14:                             for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 1 max = 8
                                if (c3 > -8 * c1 + 41)
                                    break;
                                // io_L2
                                if (c3 == p0) {
C_IO_L2_in_0_x0_loop_15:                                     for (ap_uint<4> c4 = 0; c4 <= 7; c4 += 1) {
                                        // access_coalesce
C_IO_L2_in_0_x0_loop_16:                                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {

                                            {
                                                C_t16 in_data;
                                                C_t16 out_data;
                                                in_data = fifo_C_in.read();
                                                out_data = in_data;
                                                local_C_ping[c4][c5] = out_data;
                                            }
                                        }
                                    }
                                } else {
C_IO_L2_in_0_x0_loop_17:                                     for (ap_uint<4> c4 = 0; c4 <= 7; c4 += 1) {
                                        // access_coalesce
C_IO_L2_in_0_x0_loop_18:                                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {

                                            {
                                                C_t16 in_data;
                                                C_t16 out_data;
                                                in_data = fifo_C_in.read();
                                                out_data = in_data;
                                                fifo_C_out.write(out_data);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        C_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                        /* Variable Declaration */

                        if (intra_trans_en) {
C_IO_L2_in_0_x0_loop_19:                             for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                                // array
                                // io_L3
                                // io_L2
                                // io_L1
                                // pe
C_IO_L2_in_0_x0_loop_20:                                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_IO_L2_in_0_x0_loop_21:                                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                        // latency
C_IO_L2_in_0_x0_loop_22:                                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                            // latency
C_IO_L2_in_0_x0_loop_23:                                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                                // simd
                                                {
                                                    C_t16 in_data;
                                                    C_t8 out_data;
                                                    in_data = local_C_pong[c7][8 * c6 / 16];
C_IO_L2_in_0_x0_loop_24:                                                     for (ap_uint<2> n = 0; n < 2; n++) {
                                                        data_split[n] = in_data(255, 0);
                                                        in_data = in_data >> 256;
                                                    }
                                                    int split_idx = (c6) % 2;
                                                    out_data = data_split[split_idx];
                                                    fifo_C_local_out.write(out_data);
                                                }
                                            }
                                        }
                                    }
                            }
                        }
                    }
                    intra_trans_en = 1;
                    arb = !arb;
                    c0_prev = c0;
                    c1_prev = c1;
                }
            }
        if (arb == 0) {
            C_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
            /* Variable Declaration */

            if (intra_trans_en) {
C_IO_L2_in_0_x0_loop_25:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // io_L3
                    // io_L2
                    // io_L1
                    // pe
C_IO_L2_in_0_x0_loop_26:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_IO_L2_in_0_x0_loop_27:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
C_IO_L2_in_0_x0_loop_28:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
C_IO_L2_in_0_x0_loop_29:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    // simd
                                    {
                                        C_t16 in_data;
                                        C_t8 out_data;
                                        in_data = local_C_ping[c7][8 * c6 / 16];
C_IO_L2_in_0_x0_loop_30:                                         for (ap_uint<2> n = 0; n < 2; n++) {
                                            data_split[n] = in_data(255, 0);
                                            in_data = in_data >> 256;
                                        }
                                        int split_idx = (c6) % 2;
                                        out_data = data_split[split_idx];
                                        fifo_C_local_out.write(out_data);
                                    }
                                }
                            }
                        }
                }
            }
        } else {
            C_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
            /* Variable Declaration */

            if (intra_trans_en) {
C_IO_L2_in_0_x0_loop_31:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // io_L3
                    // io_L2
                    // io_L1
                    // pe
C_IO_L2_in_0_x0_loop_32:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_IO_L2_in_0_x0_loop_33:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
C_IO_L2_in_0_x0_loop_34:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
C_IO_L2_in_0_x0_loop_35:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    // simd
                                    {
                                        C_t16 in_data;
                                        C_t8 out_data;
                                        in_data = local_C_pong[c7][8 * c6 / 16];
C_IO_L2_in_0_x0_loop_36:                                         for (ap_uint<2> n = 0; n < 2; n++) {
                                            data_split[n] = in_data(255, 0);
                                            in_data = in_data >> 256;
                                        }
                                        int split_idx = (c6) % 2;
                                        out_data = data_split[split_idx];
                                        fifo_C_local_out.write(out_data);
                                    }
                                }
                            }
                        }
                }
            }
        }
    }
}
/* Module Definition */

/* Module Definition */
void C_IO_L2_in_1_x0(int idx, hls::stream<C_t16> &fifo_C_in, hls::stream<C_t16> &fifo_C_out, hls::stream<C_t8> &fifo_C_local_out) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx; // module id
    C_t16 local_C_ping[8][16];
    C_t16 local_C_pong[8][16];
    bool arb = 0;
    bool inter_trans_en = 1;
    bool intra_trans_en = 0;
    int c0, c0_prev;
    int c1, c1_prev;
    /* Variable Declaration */

    {
C_IO_L2_in_1_x0_loop_1:         for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
C_IO_L2_in_1_x0_loop_2:             for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
                // array
                // io_L3
                {
                    if (arb == 0) {
                        if (inter_trans_en) {
C_IO_L2_in_1_x0_loop_3:                             for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 1 max = 8
                                if (c3 > -8 * c1 + 41)
                                    break;
                                // io_L2
                                if (c3 == p0) {
C_IO_L2_in_1_x0_loop_4:                                     for (ap_uint<4> c4 = 0; c4 <= 7; c4 += 1) {
                                        // access_coalesce
C_IO_L2_in_1_x0_loop_5:                                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {

                                            {
                                                C_t16 in_data;
                                                C_t16 out_data;
                                                in_data = fifo_C_in.read();
                                                out_data = in_data;
                                                local_C_pong[c4][c5] = out_data;
                                            }
                                        }
                                    }
                                } else {
C_IO_L2_in_1_x0_loop_6:                                     for (ap_uint<4> c4 = 0; c4 <= 7; c4 += 1) {
                                        // access_coalesce
C_IO_L2_in_1_x0_loop_7:                                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {

                                            {
                                                C_t16 in_data;
                                                C_t16 out_data;
                                                in_data = fifo_C_in.read();
                                                out_data = in_data;
                                                fifo_C_out.write(out_data);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        C_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                        /* Variable Declaration */

                        if (intra_trans_en) {
C_IO_L2_in_1_x0_loop_8:                             for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                                // array
                                // io_L3
                                // io_L2
                                // io_L1
                                // pe
C_IO_L2_in_1_x0_loop_9:                                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_IO_L2_in_1_x0_loop_10:                                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                        // latency
C_IO_L2_in_1_x0_loop_11:                                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                            // latency
C_IO_L2_in_1_x0_loop_12:                                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                                // simd
                                                {
                                                    C_t16 in_data;
                                                    C_t8 out_data;
                                                    in_data = local_C_ping[c7][8 * c6 / 16];
C_IO_L2_in_1_x0_loop_13:                                                     for (ap_uint<2> n = 0; n < 2; n++) {
                                                        data_split[n] = in_data(255, 0);
                                                        in_data = in_data >> 256;
                                                    }
                                                    int split_idx = (c6) % 2;
                                                    out_data = data_split[split_idx];
                                                    fifo_C_local_out.write(out_data);
                                                }
                                            }
                                        }
                                    }
                            }
                        }
                    } else {
                        if (inter_trans_en) {
C_IO_L2_in_1_x0_loop_14:                             for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 1 max = 8
                                if (c3 > -8 * c1 + 41)
                                    break;
                                // io_L2
                                if (c3 == p0) {
C_IO_L2_in_1_x0_loop_15:                                     for (ap_uint<4> c4 = 0; c4 <= 7; c4 += 1) {
                                        // access_coalesce
C_IO_L2_in_1_x0_loop_16:                                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {

                                            {
                                                C_t16 in_data;
                                                C_t16 out_data;
                                                in_data = fifo_C_in.read();
                                                out_data = in_data;
                                                local_C_ping[c4][c5] = out_data;
                                            }
                                        }
                                    }
                                } else {
C_IO_L2_in_1_x0_loop_17:                                     for (ap_uint<4> c4 = 0; c4 <= 7; c4 += 1) {
                                        // access_coalesce
C_IO_L2_in_1_x0_loop_18:                                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {

                                            {
                                                C_t16 in_data;
                                                C_t16 out_data;
                                                in_data = fifo_C_in.read();
                                                out_data = in_data;
                                                fifo_C_out.write(out_data);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        C_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                        /* Variable Declaration */

                        if (intra_trans_en) {
C_IO_L2_in_1_x0_loop_19:                             for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                                // array
                                // io_L3
                                // io_L2
                                // io_L1
                                // pe
C_IO_L2_in_1_x0_loop_20:                                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_IO_L2_in_1_x0_loop_21:                                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                        // latency
C_IO_L2_in_1_x0_loop_22:                                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                            // latency
C_IO_L2_in_1_x0_loop_23:                                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                                // simd
                                                {
                                                    C_t16 in_data;
                                                    C_t8 out_data;
                                                    in_data = local_C_pong[c7][8 * c6 / 16];
C_IO_L2_in_1_x0_loop_24:                                                     for (ap_uint<2> n = 0; n < 2; n++) {
                                                        data_split[n] = in_data(255, 0);
                                                        in_data = in_data >> 256;
                                                    }
                                                    int split_idx = (c6) % 2;
                                                    out_data = data_split[split_idx];
                                                    fifo_C_local_out.write(out_data);
                                                }
                                            }
                                        }
                                    }
                            }
                        }
                    }
                    intra_trans_en = 1;
                    arb = !arb;
                    c0_prev = c0;
                    c1_prev = c1;
                }
            }
        if (arb == 0) {
            C_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
            /* Variable Declaration */

            if (intra_trans_en) {
C_IO_L2_in_1_x0_loop_25:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // io_L3
                    // io_L2
                    // io_L1
                    // pe
C_IO_L2_in_1_x0_loop_26:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_IO_L2_in_1_x0_loop_27:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
C_IO_L2_in_1_x0_loop_28:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
C_IO_L2_in_1_x0_loop_29:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    // simd
                                    {
                                        C_t16 in_data;
                                        C_t8 out_data;
                                        in_data = local_C_ping[c7][8 * c6 / 16];
C_IO_L2_in_1_x0_loop_30:                                         for (ap_uint<2> n = 0; n < 2; n++) {
                                            data_split[n] = in_data(255, 0);
                                            in_data = in_data >> 256;
                                        }
                                        int split_idx = (c6) % 2;
                                        out_data = data_split[split_idx];
                                        fifo_C_local_out.write(out_data);
                                    }
                                }
                            }
                        }
                }
            }
        } else {
            C_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
            /* Variable Declaration */

            if (intra_trans_en) {
C_IO_L2_in_1_x0_loop_31:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // io_L3
                    // io_L2
                    // io_L1
                    // pe
C_IO_L2_in_1_x0_loop_32:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_IO_L2_in_1_x0_loop_33:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
C_IO_L2_in_1_x0_loop_34:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
C_IO_L2_in_1_x0_loop_35:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    // simd
                                    {
                                        C_t16 in_data;
                                        C_t8 out_data;
                                        in_data = local_C_pong[c7][8 * c6 / 16];
C_IO_L2_in_1_x0_loop_36:                                         for (ap_uint<2> n = 0; n < 2; n++) {
                                            data_split[n] = in_data(255, 0);
                                            in_data = in_data >> 256;
                                        }
                                        int split_idx = (c6) % 2;
                                        out_data = data_split[split_idx];
                                        fifo_C_local_out.write(out_data);
                                    }
                                }
                            }
                        }
                }
            }
        }
    }
}
/* Module Definition */

/* Module Definition */
void C_IO_L2_in_2_x0(int idx, hls::stream<C_t16> &fifo_C_in, hls::stream<C_t16> &fifo_C_out, hls::stream<C_t8> &fifo_C_local_out) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx; // module id
    C_t16 local_C_ping[8][16];
    C_t16 local_C_pong[8][16];
    bool arb = 0;
    bool inter_trans_en = 1;
    bool intra_trans_en = 0;
    int c0, c0_prev;
    int c1, c1_prev;
    /* Variable Declaration */

    {
C_IO_L2_in_2_x0_loop_1:         for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
C_IO_L2_in_2_x0_loop_2:             for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
                // array
                // io_L3
                {
                    if (arb == 0) {
                        if (inter_trans_en) {
C_IO_L2_in_2_x0_loop_3:                             for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 1 max = 8
                                if (c3 > -8 * c1 + 41)
                                    break;
                                // io_L2
                                if (c3 == p0) {
C_IO_L2_in_2_x0_loop_4:                                     for (ap_uint<4> c4 = 0; c4 <= 7; c4 += 1) {
                                        // access_coalesce
C_IO_L2_in_2_x0_loop_5:                                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {

                                            {
                                                C_t16 in_data;
                                                C_t16 out_data;
                                                in_data = fifo_C_in.read();
                                                out_data = in_data;
                                                local_C_pong[c4][c5] = out_data;
                                            }
                                        }
                                    }
                                } else {
C_IO_L2_in_2_x0_loop_6:                                     for (ap_uint<4> c4 = 0; c4 <= 7; c4 += 1) {
                                        // access_coalesce
C_IO_L2_in_2_x0_loop_7:                                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {

                                            {
                                                C_t16 in_data;
                                                C_t16 out_data;
                                                in_data = fifo_C_in.read();
                                                out_data = in_data;
                                                fifo_C_out.write(out_data);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        C_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                        /* Variable Declaration */

                        if (intra_trans_en) {
C_IO_L2_in_2_x0_loop_8:                             for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                                // array
                                // io_L3
                                // io_L2
                                // io_L1
                                // pe
C_IO_L2_in_2_x0_loop_9:                                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_IO_L2_in_2_x0_loop_10:                                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                        // latency
C_IO_L2_in_2_x0_loop_11:                                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                            // latency
C_IO_L2_in_2_x0_loop_12:                                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                                // simd
                                                {
                                                    C_t16 in_data;
                                                    C_t8 out_data;
                                                    in_data = local_C_ping[c7][8 * c6 / 16];
C_IO_L2_in_2_x0_loop_13:                                                     for (ap_uint<2> n = 0; n < 2; n++) {
                                                        data_split[n] = in_data(255, 0);
                                                        in_data = in_data >> 256;
                                                    }
                                                    int split_idx = (c6) % 2;
                                                    out_data = data_split[split_idx];
                                                    fifo_C_local_out.write(out_data);
                                                }
                                            }
                                        }
                                    }
                            }
                        }
                    } else {
                        if (inter_trans_en) {
C_IO_L2_in_2_x0_loop_14:                             for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 1 max = 8
                                if (c3 > -8 * c1 + 41)
                                    break;
                                // io_L2
                                if (c3 == p0) {
C_IO_L2_in_2_x0_loop_15:                                     for (ap_uint<4> c4 = 0; c4 <= 7; c4 += 1) {
                                        // access_coalesce
C_IO_L2_in_2_x0_loop_16:                                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {

                                            {
                                                C_t16 in_data;
                                                C_t16 out_data;
                                                in_data = fifo_C_in.read();
                                                out_data = in_data;
                                                local_C_ping[c4][c5] = out_data;
                                            }
                                        }
                                    }
                                } else {
C_IO_L2_in_2_x0_loop_17:                                     for (ap_uint<4> c4 = 0; c4 <= 7; c4 += 1) {
                                        // access_coalesce
C_IO_L2_in_2_x0_loop_18:                                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {

                                            {
                                                C_t16 in_data;
                                                C_t16 out_data;
                                                in_data = fifo_C_in.read();
                                                out_data = in_data;
                                                fifo_C_out.write(out_data);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        C_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                        /* Variable Declaration */

                        if (intra_trans_en) {
C_IO_L2_in_2_x0_loop_19:                             for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                                // array
                                // io_L3
                                // io_L2
                                // io_L1
                                // pe
C_IO_L2_in_2_x0_loop_20:                                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_IO_L2_in_2_x0_loop_21:                                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                        // latency
C_IO_L2_in_2_x0_loop_22:                                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                            // latency
C_IO_L2_in_2_x0_loop_23:                                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                                // simd
                                                {
                                                    C_t16 in_data;
                                                    C_t8 out_data;
                                                    in_data = local_C_pong[c7][8 * c6 / 16];
C_IO_L2_in_2_x0_loop_24:                                                     for (ap_uint<2> n = 0; n < 2; n++) {
                                                        data_split[n] = in_data(255, 0);
                                                        in_data = in_data >> 256;
                                                    }
                                                    int split_idx = (c6) % 2;
                                                    out_data = data_split[split_idx];
                                                    fifo_C_local_out.write(out_data);
                                                }
                                            }
                                        }
                                    }
                            }
                        }
                    }
                    intra_trans_en = 1;
                    arb = !arb;
                    c0_prev = c0;
                    c1_prev = c1;
                }
            }
        if (arb == 0) {
            C_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
            /* Variable Declaration */

            if (intra_trans_en) {
C_IO_L2_in_2_x0_loop_25:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // io_L3
                    // io_L2
                    // io_L1
                    // pe
C_IO_L2_in_2_x0_loop_26:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_IO_L2_in_2_x0_loop_27:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
C_IO_L2_in_2_x0_loop_28:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
C_IO_L2_in_2_x0_loop_29:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    // simd
                                    {
                                        C_t16 in_data;
                                        C_t8 out_data;
                                        in_data = local_C_ping[c7][8 * c6 / 16];
C_IO_L2_in_2_x0_loop_30:                                         for (ap_uint<2> n = 0; n < 2; n++) {
                                            data_split[n] = in_data(255, 0);
                                            in_data = in_data >> 256;
                                        }
                                        int split_idx = (c6) % 2;
                                        out_data = data_split[split_idx];
                                        fifo_C_local_out.write(out_data);
                                    }
                                }
                            }
                        }
                }
            }
        } else {
            C_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
            /* Variable Declaration */

            if (intra_trans_en) {
C_IO_L2_in_2_x0_loop_31:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // io_L3
                    // io_L2
                    // io_L1
                    // pe
C_IO_L2_in_2_x0_loop_32:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_IO_L2_in_2_x0_loop_33:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
C_IO_L2_in_2_x0_loop_34:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
C_IO_L2_in_2_x0_loop_35:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    // simd
                                    {
                                        C_t16 in_data;
                                        C_t8 out_data;
                                        in_data = local_C_pong[c7][8 * c6 / 16];
C_IO_L2_in_2_x0_loop_36:                                         for (ap_uint<2> n = 0; n < 2; n++) {
                                            data_split[n] = in_data(255, 0);
                                            in_data = in_data >> 256;
                                        }
                                        int split_idx = (c6) % 2;
                                        out_data = data_split[split_idx];
                                        fifo_C_local_out.write(out_data);
                                    }
                                }
                            }
                        }
                }
            }
        }
    }
}
/* Module Definition */

/* Module Definition */
void C_IO_L2_in_3_x0(int idx, hls::stream<C_t16> &fifo_C_in, hls::stream<C_t16> &fifo_C_out, hls::stream<C_t8> &fifo_C_local_out) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx; // module id
    C_t16 local_C_ping[8][16];
    C_t16 local_C_pong[8][16];
    bool arb = 0;
    bool inter_trans_en = 1;
    bool intra_trans_en = 0;
    int c0, c0_prev;
    int c1, c1_prev;
    /* Variable Declaration */

    {
C_IO_L2_in_3_x0_loop_1:         for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
C_IO_L2_in_3_x0_loop_2:             for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
                // array
                // io_L3
                {
                    if (arb == 0) {
                        if (inter_trans_en) {
C_IO_L2_in_3_x0_loop_3:                             for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 1 max = 8
                                if (c3 > -8 * c1 + 41)
                                    break;
                                // io_L2
                                if (c3 == p0) {
C_IO_L2_in_3_x0_loop_4:                                     for (ap_uint<4> c4 = 0; c4 <= 7; c4 += 1) {
                                        // access_coalesce
C_IO_L2_in_3_x0_loop_5:                                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {

                                            {
                                                C_t16 in_data;
                                                C_t16 out_data;
                                                in_data = fifo_C_in.read();
                                                out_data = in_data;
                                                local_C_pong[c4][c5] = out_data;
                                            }
                                        }
                                    }
                                } else {
C_IO_L2_in_3_x0_loop_6:                                     for (ap_uint<4> c4 = 0; c4 <= 7; c4 += 1) {
                                        // access_coalesce
C_IO_L2_in_3_x0_loop_7:                                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {

                                            {
                                                C_t16 in_data;
                                                C_t16 out_data;
                                                in_data = fifo_C_in.read();
                                                out_data = in_data;
                                                fifo_C_out.write(out_data);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        C_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                        /* Variable Declaration */

                        if (intra_trans_en) {
C_IO_L2_in_3_x0_loop_8:                             for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                                // array
                                // io_L3
                                // io_L2
                                // io_L1
                                // pe
C_IO_L2_in_3_x0_loop_9:                                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_IO_L2_in_3_x0_loop_10:                                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                        // latency
C_IO_L2_in_3_x0_loop_11:                                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                            // latency
C_IO_L2_in_3_x0_loop_12:                                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                                // simd
                                                {
                                                    C_t16 in_data;
                                                    C_t8 out_data;
                                                    in_data = local_C_ping[c7][8 * c6 / 16];
C_IO_L2_in_3_x0_loop_13:                                                     for (ap_uint<2> n = 0; n < 2; n++) {
                                                        data_split[n] = in_data(255, 0);
                                                        in_data = in_data >> 256;
                                                    }
                                                    int split_idx = (c6) % 2;
                                                    out_data = data_split[split_idx];
                                                    fifo_C_local_out.write(out_data);
                                                }
                                            }
                                        }
                                    }
                            }
                        }
                    } else {
                        if (inter_trans_en) {
C_IO_L2_in_3_x0_loop_14:                             for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 1 max = 8
                                if (c3 > -8 * c1 + 41)
                                    break;
                                // io_L2
                                if (c3 == p0) {
C_IO_L2_in_3_x0_loop_15:                                     for (ap_uint<4> c4 = 0; c4 <= 7; c4 += 1) {
                                        // access_coalesce
C_IO_L2_in_3_x0_loop_16:                                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {

                                            {
                                                C_t16 in_data;
                                                C_t16 out_data;
                                                in_data = fifo_C_in.read();
                                                out_data = in_data;
                                                local_C_ping[c4][c5] = out_data;
                                            }
                                        }
                                    }
                                } else {
C_IO_L2_in_3_x0_loop_17:                                     for (ap_uint<4> c4 = 0; c4 <= 7; c4 += 1) {
                                        // access_coalesce
C_IO_L2_in_3_x0_loop_18:                                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {

                                            {
                                                C_t16 in_data;
                                                C_t16 out_data;
                                                in_data = fifo_C_in.read();
                                                out_data = in_data;
                                                fifo_C_out.write(out_data);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        C_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                        /* Variable Declaration */

                        if (intra_trans_en) {
C_IO_L2_in_3_x0_loop_19:                             for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                                // array
                                // io_L3
                                // io_L2
                                // io_L1
                                // pe
C_IO_L2_in_3_x0_loop_20:                                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_IO_L2_in_3_x0_loop_21:                                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                        // latency
C_IO_L2_in_3_x0_loop_22:                                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                            // latency
C_IO_L2_in_3_x0_loop_23:                                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                                // simd
                                                {
                                                    C_t16 in_data;
                                                    C_t8 out_data;
                                                    in_data = local_C_pong[c7][8 * c6 / 16];
C_IO_L2_in_3_x0_loop_24:                                                     for (ap_uint<2> n = 0; n < 2; n++) {
                                                        data_split[n] = in_data(255, 0);
                                                        in_data = in_data >> 256;
                                                    }
                                                    int split_idx = (c6) % 2;
                                                    out_data = data_split[split_idx];
                                                    fifo_C_local_out.write(out_data);
                                                }
                                            }
                                        }
                                    }
                            }
                        }
                    }
                    intra_trans_en = 1;
                    arb = !arb;
                    c0_prev = c0;
                    c1_prev = c1;
                }
            }
        if (arb == 0) {
            C_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
            /* Variable Declaration */

            if (intra_trans_en) {
C_IO_L2_in_3_x0_loop_25:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // io_L3
                    // io_L2
                    // io_L1
                    // pe
C_IO_L2_in_3_x0_loop_26:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_IO_L2_in_3_x0_loop_27:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
C_IO_L2_in_3_x0_loop_28:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
C_IO_L2_in_3_x0_loop_29:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    // simd
                                    {
                                        C_t16 in_data;
                                        C_t8 out_data;
                                        in_data = local_C_ping[c7][8 * c6 / 16];
C_IO_L2_in_3_x0_loop_30:                                         for (ap_uint<2> n = 0; n < 2; n++) {
                                            data_split[n] = in_data(255, 0);
                                            in_data = in_data >> 256;
                                        }
                                        int split_idx = (c6) % 2;
                                        out_data = data_split[split_idx];
                                        fifo_C_local_out.write(out_data);
                                    }
                                }
                            }
                        }
                }
            }
        } else {
            C_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
            /* Variable Declaration */

            if (intra_trans_en) {
C_IO_L2_in_3_x0_loop_31:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // io_L3
                    // io_L2
                    // io_L1
                    // pe
C_IO_L2_in_3_x0_loop_32:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_IO_L2_in_3_x0_loop_33:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
C_IO_L2_in_3_x0_loop_34:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
C_IO_L2_in_3_x0_loop_35:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    // simd
                                    {
                                        C_t16 in_data;
                                        C_t8 out_data;
                                        in_data = local_C_pong[c7][8 * c6 / 16];
C_IO_L2_in_3_x0_loop_36:                                         for (ap_uint<2> n = 0; n < 2; n++) {
                                            data_split[n] = in_data(255, 0);
                                            in_data = in_data >> 256;
                                        }
                                        int split_idx = (c6) % 2;
                                        out_data = data_split[split_idx];
                                        fifo_C_local_out.write(out_data);
                                    }
                                }
                            }
                        }
                }
            }
        }
    }
}
/* Module Definition */

/* Module Definition */
void C_IO_L2_in_4_x0(int idx, hls::stream<C_t16> &fifo_C_in, hls::stream<C_t16> &fifo_C_out, hls::stream<C_t8> &fifo_C_local_out) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx; // module id
    C_t16 local_C_ping[8][16];
    C_t16 local_C_pong[8][16];
    bool arb = 0;
    bool inter_trans_en = 1;
    bool intra_trans_en = 0;
    int c0, c0_prev;
    int c1, c1_prev;
    /* Variable Declaration */

    {
C_IO_L2_in_4_x0_loop_1:         for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
C_IO_L2_in_4_x0_loop_2:             for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
                // array
                // io_L3
                {
                    if (arb == 0) {
                        if (inter_trans_en) {
C_IO_L2_in_4_x0_loop_3:                             for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 1 max = 8
                                if (c3 > -8 * c1 + 41)
                                    break;
                                // io_L2
                                if (c3 == p0) {
C_IO_L2_in_4_x0_loop_4:                                     for (ap_uint<4> c4 = 0; c4 <= 7; c4 += 1) {
                                        // access_coalesce
C_IO_L2_in_4_x0_loop_5:                                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {

                                            {
                                                C_t16 in_data;
                                                C_t16 out_data;
                                                in_data = fifo_C_in.read();
                                                out_data = in_data;
                                                local_C_pong[c4][c5] = out_data;
                                            }
                                        }
                                    }
                                } else {
C_IO_L2_in_4_x0_loop_6:                                     for (ap_uint<4> c4 = 0; c4 <= 7; c4 += 1) {
                                        // access_coalesce
C_IO_L2_in_4_x0_loop_7:                                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {

                                            {
                                                C_t16 in_data;
                                                C_t16 out_data;
                                                in_data = fifo_C_in.read();
                                                out_data = in_data;
                                                fifo_C_out.write(out_data);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        C_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                        /* Variable Declaration */

                        if (intra_trans_en) {
C_IO_L2_in_4_x0_loop_8:                             for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                                // array
                                // io_L3
                                // io_L2
                                // io_L1
                                // pe
C_IO_L2_in_4_x0_loop_9:                                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_IO_L2_in_4_x0_loop_10:                                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                        // latency
C_IO_L2_in_4_x0_loop_11:                                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                            // latency
C_IO_L2_in_4_x0_loop_12:                                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                                // simd
                                                {
                                                    C_t16 in_data;
                                                    C_t8 out_data;
                                                    in_data = local_C_ping[c7][8 * c6 / 16];
C_IO_L2_in_4_x0_loop_13:                                                     for (ap_uint<2> n = 0; n < 2; n++) {
                                                        data_split[n] = in_data(255, 0);
                                                        in_data = in_data >> 256;
                                                    }
                                                    int split_idx = (c6) % 2;
                                                    out_data = data_split[split_idx];
                                                    fifo_C_local_out.write(out_data);
                                                }
                                            }
                                        }
                                    }
                            }
                        }
                    } else {
                        if (inter_trans_en) {
C_IO_L2_in_4_x0_loop_14:                             for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 1 max = 8
                                if (c3 > -8 * c1 + 41)
                                    break;
                                // io_L2
                                if (c3 == p0) {
C_IO_L2_in_4_x0_loop_15:                                     for (ap_uint<4> c4 = 0; c4 <= 7; c4 += 1) {
                                        // access_coalesce
C_IO_L2_in_4_x0_loop_16:                                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {

                                            {
                                                C_t16 in_data;
                                                C_t16 out_data;
                                                in_data = fifo_C_in.read();
                                                out_data = in_data;
                                                local_C_ping[c4][c5] = out_data;
                                            }
                                        }
                                    }
                                } else {
C_IO_L2_in_4_x0_loop_17:                                     for (ap_uint<4> c4 = 0; c4 <= 7; c4 += 1) {
                                        // access_coalesce
C_IO_L2_in_4_x0_loop_18:                                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {

                                            {
                                                C_t16 in_data;
                                                C_t16 out_data;
                                                in_data = fifo_C_in.read();
                                                out_data = in_data;
                                                fifo_C_out.write(out_data);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        C_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                        /* Variable Declaration */

                        if (intra_trans_en) {
C_IO_L2_in_4_x0_loop_19:                             for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                                // array
                                // io_L3
                                // io_L2
                                // io_L1
                                // pe
C_IO_L2_in_4_x0_loop_20:                                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_IO_L2_in_4_x0_loop_21:                                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                        // latency
C_IO_L2_in_4_x0_loop_22:                                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                            // latency
C_IO_L2_in_4_x0_loop_23:                                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                                // simd
                                                {
                                                    C_t16 in_data;
                                                    C_t8 out_data;
                                                    in_data = local_C_pong[c7][8 * c6 / 16];
C_IO_L2_in_4_x0_loop_24:                                                     for (ap_uint<2> n = 0; n < 2; n++) {
                                                        data_split[n] = in_data(255, 0);
                                                        in_data = in_data >> 256;
                                                    }
                                                    int split_idx = (c6) % 2;
                                                    out_data = data_split[split_idx];
                                                    fifo_C_local_out.write(out_data);
                                                }
                                            }
                                        }
                                    }
                            }
                        }
                    }
                    intra_trans_en = 1;
                    arb = !arb;
                    c0_prev = c0;
                    c1_prev = c1;
                }
            }
        if (arb == 0) {
            C_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
            /* Variable Declaration */

            if (intra_trans_en) {
C_IO_L2_in_4_x0_loop_25:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // io_L3
                    // io_L2
                    // io_L1
                    // pe
C_IO_L2_in_4_x0_loop_26:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_IO_L2_in_4_x0_loop_27:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
C_IO_L2_in_4_x0_loop_28:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
C_IO_L2_in_4_x0_loop_29:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    // simd
                                    {
                                        C_t16 in_data;
                                        C_t8 out_data;
                                        in_data = local_C_ping[c7][8 * c6 / 16];
C_IO_L2_in_4_x0_loop_30:                                         for (ap_uint<2> n = 0; n < 2; n++) {
                                            data_split[n] = in_data(255, 0);
                                            in_data = in_data >> 256;
                                        }
                                        int split_idx = (c6) % 2;
                                        out_data = data_split[split_idx];
                                        fifo_C_local_out.write(out_data);
                                    }
                                }
                            }
                        }
                }
            }
        } else {
            C_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
            /* Variable Declaration */

            if (intra_trans_en) {
C_IO_L2_in_4_x0_loop_31:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // io_L3
                    // io_L2
                    // io_L1
                    // pe
C_IO_L2_in_4_x0_loop_32:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_IO_L2_in_4_x0_loop_33:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
C_IO_L2_in_4_x0_loop_34:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
C_IO_L2_in_4_x0_loop_35:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    // simd
                                    {
                                        C_t16 in_data;
                                        C_t8 out_data;
                                        in_data = local_C_pong[c7][8 * c6 / 16];
C_IO_L2_in_4_x0_loop_36:                                         for (ap_uint<2> n = 0; n < 2; n++) {
                                            data_split[n] = in_data(255, 0);
                                            in_data = in_data >> 256;
                                        }
                                        int split_idx = (c6) % 2;
                                        out_data = data_split[split_idx];
                                        fifo_C_local_out.write(out_data);
                                    }
                                }
                            }
                        }
                }
            }
        }
    }
}
/* Module Definition */

/* Module Definition */
void C_IO_L2_in_5_x0(int idx, hls::stream<C_t16> &fifo_C_in, hls::stream<C_t16> &fifo_C_out, hls::stream<C_t8> &fifo_C_local_out) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx; // module id
    C_t16 local_C_ping[8][16];
    C_t16 local_C_pong[8][16];
    bool arb = 0;
    bool inter_trans_en = 1;
    bool intra_trans_en = 0;
    int c0, c0_prev;
    int c1, c1_prev;
    /* Variable Declaration */

    {
C_IO_L2_in_5_x0_loop_1:         for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
C_IO_L2_in_5_x0_loop_2:             for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
                // array
                // io_L3
                {
                    if (arb == 0) {
                        if (inter_trans_en) {
C_IO_L2_in_5_x0_loop_3:                             for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 1 max = 8
                                if (c3 > -8 * c1 + 41)
                                    break;
                                // io_L2
                                if (c3 == p0) {
C_IO_L2_in_5_x0_loop_4:                                     for (ap_uint<4> c4 = 0; c4 <= 7; c4 += 1) {
                                        // access_coalesce
C_IO_L2_in_5_x0_loop_5:                                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {

                                            {
                                                C_t16 in_data;
                                                C_t16 out_data;
                                                in_data = fifo_C_in.read();
                                                out_data = in_data;
                                                local_C_pong[c4][c5] = out_data;
                                            }
                                        }
                                    }
                                } else {
C_IO_L2_in_5_x0_loop_6:                                     for (ap_uint<4> c4 = 0; c4 <= 7; c4 += 1) {
                                        // access_coalesce
C_IO_L2_in_5_x0_loop_7:                                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {

                                            {
                                                C_t16 in_data;
                                                C_t16 out_data;
                                                in_data = fifo_C_in.read();
                                                out_data = in_data;
                                                fifo_C_out.write(out_data);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        C_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                        /* Variable Declaration */

                        if (intra_trans_en) {
C_IO_L2_in_5_x0_loop_8:                             for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                                // array
                                // io_L3
                                // io_L2
                                // io_L1
                                // pe
C_IO_L2_in_5_x0_loop_9:                                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_IO_L2_in_5_x0_loop_10:                                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                        // latency
C_IO_L2_in_5_x0_loop_11:                                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                            // latency
C_IO_L2_in_5_x0_loop_12:                                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                                // simd
                                                {
                                                    C_t16 in_data;
                                                    C_t8 out_data;
                                                    in_data = local_C_ping[c7][8 * c6 / 16];
C_IO_L2_in_5_x0_loop_13:                                                     for (ap_uint<2> n = 0; n < 2; n++) {
                                                        data_split[n] = in_data(255, 0);
                                                        in_data = in_data >> 256;
                                                    }
                                                    int split_idx = (c6) % 2;
                                                    out_data = data_split[split_idx];
                                                    fifo_C_local_out.write(out_data);
                                                }
                                            }
                                        }
                                    }
                            }
                        }
                    } else {
                        if (inter_trans_en) {
C_IO_L2_in_5_x0_loop_14:                             for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 1 max = 8
                                if (c3 > -8 * c1 + 41)
                                    break;
                                // io_L2
                                if (c3 == p0) {
C_IO_L2_in_5_x0_loop_15:                                     for (ap_uint<4> c4 = 0; c4 <= 7; c4 += 1) {
                                        // access_coalesce
C_IO_L2_in_5_x0_loop_16:                                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {

                                            {
                                                C_t16 in_data;
                                                C_t16 out_data;
                                                in_data = fifo_C_in.read();
                                                out_data = in_data;
                                                local_C_ping[c4][c5] = out_data;
                                            }
                                        }
                                    }
                                } else {
C_IO_L2_in_5_x0_loop_17:                                     for (ap_uint<4> c4 = 0; c4 <= 7; c4 += 1) {
                                        // access_coalesce
C_IO_L2_in_5_x0_loop_18:                                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {

                                            {
                                                C_t16 in_data;
                                                C_t16 out_data;
                                                in_data = fifo_C_in.read();
                                                out_data = in_data;
                                                fifo_C_out.write(out_data);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        C_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                        /* Variable Declaration */

                        if (intra_trans_en) {
C_IO_L2_in_5_x0_loop_19:                             for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                                // array
                                // io_L3
                                // io_L2
                                // io_L1
                                // pe
C_IO_L2_in_5_x0_loop_20:                                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_IO_L2_in_5_x0_loop_21:                                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                        // latency
C_IO_L2_in_5_x0_loop_22:                                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                            // latency
C_IO_L2_in_5_x0_loop_23:                                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                                // simd
                                                {
                                                    C_t16 in_data;
                                                    C_t8 out_data;
                                                    in_data = local_C_pong[c7][8 * c6 / 16];
C_IO_L2_in_5_x0_loop_24:                                                     for (ap_uint<2> n = 0; n < 2; n++) {
                                                        data_split[n] = in_data(255, 0);
                                                        in_data = in_data >> 256;
                                                    }
                                                    int split_idx = (c6) % 2;
                                                    out_data = data_split[split_idx];
                                                    fifo_C_local_out.write(out_data);
                                                }
                                            }
                                        }
                                    }
                            }
                        }
                    }
                    intra_trans_en = 1;
                    arb = !arb;
                    c0_prev = c0;
                    c1_prev = c1;
                }
            }
        if (arb == 0) {
            C_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
            /* Variable Declaration */

            if (intra_trans_en) {
C_IO_L2_in_5_x0_loop_25:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // io_L3
                    // io_L2
                    // io_L1
                    // pe
C_IO_L2_in_5_x0_loop_26:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_IO_L2_in_5_x0_loop_27:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
C_IO_L2_in_5_x0_loop_28:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
C_IO_L2_in_5_x0_loop_29:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    // simd
                                    {
                                        C_t16 in_data;
                                        C_t8 out_data;
                                        in_data = local_C_ping[c7][8 * c6 / 16];
C_IO_L2_in_5_x0_loop_30:                                         for (ap_uint<2> n = 0; n < 2; n++) {
                                            data_split[n] = in_data(255, 0);
                                            in_data = in_data >> 256;
                                        }
                                        int split_idx = (c6) % 2;
                                        out_data = data_split[split_idx];
                                        fifo_C_local_out.write(out_data);
                                    }
                                }
                            }
                        }
                }
            }
        } else {
            C_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
            /* Variable Declaration */

            if (intra_trans_en) {
C_IO_L2_in_5_x0_loop_31:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // io_L3
                    // io_L2
                    // io_L1
                    // pe
C_IO_L2_in_5_x0_loop_32:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_IO_L2_in_5_x0_loop_33:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
C_IO_L2_in_5_x0_loop_34:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
C_IO_L2_in_5_x0_loop_35:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    // simd
                                    {
                                        C_t16 in_data;
                                        C_t8 out_data;
                                        in_data = local_C_pong[c7][8 * c6 / 16];
C_IO_L2_in_5_x0_loop_36:                                         for (ap_uint<2> n = 0; n < 2; n++) {
                                            data_split[n] = in_data(255, 0);
                                            in_data = in_data >> 256;
                                        }
                                        int split_idx = (c6) % 2;
                                        out_data = data_split[split_idx];
                                        fifo_C_local_out.write(out_data);
                                    }
                                }
                            }
                        }
                }
            }
        }
    }
}
/* Module Definition */

/* Module Definition */
void C_IO_L2_in_6_x0(int idx, hls::stream<C_t16> &fifo_C_in, hls::stream<C_t16> &fifo_C_out, hls::stream<C_t8> &fifo_C_local_out) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx; // module id
    C_t16 local_C_ping[8][16];
    C_t16 local_C_pong[8][16];
    bool arb = 0;
    bool inter_trans_en = 1;
    bool intra_trans_en = 0;
    int c0, c0_prev;
    int c1, c1_prev;
    /* Variable Declaration */

    {
C_IO_L2_in_6_x0_loop_1:         for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
C_IO_L2_in_6_x0_loop_2:             for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
                // array
                // io_L3
                {
                    if (arb == 0) {
                        if (inter_trans_en) {
C_IO_L2_in_6_x0_loop_3:                             for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 1 max = 8
                                if (c3 > -8 * c1 + 41)
                                    break;
                                // io_L2
                                if (c3 == p0) {
C_IO_L2_in_6_x0_loop_4:                                     for (ap_uint<4> c4 = 0; c4 <= 7; c4 += 1) {
                                        // access_coalesce
C_IO_L2_in_6_x0_loop_5:                                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {

                                            {
                                                C_t16 in_data;
                                                C_t16 out_data;
                                                in_data = fifo_C_in.read();
                                                out_data = in_data;
                                                local_C_pong[c4][c5] = out_data;
                                            }
                                        }
                                    }
                                } else {
C_IO_L2_in_6_x0_loop_6:                                     for (ap_uint<4> c4 = 0; c4 <= 7; c4 += 1) {
                                        // access_coalesce
C_IO_L2_in_6_x0_loop_7:                                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {

                                            {
                                                C_t16 in_data;
                                                C_t16 out_data;
                                                in_data = fifo_C_in.read();
                                                out_data = in_data;
                                                fifo_C_out.write(out_data);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        C_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                        /* Variable Declaration */

                        if (intra_trans_en) {
C_IO_L2_in_6_x0_loop_8:                             for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                                // array
                                // io_L3
                                // io_L2
                                // io_L1
                                // pe
C_IO_L2_in_6_x0_loop_9:                                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_IO_L2_in_6_x0_loop_10:                                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                        // latency
C_IO_L2_in_6_x0_loop_11:                                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                            // latency
C_IO_L2_in_6_x0_loop_12:                                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                                // simd
                                                {
                                                    C_t16 in_data;
                                                    C_t8 out_data;
                                                    in_data = local_C_ping[c7][8 * c6 / 16];
C_IO_L2_in_6_x0_loop_13:                                                     for (ap_uint<2> n = 0; n < 2; n++) {
                                                        data_split[n] = in_data(255, 0);
                                                        in_data = in_data >> 256;
                                                    }
                                                    int split_idx = (c6) % 2;
                                                    out_data = data_split[split_idx];
                                                    fifo_C_local_out.write(out_data);
                                                }
                                            }
                                        }
                                    }
                            }
                        }
                    } else {
                        if (inter_trans_en) {
C_IO_L2_in_6_x0_loop_14:                             for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 1 max = 8
                                if (c3 > -8 * c1 + 41)
                                    break;
                                // io_L2
                                if (c3 == p0) {
C_IO_L2_in_6_x0_loop_15:                                     for (ap_uint<4> c4 = 0; c4 <= 7; c4 += 1) {
                                        // access_coalesce
C_IO_L2_in_6_x0_loop_16:                                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {

                                            {
                                                C_t16 in_data;
                                                C_t16 out_data;
                                                in_data = fifo_C_in.read();
                                                out_data = in_data;
                                                local_C_ping[c4][c5] = out_data;
                                            }
                                        }
                                    }
                                } else {
C_IO_L2_in_6_x0_loop_17:                                     for (ap_uint<4> c4 = 0; c4 <= 7; c4 += 1) {
                                        // access_coalesce
C_IO_L2_in_6_x0_loop_18:                                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {

                                            {
                                                C_t16 in_data;
                                                C_t16 out_data;
                                                in_data = fifo_C_in.read();
                                                out_data = in_data;
                                                fifo_C_out.write(out_data);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        C_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                        /* Variable Declaration */

                        if (intra_trans_en) {
C_IO_L2_in_6_x0_loop_19:                             for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                                // array
                                // io_L3
                                // io_L2
                                // io_L1
                                // pe
C_IO_L2_in_6_x0_loop_20:                                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_IO_L2_in_6_x0_loop_21:                                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                        // latency
C_IO_L2_in_6_x0_loop_22:                                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                            // latency
C_IO_L2_in_6_x0_loop_23:                                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                                // simd
                                                {
                                                    C_t16 in_data;
                                                    C_t8 out_data;
                                                    in_data = local_C_pong[c7][8 * c6 / 16];
C_IO_L2_in_6_x0_loop_24:                                                     for (ap_uint<2> n = 0; n < 2; n++) {
                                                        data_split[n] = in_data(255, 0);
                                                        in_data = in_data >> 256;
                                                    }
                                                    int split_idx = (c6) % 2;
                                                    out_data = data_split[split_idx];
                                                    fifo_C_local_out.write(out_data);
                                                }
                                            }
                                        }
                                    }
                            }
                        }
                    }
                    intra_trans_en = 1;
                    arb = !arb;
                    c0_prev = c0;
                    c1_prev = c1;
                }
            }
        if (arb == 0) {
            C_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
            /* Variable Declaration */

            if (intra_trans_en) {
C_IO_L2_in_6_x0_loop_25:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // io_L3
                    // io_L2
                    // io_L1
                    // pe
C_IO_L2_in_6_x0_loop_26:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_IO_L2_in_6_x0_loop_27:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
C_IO_L2_in_6_x0_loop_28:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
C_IO_L2_in_6_x0_loop_29:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    // simd
                                    {
                                        C_t16 in_data;
                                        C_t8 out_data;
                                        in_data = local_C_ping[c7][8 * c6 / 16];
C_IO_L2_in_6_x0_loop_30:                                         for (ap_uint<2> n = 0; n < 2; n++) {
                                            data_split[n] = in_data(255, 0);
                                            in_data = in_data >> 256;
                                        }
                                        int split_idx = (c6) % 2;
                                        out_data = data_split[split_idx];
                                        fifo_C_local_out.write(out_data);
                                    }
                                }
                            }
                        }
                }
            }
        } else {
            C_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
            /* Variable Declaration */

            if (intra_trans_en) {
C_IO_L2_in_6_x0_loop_31:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // io_L3
                    // io_L2
                    // io_L1
                    // pe
C_IO_L2_in_6_x0_loop_32:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_IO_L2_in_6_x0_loop_33:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
C_IO_L2_in_6_x0_loop_34:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
C_IO_L2_in_6_x0_loop_35:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    // simd
                                    {
                                        C_t16 in_data;
                                        C_t8 out_data;
                                        in_data = local_C_pong[c7][8 * c6 / 16];
C_IO_L2_in_6_x0_loop_36:                                         for (ap_uint<2> n = 0; n < 2; n++) {
                                            data_split[n] = in_data(255, 0);
                                            in_data = in_data >> 256;
                                        }
                                        int split_idx = (c6) % 2;
                                        out_data = data_split[split_idx];
                                        fifo_C_local_out.write(out_data);
                                    }
                                }
                            }
                        }
                }
            }
        }
    }
}
/* Module Definition */

/* Module Definition */
void C_IO_L2_in_boundary_x0(int idx, hls::stream<C_t16> &fifo_C_in, hls::stream<C_t8> &fifo_C_local_out) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx; // module id
    C_t16 local_C_ping[8][16];
    C_t16 local_C_pong[8][16];
    bool arb = 0;
    bool inter_trans_en = 1;
    bool intra_trans_en = 0;
    int c0, c0_prev;
    int c1, c1_prev;
    /* Variable Declaration */

    {
C_IO_L2_in_boundary_x0_loop_1:         for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
C_IO_L2_in_boundary_x0_loop_2:             for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
                // array
                // io_L3
                {
                    if (arb == 0) {
                        if (inter_trans_en) {
C_IO_L2_in_boundary_x0_loop_3:                             for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 1 max = 1
                                if (c3 > -8 * c1 + 41)
                                    break;
                                if (c3 == p0) {
                                    // io_L2
C_IO_L2_in_boundary_x0_loop_4:                                     for (ap_uint<4> c4 = 0; c4 <= 7; c4 += 1) {
                                        // access_coalesce
C_IO_L2_in_boundary_x0_loop_5:                                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {

                                            {
                                                C_t16 in_data;
                                                C_t16 out_data;
                                                in_data = fifo_C_in.read();
                                                out_data = in_data;
                                                local_C_pong[c4][c5] = out_data;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        C_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                        /* Variable Declaration */

                        if (intra_trans_en) {
C_IO_L2_in_boundary_x0_loop_6:                             for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                                // array
                                // io_L3
                                // io_L2
                                // io_L1
                                // pe
C_IO_L2_in_boundary_x0_loop_7:                                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_IO_L2_in_boundary_x0_loop_8:                                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                        // latency
C_IO_L2_in_boundary_x0_loop_9:                                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                            // latency
C_IO_L2_in_boundary_x0_loop_10:                                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                                // simd
                                                {
                                                    C_t16 in_data;
                                                    C_t8 out_data;
                                                    in_data = local_C_ping[c7][8 * c6 / 16];
C_IO_L2_in_boundary_x0_loop_11:                                                     for (ap_uint<2> n = 0; n < 2; n++) {
                                                        data_split[n] = in_data(255, 0);
                                                        in_data = in_data >> 256;
                                                    }
                                                    int split_idx = (c6) % 2;
                                                    out_data = data_split[split_idx];
                                                    fifo_C_local_out.write(out_data);
                                                }
                                            }
                                        }
                                    }
                            }
                        }
                    } else {
                        if (inter_trans_en) {
C_IO_L2_in_boundary_x0_loop_12:                             for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 1 max = 1
                                if (c3 > -8 * c1 + 41)
                                    break;
                                if (c3 == p0) {
                                    // io_L2
C_IO_L2_in_boundary_x0_loop_13:                                     for (ap_uint<4> c4 = 0; c4 <= 7; c4 += 1) {
                                        // access_coalesce
C_IO_L2_in_boundary_x0_loop_14:                                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {

                                            {
                                                C_t16 in_data;
                                                C_t16 out_data;
                                                in_data = fifo_C_in.read();
                                                out_data = in_data;
                                                local_C_ping[c4][c5] = out_data;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        C_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                        /* Variable Declaration */

                        if (intra_trans_en) {
C_IO_L2_in_boundary_x0_loop_15:                             for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                                // array
                                // io_L3
                                // io_L2
                                // io_L1
                                // pe
C_IO_L2_in_boundary_x0_loop_16:                                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_IO_L2_in_boundary_x0_loop_17:                                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                        // latency
C_IO_L2_in_boundary_x0_loop_18:                                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                            // latency
C_IO_L2_in_boundary_x0_loop_19:                                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                                // simd
                                                {
                                                    C_t16 in_data;
                                                    C_t8 out_data;
                                                    in_data = local_C_pong[c7][8 * c6 / 16];
C_IO_L2_in_boundary_x0_loop_20:                                                     for (ap_uint<2> n = 0; n < 2; n++) {
                                                        data_split[n] = in_data(255, 0);
                                                        in_data = in_data >> 256;
                                                    }
                                                    int split_idx = (c6) % 2;
                                                    out_data = data_split[split_idx];
                                                    fifo_C_local_out.write(out_data);
                                                }
                                            }
                                        }
                                    }
                            }
                        }
                    }
                    intra_trans_en = 1;
                    arb = !arb;
                    c0_prev = c0;
                    c1_prev = c1;
                }
            }
        if (arb == 0) {
            C_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
            /* Variable Declaration */

            if (intra_trans_en) {
C_IO_L2_in_boundary_x0_loop_21:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // io_L3
                    // io_L2
                    // io_L1
                    // pe
C_IO_L2_in_boundary_x0_loop_22:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_IO_L2_in_boundary_x0_loop_23:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
C_IO_L2_in_boundary_x0_loop_24:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
C_IO_L2_in_boundary_x0_loop_25:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    // simd
                                    {
                                        C_t16 in_data;
                                        C_t8 out_data;
                                        in_data = local_C_ping[c7][8 * c6 / 16];
C_IO_L2_in_boundary_x0_loop_26:                                         for (ap_uint<2> n = 0; n < 2; n++) {
                                            data_split[n] = in_data(255, 0);
                                            in_data = in_data >> 256;
                                        }
                                        int split_idx = (c6) % 2;
                                        out_data = data_split[split_idx];
                                        fifo_C_local_out.write(out_data);
                                    }
                                }
                            }
                        }
                }
            }
        } else {
            C_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
            /* Variable Declaration */

            if (intra_trans_en) {
C_IO_L2_in_boundary_x0_loop_27:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // io_L3
                    // io_L2
                    // io_L1
                    // pe
C_IO_L2_in_boundary_x0_loop_28:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_IO_L2_in_boundary_x0_loop_29:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
C_IO_L2_in_boundary_x0_loop_30:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
C_IO_L2_in_boundary_x0_loop_31:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    // simd
                                    {
                                        C_t16 in_data;
                                        C_t8 out_data;
                                        in_data = local_C_pong[c7][8 * c6 / 16];
C_IO_L2_in_boundary_x0_loop_32:                                         for (ap_uint<2> n = 0; n < 2; n++) {
                                            data_split[n] = in_data(255, 0);
                                            in_data = in_data >> 256;
                                        }
                                        int split_idx = (c6) % 2;
                                        out_data = data_split[split_idx];
                                        fifo_C_local_out.write(out_data);
                                    }
                                }
                            }
                        }
                }
            }
        }
    }
}
/* Module Definition */

/* Module Definition */
void PE_wrapper_0_0_x0(int idx, int idy, hls::stream<A_t8> &fifo_A_in, hls::stream<A_t8> &fifo_A_out, hls::stream<float> &fifo_B_in, hls::stream<float> &fifo_B_out, hls::stream<C_t8> &fifo_C_in, hls::stream<C_t8> &fifo_C_out, hls::stream<float> &fifo_D_drain_out) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    A_t1 local_A[1][1][8];
#pragma HLS ARRAY_PARTITION variable = local_A dim = 0 complete
    B_t1 local_B[1][1];
#pragma HLS ARRAY_PARTITION variable = local_B dim = 0 complete
    C_t1 local_C[1][8];
#pragma HLS ARRAY_PARTITION variable = local_C dim = 0 complete
    D_t1 local_D[16][8];
    /* Variable Declaration */

PE_wrapper_0_0_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
PE_wrapper_0_0_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p1 + 8 * c1 <= 41) {
                // array
                // pe
                // latency
PE_wrapper_0_0_x0_loop_3:                 for (ap_uint<4> c6 = 0; c6 <= 7; c6 += 1) {
                    // latency
PE_wrapper_0_0_x0_loop_4:                     for (ap_uint<5> c7 = 0; c7 <= 15; c7 += 1) {

                        local_D[c7][c6] = 0;
                    }
                }
PE_wrapper_0_0_x0_loop_5:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
PE_wrapper_0_0_x0_loop_6:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
PE_wrapper_0_0_x0_loop_7:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
PE_wrapper_0_0_x0_loop_8:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
PE_wrapper_0_0_x0_loop_9:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    {
                                        {
                                            A_t8 fifo_data;
                                            fifo_data = fifo_A_in.read();
PE_wrapper_0_0_x0_loop_10:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_A[0][0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        local_B[0][0] = fifo_B_in.read();
                                        {
                                            C_t8 fifo_data;
                                            fifo_data = fifo_C_in.read();
PE_wrapper_0_0_x0_loop_11:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_C[0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        // simd
PE_wrapper_0_0_x0_loop_12:                                         for (ap_uint<4> c9 = 0; c9 <= 7; c9 += 1) {
                                            local_D[c8][c7] = (local_D[c8][c7] + ((local_A[0][0][c9] * local_B[0][0]) * local_C[0][c9]));
                                        }
                                        if (c2 == 127 && c5 == 1 && c6 == 31)
                                            fifo_D_drain_out.write(local_D[c8][c7]);
                                        {
                                            C_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_C[0][7];
                                            u6.ut = local_C[0][6];
                                            u5.ut = local_C[0][5];
                                            u4.ut = local_C[0][4];
                                            u3.ut = local_C[0][3];
                                            u2.ut = local_C[0][2];
                                            u1.ut = local_C[0][1];
                                            u0.ut = local_C[0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_C_out.write(fifo_data);
                                        }
                                        fifo_B_out.write(local_B[0][0]);
                                        {
                                            A_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_A[0][0][7];
                                            u6.ut = local_A[0][0][6];
                                            u5.ut = local_A[0][0][5];
                                            u4.ut = local_A[0][0][4];
                                            u3.ut = local_A[0][0][3];
                                            u2.ut = local_A[0][0][2];
                                            u1.ut = local_A[0][0][1];
                                            u0.ut = local_A[0][0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_A_out.write(fifo_data);
                                        }
                                    }
                                }
                            }
                        }
                }
            }
}
/* Module Definition */

/* Module Definition */
void PE_wrapper_0_1_x0(int idx, int idy, hls::stream<A_t8> &fifo_A_in, hls::stream<A_t8> &fifo_A_out, hls::stream<float> &fifo_B_in, hls::stream<float> &fifo_B_out, hls::stream<C_t8> &fifo_C_in, hls::stream<C_t8> &fifo_C_out, hls::stream<float> &fifo_D_drain_out) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    A_t1 local_A[1][1][8];
#pragma HLS ARRAY_PARTITION variable = local_A dim = 0 complete
    B_t1 local_B[1][1];
#pragma HLS ARRAY_PARTITION variable = local_B dim = 0 complete
    C_t1 local_C[1][8];
#pragma HLS ARRAY_PARTITION variable = local_C dim = 0 complete
    D_t1 local_D[16][8];
    /* Variable Declaration */

PE_wrapper_0_1_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
PE_wrapper_0_1_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p1 + 8 * c1 <= 41) {
                // array
                // pe
                // latency
PE_wrapper_0_1_x0_loop_3:                 for (ap_uint<4> c6 = 0; c6 <= 7; c6 += 1) {
                    // latency
PE_wrapper_0_1_x0_loop_4:                     for (ap_uint<5> c7 = 0; c7 <= 15; c7 += 1) {

                        local_D[c7][c6] = 0;
                    }
                }
PE_wrapper_0_1_x0_loop_5:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
PE_wrapper_0_1_x0_loop_6:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
PE_wrapper_0_1_x0_loop_7:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
PE_wrapper_0_1_x0_loop_8:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
PE_wrapper_0_1_x0_loop_9:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    {
                                        {
                                            A_t8 fifo_data;
                                            fifo_data = fifo_A_in.read();
PE_wrapper_0_1_x0_loop_10:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_A[0][0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        local_B[0][0] = fifo_B_in.read();
                                        {
                                            C_t8 fifo_data;
                                            fifo_data = fifo_C_in.read();
PE_wrapper_0_1_x0_loop_11:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_C[0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        // simd
PE_wrapper_0_1_x0_loop_12:                                         for (ap_uint<4> c9 = 0; c9 <= 7; c9 += 1) {
                                            local_D[c8][c7] = (local_D[c8][c7] + ((local_A[0][0][c9] * local_B[0][0]) * local_C[0][c9]));
                                        }
                                        if (c2 == 127 && c5 == 1 && c6 == 31)
                                            fifo_D_drain_out.write(local_D[c8][c7]);
                                        {
                                            C_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_C[0][7];
                                            u6.ut = local_C[0][6];
                                            u5.ut = local_C[0][5];
                                            u4.ut = local_C[0][4];
                                            u3.ut = local_C[0][3];
                                            u2.ut = local_C[0][2];
                                            u1.ut = local_C[0][1];
                                            u0.ut = local_C[0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_C_out.write(fifo_data);
                                        }
                                        fifo_B_out.write(local_B[0][0]);
                                        {
                                            A_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_A[0][0][7];
                                            u6.ut = local_A[0][0][6];
                                            u5.ut = local_A[0][0][5];
                                            u4.ut = local_A[0][0][4];
                                            u3.ut = local_A[0][0][3];
                                            u2.ut = local_A[0][0][2];
                                            u1.ut = local_A[0][0][1];
                                            u0.ut = local_A[0][0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_A_out.write(fifo_data);
                                        }
                                    }
                                }
                            }
                        }
                }
            }
}
/* Module Definition */

/* Module Definition */
void PE_wrapper_0_2_x0(int idx, int idy, hls::stream<A_t8> &fifo_A_in, hls::stream<A_t8> &fifo_A_out, hls::stream<float> &fifo_B_in, hls::stream<float> &fifo_B_out, hls::stream<C_t8> &fifo_C_in, hls::stream<C_t8> &fifo_C_out, hls::stream<float> &fifo_D_drain_out) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    A_t1 local_A[1][1][8];
#pragma HLS ARRAY_PARTITION variable = local_A dim = 0 complete
    B_t1 local_B[1][1];
#pragma HLS ARRAY_PARTITION variable = local_B dim = 0 complete
    C_t1 local_C[1][8];
#pragma HLS ARRAY_PARTITION variable = local_C dim = 0 complete
    D_t1 local_D[16][8];
    /* Variable Declaration */

PE_wrapper_0_2_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
PE_wrapper_0_2_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p1 + 8 * c1 <= 41) {
                // array
                // pe
                // latency
PE_wrapper_0_2_x0_loop_3:                 for (ap_uint<4> c6 = 0; c6 <= 7; c6 += 1) {
                    // latency
PE_wrapper_0_2_x0_loop_4:                     for (ap_uint<5> c7 = 0; c7 <= 15; c7 += 1) {

                        local_D[c7][c6] = 0;
                    }
                }
PE_wrapper_0_2_x0_loop_5:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
PE_wrapper_0_2_x0_loop_6:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
PE_wrapper_0_2_x0_loop_7:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
PE_wrapper_0_2_x0_loop_8:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
PE_wrapper_0_2_x0_loop_9:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    {
                                        {
                                            A_t8 fifo_data;
                                            fifo_data = fifo_A_in.read();
PE_wrapper_0_2_x0_loop_10:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_A[0][0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        local_B[0][0] = fifo_B_in.read();
                                        {
                                            C_t8 fifo_data;
                                            fifo_data = fifo_C_in.read();
PE_wrapper_0_2_x0_loop_11:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_C[0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        // simd
PE_wrapper_0_2_x0_loop_12:                                         for (ap_uint<4> c9 = 0; c9 <= 7; c9 += 1) {
                                            local_D[c8][c7] = (local_D[c8][c7] + ((local_A[0][0][c9] * local_B[0][0]) * local_C[0][c9]));
                                        }
                                        if (c2 == 127 && c5 == 1 && c6 == 31)
                                            fifo_D_drain_out.write(local_D[c8][c7]);
                                        {
                                            C_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_C[0][7];
                                            u6.ut = local_C[0][6];
                                            u5.ut = local_C[0][5];
                                            u4.ut = local_C[0][4];
                                            u3.ut = local_C[0][3];
                                            u2.ut = local_C[0][2];
                                            u1.ut = local_C[0][1];
                                            u0.ut = local_C[0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_C_out.write(fifo_data);
                                        }
                                        fifo_B_out.write(local_B[0][0]);
                                        {
                                            A_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_A[0][0][7];
                                            u6.ut = local_A[0][0][6];
                                            u5.ut = local_A[0][0][5];
                                            u4.ut = local_A[0][0][4];
                                            u3.ut = local_A[0][0][3];
                                            u2.ut = local_A[0][0][2];
                                            u1.ut = local_A[0][0][1];
                                            u0.ut = local_A[0][0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_A_out.write(fifo_data);
                                        }
                                    }
                                }
                            }
                        }
                }
            }
}
/* Module Definition */

/* Module Definition */
void PE_wrapper_0_3_x0(int idx, int idy, hls::stream<A_t8> &fifo_A_in, hls::stream<A_t8> &fifo_A_out, hls::stream<float> &fifo_B_in, hls::stream<float> &fifo_B_out, hls::stream<C_t8> &fifo_C_in, hls::stream<C_t8> &fifo_C_out, hls::stream<float> &fifo_D_drain_out) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    A_t1 local_A[1][1][8];
#pragma HLS ARRAY_PARTITION variable = local_A dim = 0 complete
    B_t1 local_B[1][1];
#pragma HLS ARRAY_PARTITION variable = local_B dim = 0 complete
    C_t1 local_C[1][8];
#pragma HLS ARRAY_PARTITION variable = local_C dim = 0 complete
    D_t1 local_D[16][8];
    /* Variable Declaration */

PE_wrapper_0_3_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
PE_wrapper_0_3_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p1 + 8 * c1 <= 41) {
                // array
                // pe
                // latency
PE_wrapper_0_3_x0_loop_3:                 for (ap_uint<4> c6 = 0; c6 <= 7; c6 += 1) {
                    // latency
PE_wrapper_0_3_x0_loop_4:                     for (ap_uint<5> c7 = 0; c7 <= 15; c7 += 1) {

                        local_D[c7][c6] = 0;
                    }
                }
PE_wrapper_0_3_x0_loop_5:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
PE_wrapper_0_3_x0_loop_6:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
PE_wrapper_0_3_x0_loop_7:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
PE_wrapper_0_3_x0_loop_8:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
PE_wrapper_0_3_x0_loop_9:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    {
                                        {
                                            A_t8 fifo_data;
                                            fifo_data = fifo_A_in.read();
PE_wrapper_0_3_x0_loop_10:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_A[0][0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        local_B[0][0] = fifo_B_in.read();
                                        {
                                            C_t8 fifo_data;
                                            fifo_data = fifo_C_in.read();
PE_wrapper_0_3_x0_loop_11:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_C[0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        // simd
PE_wrapper_0_3_x0_loop_12:                                         for (ap_uint<4> c9 = 0; c9 <= 7; c9 += 1) {
                                            local_D[c8][c7] = (local_D[c8][c7] + ((local_A[0][0][c9] * local_B[0][0]) * local_C[0][c9]));
                                        }
                                        if (c2 == 127 && c5 == 1 && c6 == 31)
                                            fifo_D_drain_out.write(local_D[c8][c7]);
                                        {
                                            C_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_C[0][7];
                                            u6.ut = local_C[0][6];
                                            u5.ut = local_C[0][5];
                                            u4.ut = local_C[0][4];
                                            u3.ut = local_C[0][3];
                                            u2.ut = local_C[0][2];
                                            u1.ut = local_C[0][1];
                                            u0.ut = local_C[0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_C_out.write(fifo_data);
                                        }
                                        fifo_B_out.write(local_B[0][0]);
                                        {
                                            A_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_A[0][0][7];
                                            u6.ut = local_A[0][0][6];
                                            u5.ut = local_A[0][0][5];
                                            u4.ut = local_A[0][0][4];
                                            u3.ut = local_A[0][0][3];
                                            u2.ut = local_A[0][0][2];
                                            u1.ut = local_A[0][0][1];
                                            u0.ut = local_A[0][0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_A_out.write(fifo_data);
                                        }
                                    }
                                }
                            }
                        }
                }
            }
}
/* Module Definition */

/* Module Definition */
void PE_wrapper_0_4_x0(int idx, int idy, hls::stream<A_t8> &fifo_A_in, hls::stream<A_t8> &fifo_A_out, hls::stream<float> &fifo_B_in, hls::stream<float> &fifo_B_out, hls::stream<C_t8> &fifo_C_in, hls::stream<C_t8> &fifo_C_out, hls::stream<float> &fifo_D_drain_out) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    A_t1 local_A[1][1][8];
#pragma HLS ARRAY_PARTITION variable = local_A dim = 0 complete
    B_t1 local_B[1][1];
#pragma HLS ARRAY_PARTITION variable = local_B dim = 0 complete
    C_t1 local_C[1][8];
#pragma HLS ARRAY_PARTITION variable = local_C dim = 0 complete
    D_t1 local_D[16][8];
    /* Variable Declaration */

PE_wrapper_0_4_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
PE_wrapper_0_4_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p1 + 8 * c1 <= 41) {
                // array
                // pe
                // latency
PE_wrapper_0_4_x0_loop_3:                 for (ap_uint<4> c6 = 0; c6 <= 7; c6 += 1) {
                    // latency
PE_wrapper_0_4_x0_loop_4:                     for (ap_uint<5> c7 = 0; c7 <= 15; c7 += 1) {

                        local_D[c7][c6] = 0;
                    }
                }
PE_wrapper_0_4_x0_loop_5:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
PE_wrapper_0_4_x0_loop_6:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
PE_wrapper_0_4_x0_loop_7:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
PE_wrapper_0_4_x0_loop_8:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
PE_wrapper_0_4_x0_loop_9:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    {
                                        {
                                            A_t8 fifo_data;
                                            fifo_data = fifo_A_in.read();
PE_wrapper_0_4_x0_loop_10:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_A[0][0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        local_B[0][0] = fifo_B_in.read();
                                        {
                                            C_t8 fifo_data;
                                            fifo_data = fifo_C_in.read();
PE_wrapper_0_4_x0_loop_11:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_C[0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        // simd
PE_wrapper_0_4_x0_loop_12:                                         for (ap_uint<4> c9 = 0; c9 <= 7; c9 += 1) {
                                            local_D[c8][c7] = (local_D[c8][c7] + ((local_A[0][0][c9] * local_B[0][0]) * local_C[0][c9]));
                                        }
                                        if (c2 == 127 && c5 == 1 && c6 == 31)
                                            fifo_D_drain_out.write(local_D[c8][c7]);
                                        {
                                            C_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_C[0][7];
                                            u6.ut = local_C[0][6];
                                            u5.ut = local_C[0][5];
                                            u4.ut = local_C[0][4];
                                            u3.ut = local_C[0][3];
                                            u2.ut = local_C[0][2];
                                            u1.ut = local_C[0][1];
                                            u0.ut = local_C[0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_C_out.write(fifo_data);
                                        }
                                        fifo_B_out.write(local_B[0][0]);
                                        {
                                            A_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_A[0][0][7];
                                            u6.ut = local_A[0][0][6];
                                            u5.ut = local_A[0][0][5];
                                            u4.ut = local_A[0][0][4];
                                            u3.ut = local_A[0][0][3];
                                            u2.ut = local_A[0][0][2];
                                            u1.ut = local_A[0][0][1];
                                            u0.ut = local_A[0][0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_A_out.write(fifo_data);
                                        }
                                    }
                                }
                            }
                        }
                }
            }
}
/* Module Definition */

/* Module Definition */
void PE_wrapper_0_5_x0(int idx, int idy, hls::stream<A_t8> &fifo_A_in, hls::stream<A_t8> &fifo_A_out, hls::stream<float> &fifo_B_in, hls::stream<float> &fifo_B_out, hls::stream<C_t8> &fifo_C_in, hls::stream<C_t8> &fifo_C_out, hls::stream<float> &fifo_D_drain_out) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    A_t1 local_A[1][1][8];
#pragma HLS ARRAY_PARTITION variable = local_A dim = 0 complete
    B_t1 local_B[1][1];
#pragma HLS ARRAY_PARTITION variable = local_B dim = 0 complete
    C_t1 local_C[1][8];
#pragma HLS ARRAY_PARTITION variable = local_C dim = 0 complete
    D_t1 local_D[16][8];
    /* Variable Declaration */

PE_wrapper_0_5_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
PE_wrapper_0_5_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p1 + 8 * c1 <= 41) {
                // array
                // pe
                // latency
PE_wrapper_0_5_x0_loop_3:                 for (ap_uint<4> c6 = 0; c6 <= 7; c6 += 1) {
                    // latency
PE_wrapper_0_5_x0_loop_4:                     for (ap_uint<5> c7 = 0; c7 <= 15; c7 += 1) {

                        local_D[c7][c6] = 0;
                    }
                }
PE_wrapper_0_5_x0_loop_5:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
PE_wrapper_0_5_x0_loop_6:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
PE_wrapper_0_5_x0_loop_7:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
PE_wrapper_0_5_x0_loop_8:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
PE_wrapper_0_5_x0_loop_9:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    {
                                        {
                                            A_t8 fifo_data;
                                            fifo_data = fifo_A_in.read();
PE_wrapper_0_5_x0_loop_10:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_A[0][0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        local_B[0][0] = fifo_B_in.read();
                                        {
                                            C_t8 fifo_data;
                                            fifo_data = fifo_C_in.read();
PE_wrapper_0_5_x0_loop_11:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_C[0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        // simd
PE_wrapper_0_5_x0_loop_12:                                         for (ap_uint<4> c9 = 0; c9 <= 7; c9 += 1) {
                                            local_D[c8][c7] = (local_D[c8][c7] + ((local_A[0][0][c9] * local_B[0][0]) * local_C[0][c9]));
                                        }
                                        if (c2 == 127 && c5 == 1 && c6 == 31)
                                            fifo_D_drain_out.write(local_D[c8][c7]);
                                        {
                                            C_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_C[0][7];
                                            u6.ut = local_C[0][6];
                                            u5.ut = local_C[0][5];
                                            u4.ut = local_C[0][4];
                                            u3.ut = local_C[0][3];
                                            u2.ut = local_C[0][2];
                                            u1.ut = local_C[0][1];
                                            u0.ut = local_C[0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_C_out.write(fifo_data);
                                        }
                                        fifo_B_out.write(local_B[0][0]);
                                        {
                                            A_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_A[0][0][7];
                                            u6.ut = local_A[0][0][6];
                                            u5.ut = local_A[0][0][5];
                                            u4.ut = local_A[0][0][4];
                                            u3.ut = local_A[0][0][3];
                                            u2.ut = local_A[0][0][2];
                                            u1.ut = local_A[0][0][1];
                                            u0.ut = local_A[0][0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_A_out.write(fifo_data);
                                        }
                                    }
                                }
                            }
                        }
                }
            }
}
/* Module Definition */

/* Module Definition */
void PE_wrapper_0_6_x0(int idx, int idy, hls::stream<A_t8> &fifo_A_in, hls::stream<A_t8> &fifo_A_out, hls::stream<float> &fifo_B_in, hls::stream<float> &fifo_B_out, hls::stream<C_t8> &fifo_C_in, hls::stream<C_t8> &fifo_C_out, hls::stream<float> &fifo_D_drain_out) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    A_t1 local_A[1][1][8];
#pragma HLS ARRAY_PARTITION variable = local_A dim = 0 complete
    B_t1 local_B[1][1];
#pragma HLS ARRAY_PARTITION variable = local_B dim = 0 complete
    C_t1 local_C[1][8];
#pragma HLS ARRAY_PARTITION variable = local_C dim = 0 complete
    D_t1 local_D[16][8];
    /* Variable Declaration */

PE_wrapper_0_6_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
PE_wrapper_0_6_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p1 + 8 * c1 <= 41) {
                // array
                // pe
                // latency
PE_wrapper_0_6_x0_loop_3:                 for (ap_uint<4> c6 = 0; c6 <= 7; c6 += 1) {
                    // latency
PE_wrapper_0_6_x0_loop_4:                     for (ap_uint<5> c7 = 0; c7 <= 15; c7 += 1) {

                        local_D[c7][c6] = 0;
                    }
                }
PE_wrapper_0_6_x0_loop_5:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
PE_wrapper_0_6_x0_loop_6:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
PE_wrapper_0_6_x0_loop_7:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
PE_wrapper_0_6_x0_loop_8:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
PE_wrapper_0_6_x0_loop_9:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    {
                                        {
                                            A_t8 fifo_data;
                                            fifo_data = fifo_A_in.read();
PE_wrapper_0_6_x0_loop_10:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_A[0][0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        local_B[0][0] = fifo_B_in.read();
                                        {
                                            C_t8 fifo_data;
                                            fifo_data = fifo_C_in.read();
PE_wrapper_0_6_x0_loop_11:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_C[0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        // simd
PE_wrapper_0_6_x0_loop_12:                                         for (ap_uint<4> c9 = 0; c9 <= 7; c9 += 1) {
                                            local_D[c8][c7] = (local_D[c8][c7] + ((local_A[0][0][c9] * local_B[0][0]) * local_C[0][c9]));
                                        }
                                        if (c2 == 127 && c5 == 1 && c6 == 31)
                                            fifo_D_drain_out.write(local_D[c8][c7]);
                                        {
                                            C_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_C[0][7];
                                            u6.ut = local_C[0][6];
                                            u5.ut = local_C[0][5];
                                            u4.ut = local_C[0][4];
                                            u3.ut = local_C[0][3];
                                            u2.ut = local_C[0][2];
                                            u1.ut = local_C[0][1];
                                            u0.ut = local_C[0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_C_out.write(fifo_data);
                                        }
                                        fifo_B_out.write(local_B[0][0]);
                                        {
                                            A_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_A[0][0][7];
                                            u6.ut = local_A[0][0][6];
                                            u5.ut = local_A[0][0][5];
                                            u4.ut = local_A[0][0][4];
                                            u3.ut = local_A[0][0][3];
                                            u2.ut = local_A[0][0][2];
                                            u1.ut = local_A[0][0][1];
                                            u0.ut = local_A[0][0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_A_out.write(fifo_data);
                                        }
                                    }
                                }
                            }
                        }
                }
            }
}
/* Module Definition */

/* Module Definition */
void PE_wrapper_0_7_x0(int idx, int idy, hls::stream<A_t8> &fifo_A_in, hls::stream<A_t8> &fifo_A_out, hls::stream<float> &fifo_B_in, hls::stream<float> &fifo_B_out, hls::stream<C_t8> &fifo_C_in, hls::stream<C_t8> &fifo_C_out, hls::stream<float> &fifo_D_drain_out) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    A_t1 local_A[1][1][8];
#pragma HLS ARRAY_PARTITION variable = local_A dim = 0 complete
    B_t1 local_B[1][1];
#pragma HLS ARRAY_PARTITION variable = local_B dim = 0 complete
    C_t1 local_C[1][8];
#pragma HLS ARRAY_PARTITION variable = local_C dim = 0 complete
    D_t1 local_D[16][8];
    /* Variable Declaration */

PE_wrapper_0_7_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
PE_wrapper_0_7_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p1 + 8 * c1 <= 41) {
                // array
                // pe
                // latency
PE_wrapper_0_7_x0_loop_3:                 for (ap_uint<4> c6 = 0; c6 <= 7; c6 += 1) {
                    // latency
PE_wrapper_0_7_x0_loop_4:                     for (ap_uint<5> c7 = 0; c7 <= 15; c7 += 1) {

                        local_D[c7][c6] = 0;
                    }
                }
PE_wrapper_0_7_x0_loop_5:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
PE_wrapper_0_7_x0_loop_6:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
PE_wrapper_0_7_x0_loop_7:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
PE_wrapper_0_7_x0_loop_8:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
PE_wrapper_0_7_x0_loop_9:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    {
                                        {
                                            A_t8 fifo_data;
                                            fifo_data = fifo_A_in.read();
PE_wrapper_0_7_x0_loop_10:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_A[0][0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        local_B[0][0] = fifo_B_in.read();
                                        {
                                            C_t8 fifo_data;
                                            fifo_data = fifo_C_in.read();
PE_wrapper_0_7_x0_loop_11:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_C[0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        // simd
PE_wrapper_0_7_x0_loop_12:                                         for (ap_uint<4> c9 = 0; c9 <= 7; c9 += 1) {
                                            local_D[c8][c7] = (local_D[c8][c7] + ((local_A[0][0][c9] * local_B[0][0]) * local_C[0][c9]));
                                        }
                                        if (c2 == 127 && c5 == 1 && c6 == 31)
                                            fifo_D_drain_out.write(local_D[c8][c7]);
                                        {
                                            C_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_C[0][7];
                                            u6.ut = local_C[0][6];
                                            u5.ut = local_C[0][5];
                                            u4.ut = local_C[0][4];
                                            u3.ut = local_C[0][3];
                                            u2.ut = local_C[0][2];
                                            u1.ut = local_C[0][1];
                                            u0.ut = local_C[0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_C_out.write(fifo_data);
                                        }
                                        fifo_B_out.write(local_B[0][0]);
                                        {
                                            A_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_A[0][0][7];
                                            u6.ut = local_A[0][0][6];
                                            u5.ut = local_A[0][0][5];
                                            u4.ut = local_A[0][0][4];
                                            u3.ut = local_A[0][0][3];
                                            u2.ut = local_A[0][0][2];
                                            u1.ut = local_A[0][0][1];
                                            u0.ut = local_A[0][0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_A_out.write(fifo_data);
                                        }
                                    }
                                }
                            }
                        }
                }
            }
}
/* Module Definition */

/* Module Definition */
void PE_wrapper_1_0_x0(int idx, int idy, hls::stream<A_t8> &fifo_A_in, hls::stream<A_t8> &fifo_A_out, hls::stream<float> &fifo_B_in, hls::stream<float> &fifo_B_out, hls::stream<C_t8> &fifo_C_in, hls::stream<C_t8> &fifo_C_out, hls::stream<float> &fifo_D_drain_out) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    A_t1 local_A[1][1][8];
#pragma HLS ARRAY_PARTITION variable = local_A dim = 0 complete
    B_t1 local_B[1][1];
#pragma HLS ARRAY_PARTITION variable = local_B dim = 0 complete
    C_t1 local_C[1][8];
#pragma HLS ARRAY_PARTITION variable = local_C dim = 0 complete
    D_t1 local_D[16][8];
    /* Variable Declaration */

PE_wrapper_1_0_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
PE_wrapper_1_0_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p1 + 8 * c1 <= 41) {
                // array
                // pe
                // latency
PE_wrapper_1_0_x0_loop_3:                 for (ap_uint<4> c6 = 0; c6 <= 7; c6 += 1) {
                    // latency
PE_wrapper_1_0_x0_loop_4:                     for (ap_uint<5> c7 = 0; c7 <= 15; c7 += 1) {

                        local_D[c7][c6] = 0;
                    }
                }
PE_wrapper_1_0_x0_loop_5:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
PE_wrapper_1_0_x0_loop_6:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
PE_wrapper_1_0_x0_loop_7:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
PE_wrapper_1_0_x0_loop_8:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
PE_wrapper_1_0_x0_loop_9:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    {
                                        {
                                            A_t8 fifo_data;
                                            fifo_data = fifo_A_in.read();
PE_wrapper_1_0_x0_loop_10:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_A[0][0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        local_B[0][0] = fifo_B_in.read();
                                        {
                                            C_t8 fifo_data;
                                            fifo_data = fifo_C_in.read();
PE_wrapper_1_0_x0_loop_11:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_C[0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        // simd
PE_wrapper_1_0_x0_loop_12:                                         for (ap_uint<4> c9 = 0; c9 <= 7; c9 += 1) {
                                            local_D[c8][c7] = (local_D[c8][c7] + ((local_A[0][0][c9] * local_B[0][0]) * local_C[0][c9]));
                                        }
                                        if (c2 == 127 && c5 == 1 && c6 == 31)
                                            fifo_D_drain_out.write(local_D[c8][c7]);
                                        {
                                            C_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_C[0][7];
                                            u6.ut = local_C[0][6];
                                            u5.ut = local_C[0][5];
                                            u4.ut = local_C[0][4];
                                            u3.ut = local_C[0][3];
                                            u2.ut = local_C[0][2];
                                            u1.ut = local_C[0][1];
                                            u0.ut = local_C[0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_C_out.write(fifo_data);
                                        }
                                        fifo_B_out.write(local_B[0][0]);
                                        {
                                            A_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_A[0][0][7];
                                            u6.ut = local_A[0][0][6];
                                            u5.ut = local_A[0][0][5];
                                            u4.ut = local_A[0][0][4];
                                            u3.ut = local_A[0][0][3];
                                            u2.ut = local_A[0][0][2];
                                            u1.ut = local_A[0][0][1];
                                            u0.ut = local_A[0][0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_A_out.write(fifo_data);
                                        }
                                    }
                                }
                            }
                        }
                }
            }
}
/* Module Definition */

/* Module Definition */
void PE_wrapper_1_1_x0(int idx, int idy, hls::stream<A_t8> &fifo_A_in, hls::stream<A_t8> &fifo_A_out, hls::stream<float> &fifo_B_in, hls::stream<float> &fifo_B_out, hls::stream<C_t8> &fifo_C_in, hls::stream<C_t8> &fifo_C_out, hls::stream<float> &fifo_D_drain_out) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    A_t1 local_A[1][1][8];
#pragma HLS ARRAY_PARTITION variable = local_A dim = 0 complete
    B_t1 local_B[1][1];
#pragma HLS ARRAY_PARTITION variable = local_B dim = 0 complete
    C_t1 local_C[1][8];
#pragma HLS ARRAY_PARTITION variable = local_C dim = 0 complete
    D_t1 local_D[16][8];
    /* Variable Declaration */

PE_wrapper_1_1_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
PE_wrapper_1_1_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p1 + 8 * c1 <= 41) {
                // array
                // pe
                // latency
PE_wrapper_1_1_x0_loop_3:                 for (ap_uint<4> c6 = 0; c6 <= 7; c6 += 1) {
                    // latency
PE_wrapper_1_1_x0_loop_4:                     for (ap_uint<5> c7 = 0; c7 <= 15; c7 += 1) {

                        local_D[c7][c6] = 0;
                    }
                }
PE_wrapper_1_1_x0_loop_5:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
PE_wrapper_1_1_x0_loop_6:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
PE_wrapper_1_1_x0_loop_7:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
PE_wrapper_1_1_x0_loop_8:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
PE_wrapper_1_1_x0_loop_9:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    {
                                        {
                                            A_t8 fifo_data;
                                            fifo_data = fifo_A_in.read();
PE_wrapper_1_1_x0_loop_10:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_A[0][0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        local_B[0][0] = fifo_B_in.read();
                                        {
                                            C_t8 fifo_data;
                                            fifo_data = fifo_C_in.read();
PE_wrapper_1_1_x0_loop_11:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_C[0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        // simd
PE_wrapper_1_1_x0_loop_12:                                         for (ap_uint<4> c9 = 0; c9 <= 7; c9 += 1) {
                                            local_D[c8][c7] = (local_D[c8][c7] + ((local_A[0][0][c9] * local_B[0][0]) * local_C[0][c9]));
                                        }
                                        if (c2 == 127 && c5 == 1 && c6 == 31)
                                            fifo_D_drain_out.write(local_D[c8][c7]);
                                        {
                                            C_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_C[0][7];
                                            u6.ut = local_C[0][6];
                                            u5.ut = local_C[0][5];
                                            u4.ut = local_C[0][4];
                                            u3.ut = local_C[0][3];
                                            u2.ut = local_C[0][2];
                                            u1.ut = local_C[0][1];
                                            u0.ut = local_C[0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_C_out.write(fifo_data);
                                        }
                                        fifo_B_out.write(local_B[0][0]);
                                        {
                                            A_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_A[0][0][7];
                                            u6.ut = local_A[0][0][6];
                                            u5.ut = local_A[0][0][5];
                                            u4.ut = local_A[0][0][4];
                                            u3.ut = local_A[0][0][3];
                                            u2.ut = local_A[0][0][2];
                                            u1.ut = local_A[0][0][1];
                                            u0.ut = local_A[0][0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_A_out.write(fifo_data);
                                        }
                                    }
                                }
                            }
                        }
                }
            }
}
/* Module Definition */

/* Module Definition */
void PE_wrapper_1_2_x0(int idx, int idy, hls::stream<A_t8> &fifo_A_in, hls::stream<A_t8> &fifo_A_out, hls::stream<float> &fifo_B_in, hls::stream<float> &fifo_B_out, hls::stream<C_t8> &fifo_C_in, hls::stream<C_t8> &fifo_C_out, hls::stream<float> &fifo_D_drain_out) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    A_t1 local_A[1][1][8];
#pragma HLS ARRAY_PARTITION variable = local_A dim = 0 complete
    B_t1 local_B[1][1];
#pragma HLS ARRAY_PARTITION variable = local_B dim = 0 complete
    C_t1 local_C[1][8];
#pragma HLS ARRAY_PARTITION variable = local_C dim = 0 complete
    D_t1 local_D[16][8];
    /* Variable Declaration */

PE_wrapper_1_2_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
PE_wrapper_1_2_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p1 + 8 * c1 <= 41) {
                // array
                // pe
                // latency
PE_wrapper_1_2_x0_loop_3:                 for (ap_uint<4> c6 = 0; c6 <= 7; c6 += 1) {
                    // latency
PE_wrapper_1_2_x0_loop_4:                     for (ap_uint<5> c7 = 0; c7 <= 15; c7 += 1) {

                        local_D[c7][c6] = 0;
                    }
                }
PE_wrapper_1_2_x0_loop_5:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
PE_wrapper_1_2_x0_loop_6:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
PE_wrapper_1_2_x0_loop_7:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
PE_wrapper_1_2_x0_loop_8:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
PE_wrapper_1_2_x0_loop_9:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    {
                                        {
                                            A_t8 fifo_data;
                                            fifo_data = fifo_A_in.read();
PE_wrapper_1_2_x0_loop_10:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_A[0][0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        local_B[0][0] = fifo_B_in.read();
                                        {
                                            C_t8 fifo_data;
                                            fifo_data = fifo_C_in.read();
PE_wrapper_1_2_x0_loop_11:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_C[0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        // simd
PE_wrapper_1_2_x0_loop_12:                                         for (ap_uint<4> c9 = 0; c9 <= 7; c9 += 1) {
                                            local_D[c8][c7] = (local_D[c8][c7] + ((local_A[0][0][c9] * local_B[0][0]) * local_C[0][c9]));
                                        }
                                        if (c2 == 127 && c5 == 1 && c6 == 31)
                                            fifo_D_drain_out.write(local_D[c8][c7]);
                                        {
                                            C_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_C[0][7];
                                            u6.ut = local_C[0][6];
                                            u5.ut = local_C[0][5];
                                            u4.ut = local_C[0][4];
                                            u3.ut = local_C[0][3];
                                            u2.ut = local_C[0][2];
                                            u1.ut = local_C[0][1];
                                            u0.ut = local_C[0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_C_out.write(fifo_data);
                                        }
                                        fifo_B_out.write(local_B[0][0]);
                                        {
                                            A_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_A[0][0][7];
                                            u6.ut = local_A[0][0][6];
                                            u5.ut = local_A[0][0][5];
                                            u4.ut = local_A[0][0][4];
                                            u3.ut = local_A[0][0][3];
                                            u2.ut = local_A[0][0][2];
                                            u1.ut = local_A[0][0][1];
                                            u0.ut = local_A[0][0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_A_out.write(fifo_data);
                                        }
                                    }
                                }
                            }
                        }
                }
            }
}
/* Module Definition */

/* Module Definition */
void PE_wrapper_1_3_x0(int idx, int idy, hls::stream<A_t8> &fifo_A_in, hls::stream<A_t8> &fifo_A_out, hls::stream<float> &fifo_B_in, hls::stream<float> &fifo_B_out, hls::stream<C_t8> &fifo_C_in, hls::stream<C_t8> &fifo_C_out, hls::stream<float> &fifo_D_drain_out) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    A_t1 local_A[1][1][8];
#pragma HLS ARRAY_PARTITION variable = local_A dim = 0 complete
    B_t1 local_B[1][1];
#pragma HLS ARRAY_PARTITION variable = local_B dim = 0 complete
    C_t1 local_C[1][8];
#pragma HLS ARRAY_PARTITION variable = local_C dim = 0 complete
    D_t1 local_D[16][8];
    /* Variable Declaration */

PE_wrapper_1_3_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
PE_wrapper_1_3_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p1 + 8 * c1 <= 41) {
                // array
                // pe
                // latency
PE_wrapper_1_3_x0_loop_3:                 for (ap_uint<4> c6 = 0; c6 <= 7; c6 += 1) {
                    // latency
PE_wrapper_1_3_x0_loop_4:                     for (ap_uint<5> c7 = 0; c7 <= 15; c7 += 1) {

                        local_D[c7][c6] = 0;
                    }
                }
PE_wrapper_1_3_x0_loop_5:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
PE_wrapper_1_3_x0_loop_6:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
PE_wrapper_1_3_x0_loop_7:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
PE_wrapper_1_3_x0_loop_8:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
PE_wrapper_1_3_x0_loop_9:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    {
                                        {
                                            A_t8 fifo_data;
                                            fifo_data = fifo_A_in.read();
PE_wrapper_1_3_x0_loop_10:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_A[0][0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        local_B[0][0] = fifo_B_in.read();
                                        {
                                            C_t8 fifo_data;
                                            fifo_data = fifo_C_in.read();
PE_wrapper_1_3_x0_loop_11:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_C[0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        // simd
PE_wrapper_1_3_x0_loop_12:                                         for (ap_uint<4> c9 = 0; c9 <= 7; c9 += 1) {
                                            local_D[c8][c7] = (local_D[c8][c7] + ((local_A[0][0][c9] * local_B[0][0]) * local_C[0][c9]));
                                        }
                                        if (c2 == 127 && c5 == 1 && c6 == 31)
                                            fifo_D_drain_out.write(local_D[c8][c7]);
                                        {
                                            C_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_C[0][7];
                                            u6.ut = local_C[0][6];
                                            u5.ut = local_C[0][5];
                                            u4.ut = local_C[0][4];
                                            u3.ut = local_C[0][3];
                                            u2.ut = local_C[0][2];
                                            u1.ut = local_C[0][1];
                                            u0.ut = local_C[0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_C_out.write(fifo_data);
                                        }
                                        fifo_B_out.write(local_B[0][0]);
                                        {
                                            A_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_A[0][0][7];
                                            u6.ut = local_A[0][0][6];
                                            u5.ut = local_A[0][0][5];
                                            u4.ut = local_A[0][0][4];
                                            u3.ut = local_A[0][0][3];
                                            u2.ut = local_A[0][0][2];
                                            u1.ut = local_A[0][0][1];
                                            u0.ut = local_A[0][0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_A_out.write(fifo_data);
                                        }
                                    }
                                }
                            }
                        }
                }
            }
}
/* Module Definition */

/* Module Definition */
void PE_wrapper_1_4_x0(int idx, int idy, hls::stream<A_t8> &fifo_A_in, hls::stream<A_t8> &fifo_A_out, hls::stream<float> &fifo_B_in, hls::stream<float> &fifo_B_out, hls::stream<C_t8> &fifo_C_in, hls::stream<C_t8> &fifo_C_out, hls::stream<float> &fifo_D_drain_out) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    A_t1 local_A[1][1][8];
#pragma HLS ARRAY_PARTITION variable = local_A dim = 0 complete
    B_t1 local_B[1][1];
#pragma HLS ARRAY_PARTITION variable = local_B dim = 0 complete
    C_t1 local_C[1][8];
#pragma HLS ARRAY_PARTITION variable = local_C dim = 0 complete
    D_t1 local_D[16][8];
    /* Variable Declaration */

PE_wrapper_1_4_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
PE_wrapper_1_4_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p1 + 8 * c1 <= 41) {
                // array
                // pe
                // latency
PE_wrapper_1_4_x0_loop_3:                 for (ap_uint<4> c6 = 0; c6 <= 7; c6 += 1) {
                    // latency
PE_wrapper_1_4_x0_loop_4:                     for (ap_uint<5> c7 = 0; c7 <= 15; c7 += 1) {

                        local_D[c7][c6] = 0;
                    }
                }
PE_wrapper_1_4_x0_loop_5:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
PE_wrapper_1_4_x0_loop_6:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
PE_wrapper_1_4_x0_loop_7:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
PE_wrapper_1_4_x0_loop_8:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
PE_wrapper_1_4_x0_loop_9:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    {
                                        {
                                            A_t8 fifo_data;
                                            fifo_data = fifo_A_in.read();
PE_wrapper_1_4_x0_loop_10:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_A[0][0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        local_B[0][0] = fifo_B_in.read();
                                        {
                                            C_t8 fifo_data;
                                            fifo_data = fifo_C_in.read();
PE_wrapper_1_4_x0_loop_11:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_C[0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        // simd
PE_wrapper_1_4_x0_loop_12:                                         for (ap_uint<4> c9 = 0; c9 <= 7; c9 += 1) {
                                            local_D[c8][c7] = (local_D[c8][c7] + ((local_A[0][0][c9] * local_B[0][0]) * local_C[0][c9]));
                                        }
                                        if (c2 == 127 && c5 == 1 && c6 == 31)
                                            fifo_D_drain_out.write(local_D[c8][c7]);
                                        {
                                            C_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_C[0][7];
                                            u6.ut = local_C[0][6];
                                            u5.ut = local_C[0][5];
                                            u4.ut = local_C[0][4];
                                            u3.ut = local_C[0][3];
                                            u2.ut = local_C[0][2];
                                            u1.ut = local_C[0][1];
                                            u0.ut = local_C[0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_C_out.write(fifo_data);
                                        }
                                        fifo_B_out.write(local_B[0][0]);
                                        {
                                            A_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_A[0][0][7];
                                            u6.ut = local_A[0][0][6];
                                            u5.ut = local_A[0][0][5];
                                            u4.ut = local_A[0][0][4];
                                            u3.ut = local_A[0][0][3];
                                            u2.ut = local_A[0][0][2];
                                            u1.ut = local_A[0][0][1];
                                            u0.ut = local_A[0][0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_A_out.write(fifo_data);
                                        }
                                    }
                                }
                            }
                        }
                }
            }
}
/* Module Definition */

/* Module Definition */
void PE_wrapper_1_5_x0(int idx, int idy, hls::stream<A_t8> &fifo_A_in, hls::stream<A_t8> &fifo_A_out, hls::stream<float> &fifo_B_in, hls::stream<float> &fifo_B_out, hls::stream<C_t8> &fifo_C_in, hls::stream<C_t8> &fifo_C_out, hls::stream<float> &fifo_D_drain_out) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    A_t1 local_A[1][1][8];
#pragma HLS ARRAY_PARTITION variable = local_A dim = 0 complete
    B_t1 local_B[1][1];
#pragma HLS ARRAY_PARTITION variable = local_B dim = 0 complete
    C_t1 local_C[1][8];
#pragma HLS ARRAY_PARTITION variable = local_C dim = 0 complete
    D_t1 local_D[16][8];
    /* Variable Declaration */

PE_wrapper_1_5_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
PE_wrapper_1_5_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p1 + 8 * c1 <= 41) {
                // array
                // pe
                // latency
PE_wrapper_1_5_x0_loop_3:                 for (ap_uint<4> c6 = 0; c6 <= 7; c6 += 1) {
                    // latency
PE_wrapper_1_5_x0_loop_4:                     for (ap_uint<5> c7 = 0; c7 <= 15; c7 += 1) {

                        local_D[c7][c6] = 0;
                    }
                }
PE_wrapper_1_5_x0_loop_5:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
PE_wrapper_1_5_x0_loop_6:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
PE_wrapper_1_5_x0_loop_7:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
PE_wrapper_1_5_x0_loop_8:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
PE_wrapper_1_5_x0_loop_9:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    {
                                        {
                                            A_t8 fifo_data;
                                            fifo_data = fifo_A_in.read();
PE_wrapper_1_5_x0_loop_10:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_A[0][0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        local_B[0][0] = fifo_B_in.read();
                                        {
                                            C_t8 fifo_data;
                                            fifo_data = fifo_C_in.read();
PE_wrapper_1_5_x0_loop_11:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_C[0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        // simd
PE_wrapper_1_5_x0_loop_12:                                         for (ap_uint<4> c9 = 0; c9 <= 7; c9 += 1) {
                                            local_D[c8][c7] = (local_D[c8][c7] + ((local_A[0][0][c9] * local_B[0][0]) * local_C[0][c9]));
                                        }
                                        if (c2 == 127 && c5 == 1 && c6 == 31)
                                            fifo_D_drain_out.write(local_D[c8][c7]);
                                        {
                                            C_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_C[0][7];
                                            u6.ut = local_C[0][6];
                                            u5.ut = local_C[0][5];
                                            u4.ut = local_C[0][4];
                                            u3.ut = local_C[0][3];
                                            u2.ut = local_C[0][2];
                                            u1.ut = local_C[0][1];
                                            u0.ut = local_C[0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_C_out.write(fifo_data);
                                        }
                                        fifo_B_out.write(local_B[0][0]);
                                        {
                                            A_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_A[0][0][7];
                                            u6.ut = local_A[0][0][6];
                                            u5.ut = local_A[0][0][5];
                                            u4.ut = local_A[0][0][4];
                                            u3.ut = local_A[0][0][3];
                                            u2.ut = local_A[0][0][2];
                                            u1.ut = local_A[0][0][1];
                                            u0.ut = local_A[0][0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_A_out.write(fifo_data);
                                        }
                                    }
                                }
                            }
                        }
                }
            }
}
/* Module Definition */

/* Module Definition */
void PE_wrapper_1_6_x0(int idx, int idy, hls::stream<A_t8> &fifo_A_in, hls::stream<A_t8> &fifo_A_out, hls::stream<float> &fifo_B_in, hls::stream<float> &fifo_B_out, hls::stream<C_t8> &fifo_C_in, hls::stream<C_t8> &fifo_C_out, hls::stream<float> &fifo_D_drain_out) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    A_t1 local_A[1][1][8];
#pragma HLS ARRAY_PARTITION variable = local_A dim = 0 complete
    B_t1 local_B[1][1];
#pragma HLS ARRAY_PARTITION variable = local_B dim = 0 complete
    C_t1 local_C[1][8];
#pragma HLS ARRAY_PARTITION variable = local_C dim = 0 complete
    D_t1 local_D[16][8];
    /* Variable Declaration */

PE_wrapper_1_6_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
PE_wrapper_1_6_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p1 + 8 * c1 <= 41) {
                // array
                // pe
                // latency
PE_wrapper_1_6_x0_loop_3:                 for (ap_uint<4> c6 = 0; c6 <= 7; c6 += 1) {
                    // latency
PE_wrapper_1_6_x0_loop_4:                     for (ap_uint<5> c7 = 0; c7 <= 15; c7 += 1) {

                        local_D[c7][c6] = 0;
                    }
                }
PE_wrapper_1_6_x0_loop_5:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
PE_wrapper_1_6_x0_loop_6:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
PE_wrapper_1_6_x0_loop_7:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
PE_wrapper_1_6_x0_loop_8:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
PE_wrapper_1_6_x0_loop_9:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    {
                                        {
                                            A_t8 fifo_data;
                                            fifo_data = fifo_A_in.read();
PE_wrapper_1_6_x0_loop_10:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_A[0][0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        local_B[0][0] = fifo_B_in.read();
                                        {
                                            C_t8 fifo_data;
                                            fifo_data = fifo_C_in.read();
PE_wrapper_1_6_x0_loop_11:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_C[0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        // simd
PE_wrapper_1_6_x0_loop_12:                                         for (ap_uint<4> c9 = 0; c9 <= 7; c9 += 1) {
                                            local_D[c8][c7] = (local_D[c8][c7] + ((local_A[0][0][c9] * local_B[0][0]) * local_C[0][c9]));
                                        }
                                        if (c2 == 127 && c5 == 1 && c6 == 31)
                                            fifo_D_drain_out.write(local_D[c8][c7]);
                                        {
                                            C_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_C[0][7];
                                            u6.ut = local_C[0][6];
                                            u5.ut = local_C[0][5];
                                            u4.ut = local_C[0][4];
                                            u3.ut = local_C[0][3];
                                            u2.ut = local_C[0][2];
                                            u1.ut = local_C[0][1];
                                            u0.ut = local_C[0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_C_out.write(fifo_data);
                                        }
                                        fifo_B_out.write(local_B[0][0]);
                                        {
                                            A_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_A[0][0][7];
                                            u6.ut = local_A[0][0][6];
                                            u5.ut = local_A[0][0][5];
                                            u4.ut = local_A[0][0][4];
                                            u3.ut = local_A[0][0][3];
                                            u2.ut = local_A[0][0][2];
                                            u1.ut = local_A[0][0][1];
                                            u0.ut = local_A[0][0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_A_out.write(fifo_data);
                                        }
                                    }
                                }
                            }
                        }
                }
            }
}
/* Module Definition */

/* Module Definition */
void PE_wrapper_1_7_x0(int idx, int idy, hls::stream<A_t8> &fifo_A_in, hls::stream<A_t8> &fifo_A_out, hls::stream<float> &fifo_B_in, hls::stream<float> &fifo_B_out, hls::stream<C_t8> &fifo_C_in, hls::stream<C_t8> &fifo_C_out, hls::stream<float> &fifo_D_drain_out) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    A_t1 local_A[1][1][8];
#pragma HLS ARRAY_PARTITION variable = local_A dim = 0 complete
    B_t1 local_B[1][1];
#pragma HLS ARRAY_PARTITION variable = local_B dim = 0 complete
    C_t1 local_C[1][8];
#pragma HLS ARRAY_PARTITION variable = local_C dim = 0 complete
    D_t1 local_D[16][8];
    /* Variable Declaration */

PE_wrapper_1_7_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
PE_wrapper_1_7_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p1 + 8 * c1 <= 41) {
                // array
                // pe
                // latency
PE_wrapper_1_7_x0_loop_3:                 for (ap_uint<4> c6 = 0; c6 <= 7; c6 += 1) {
                    // latency
PE_wrapper_1_7_x0_loop_4:                     for (ap_uint<5> c7 = 0; c7 <= 15; c7 += 1) {

                        local_D[c7][c6] = 0;
                    }
                }
PE_wrapper_1_7_x0_loop_5:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
PE_wrapper_1_7_x0_loop_6:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
PE_wrapper_1_7_x0_loop_7:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
PE_wrapper_1_7_x0_loop_8:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
PE_wrapper_1_7_x0_loop_9:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    {
                                        {
                                            A_t8 fifo_data;
                                            fifo_data = fifo_A_in.read();
PE_wrapper_1_7_x0_loop_10:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_A[0][0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        local_B[0][0] = fifo_B_in.read();
                                        {
                                            C_t8 fifo_data;
                                            fifo_data = fifo_C_in.read();
PE_wrapper_1_7_x0_loop_11:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_C[0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        // simd
PE_wrapper_1_7_x0_loop_12:                                         for (ap_uint<4> c9 = 0; c9 <= 7; c9 += 1) {
                                            local_D[c8][c7] = (local_D[c8][c7] + ((local_A[0][0][c9] * local_B[0][0]) * local_C[0][c9]));
                                        }
                                        if (c2 == 127 && c5 == 1 && c6 == 31)
                                            fifo_D_drain_out.write(local_D[c8][c7]);
                                        {
                                            C_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_C[0][7];
                                            u6.ut = local_C[0][6];
                                            u5.ut = local_C[0][5];
                                            u4.ut = local_C[0][4];
                                            u3.ut = local_C[0][3];
                                            u2.ut = local_C[0][2];
                                            u1.ut = local_C[0][1];
                                            u0.ut = local_C[0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_C_out.write(fifo_data);
                                        }
                                        fifo_B_out.write(local_B[0][0]);
                                        {
                                            A_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_A[0][0][7];
                                            u6.ut = local_A[0][0][6];
                                            u5.ut = local_A[0][0][5];
                                            u4.ut = local_A[0][0][4];
                                            u3.ut = local_A[0][0][3];
                                            u2.ut = local_A[0][0][2];
                                            u1.ut = local_A[0][0][1];
                                            u0.ut = local_A[0][0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_A_out.write(fifo_data);
                                        }
                                    }
                                }
                            }
                        }
                }
            }
}
/* Module Definition */

/* Module Definition */
void PE_wrapper_2_0_x0(int idx, int idy, hls::stream<A_t8> &fifo_A_in, hls::stream<A_t8> &fifo_A_out, hls::stream<float> &fifo_B_in, hls::stream<float> &fifo_B_out, hls::stream<C_t8> &fifo_C_in, hls::stream<C_t8> &fifo_C_out, hls::stream<float> &fifo_D_drain_out) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    A_t1 local_A[1][1][8];
#pragma HLS ARRAY_PARTITION variable = local_A dim = 0 complete
    B_t1 local_B[1][1];
#pragma HLS ARRAY_PARTITION variable = local_B dim = 0 complete
    C_t1 local_C[1][8];
#pragma HLS ARRAY_PARTITION variable = local_C dim = 0 complete
    D_t1 local_D[16][8];
    /* Variable Declaration */

PE_wrapper_2_0_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
PE_wrapper_2_0_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p1 + 8 * c1 <= 41) {
                // array
                // pe
                // latency
PE_wrapper_2_0_x0_loop_3:                 for (ap_uint<4> c6 = 0; c6 <= 7; c6 += 1) {
                    // latency
PE_wrapper_2_0_x0_loop_4:                     for (ap_uint<5> c7 = 0; c7 <= 15; c7 += 1) {

                        local_D[c7][c6] = 0;
                    }
                }
PE_wrapper_2_0_x0_loop_5:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
PE_wrapper_2_0_x0_loop_6:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
PE_wrapper_2_0_x0_loop_7:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
PE_wrapper_2_0_x0_loop_8:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
PE_wrapper_2_0_x0_loop_9:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    {
                                        {
                                            A_t8 fifo_data;
                                            fifo_data = fifo_A_in.read();
PE_wrapper_2_0_x0_loop_10:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_A[0][0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        local_B[0][0] = fifo_B_in.read();
                                        {
                                            C_t8 fifo_data;
                                            fifo_data = fifo_C_in.read();
PE_wrapper_2_0_x0_loop_11:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_C[0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        // simd
PE_wrapper_2_0_x0_loop_12:                                         for (ap_uint<4> c9 = 0; c9 <= 7; c9 += 1) {
                                            local_D[c8][c7] = (local_D[c8][c7] + ((local_A[0][0][c9] * local_B[0][0]) * local_C[0][c9]));
                                        }
                                        if (c2 == 127 && c5 == 1 && c6 == 31)
                                            fifo_D_drain_out.write(local_D[c8][c7]);
                                        {
                                            C_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_C[0][7];
                                            u6.ut = local_C[0][6];
                                            u5.ut = local_C[0][5];
                                            u4.ut = local_C[0][4];
                                            u3.ut = local_C[0][3];
                                            u2.ut = local_C[0][2];
                                            u1.ut = local_C[0][1];
                                            u0.ut = local_C[0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_C_out.write(fifo_data);
                                        }
                                        fifo_B_out.write(local_B[0][0]);
                                        {
                                            A_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_A[0][0][7];
                                            u6.ut = local_A[0][0][6];
                                            u5.ut = local_A[0][0][5];
                                            u4.ut = local_A[0][0][4];
                                            u3.ut = local_A[0][0][3];
                                            u2.ut = local_A[0][0][2];
                                            u1.ut = local_A[0][0][1];
                                            u0.ut = local_A[0][0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_A_out.write(fifo_data);
                                        }
                                    }
                                }
                            }
                        }
                }
            }
}
/* Module Definition */

/* Module Definition */
void PE_wrapper_2_1_x0(int idx, int idy, hls::stream<A_t8> &fifo_A_in, hls::stream<A_t8> &fifo_A_out, hls::stream<float> &fifo_B_in, hls::stream<float> &fifo_B_out, hls::stream<C_t8> &fifo_C_in, hls::stream<C_t8> &fifo_C_out, hls::stream<float> &fifo_D_drain_out) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    A_t1 local_A[1][1][8];
#pragma HLS ARRAY_PARTITION variable = local_A dim = 0 complete
    B_t1 local_B[1][1];
#pragma HLS ARRAY_PARTITION variable = local_B dim = 0 complete
    C_t1 local_C[1][8];
#pragma HLS ARRAY_PARTITION variable = local_C dim = 0 complete
    D_t1 local_D[16][8];
    /* Variable Declaration */

PE_wrapper_2_1_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
PE_wrapper_2_1_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p1 + 8 * c1 <= 41) {
                // array
                // pe
                // latency
PE_wrapper_2_1_x0_loop_3:                 for (ap_uint<4> c6 = 0; c6 <= 7; c6 += 1) {
                    // latency
PE_wrapper_2_1_x0_loop_4:                     for (ap_uint<5> c7 = 0; c7 <= 15; c7 += 1) {

                        local_D[c7][c6] = 0;
                    }
                }
PE_wrapper_2_1_x0_loop_5:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
PE_wrapper_2_1_x0_loop_6:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
PE_wrapper_2_1_x0_loop_7:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
PE_wrapper_2_1_x0_loop_8:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
PE_wrapper_2_1_x0_loop_9:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    {
                                        {
                                            A_t8 fifo_data;
                                            fifo_data = fifo_A_in.read();
PE_wrapper_2_1_x0_loop_10:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_A[0][0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        local_B[0][0] = fifo_B_in.read();
                                        {
                                            C_t8 fifo_data;
                                            fifo_data = fifo_C_in.read();
PE_wrapper_2_1_x0_loop_11:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_C[0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        // simd
PE_wrapper_2_1_x0_loop_12:                                         for (ap_uint<4> c9 = 0; c9 <= 7; c9 += 1) {
                                            local_D[c8][c7] = (local_D[c8][c7] + ((local_A[0][0][c9] * local_B[0][0]) * local_C[0][c9]));
                                        }
                                        if (c2 == 127 && c5 == 1 && c6 == 31)
                                            fifo_D_drain_out.write(local_D[c8][c7]);
                                        {
                                            C_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_C[0][7];
                                            u6.ut = local_C[0][6];
                                            u5.ut = local_C[0][5];
                                            u4.ut = local_C[0][4];
                                            u3.ut = local_C[0][3];
                                            u2.ut = local_C[0][2];
                                            u1.ut = local_C[0][1];
                                            u0.ut = local_C[0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_C_out.write(fifo_data);
                                        }
                                        fifo_B_out.write(local_B[0][0]);
                                        {
                                            A_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_A[0][0][7];
                                            u6.ut = local_A[0][0][6];
                                            u5.ut = local_A[0][0][5];
                                            u4.ut = local_A[0][0][4];
                                            u3.ut = local_A[0][0][3];
                                            u2.ut = local_A[0][0][2];
                                            u1.ut = local_A[0][0][1];
                                            u0.ut = local_A[0][0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_A_out.write(fifo_data);
                                        }
                                    }
                                }
                            }
                        }
                }
            }
}
/* Module Definition */

/* Module Definition */
void PE_wrapper_2_2_x0(int idx, int idy, hls::stream<A_t8> &fifo_A_in, hls::stream<A_t8> &fifo_A_out, hls::stream<float> &fifo_B_in, hls::stream<float> &fifo_B_out, hls::stream<C_t8> &fifo_C_in, hls::stream<C_t8> &fifo_C_out, hls::stream<float> &fifo_D_drain_out) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    A_t1 local_A[1][1][8];
#pragma HLS ARRAY_PARTITION variable = local_A dim = 0 complete
    B_t1 local_B[1][1];
#pragma HLS ARRAY_PARTITION variable = local_B dim = 0 complete
    C_t1 local_C[1][8];
#pragma HLS ARRAY_PARTITION variable = local_C dim = 0 complete
    D_t1 local_D[16][8];
    /* Variable Declaration */

PE_wrapper_2_2_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
PE_wrapper_2_2_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p1 + 8 * c1 <= 41) {
                // array
                // pe
                // latency
PE_wrapper_2_2_x0_loop_3:                 for (ap_uint<4> c6 = 0; c6 <= 7; c6 += 1) {
                    // latency
PE_wrapper_2_2_x0_loop_4:                     for (ap_uint<5> c7 = 0; c7 <= 15; c7 += 1) {

                        local_D[c7][c6] = 0;
                    }
                }
PE_wrapper_2_2_x0_loop_5:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
PE_wrapper_2_2_x0_loop_6:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
PE_wrapper_2_2_x0_loop_7:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
PE_wrapper_2_2_x0_loop_8:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
PE_wrapper_2_2_x0_loop_9:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    {
                                        {
                                            A_t8 fifo_data;
                                            fifo_data = fifo_A_in.read();
PE_wrapper_2_2_x0_loop_10:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_A[0][0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        local_B[0][0] = fifo_B_in.read();
                                        {
                                            C_t8 fifo_data;
                                            fifo_data = fifo_C_in.read();
PE_wrapper_2_2_x0_loop_11:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_C[0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        // simd
PE_wrapper_2_2_x0_loop_12:                                         for (ap_uint<4> c9 = 0; c9 <= 7; c9 += 1) {
                                            local_D[c8][c7] = (local_D[c8][c7] + ((local_A[0][0][c9] * local_B[0][0]) * local_C[0][c9]));
                                        }
                                        if (c2 == 127 && c5 == 1 && c6 == 31)
                                            fifo_D_drain_out.write(local_D[c8][c7]);
                                        {
                                            C_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_C[0][7];
                                            u6.ut = local_C[0][6];
                                            u5.ut = local_C[0][5];
                                            u4.ut = local_C[0][4];
                                            u3.ut = local_C[0][3];
                                            u2.ut = local_C[0][2];
                                            u1.ut = local_C[0][1];
                                            u0.ut = local_C[0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_C_out.write(fifo_data);
                                        }
                                        fifo_B_out.write(local_B[0][0]);
                                        {
                                            A_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_A[0][0][7];
                                            u6.ut = local_A[0][0][6];
                                            u5.ut = local_A[0][0][5];
                                            u4.ut = local_A[0][0][4];
                                            u3.ut = local_A[0][0][3];
                                            u2.ut = local_A[0][0][2];
                                            u1.ut = local_A[0][0][1];
                                            u0.ut = local_A[0][0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_A_out.write(fifo_data);
                                        }
                                    }
                                }
                            }
                        }
                }
            }
}
/* Module Definition */

/* Module Definition */
void PE_wrapper_2_3_x0(int idx, int idy, hls::stream<A_t8> &fifo_A_in, hls::stream<A_t8> &fifo_A_out, hls::stream<float> &fifo_B_in, hls::stream<float> &fifo_B_out, hls::stream<C_t8> &fifo_C_in, hls::stream<C_t8> &fifo_C_out, hls::stream<float> &fifo_D_drain_out) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    A_t1 local_A[1][1][8];
#pragma HLS ARRAY_PARTITION variable = local_A dim = 0 complete
    B_t1 local_B[1][1];
#pragma HLS ARRAY_PARTITION variable = local_B dim = 0 complete
    C_t1 local_C[1][8];
#pragma HLS ARRAY_PARTITION variable = local_C dim = 0 complete
    D_t1 local_D[16][8];
    /* Variable Declaration */

PE_wrapper_2_3_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
PE_wrapper_2_3_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p1 + 8 * c1 <= 41) {
                // array
                // pe
                // latency
PE_wrapper_2_3_x0_loop_3:                 for (ap_uint<4> c6 = 0; c6 <= 7; c6 += 1) {
                    // latency
PE_wrapper_2_3_x0_loop_4:                     for (ap_uint<5> c7 = 0; c7 <= 15; c7 += 1) {

                        local_D[c7][c6] = 0;
                    }
                }
PE_wrapper_2_3_x0_loop_5:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
PE_wrapper_2_3_x0_loop_6:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
PE_wrapper_2_3_x0_loop_7:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
PE_wrapper_2_3_x0_loop_8:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
PE_wrapper_2_3_x0_loop_9:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    {
                                        {
                                            A_t8 fifo_data;
                                            fifo_data = fifo_A_in.read();
PE_wrapper_2_3_x0_loop_10:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_A[0][0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        local_B[0][0] = fifo_B_in.read();
                                        {
                                            C_t8 fifo_data;
                                            fifo_data = fifo_C_in.read();
PE_wrapper_2_3_x0_loop_11:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_C[0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        // simd
PE_wrapper_2_3_x0_loop_12:                                         for (ap_uint<4> c9 = 0; c9 <= 7; c9 += 1) {
                                            local_D[c8][c7] = (local_D[c8][c7] + ((local_A[0][0][c9] * local_B[0][0]) * local_C[0][c9]));
                                        }
                                        if (c2 == 127 && c5 == 1 && c6 == 31)
                                            fifo_D_drain_out.write(local_D[c8][c7]);
                                        {
                                            C_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_C[0][7];
                                            u6.ut = local_C[0][6];
                                            u5.ut = local_C[0][5];
                                            u4.ut = local_C[0][4];
                                            u3.ut = local_C[0][3];
                                            u2.ut = local_C[0][2];
                                            u1.ut = local_C[0][1];
                                            u0.ut = local_C[0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_C_out.write(fifo_data);
                                        }
                                        fifo_B_out.write(local_B[0][0]);
                                        {
                                            A_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_A[0][0][7];
                                            u6.ut = local_A[0][0][6];
                                            u5.ut = local_A[0][0][5];
                                            u4.ut = local_A[0][0][4];
                                            u3.ut = local_A[0][0][3];
                                            u2.ut = local_A[0][0][2];
                                            u1.ut = local_A[0][0][1];
                                            u0.ut = local_A[0][0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_A_out.write(fifo_data);
                                        }
                                    }
                                }
                            }
                        }
                }
            }
}
/* Module Definition */

/* Module Definition */
void PE_wrapper_2_4_x0(int idx, int idy, hls::stream<A_t8> &fifo_A_in, hls::stream<A_t8> &fifo_A_out, hls::stream<float> &fifo_B_in, hls::stream<float> &fifo_B_out, hls::stream<C_t8> &fifo_C_in, hls::stream<C_t8> &fifo_C_out, hls::stream<float> &fifo_D_drain_out) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    A_t1 local_A[1][1][8];
#pragma HLS ARRAY_PARTITION variable = local_A dim = 0 complete
    B_t1 local_B[1][1];
#pragma HLS ARRAY_PARTITION variable = local_B dim = 0 complete
    C_t1 local_C[1][8];
#pragma HLS ARRAY_PARTITION variable = local_C dim = 0 complete
    D_t1 local_D[16][8];
    /* Variable Declaration */

PE_wrapper_2_4_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
PE_wrapper_2_4_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p1 + 8 * c1 <= 41) {
                // array
                // pe
                // latency
PE_wrapper_2_4_x0_loop_3:                 for (ap_uint<4> c6 = 0; c6 <= 7; c6 += 1) {
                    // latency
PE_wrapper_2_4_x0_loop_4:                     for (ap_uint<5> c7 = 0; c7 <= 15; c7 += 1) {

                        local_D[c7][c6] = 0;
                    }
                }
PE_wrapper_2_4_x0_loop_5:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
PE_wrapper_2_4_x0_loop_6:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
PE_wrapper_2_4_x0_loop_7:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
PE_wrapper_2_4_x0_loop_8:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
PE_wrapper_2_4_x0_loop_9:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    {
                                        {
                                            A_t8 fifo_data;
                                            fifo_data = fifo_A_in.read();
PE_wrapper_2_4_x0_loop_10:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_A[0][0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        local_B[0][0] = fifo_B_in.read();
                                        {
                                            C_t8 fifo_data;
                                            fifo_data = fifo_C_in.read();
PE_wrapper_2_4_x0_loop_11:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_C[0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        // simd
PE_wrapper_2_4_x0_loop_12:                                         for (ap_uint<4> c9 = 0; c9 <= 7; c9 += 1) {
                                            local_D[c8][c7] = (local_D[c8][c7] + ((local_A[0][0][c9] * local_B[0][0]) * local_C[0][c9]));
                                        }
                                        if (c2 == 127 && c5 == 1 && c6 == 31)
                                            fifo_D_drain_out.write(local_D[c8][c7]);
                                        {
                                            C_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_C[0][7];
                                            u6.ut = local_C[0][6];
                                            u5.ut = local_C[0][5];
                                            u4.ut = local_C[0][4];
                                            u3.ut = local_C[0][3];
                                            u2.ut = local_C[0][2];
                                            u1.ut = local_C[0][1];
                                            u0.ut = local_C[0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_C_out.write(fifo_data);
                                        }
                                        fifo_B_out.write(local_B[0][0]);
                                        {
                                            A_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_A[0][0][7];
                                            u6.ut = local_A[0][0][6];
                                            u5.ut = local_A[0][0][5];
                                            u4.ut = local_A[0][0][4];
                                            u3.ut = local_A[0][0][3];
                                            u2.ut = local_A[0][0][2];
                                            u1.ut = local_A[0][0][1];
                                            u0.ut = local_A[0][0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_A_out.write(fifo_data);
                                        }
                                    }
                                }
                            }
                        }
                }
            }
}
/* Module Definition */

/* Module Definition */
void PE_wrapper_2_5_x0(int idx, int idy, hls::stream<A_t8> &fifo_A_in, hls::stream<A_t8> &fifo_A_out, hls::stream<float> &fifo_B_in, hls::stream<float> &fifo_B_out, hls::stream<C_t8> &fifo_C_in, hls::stream<C_t8> &fifo_C_out, hls::stream<float> &fifo_D_drain_out) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    A_t1 local_A[1][1][8];
#pragma HLS ARRAY_PARTITION variable = local_A dim = 0 complete
    B_t1 local_B[1][1];
#pragma HLS ARRAY_PARTITION variable = local_B dim = 0 complete
    C_t1 local_C[1][8];
#pragma HLS ARRAY_PARTITION variable = local_C dim = 0 complete
    D_t1 local_D[16][8];
    /* Variable Declaration */

PE_wrapper_2_5_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
PE_wrapper_2_5_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p1 + 8 * c1 <= 41) {
                // array
                // pe
                // latency
PE_wrapper_2_5_x0_loop_3:                 for (ap_uint<4> c6 = 0; c6 <= 7; c6 += 1) {
                    // latency
PE_wrapper_2_5_x0_loop_4:                     for (ap_uint<5> c7 = 0; c7 <= 15; c7 += 1) {

                        local_D[c7][c6] = 0;
                    }
                }
PE_wrapper_2_5_x0_loop_5:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
PE_wrapper_2_5_x0_loop_6:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
PE_wrapper_2_5_x0_loop_7:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
PE_wrapper_2_5_x0_loop_8:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
PE_wrapper_2_5_x0_loop_9:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    {
                                        {
                                            A_t8 fifo_data;
                                            fifo_data = fifo_A_in.read();
PE_wrapper_2_5_x0_loop_10:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_A[0][0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        local_B[0][0] = fifo_B_in.read();
                                        {
                                            C_t8 fifo_data;
                                            fifo_data = fifo_C_in.read();
PE_wrapper_2_5_x0_loop_11:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_C[0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        // simd
PE_wrapper_2_5_x0_loop_12:                                         for (ap_uint<4> c9 = 0; c9 <= 7; c9 += 1) {
                                            local_D[c8][c7] = (local_D[c8][c7] + ((local_A[0][0][c9] * local_B[0][0]) * local_C[0][c9]));
                                        }
                                        if (c2 == 127 && c5 == 1 && c6 == 31)
                                            fifo_D_drain_out.write(local_D[c8][c7]);
                                        {
                                            C_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_C[0][7];
                                            u6.ut = local_C[0][6];
                                            u5.ut = local_C[0][5];
                                            u4.ut = local_C[0][4];
                                            u3.ut = local_C[0][3];
                                            u2.ut = local_C[0][2];
                                            u1.ut = local_C[0][1];
                                            u0.ut = local_C[0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_C_out.write(fifo_data);
                                        }
                                        fifo_B_out.write(local_B[0][0]);
                                        {
                                            A_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_A[0][0][7];
                                            u6.ut = local_A[0][0][6];
                                            u5.ut = local_A[0][0][5];
                                            u4.ut = local_A[0][0][4];
                                            u3.ut = local_A[0][0][3];
                                            u2.ut = local_A[0][0][2];
                                            u1.ut = local_A[0][0][1];
                                            u0.ut = local_A[0][0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_A_out.write(fifo_data);
                                        }
                                    }
                                }
                            }
                        }
                }
            }
}
/* Module Definition */

/* Module Definition */
void PE_wrapper_2_6_x0(int idx, int idy, hls::stream<A_t8> &fifo_A_in, hls::stream<A_t8> &fifo_A_out, hls::stream<float> &fifo_B_in, hls::stream<float> &fifo_B_out, hls::stream<C_t8> &fifo_C_in, hls::stream<C_t8> &fifo_C_out, hls::stream<float> &fifo_D_drain_out) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    A_t1 local_A[1][1][8];
#pragma HLS ARRAY_PARTITION variable = local_A dim = 0 complete
    B_t1 local_B[1][1];
#pragma HLS ARRAY_PARTITION variable = local_B dim = 0 complete
    C_t1 local_C[1][8];
#pragma HLS ARRAY_PARTITION variable = local_C dim = 0 complete
    D_t1 local_D[16][8];
    /* Variable Declaration */

PE_wrapper_2_6_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
PE_wrapper_2_6_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p1 + 8 * c1 <= 41) {
                // array
                // pe
                // latency
PE_wrapper_2_6_x0_loop_3:                 for (ap_uint<4> c6 = 0; c6 <= 7; c6 += 1) {
                    // latency
PE_wrapper_2_6_x0_loop_4:                     for (ap_uint<5> c7 = 0; c7 <= 15; c7 += 1) {

                        local_D[c7][c6] = 0;
                    }
                }
PE_wrapper_2_6_x0_loop_5:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
PE_wrapper_2_6_x0_loop_6:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
PE_wrapper_2_6_x0_loop_7:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
PE_wrapper_2_6_x0_loop_8:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
PE_wrapper_2_6_x0_loop_9:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    {
                                        {
                                            A_t8 fifo_data;
                                            fifo_data = fifo_A_in.read();
PE_wrapper_2_6_x0_loop_10:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_A[0][0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        local_B[0][0] = fifo_B_in.read();
                                        {
                                            C_t8 fifo_data;
                                            fifo_data = fifo_C_in.read();
PE_wrapper_2_6_x0_loop_11:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_C[0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        // simd
PE_wrapper_2_6_x0_loop_12:                                         for (ap_uint<4> c9 = 0; c9 <= 7; c9 += 1) {
                                            local_D[c8][c7] = (local_D[c8][c7] + ((local_A[0][0][c9] * local_B[0][0]) * local_C[0][c9]));
                                        }
                                        if (c2 == 127 && c5 == 1 && c6 == 31)
                                            fifo_D_drain_out.write(local_D[c8][c7]);
                                        {
                                            C_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_C[0][7];
                                            u6.ut = local_C[0][6];
                                            u5.ut = local_C[0][5];
                                            u4.ut = local_C[0][4];
                                            u3.ut = local_C[0][3];
                                            u2.ut = local_C[0][2];
                                            u1.ut = local_C[0][1];
                                            u0.ut = local_C[0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_C_out.write(fifo_data);
                                        }
                                        fifo_B_out.write(local_B[0][0]);
                                        {
                                            A_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_A[0][0][7];
                                            u6.ut = local_A[0][0][6];
                                            u5.ut = local_A[0][0][5];
                                            u4.ut = local_A[0][0][4];
                                            u3.ut = local_A[0][0][3];
                                            u2.ut = local_A[0][0][2];
                                            u1.ut = local_A[0][0][1];
                                            u0.ut = local_A[0][0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_A_out.write(fifo_data);
                                        }
                                    }
                                }
                            }
                        }
                }
            }
}
/* Module Definition */

/* Module Definition */
void PE_wrapper_2_7_x0(int idx, int idy, hls::stream<A_t8> &fifo_A_in, hls::stream<A_t8> &fifo_A_out, hls::stream<float> &fifo_B_in, hls::stream<float> &fifo_B_out, hls::stream<C_t8> &fifo_C_in, hls::stream<C_t8> &fifo_C_out, hls::stream<float> &fifo_D_drain_out) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    A_t1 local_A[1][1][8];
#pragma HLS ARRAY_PARTITION variable = local_A dim = 0 complete
    B_t1 local_B[1][1];
#pragma HLS ARRAY_PARTITION variable = local_B dim = 0 complete
    C_t1 local_C[1][8];
#pragma HLS ARRAY_PARTITION variable = local_C dim = 0 complete
    D_t1 local_D[16][8];
    /* Variable Declaration */

PE_wrapper_2_7_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
PE_wrapper_2_7_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p1 + 8 * c1 <= 41) {
                // array
                // pe
                // latency
PE_wrapper_2_7_x0_loop_3:                 for (ap_uint<4> c6 = 0; c6 <= 7; c6 += 1) {
                    // latency
PE_wrapper_2_7_x0_loop_4:                     for (ap_uint<5> c7 = 0; c7 <= 15; c7 += 1) {

                        local_D[c7][c6] = 0;
                    }
                }
PE_wrapper_2_7_x0_loop_5:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
PE_wrapper_2_7_x0_loop_6:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
PE_wrapper_2_7_x0_loop_7:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
PE_wrapper_2_7_x0_loop_8:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
PE_wrapper_2_7_x0_loop_9:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    {
                                        {
                                            A_t8 fifo_data;
                                            fifo_data = fifo_A_in.read();
PE_wrapper_2_7_x0_loop_10:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_A[0][0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        local_B[0][0] = fifo_B_in.read();
                                        {
                                            C_t8 fifo_data;
                                            fifo_data = fifo_C_in.read();
PE_wrapper_2_7_x0_loop_11:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_C[0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        // simd
PE_wrapper_2_7_x0_loop_12:                                         for (ap_uint<4> c9 = 0; c9 <= 7; c9 += 1) {
                                            local_D[c8][c7] = (local_D[c8][c7] + ((local_A[0][0][c9] * local_B[0][0]) * local_C[0][c9]));
                                        }
                                        if (c2 == 127 && c5 == 1 && c6 == 31)
                                            fifo_D_drain_out.write(local_D[c8][c7]);
                                        {
                                            C_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_C[0][7];
                                            u6.ut = local_C[0][6];
                                            u5.ut = local_C[0][5];
                                            u4.ut = local_C[0][4];
                                            u3.ut = local_C[0][3];
                                            u2.ut = local_C[0][2];
                                            u1.ut = local_C[0][1];
                                            u0.ut = local_C[0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_C_out.write(fifo_data);
                                        }
                                        fifo_B_out.write(local_B[0][0]);
                                        {
                                            A_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_A[0][0][7];
                                            u6.ut = local_A[0][0][6];
                                            u5.ut = local_A[0][0][5];
                                            u4.ut = local_A[0][0][4];
                                            u3.ut = local_A[0][0][3];
                                            u2.ut = local_A[0][0][2];
                                            u1.ut = local_A[0][0][1];
                                            u0.ut = local_A[0][0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_A_out.write(fifo_data);
                                        }
                                    }
                                }
                            }
                        }
                }
            }
}
/* Module Definition */

/* Module Definition */
void PE_wrapper_3_0_x0(int idx, int idy, hls::stream<A_t8> &fifo_A_in, hls::stream<A_t8> &fifo_A_out, hls::stream<float> &fifo_B_in, hls::stream<float> &fifo_B_out, hls::stream<C_t8> &fifo_C_in, hls::stream<C_t8> &fifo_C_out, hls::stream<float> &fifo_D_drain_out) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    A_t1 local_A[1][1][8];
#pragma HLS ARRAY_PARTITION variable = local_A dim = 0 complete
    B_t1 local_B[1][1];
#pragma HLS ARRAY_PARTITION variable = local_B dim = 0 complete
    C_t1 local_C[1][8];
#pragma HLS ARRAY_PARTITION variable = local_C dim = 0 complete
    D_t1 local_D[16][8];
    /* Variable Declaration */

PE_wrapper_3_0_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
PE_wrapper_3_0_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p1 + 8 * c1 <= 41) {
                // array
                // pe
                // latency
PE_wrapper_3_0_x0_loop_3:                 for (ap_uint<4> c6 = 0; c6 <= 7; c6 += 1) {
                    // latency
PE_wrapper_3_0_x0_loop_4:                     for (ap_uint<5> c7 = 0; c7 <= 15; c7 += 1) {

                        local_D[c7][c6] = 0;
                    }
                }
PE_wrapper_3_0_x0_loop_5:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
PE_wrapper_3_0_x0_loop_6:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
PE_wrapper_3_0_x0_loop_7:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
PE_wrapper_3_0_x0_loop_8:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
PE_wrapper_3_0_x0_loop_9:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    {
                                        {
                                            A_t8 fifo_data;
                                            fifo_data = fifo_A_in.read();
PE_wrapper_3_0_x0_loop_10:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_A[0][0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        local_B[0][0] = fifo_B_in.read();
                                        {
                                            C_t8 fifo_data;
                                            fifo_data = fifo_C_in.read();
PE_wrapper_3_0_x0_loop_11:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_C[0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        // simd
PE_wrapper_3_0_x0_loop_12:                                         for (ap_uint<4> c9 = 0; c9 <= 7; c9 += 1) {
                                            local_D[c8][c7] = (local_D[c8][c7] + ((local_A[0][0][c9] * local_B[0][0]) * local_C[0][c9]));
                                        }
                                        if (c2 == 127 && c5 == 1 && c6 == 31)
                                            fifo_D_drain_out.write(local_D[c8][c7]);
                                        {
                                            C_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_C[0][7];
                                            u6.ut = local_C[0][6];
                                            u5.ut = local_C[0][5];
                                            u4.ut = local_C[0][4];
                                            u3.ut = local_C[0][3];
                                            u2.ut = local_C[0][2];
                                            u1.ut = local_C[0][1];
                                            u0.ut = local_C[0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_C_out.write(fifo_data);
                                        }
                                        fifo_B_out.write(local_B[0][0]);
                                        {
                                            A_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_A[0][0][7];
                                            u6.ut = local_A[0][0][6];
                                            u5.ut = local_A[0][0][5];
                                            u4.ut = local_A[0][0][4];
                                            u3.ut = local_A[0][0][3];
                                            u2.ut = local_A[0][0][2];
                                            u1.ut = local_A[0][0][1];
                                            u0.ut = local_A[0][0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_A_out.write(fifo_data);
                                        }
                                    }
                                }
                            }
                        }
                }
            }
}
/* Module Definition */

/* Module Definition */
void PE_wrapper_3_1_x0(int idx, int idy, hls::stream<A_t8> &fifo_A_in, hls::stream<A_t8> &fifo_A_out, hls::stream<float> &fifo_B_in, hls::stream<float> &fifo_B_out, hls::stream<C_t8> &fifo_C_in, hls::stream<C_t8> &fifo_C_out, hls::stream<float> &fifo_D_drain_out) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    A_t1 local_A[1][1][8];
#pragma HLS ARRAY_PARTITION variable = local_A dim = 0 complete
    B_t1 local_B[1][1];
#pragma HLS ARRAY_PARTITION variable = local_B dim = 0 complete
    C_t1 local_C[1][8];
#pragma HLS ARRAY_PARTITION variable = local_C dim = 0 complete
    D_t1 local_D[16][8];
    /* Variable Declaration */

PE_wrapper_3_1_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
PE_wrapper_3_1_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p1 + 8 * c1 <= 41) {
                // array
                // pe
                // latency
PE_wrapper_3_1_x0_loop_3:                 for (ap_uint<4> c6 = 0; c6 <= 7; c6 += 1) {
                    // latency
PE_wrapper_3_1_x0_loop_4:                     for (ap_uint<5> c7 = 0; c7 <= 15; c7 += 1) {

                        local_D[c7][c6] = 0;
                    }
                }
PE_wrapper_3_1_x0_loop_5:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
PE_wrapper_3_1_x0_loop_6:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
PE_wrapper_3_1_x0_loop_7:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
PE_wrapper_3_1_x0_loop_8:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
PE_wrapper_3_1_x0_loop_9:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    {
                                        {
                                            A_t8 fifo_data;
                                            fifo_data = fifo_A_in.read();
PE_wrapper_3_1_x0_loop_10:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_A[0][0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        local_B[0][0] = fifo_B_in.read();
                                        {
                                            C_t8 fifo_data;
                                            fifo_data = fifo_C_in.read();
PE_wrapper_3_1_x0_loop_11:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_C[0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        // simd
PE_wrapper_3_1_x0_loop_12:                                         for (ap_uint<4> c9 = 0; c9 <= 7; c9 += 1) {
                                            local_D[c8][c7] = (local_D[c8][c7] + ((local_A[0][0][c9] * local_B[0][0]) * local_C[0][c9]));
                                        }
                                        if (c2 == 127 && c5 == 1 && c6 == 31)
                                            fifo_D_drain_out.write(local_D[c8][c7]);
                                        {
                                            C_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_C[0][7];
                                            u6.ut = local_C[0][6];
                                            u5.ut = local_C[0][5];
                                            u4.ut = local_C[0][4];
                                            u3.ut = local_C[0][3];
                                            u2.ut = local_C[0][2];
                                            u1.ut = local_C[0][1];
                                            u0.ut = local_C[0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_C_out.write(fifo_data);
                                        }
                                        fifo_B_out.write(local_B[0][0]);
                                        {
                                            A_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_A[0][0][7];
                                            u6.ut = local_A[0][0][6];
                                            u5.ut = local_A[0][0][5];
                                            u4.ut = local_A[0][0][4];
                                            u3.ut = local_A[0][0][3];
                                            u2.ut = local_A[0][0][2];
                                            u1.ut = local_A[0][0][1];
                                            u0.ut = local_A[0][0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_A_out.write(fifo_data);
                                        }
                                    }
                                }
                            }
                        }
                }
            }
}
/* Module Definition */

/* Module Definition */
void PE_wrapper_3_2_x0(int idx, int idy, hls::stream<A_t8> &fifo_A_in, hls::stream<A_t8> &fifo_A_out, hls::stream<float> &fifo_B_in, hls::stream<float> &fifo_B_out, hls::stream<C_t8> &fifo_C_in, hls::stream<C_t8> &fifo_C_out, hls::stream<float> &fifo_D_drain_out) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    A_t1 local_A[1][1][8];
#pragma HLS ARRAY_PARTITION variable = local_A dim = 0 complete
    B_t1 local_B[1][1];
#pragma HLS ARRAY_PARTITION variable = local_B dim = 0 complete
    C_t1 local_C[1][8];
#pragma HLS ARRAY_PARTITION variable = local_C dim = 0 complete
    D_t1 local_D[16][8];
    /* Variable Declaration */

PE_wrapper_3_2_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
PE_wrapper_3_2_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p1 + 8 * c1 <= 41) {
                // array
                // pe
                // latency
PE_wrapper_3_2_x0_loop_3:                 for (ap_uint<4> c6 = 0; c6 <= 7; c6 += 1) {
                    // latency
PE_wrapper_3_2_x0_loop_4:                     for (ap_uint<5> c7 = 0; c7 <= 15; c7 += 1) {

                        local_D[c7][c6] = 0;
                    }
                }
PE_wrapper_3_2_x0_loop_5:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
PE_wrapper_3_2_x0_loop_6:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
PE_wrapper_3_2_x0_loop_7:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
PE_wrapper_3_2_x0_loop_8:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
PE_wrapper_3_2_x0_loop_9:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    {
                                        {
                                            A_t8 fifo_data;
                                            fifo_data = fifo_A_in.read();
PE_wrapper_3_2_x0_loop_10:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_A[0][0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        local_B[0][0] = fifo_B_in.read();
                                        {
                                            C_t8 fifo_data;
                                            fifo_data = fifo_C_in.read();
PE_wrapper_3_2_x0_loop_11:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_C[0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        // simd
PE_wrapper_3_2_x0_loop_12:                                         for (ap_uint<4> c9 = 0; c9 <= 7; c9 += 1) {
                                            local_D[c8][c7] = (local_D[c8][c7] + ((local_A[0][0][c9] * local_B[0][0]) * local_C[0][c9]));
                                        }
                                        if (c2 == 127 && c5 == 1 && c6 == 31)
                                            fifo_D_drain_out.write(local_D[c8][c7]);
                                        {
                                            C_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_C[0][7];
                                            u6.ut = local_C[0][6];
                                            u5.ut = local_C[0][5];
                                            u4.ut = local_C[0][4];
                                            u3.ut = local_C[0][3];
                                            u2.ut = local_C[0][2];
                                            u1.ut = local_C[0][1];
                                            u0.ut = local_C[0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_C_out.write(fifo_data);
                                        }
                                        fifo_B_out.write(local_B[0][0]);
                                        {
                                            A_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_A[0][0][7];
                                            u6.ut = local_A[0][0][6];
                                            u5.ut = local_A[0][0][5];
                                            u4.ut = local_A[0][0][4];
                                            u3.ut = local_A[0][0][3];
                                            u2.ut = local_A[0][0][2];
                                            u1.ut = local_A[0][0][1];
                                            u0.ut = local_A[0][0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_A_out.write(fifo_data);
                                        }
                                    }
                                }
                            }
                        }
                }
            }
}
/* Module Definition */

/* Module Definition */
void PE_wrapper_3_3_x0(int idx, int idy, hls::stream<A_t8> &fifo_A_in, hls::stream<A_t8> &fifo_A_out, hls::stream<float> &fifo_B_in, hls::stream<float> &fifo_B_out, hls::stream<C_t8> &fifo_C_in, hls::stream<C_t8> &fifo_C_out, hls::stream<float> &fifo_D_drain_out) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    A_t1 local_A[1][1][8];
#pragma HLS ARRAY_PARTITION variable = local_A dim = 0 complete
    B_t1 local_B[1][1];
#pragma HLS ARRAY_PARTITION variable = local_B dim = 0 complete
    C_t1 local_C[1][8];
#pragma HLS ARRAY_PARTITION variable = local_C dim = 0 complete
    D_t1 local_D[16][8];
    /* Variable Declaration */

PE_wrapper_3_3_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
PE_wrapper_3_3_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p1 + 8 * c1 <= 41) {
                // array
                // pe
                // latency
PE_wrapper_3_3_x0_loop_3:                 for (ap_uint<4> c6 = 0; c6 <= 7; c6 += 1) {
                    // latency
PE_wrapper_3_3_x0_loop_4:                     for (ap_uint<5> c7 = 0; c7 <= 15; c7 += 1) {

                        local_D[c7][c6] = 0;
                    }
                }
PE_wrapper_3_3_x0_loop_5:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
PE_wrapper_3_3_x0_loop_6:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
PE_wrapper_3_3_x0_loop_7:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
PE_wrapper_3_3_x0_loop_8:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
PE_wrapper_3_3_x0_loop_9:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    {
                                        {
                                            A_t8 fifo_data;
                                            fifo_data = fifo_A_in.read();
PE_wrapper_3_3_x0_loop_10:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_A[0][0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        local_B[0][0] = fifo_B_in.read();
                                        {
                                            C_t8 fifo_data;
                                            fifo_data = fifo_C_in.read();
PE_wrapper_3_3_x0_loop_11:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_C[0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        // simd
PE_wrapper_3_3_x0_loop_12:                                         for (ap_uint<4> c9 = 0; c9 <= 7; c9 += 1) {
                                            local_D[c8][c7] = (local_D[c8][c7] + ((local_A[0][0][c9] * local_B[0][0]) * local_C[0][c9]));
                                        }
                                        if (c2 == 127 && c5 == 1 && c6 == 31)
                                            fifo_D_drain_out.write(local_D[c8][c7]);
                                        {
                                            C_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_C[0][7];
                                            u6.ut = local_C[0][6];
                                            u5.ut = local_C[0][5];
                                            u4.ut = local_C[0][4];
                                            u3.ut = local_C[0][3];
                                            u2.ut = local_C[0][2];
                                            u1.ut = local_C[0][1];
                                            u0.ut = local_C[0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_C_out.write(fifo_data);
                                        }
                                        fifo_B_out.write(local_B[0][0]);
                                        {
                                            A_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_A[0][0][7];
                                            u6.ut = local_A[0][0][6];
                                            u5.ut = local_A[0][0][5];
                                            u4.ut = local_A[0][0][4];
                                            u3.ut = local_A[0][0][3];
                                            u2.ut = local_A[0][0][2];
                                            u1.ut = local_A[0][0][1];
                                            u0.ut = local_A[0][0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_A_out.write(fifo_data);
                                        }
                                    }
                                }
                            }
                        }
                }
            }
}
/* Module Definition */

/* Module Definition */
void PE_wrapper_3_4_x0(int idx, int idy, hls::stream<A_t8> &fifo_A_in, hls::stream<A_t8> &fifo_A_out, hls::stream<float> &fifo_B_in, hls::stream<float> &fifo_B_out, hls::stream<C_t8> &fifo_C_in, hls::stream<C_t8> &fifo_C_out, hls::stream<float> &fifo_D_drain_out) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    A_t1 local_A[1][1][8];
#pragma HLS ARRAY_PARTITION variable = local_A dim = 0 complete
    B_t1 local_B[1][1];
#pragma HLS ARRAY_PARTITION variable = local_B dim = 0 complete
    C_t1 local_C[1][8];
#pragma HLS ARRAY_PARTITION variable = local_C dim = 0 complete
    D_t1 local_D[16][8];
    /* Variable Declaration */

PE_wrapper_3_4_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
PE_wrapper_3_4_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p1 + 8 * c1 <= 41) {
                // array
                // pe
                // latency
PE_wrapper_3_4_x0_loop_3:                 for (ap_uint<4> c6 = 0; c6 <= 7; c6 += 1) {
                    // latency
PE_wrapper_3_4_x0_loop_4:                     for (ap_uint<5> c7 = 0; c7 <= 15; c7 += 1) {

                        local_D[c7][c6] = 0;
                    }
                }
PE_wrapper_3_4_x0_loop_5:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
PE_wrapper_3_4_x0_loop_6:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
PE_wrapper_3_4_x0_loop_7:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
PE_wrapper_3_4_x0_loop_8:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
PE_wrapper_3_4_x0_loop_9:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    {
                                        {
                                            A_t8 fifo_data;
                                            fifo_data = fifo_A_in.read();
PE_wrapper_3_4_x0_loop_10:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_A[0][0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        local_B[0][0] = fifo_B_in.read();
                                        {
                                            C_t8 fifo_data;
                                            fifo_data = fifo_C_in.read();
PE_wrapper_3_4_x0_loop_11:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_C[0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        // simd
PE_wrapper_3_4_x0_loop_12:                                         for (ap_uint<4> c9 = 0; c9 <= 7; c9 += 1) {
                                            local_D[c8][c7] = (local_D[c8][c7] + ((local_A[0][0][c9] * local_B[0][0]) * local_C[0][c9]));
                                        }
                                        if (c2 == 127 && c5 == 1 && c6 == 31)
                                            fifo_D_drain_out.write(local_D[c8][c7]);
                                        {
                                            C_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_C[0][7];
                                            u6.ut = local_C[0][6];
                                            u5.ut = local_C[0][5];
                                            u4.ut = local_C[0][4];
                                            u3.ut = local_C[0][3];
                                            u2.ut = local_C[0][2];
                                            u1.ut = local_C[0][1];
                                            u0.ut = local_C[0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_C_out.write(fifo_data);
                                        }
                                        fifo_B_out.write(local_B[0][0]);
                                        {
                                            A_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_A[0][0][7];
                                            u6.ut = local_A[0][0][6];
                                            u5.ut = local_A[0][0][5];
                                            u4.ut = local_A[0][0][4];
                                            u3.ut = local_A[0][0][3];
                                            u2.ut = local_A[0][0][2];
                                            u1.ut = local_A[0][0][1];
                                            u0.ut = local_A[0][0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_A_out.write(fifo_data);
                                        }
                                    }
                                }
                            }
                        }
                }
            }
}
/* Module Definition */

/* Module Definition */
void PE_wrapper_3_5_x0(int idx, int idy, hls::stream<A_t8> &fifo_A_in, hls::stream<A_t8> &fifo_A_out, hls::stream<float> &fifo_B_in, hls::stream<float> &fifo_B_out, hls::stream<C_t8> &fifo_C_in, hls::stream<C_t8> &fifo_C_out, hls::stream<float> &fifo_D_drain_out) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    A_t1 local_A[1][1][8];
#pragma HLS ARRAY_PARTITION variable = local_A dim = 0 complete
    B_t1 local_B[1][1];
#pragma HLS ARRAY_PARTITION variable = local_B dim = 0 complete
    C_t1 local_C[1][8];
#pragma HLS ARRAY_PARTITION variable = local_C dim = 0 complete
    D_t1 local_D[16][8];
    /* Variable Declaration */

PE_wrapper_3_5_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
PE_wrapper_3_5_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p1 + 8 * c1 <= 41) {
                // array
                // pe
                // latency
PE_wrapper_3_5_x0_loop_3:                 for (ap_uint<4> c6 = 0; c6 <= 7; c6 += 1) {
                    // latency
PE_wrapper_3_5_x0_loop_4:                     for (ap_uint<5> c7 = 0; c7 <= 15; c7 += 1) {

                        local_D[c7][c6] = 0;
                    }
                }
PE_wrapper_3_5_x0_loop_5:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
PE_wrapper_3_5_x0_loop_6:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
PE_wrapper_3_5_x0_loop_7:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
PE_wrapper_3_5_x0_loop_8:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
PE_wrapper_3_5_x0_loop_9:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    {
                                        {
                                            A_t8 fifo_data;
                                            fifo_data = fifo_A_in.read();
PE_wrapper_3_5_x0_loop_10:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_A[0][0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        local_B[0][0] = fifo_B_in.read();
                                        {
                                            C_t8 fifo_data;
                                            fifo_data = fifo_C_in.read();
PE_wrapper_3_5_x0_loop_11:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_C[0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        // simd
PE_wrapper_3_5_x0_loop_12:                                         for (ap_uint<4> c9 = 0; c9 <= 7; c9 += 1) {
                                            local_D[c8][c7] = (local_D[c8][c7] + ((local_A[0][0][c9] * local_B[0][0]) * local_C[0][c9]));
                                        }
                                        if (c2 == 127 && c5 == 1 && c6 == 31)
                                            fifo_D_drain_out.write(local_D[c8][c7]);
                                        {
                                            C_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_C[0][7];
                                            u6.ut = local_C[0][6];
                                            u5.ut = local_C[0][5];
                                            u4.ut = local_C[0][4];
                                            u3.ut = local_C[0][3];
                                            u2.ut = local_C[0][2];
                                            u1.ut = local_C[0][1];
                                            u0.ut = local_C[0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_C_out.write(fifo_data);
                                        }
                                        fifo_B_out.write(local_B[0][0]);
                                        {
                                            A_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_A[0][0][7];
                                            u6.ut = local_A[0][0][6];
                                            u5.ut = local_A[0][0][5];
                                            u4.ut = local_A[0][0][4];
                                            u3.ut = local_A[0][0][3];
                                            u2.ut = local_A[0][0][2];
                                            u1.ut = local_A[0][0][1];
                                            u0.ut = local_A[0][0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_A_out.write(fifo_data);
                                        }
                                    }
                                }
                            }
                        }
                }
            }
}
/* Module Definition */

/* Module Definition */
void PE_wrapper_3_6_x0(int idx, int idy, hls::stream<A_t8> &fifo_A_in, hls::stream<A_t8> &fifo_A_out, hls::stream<float> &fifo_B_in, hls::stream<float> &fifo_B_out, hls::stream<C_t8> &fifo_C_in, hls::stream<C_t8> &fifo_C_out, hls::stream<float> &fifo_D_drain_out) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    A_t1 local_A[1][1][8];
#pragma HLS ARRAY_PARTITION variable = local_A dim = 0 complete
    B_t1 local_B[1][1];
#pragma HLS ARRAY_PARTITION variable = local_B dim = 0 complete
    C_t1 local_C[1][8];
#pragma HLS ARRAY_PARTITION variable = local_C dim = 0 complete
    D_t1 local_D[16][8];
    /* Variable Declaration */

PE_wrapper_3_6_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
PE_wrapper_3_6_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p1 + 8 * c1 <= 41) {
                // array
                // pe
                // latency
PE_wrapper_3_6_x0_loop_3:                 for (ap_uint<4> c6 = 0; c6 <= 7; c6 += 1) {
                    // latency
PE_wrapper_3_6_x0_loop_4:                     for (ap_uint<5> c7 = 0; c7 <= 15; c7 += 1) {

                        local_D[c7][c6] = 0;
                    }
                }
PE_wrapper_3_6_x0_loop_5:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
PE_wrapper_3_6_x0_loop_6:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
PE_wrapper_3_6_x0_loop_7:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
PE_wrapper_3_6_x0_loop_8:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
PE_wrapper_3_6_x0_loop_9:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    {
                                        {
                                            A_t8 fifo_data;
                                            fifo_data = fifo_A_in.read();
PE_wrapper_3_6_x0_loop_10:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_A[0][0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        local_B[0][0] = fifo_B_in.read();
                                        {
                                            C_t8 fifo_data;
                                            fifo_data = fifo_C_in.read();
PE_wrapper_3_6_x0_loop_11:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_C[0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        // simd
PE_wrapper_3_6_x0_loop_12:                                         for (ap_uint<4> c9 = 0; c9 <= 7; c9 += 1) {
                                            local_D[c8][c7] = (local_D[c8][c7] + ((local_A[0][0][c9] * local_B[0][0]) * local_C[0][c9]));
                                        }
                                        if (c2 == 127 && c5 == 1 && c6 == 31)
                                            fifo_D_drain_out.write(local_D[c8][c7]);
                                        {
                                            C_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_C[0][7];
                                            u6.ut = local_C[0][6];
                                            u5.ut = local_C[0][5];
                                            u4.ut = local_C[0][4];
                                            u3.ut = local_C[0][3];
                                            u2.ut = local_C[0][2];
                                            u1.ut = local_C[0][1];
                                            u0.ut = local_C[0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_C_out.write(fifo_data);
                                        }
                                        fifo_B_out.write(local_B[0][0]);
                                        {
                                            A_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_A[0][0][7];
                                            u6.ut = local_A[0][0][6];
                                            u5.ut = local_A[0][0][5];
                                            u4.ut = local_A[0][0][4];
                                            u3.ut = local_A[0][0][3];
                                            u2.ut = local_A[0][0][2];
                                            u1.ut = local_A[0][0][1];
                                            u0.ut = local_A[0][0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_A_out.write(fifo_data);
                                        }
                                    }
                                }
                            }
                        }
                }
            }
}
/* Module Definition */

/* Module Definition */
void PE_wrapper_3_7_x0(int idx, int idy, hls::stream<A_t8> &fifo_A_in, hls::stream<A_t8> &fifo_A_out, hls::stream<float> &fifo_B_in, hls::stream<float> &fifo_B_out, hls::stream<C_t8> &fifo_C_in, hls::stream<C_t8> &fifo_C_out, hls::stream<float> &fifo_D_drain_out) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    A_t1 local_A[1][1][8];
#pragma HLS ARRAY_PARTITION variable = local_A dim = 0 complete
    B_t1 local_B[1][1];
#pragma HLS ARRAY_PARTITION variable = local_B dim = 0 complete
    C_t1 local_C[1][8];
#pragma HLS ARRAY_PARTITION variable = local_C dim = 0 complete
    D_t1 local_D[16][8];
    /* Variable Declaration */

PE_wrapper_3_7_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
PE_wrapper_3_7_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p1 + 8 * c1 <= 41) {
                // array
                // pe
                // latency
PE_wrapper_3_7_x0_loop_3:                 for (ap_uint<4> c6 = 0; c6 <= 7; c6 += 1) {
                    // latency
PE_wrapper_3_7_x0_loop_4:                     for (ap_uint<5> c7 = 0; c7 <= 15; c7 += 1) {

                        local_D[c7][c6] = 0;
                    }
                }
PE_wrapper_3_7_x0_loop_5:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
PE_wrapper_3_7_x0_loop_6:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
PE_wrapper_3_7_x0_loop_7:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
PE_wrapper_3_7_x0_loop_8:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
PE_wrapper_3_7_x0_loop_9:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    {
                                        {
                                            A_t8 fifo_data;
                                            fifo_data = fifo_A_in.read();
PE_wrapper_3_7_x0_loop_10:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_A[0][0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        local_B[0][0] = fifo_B_in.read();
                                        {
                                            C_t8 fifo_data;
                                            fifo_data = fifo_C_in.read();
PE_wrapper_3_7_x0_loop_11:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_C[0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        // simd
PE_wrapper_3_7_x0_loop_12:                                         for (ap_uint<4> c9 = 0; c9 <= 7; c9 += 1) {
                                            local_D[c8][c7] = (local_D[c8][c7] + ((local_A[0][0][c9] * local_B[0][0]) * local_C[0][c9]));
                                        }
                                        if (c2 == 127 && c5 == 1 && c6 == 31)
                                            fifo_D_drain_out.write(local_D[c8][c7]);
                                        {
                                            C_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_C[0][7];
                                            u6.ut = local_C[0][6];
                                            u5.ut = local_C[0][5];
                                            u4.ut = local_C[0][4];
                                            u3.ut = local_C[0][3];
                                            u2.ut = local_C[0][2];
                                            u1.ut = local_C[0][1];
                                            u0.ut = local_C[0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_C_out.write(fifo_data);
                                        }
                                        fifo_B_out.write(local_B[0][0]);
                                        {
                                            A_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_A[0][0][7];
                                            u6.ut = local_A[0][0][6];
                                            u5.ut = local_A[0][0][5];
                                            u4.ut = local_A[0][0][4];
                                            u3.ut = local_A[0][0][3];
                                            u2.ut = local_A[0][0][2];
                                            u1.ut = local_A[0][0][1];
                                            u0.ut = local_A[0][0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_A_out.write(fifo_data);
                                        }
                                    }
                                }
                            }
                        }
                }
            }
}
/* Module Definition */

/* Module Definition */
void A_PE_dummy_in_0_x0(int idx, int idy, hls::stream<A_t8> &fifo_A_in) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    /* Variable Declaration */

A_PE_dummy_in_0_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
A_PE_dummy_in_0_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
            // array
            {}
            if (p1 + 8 * c1 <= 41)
A_PE_dummy_in_0_x0_loop_3:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
A_PE_dummy_in_0_x0_loop_4:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
A_PE_dummy_in_0_x0_loop_5:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
A_PE_dummy_in_0_x0_loop_6:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
A_PE_dummy_in_0_x0_loop_7:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    A_t8 fifo_data;
                                    fifo_data = fifo_A_in.read();
                                }
                            }
                        }
                }
        }
}
/* Module Definition */

/* Module Definition */
void A_PE_dummy_in_1_x0(int idx, int idy, hls::stream<A_t8> &fifo_A_in) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    /* Variable Declaration */

A_PE_dummy_in_1_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
A_PE_dummy_in_1_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
            // array
            {}
            if (p1 + 8 * c1 <= 41)
A_PE_dummy_in_1_x0_loop_3:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
A_PE_dummy_in_1_x0_loop_4:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
A_PE_dummy_in_1_x0_loop_5:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
A_PE_dummy_in_1_x0_loop_6:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
A_PE_dummy_in_1_x0_loop_7:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    A_t8 fifo_data;
                                    fifo_data = fifo_A_in.read();
                                }
                            }
                        }
                }
        }
}
/* Module Definition */

/* Module Definition */
void A_PE_dummy_in_2_x0(int idx, int idy, hls::stream<A_t8> &fifo_A_in) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    /* Variable Declaration */

A_PE_dummy_in_2_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
A_PE_dummy_in_2_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
            // array
            {}
            if (p1 + 8 * c1 <= 41)
A_PE_dummy_in_2_x0_loop_3:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
A_PE_dummy_in_2_x0_loop_4:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
A_PE_dummy_in_2_x0_loop_5:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
A_PE_dummy_in_2_x0_loop_6:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
A_PE_dummy_in_2_x0_loop_7:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    A_t8 fifo_data;
                                    fifo_data = fifo_A_in.read();
                                }
                            }
                        }
                }
        }
}
/* Module Definition */

/* Module Definition */
void A_PE_dummy_in_3_x0(int idx, int idy, hls::stream<A_t8> &fifo_A_in) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    /* Variable Declaration */

A_PE_dummy_in_3_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
A_PE_dummy_in_3_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
            // array
            {}
            if (p1 + 8 * c1 <= 41)
A_PE_dummy_in_3_x0_loop_3:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
A_PE_dummy_in_3_x0_loop_4:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
A_PE_dummy_in_3_x0_loop_5:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
A_PE_dummy_in_3_x0_loop_6:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
A_PE_dummy_in_3_x0_loop_7:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    A_t8 fifo_data;
                                    fifo_data = fifo_A_in.read();
                                }
                            }
                        }
                }
        }
}
/* Module Definition */

/* Module Definition */
void B_PE_dummy_in_0_x0(int idx, int idy, hls::stream<float> &fifo_B_in) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    /* Variable Declaration */

B_PE_dummy_in_0_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
B_PE_dummy_in_0_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
            // array
            {}
            if (p1 + 8 * c1 <= 41)
B_PE_dummy_in_0_x0_loop_3:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
B_PE_dummy_in_0_x0_loop_4:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_PE_dummy_in_0_x0_loop_5:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
B_PE_dummy_in_0_x0_loop_6:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
B_PE_dummy_in_0_x0_loop_7:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    B_t1 fifo_data;
                                    fifo_data = fifo_B_in.read();
                                }
                            }
                        }
                }
        }
}
/* Module Definition */

/* Module Definition */
void B_PE_dummy_in_1_x0(int idx, int idy, hls::stream<float> &fifo_B_in) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    /* Variable Declaration */

B_PE_dummy_in_1_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
B_PE_dummy_in_1_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
            // array
            {}
            if (p1 + 8 * c1 <= 41)
B_PE_dummy_in_1_x0_loop_3:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
B_PE_dummy_in_1_x0_loop_4:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_PE_dummy_in_1_x0_loop_5:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
B_PE_dummy_in_1_x0_loop_6:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
B_PE_dummy_in_1_x0_loop_7:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    B_t1 fifo_data;
                                    fifo_data = fifo_B_in.read();
                                }
                            }
                        }
                }
        }
}
/* Module Definition */

/* Module Definition */
void B_PE_dummy_in_2_x0(int idx, int idy, hls::stream<float> &fifo_B_in) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    /* Variable Declaration */

B_PE_dummy_in_2_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
B_PE_dummy_in_2_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
            // array
            {}
            if (p1 + 8 * c1 <= 41)
B_PE_dummy_in_2_x0_loop_3:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
B_PE_dummy_in_2_x0_loop_4:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_PE_dummy_in_2_x0_loop_5:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
B_PE_dummy_in_2_x0_loop_6:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
B_PE_dummy_in_2_x0_loop_7:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    B_t1 fifo_data;
                                    fifo_data = fifo_B_in.read();
                                }
                            }
                        }
                }
        }
}
/* Module Definition */

/* Module Definition */
void B_PE_dummy_in_3_x0(int idx, int idy, hls::stream<float> &fifo_B_in) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    /* Variable Declaration */

B_PE_dummy_in_3_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
B_PE_dummy_in_3_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
            // array
            {}
            if (p1 + 8 * c1 <= 41)
B_PE_dummy_in_3_x0_loop_3:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
B_PE_dummy_in_3_x0_loop_4:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_PE_dummy_in_3_x0_loop_5:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
B_PE_dummy_in_3_x0_loop_6:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
B_PE_dummy_in_3_x0_loop_7:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    B_t1 fifo_data;
                                    fifo_data = fifo_B_in.read();
                                }
                            }
                        }
                }
        }
}
/* Module Definition */

/* Module Definition */
void B_PE_dummy_in_4_x0(int idx, int idy, hls::stream<float> &fifo_B_in) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    /* Variable Declaration */

B_PE_dummy_in_4_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
B_PE_dummy_in_4_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
            // array
            {}
            if (p1 + 8 * c1 <= 41)
B_PE_dummy_in_4_x0_loop_3:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
B_PE_dummy_in_4_x0_loop_4:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_PE_dummy_in_4_x0_loop_5:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
B_PE_dummy_in_4_x0_loop_6:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
B_PE_dummy_in_4_x0_loop_7:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    B_t1 fifo_data;
                                    fifo_data = fifo_B_in.read();
                                }
                            }
                        }
                }
        }
}
/* Module Definition */

/* Module Definition */
void B_PE_dummy_in_5_x0(int idx, int idy, hls::stream<float> &fifo_B_in) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    /* Variable Declaration */

B_PE_dummy_in_5_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
B_PE_dummy_in_5_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
            // array
            {}
            if (p1 + 8 * c1 <= 41)
B_PE_dummy_in_5_x0_loop_3:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
B_PE_dummy_in_5_x0_loop_4:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_PE_dummy_in_5_x0_loop_5:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
B_PE_dummy_in_5_x0_loop_6:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
B_PE_dummy_in_5_x0_loop_7:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    B_t1 fifo_data;
                                    fifo_data = fifo_B_in.read();
                                }
                            }
                        }
                }
        }
}
/* Module Definition */

/* Module Definition */
void B_PE_dummy_in_6_x0(int idx, int idy, hls::stream<float> &fifo_B_in) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    /* Variable Declaration */

B_PE_dummy_in_6_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
B_PE_dummy_in_6_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
            // array
            {}
            if (p1 + 8 * c1 <= 41)
B_PE_dummy_in_6_x0_loop_3:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
B_PE_dummy_in_6_x0_loop_4:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_PE_dummy_in_6_x0_loop_5:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
B_PE_dummy_in_6_x0_loop_6:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
B_PE_dummy_in_6_x0_loop_7:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    B_t1 fifo_data;
                                    fifo_data = fifo_B_in.read();
                                }
                            }
                        }
                }
        }
}
/* Module Definition */

/* Module Definition */
void B_PE_dummy_in_7_x0(int idx, int idy, hls::stream<float> &fifo_B_in) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    /* Variable Declaration */

B_PE_dummy_in_7_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
B_PE_dummy_in_7_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
            // array
            {}
            if (p1 + 8 * c1 <= 41)
B_PE_dummy_in_7_x0_loop_3:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
B_PE_dummy_in_7_x0_loop_4:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_PE_dummy_in_7_x0_loop_5:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
B_PE_dummy_in_7_x0_loop_6:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
B_PE_dummy_in_7_x0_loop_7:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    B_t1 fifo_data;
                                    fifo_data = fifo_B_in.read();
                                }
                            }
                        }
                }
        }
}
/* Module Definition */

/* Module Definition */
void C_PE_dummy_in_0_x0(int idx, int idy, hls::stream<C_t8> &fifo_C_in) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    /* Variable Declaration */

C_PE_dummy_in_0_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
C_PE_dummy_in_0_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
            // array
            {}
            if (p1 + 8 * c1 <= 41)
C_PE_dummy_in_0_x0_loop_3:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
C_PE_dummy_in_0_x0_loop_4:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_PE_dummy_in_0_x0_loop_5:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
C_PE_dummy_in_0_x0_loop_6:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
C_PE_dummy_in_0_x0_loop_7:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    C_t8 fifo_data;
                                    fifo_data = fifo_C_in.read();
                                }
                            }
                        }
                }
        }
}
/* Module Definition */

/* Module Definition */
void C_PE_dummy_in_1_x0(int idx, int idy, hls::stream<C_t8> &fifo_C_in) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    /* Variable Declaration */

C_PE_dummy_in_1_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
C_PE_dummy_in_1_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
            // array
            {}
            if (p1 + 8 * c1 <= 41)
C_PE_dummy_in_1_x0_loop_3:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
C_PE_dummy_in_1_x0_loop_4:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_PE_dummy_in_1_x0_loop_5:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
C_PE_dummy_in_1_x0_loop_6:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
C_PE_dummy_in_1_x0_loop_7:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    C_t8 fifo_data;
                                    fifo_data = fifo_C_in.read();
                                }
                            }
                        }
                }
        }
}
/* Module Definition */

/* Module Definition */
void C_PE_dummy_in_2_x0(int idx, int idy, hls::stream<C_t8> &fifo_C_in) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    /* Variable Declaration */

C_PE_dummy_in_2_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
C_PE_dummy_in_2_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
            // array
            {}
            if (p1 + 8 * c1 <= 41)
C_PE_dummy_in_2_x0_loop_3:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
C_PE_dummy_in_2_x0_loop_4:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_PE_dummy_in_2_x0_loop_5:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
C_PE_dummy_in_2_x0_loop_6:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
C_PE_dummy_in_2_x0_loop_7:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    C_t8 fifo_data;
                                    fifo_data = fifo_C_in.read();
                                }
                            }
                        }
                }
        }
}
/* Module Definition */

/* Module Definition */
void C_PE_dummy_in_3_x0(int idx, int idy, hls::stream<C_t8> &fifo_C_in) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    /* Variable Declaration */

C_PE_dummy_in_3_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
C_PE_dummy_in_3_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
            // array
            {}
            if (p1 + 8 * c1 <= 41)
C_PE_dummy_in_3_x0_loop_3:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
C_PE_dummy_in_3_x0_loop_4:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_PE_dummy_in_3_x0_loop_5:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
C_PE_dummy_in_3_x0_loop_6:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
C_PE_dummy_in_3_x0_loop_7:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    C_t8 fifo_data;
                                    fifo_data = fifo_C_in.read();
                                }
                            }
                        }
                }
        }
}
/* Module Definition */

/* Module Definition */
void C_PE_dummy_in_4_x0(int idx, int idy, hls::stream<C_t8> &fifo_C_in) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    /* Variable Declaration */

C_PE_dummy_in_4_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
C_PE_dummy_in_4_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
            // array
            {}
            if (p1 + 8 * c1 <= 41)
C_PE_dummy_in_4_x0_loop_3:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
C_PE_dummy_in_4_x0_loop_4:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_PE_dummy_in_4_x0_loop_5:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
C_PE_dummy_in_4_x0_loop_6:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
C_PE_dummy_in_4_x0_loop_7:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    C_t8 fifo_data;
                                    fifo_data = fifo_C_in.read();
                                }
                            }
                        }
                }
        }
}
/* Module Definition */

/* Module Definition */
void C_PE_dummy_in_5_x0(int idx, int idy, hls::stream<C_t8> &fifo_C_in) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    /* Variable Declaration */

C_PE_dummy_in_5_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
C_PE_dummy_in_5_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
            // array
            {}
            if (p1 + 8 * c1 <= 41)
C_PE_dummy_in_5_x0_loop_3:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
C_PE_dummy_in_5_x0_loop_4:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_PE_dummy_in_5_x0_loop_5:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
C_PE_dummy_in_5_x0_loop_6:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
C_PE_dummy_in_5_x0_loop_7:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    C_t8 fifo_data;
                                    fifo_data = fifo_C_in.read();
                                }
                            }
                        }
                }
        }
}
/* Module Definition */

/* Module Definition */
void C_PE_dummy_in_6_x0(int idx, int idy, hls::stream<C_t8> &fifo_C_in) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    /* Variable Declaration */

C_PE_dummy_in_6_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
C_PE_dummy_in_6_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
            // array
            {}
            if (p1 + 8 * c1 <= 41)
C_PE_dummy_in_6_x0_loop_3:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
C_PE_dummy_in_6_x0_loop_4:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_PE_dummy_in_6_x0_loop_5:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
C_PE_dummy_in_6_x0_loop_6:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
C_PE_dummy_in_6_x0_loop_7:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    C_t8 fifo_data;
                                    fifo_data = fifo_C_in.read();
                                }
                            }
                        }
                }
        }
}
/* Module Definition */

/* Module Definition */
void C_PE_dummy_in_7_x0(int idx, int idy, hls::stream<C_t8> &fifo_C_in) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    /* Variable Declaration */

C_PE_dummy_in_7_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
C_PE_dummy_in_7_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
            // array
            {}
            if (p1 + 8 * c1 <= 41)
C_PE_dummy_in_7_x0_loop_3:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
C_PE_dummy_in_7_x0_loop_4:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_PE_dummy_in_7_x0_loop_5:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
C_PE_dummy_in_7_x0_loop_6:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
C_PE_dummy_in_7_x0_loop_7:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    C_t8 fifo_data;
                                    fifo_data = fifo_C_in.read();
                                }
                            }
                        }
                }
        }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L1_out_wrapper_0_2_x0(int idx, int idy, hls::stream<D_t4> &fifo_D_drain_in, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<float> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    D_t4 local_D[16][2];
    /* Variable Declaration */

D_drain_IO_L1_out_wrapper_0_2_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L1_out_wrapper_0_2_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p0 + 8 * c1 <= 41) {
                // array
                // io_L3
                // io_L2
                ap_uint<32> data_split[4];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                /* Variable Declaration */
D_drain_IO_L1_out_wrapper_0_2_x0_loop_3:                 for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                    // latency
D_drain_IO_L1_out_wrapper_0_2_x0_loop_4:                     for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                        // simd
                        {
                            D_t1 in_data;
                            D_t4 out_data;
                            in_data = fifo_D_drain_local_in.read();
                            int split_idx = (c7) % 4;
                            out_data = local_D[c8][c7 / 4];
D_drain_IO_L1_out_wrapper_0_2_x0_loop_5:                             for (ap_uint<3> n = 0; n < 4; n++) {
                                data_split[n] = out_data(31, 0);
                                out_data = out_data >> 32;
                            }
                            union {
                                unsigned int ui;
                                float ut;
                            } u;
                            u.ut = in_data;
                            data_split[split_idx] = ap_uint<32>(u.ui);
                            out_data = (data_split[3], data_split[2], data_split[1], data_split[0]);
                            local_D[c8][c7 / 4] = out_data;
                        }
                    }
                }
D_drain_IO_L1_out_wrapper_0_2_x0_loop_6:                 for (ap_uint<3> c4 = p1; c4 <= 3; c4 += 1) {
                    // io_L1
                    if (c4 == p1) {
D_drain_IO_L1_out_wrapper_0_2_x0_loop_7:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_0_2_x0_loop_8:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = local_D[c5][c6];
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    } else {
D_drain_IO_L1_out_wrapper_0_2_x0_loop_9:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_0_2_x0_loop_10:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                }
            }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L1_out_wrapper_0_1_x0(int idx, int idy, hls::stream<D_t4> &fifo_D_drain_in, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<float> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    D_t4 local_D[16][2];
    /* Variable Declaration */

D_drain_IO_L1_out_wrapper_0_1_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L1_out_wrapper_0_1_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p0 + 8 * c1 <= 41) {
                // array
                // io_L3
                // io_L2
                ap_uint<32> data_split[4];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                /* Variable Declaration */
D_drain_IO_L1_out_wrapper_0_1_x0_loop_3:                 for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                    // latency
D_drain_IO_L1_out_wrapper_0_1_x0_loop_4:                     for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                        // simd
                        {
                            D_t1 in_data;
                            D_t4 out_data;
                            in_data = fifo_D_drain_local_in.read();
                            int split_idx = (c7) % 4;
                            out_data = local_D[c8][c7 / 4];
D_drain_IO_L1_out_wrapper_0_1_x0_loop_5:                             for (ap_uint<3> n = 0; n < 4; n++) {
                                data_split[n] = out_data(31, 0);
                                out_data = out_data >> 32;
                            }
                            union {
                                unsigned int ui;
                                float ut;
                            } u;
                            u.ut = in_data;
                            data_split[split_idx] = ap_uint<32>(u.ui);
                            out_data = (data_split[3], data_split[2], data_split[1], data_split[0]);
                            local_D[c8][c7 / 4] = out_data;
                        }
                    }
                }
D_drain_IO_L1_out_wrapper_0_1_x0_loop_6:                 for (ap_uint<3> c4 = p1; c4 <= 3; c4 += 1) {
                    // io_L1
                    if (c4 == p1) {
D_drain_IO_L1_out_wrapper_0_1_x0_loop_7:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_0_1_x0_loop_8:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = local_D[c5][c6];
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    } else {
D_drain_IO_L1_out_wrapper_0_1_x0_loop_9:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_0_1_x0_loop_10:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                }
            }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L1_out_wrapper_0_0_x0(int idx, int idy, hls::stream<D_t4> &fifo_D_drain_in, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<float> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    D_t4 local_D[16][2];
    /* Variable Declaration */

D_drain_IO_L1_out_wrapper_0_0_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L1_out_wrapper_0_0_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p0 + 8 * c1 <= 41) {
                // array
                // io_L3
                // io_L2
                ap_uint<32> data_split[4];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                /* Variable Declaration */
D_drain_IO_L1_out_wrapper_0_0_x0_loop_3:                 for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                    // latency
D_drain_IO_L1_out_wrapper_0_0_x0_loop_4:                     for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                        // simd
                        {
                            D_t1 in_data;
                            D_t4 out_data;
                            in_data = fifo_D_drain_local_in.read();
                            int split_idx = (c7) % 4;
                            out_data = local_D[c8][c7 / 4];
D_drain_IO_L1_out_wrapper_0_0_x0_loop_5:                             for (ap_uint<3> n = 0; n < 4; n++) {
                                data_split[n] = out_data(31, 0);
                                out_data = out_data >> 32;
                            }
                            union {
                                unsigned int ui;
                                float ut;
                            } u;
                            u.ut = in_data;
                            data_split[split_idx] = ap_uint<32>(u.ui);
                            out_data = (data_split[3], data_split[2], data_split[1], data_split[0]);
                            local_D[c8][c7 / 4] = out_data;
                        }
                    }
                }
D_drain_IO_L1_out_wrapper_0_0_x0_loop_6:                 for (ap_uint<3> c4 = p1; c4 <= 3; c4 += 1) {
                    // io_L1
                    if (c4 == p1) {
D_drain_IO_L1_out_wrapper_0_0_x0_loop_7:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_0_0_x0_loop_8:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = local_D[c5][c6];
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    } else {
D_drain_IO_L1_out_wrapper_0_0_x0_loop_9:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_0_0_x0_loop_10:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                }
            }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L1_out_wrapper_1_2_x0(int idx, int idy, hls::stream<D_t4> &fifo_D_drain_in, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<float> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    D_t4 local_D[16][2];
    /* Variable Declaration */

D_drain_IO_L1_out_wrapper_1_2_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L1_out_wrapper_1_2_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p0 + 8 * c1 <= 41) {
                // array
                // io_L3
                // io_L2
                ap_uint<32> data_split[4];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                /* Variable Declaration */
D_drain_IO_L1_out_wrapper_1_2_x0_loop_3:                 for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                    // latency
D_drain_IO_L1_out_wrapper_1_2_x0_loop_4:                     for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                        // simd
                        {
                            D_t1 in_data;
                            D_t4 out_data;
                            in_data = fifo_D_drain_local_in.read();
                            int split_idx = (c7) % 4;
                            out_data = local_D[c8][c7 / 4];
D_drain_IO_L1_out_wrapper_1_2_x0_loop_5:                             for (ap_uint<3> n = 0; n < 4; n++) {
                                data_split[n] = out_data(31, 0);
                                out_data = out_data >> 32;
                            }
                            union {
                                unsigned int ui;
                                float ut;
                            } u;
                            u.ut = in_data;
                            data_split[split_idx] = ap_uint<32>(u.ui);
                            out_data = (data_split[3], data_split[2], data_split[1], data_split[0]);
                            local_D[c8][c7 / 4] = out_data;
                        }
                    }
                }
D_drain_IO_L1_out_wrapper_1_2_x0_loop_6:                 for (ap_uint<3> c4 = p1; c4 <= 3; c4 += 1) {
                    // io_L1
                    if (c4 == p1) {
D_drain_IO_L1_out_wrapper_1_2_x0_loop_7:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_1_2_x0_loop_8:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = local_D[c5][c6];
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    } else {
D_drain_IO_L1_out_wrapper_1_2_x0_loop_9:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_1_2_x0_loop_10:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                }
            }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L1_out_wrapper_1_1_x0(int idx, int idy, hls::stream<D_t4> &fifo_D_drain_in, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<float> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    D_t4 local_D[16][2];
    /* Variable Declaration */

D_drain_IO_L1_out_wrapper_1_1_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L1_out_wrapper_1_1_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p0 + 8 * c1 <= 41) {
                // array
                // io_L3
                // io_L2
                ap_uint<32> data_split[4];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                /* Variable Declaration */
D_drain_IO_L1_out_wrapper_1_1_x0_loop_3:                 for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                    // latency
D_drain_IO_L1_out_wrapper_1_1_x0_loop_4:                     for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                        // simd
                        {
                            D_t1 in_data;
                            D_t4 out_data;
                            in_data = fifo_D_drain_local_in.read();
                            int split_idx = (c7) % 4;
                            out_data = local_D[c8][c7 / 4];
D_drain_IO_L1_out_wrapper_1_1_x0_loop_5:                             for (ap_uint<3> n = 0; n < 4; n++) {
                                data_split[n] = out_data(31, 0);
                                out_data = out_data >> 32;
                            }
                            union {
                                unsigned int ui;
                                float ut;
                            } u;
                            u.ut = in_data;
                            data_split[split_idx] = ap_uint<32>(u.ui);
                            out_data = (data_split[3], data_split[2], data_split[1], data_split[0]);
                            local_D[c8][c7 / 4] = out_data;
                        }
                    }
                }
D_drain_IO_L1_out_wrapper_1_1_x0_loop_6:                 for (ap_uint<3> c4 = p1; c4 <= 3; c4 += 1) {
                    // io_L1
                    if (c4 == p1) {
D_drain_IO_L1_out_wrapper_1_1_x0_loop_7:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_1_1_x0_loop_8:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = local_D[c5][c6];
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    } else {
D_drain_IO_L1_out_wrapper_1_1_x0_loop_9:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_1_1_x0_loop_10:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                }
            }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L1_out_wrapper_1_0_x0(int idx, int idy, hls::stream<D_t4> &fifo_D_drain_in, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<float> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    D_t4 local_D[16][2];
    /* Variable Declaration */

D_drain_IO_L1_out_wrapper_1_0_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L1_out_wrapper_1_0_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p0 + 8 * c1 <= 41) {
                // array
                // io_L3
                // io_L2
                ap_uint<32> data_split[4];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                /* Variable Declaration */
D_drain_IO_L1_out_wrapper_1_0_x0_loop_3:                 for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                    // latency
D_drain_IO_L1_out_wrapper_1_0_x0_loop_4:                     for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                        // simd
                        {
                            D_t1 in_data;
                            D_t4 out_data;
                            in_data = fifo_D_drain_local_in.read();
                            int split_idx = (c7) % 4;
                            out_data = local_D[c8][c7 / 4];
D_drain_IO_L1_out_wrapper_1_0_x0_loop_5:                             for (ap_uint<3> n = 0; n < 4; n++) {
                                data_split[n] = out_data(31, 0);
                                out_data = out_data >> 32;
                            }
                            union {
                                unsigned int ui;
                                float ut;
                            } u;
                            u.ut = in_data;
                            data_split[split_idx] = ap_uint<32>(u.ui);
                            out_data = (data_split[3], data_split[2], data_split[1], data_split[0]);
                            local_D[c8][c7 / 4] = out_data;
                        }
                    }
                }
D_drain_IO_L1_out_wrapper_1_0_x0_loop_6:                 for (ap_uint<3> c4 = p1; c4 <= 3; c4 += 1) {
                    // io_L1
                    if (c4 == p1) {
D_drain_IO_L1_out_wrapper_1_0_x0_loop_7:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_1_0_x0_loop_8:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = local_D[c5][c6];
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    } else {
D_drain_IO_L1_out_wrapper_1_0_x0_loop_9:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_1_0_x0_loop_10:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                }
            }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L1_out_wrapper_2_2_x0(int idx, int idy, hls::stream<D_t4> &fifo_D_drain_in, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<float> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    D_t4 local_D[16][2];
    /* Variable Declaration */

D_drain_IO_L1_out_wrapper_2_2_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L1_out_wrapper_2_2_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p0 + 8 * c1 <= 41) {
                // array
                // io_L3
                // io_L2
                ap_uint<32> data_split[4];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                /* Variable Declaration */
D_drain_IO_L1_out_wrapper_2_2_x0_loop_3:                 for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                    // latency
D_drain_IO_L1_out_wrapper_2_2_x0_loop_4:                     for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                        // simd
                        {
                            D_t1 in_data;
                            D_t4 out_data;
                            in_data = fifo_D_drain_local_in.read();
                            int split_idx = (c7) % 4;
                            out_data = local_D[c8][c7 / 4];
D_drain_IO_L1_out_wrapper_2_2_x0_loop_5:                             for (ap_uint<3> n = 0; n < 4; n++) {
                                data_split[n] = out_data(31, 0);
                                out_data = out_data >> 32;
                            }
                            union {
                                unsigned int ui;
                                float ut;
                            } u;
                            u.ut = in_data;
                            data_split[split_idx] = ap_uint<32>(u.ui);
                            out_data = (data_split[3], data_split[2], data_split[1], data_split[0]);
                            local_D[c8][c7 / 4] = out_data;
                        }
                    }
                }
D_drain_IO_L1_out_wrapper_2_2_x0_loop_6:                 for (ap_uint<3> c4 = p1; c4 <= 3; c4 += 1) {
                    // io_L1
                    if (c4 == p1) {
D_drain_IO_L1_out_wrapper_2_2_x0_loop_7:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_2_2_x0_loop_8:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = local_D[c5][c6];
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    } else {
D_drain_IO_L1_out_wrapper_2_2_x0_loop_9:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_2_2_x0_loop_10:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                }
            }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L1_out_wrapper_2_1_x0(int idx, int idy, hls::stream<D_t4> &fifo_D_drain_in, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<float> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    D_t4 local_D[16][2];
    /* Variable Declaration */

D_drain_IO_L1_out_wrapper_2_1_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L1_out_wrapper_2_1_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p0 + 8 * c1 <= 41) {
                // array
                // io_L3
                // io_L2
                ap_uint<32> data_split[4];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                /* Variable Declaration */
D_drain_IO_L1_out_wrapper_2_1_x0_loop_3:                 for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                    // latency
D_drain_IO_L1_out_wrapper_2_1_x0_loop_4:                     for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                        // simd
                        {
                            D_t1 in_data;
                            D_t4 out_data;
                            in_data = fifo_D_drain_local_in.read();
                            int split_idx = (c7) % 4;
                            out_data = local_D[c8][c7 / 4];
D_drain_IO_L1_out_wrapper_2_1_x0_loop_5:                             for (ap_uint<3> n = 0; n < 4; n++) {
                                data_split[n] = out_data(31, 0);
                                out_data = out_data >> 32;
                            }
                            union {
                                unsigned int ui;
                                float ut;
                            } u;
                            u.ut = in_data;
                            data_split[split_idx] = ap_uint<32>(u.ui);
                            out_data = (data_split[3], data_split[2], data_split[1], data_split[0]);
                            local_D[c8][c7 / 4] = out_data;
                        }
                    }
                }
D_drain_IO_L1_out_wrapper_2_1_x0_loop_6:                 for (ap_uint<3> c4 = p1; c4 <= 3; c4 += 1) {
                    // io_L1
                    if (c4 == p1) {
D_drain_IO_L1_out_wrapper_2_1_x0_loop_7:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_2_1_x0_loop_8:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = local_D[c5][c6];
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    } else {
D_drain_IO_L1_out_wrapper_2_1_x0_loop_9:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_2_1_x0_loop_10:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                }
            }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L1_out_wrapper_2_0_x0(int idx, int idy, hls::stream<D_t4> &fifo_D_drain_in, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<float> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    D_t4 local_D[16][2];
    /* Variable Declaration */

D_drain_IO_L1_out_wrapper_2_0_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L1_out_wrapper_2_0_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p0 + 8 * c1 <= 41) {
                // array
                // io_L3
                // io_L2
                ap_uint<32> data_split[4];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                /* Variable Declaration */
D_drain_IO_L1_out_wrapper_2_0_x0_loop_3:                 for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                    // latency
D_drain_IO_L1_out_wrapper_2_0_x0_loop_4:                     for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                        // simd
                        {
                            D_t1 in_data;
                            D_t4 out_data;
                            in_data = fifo_D_drain_local_in.read();
                            int split_idx = (c7) % 4;
                            out_data = local_D[c8][c7 / 4];
D_drain_IO_L1_out_wrapper_2_0_x0_loop_5:                             for (ap_uint<3> n = 0; n < 4; n++) {
                                data_split[n] = out_data(31, 0);
                                out_data = out_data >> 32;
                            }
                            union {
                                unsigned int ui;
                                float ut;
                            } u;
                            u.ut = in_data;
                            data_split[split_idx] = ap_uint<32>(u.ui);
                            out_data = (data_split[3], data_split[2], data_split[1], data_split[0]);
                            local_D[c8][c7 / 4] = out_data;
                        }
                    }
                }
D_drain_IO_L1_out_wrapper_2_0_x0_loop_6:                 for (ap_uint<3> c4 = p1; c4 <= 3; c4 += 1) {
                    // io_L1
                    if (c4 == p1) {
D_drain_IO_L1_out_wrapper_2_0_x0_loop_7:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_2_0_x0_loop_8:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = local_D[c5][c6];
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    } else {
D_drain_IO_L1_out_wrapper_2_0_x0_loop_9:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_2_0_x0_loop_10:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                }
            }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L1_out_wrapper_3_2_x0(int idx, int idy, hls::stream<D_t4> &fifo_D_drain_in, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<float> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    D_t4 local_D[16][2];
    /* Variable Declaration */

D_drain_IO_L1_out_wrapper_3_2_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L1_out_wrapper_3_2_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p0 + 8 * c1 <= 41) {
                // array
                // io_L3
                // io_L2
                ap_uint<32> data_split[4];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                /* Variable Declaration */
D_drain_IO_L1_out_wrapper_3_2_x0_loop_3:                 for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                    // latency
D_drain_IO_L1_out_wrapper_3_2_x0_loop_4:                     for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                        // simd
                        {
                            D_t1 in_data;
                            D_t4 out_data;
                            in_data = fifo_D_drain_local_in.read();
                            int split_idx = (c7) % 4;
                            out_data = local_D[c8][c7 / 4];
D_drain_IO_L1_out_wrapper_3_2_x0_loop_5:                             for (ap_uint<3> n = 0; n < 4; n++) {
                                data_split[n] = out_data(31, 0);
                                out_data = out_data >> 32;
                            }
                            union {
                                unsigned int ui;
                                float ut;
                            } u;
                            u.ut = in_data;
                            data_split[split_idx] = ap_uint<32>(u.ui);
                            out_data = (data_split[3], data_split[2], data_split[1], data_split[0]);
                            local_D[c8][c7 / 4] = out_data;
                        }
                    }
                }
D_drain_IO_L1_out_wrapper_3_2_x0_loop_6:                 for (ap_uint<3> c4 = p1; c4 <= 3; c4 += 1) {
                    // io_L1
                    if (c4 == p1) {
D_drain_IO_L1_out_wrapper_3_2_x0_loop_7:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_3_2_x0_loop_8:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = local_D[c5][c6];
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    } else {
D_drain_IO_L1_out_wrapper_3_2_x0_loop_9:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_3_2_x0_loop_10:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                }
            }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L1_out_wrapper_3_1_x0(int idx, int idy, hls::stream<D_t4> &fifo_D_drain_in, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<float> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    D_t4 local_D[16][2];
    /* Variable Declaration */

D_drain_IO_L1_out_wrapper_3_1_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L1_out_wrapper_3_1_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p0 + 8 * c1 <= 41) {
                // array
                // io_L3
                // io_L2
                ap_uint<32> data_split[4];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                /* Variable Declaration */
D_drain_IO_L1_out_wrapper_3_1_x0_loop_3:                 for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                    // latency
D_drain_IO_L1_out_wrapper_3_1_x0_loop_4:                     for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                        // simd
                        {
                            D_t1 in_data;
                            D_t4 out_data;
                            in_data = fifo_D_drain_local_in.read();
                            int split_idx = (c7) % 4;
                            out_data = local_D[c8][c7 / 4];
D_drain_IO_L1_out_wrapper_3_1_x0_loop_5:                             for (ap_uint<3> n = 0; n < 4; n++) {
                                data_split[n] = out_data(31, 0);
                                out_data = out_data >> 32;
                            }
                            union {
                                unsigned int ui;
                                float ut;
                            } u;
                            u.ut = in_data;
                            data_split[split_idx] = ap_uint<32>(u.ui);
                            out_data = (data_split[3], data_split[2], data_split[1], data_split[0]);
                            local_D[c8][c7 / 4] = out_data;
                        }
                    }
                }
D_drain_IO_L1_out_wrapper_3_1_x0_loop_6:                 for (ap_uint<3> c4 = p1; c4 <= 3; c4 += 1) {
                    // io_L1
                    if (c4 == p1) {
D_drain_IO_L1_out_wrapper_3_1_x0_loop_7:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_3_1_x0_loop_8:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = local_D[c5][c6];
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    } else {
D_drain_IO_L1_out_wrapper_3_1_x0_loop_9:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_3_1_x0_loop_10:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                }
            }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L1_out_wrapper_3_0_x0(int idx, int idy, hls::stream<D_t4> &fifo_D_drain_in, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<float> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    D_t4 local_D[16][2];
    /* Variable Declaration */

D_drain_IO_L1_out_wrapper_3_0_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L1_out_wrapper_3_0_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p0 + 8 * c1 <= 41) {
                // array
                // io_L3
                // io_L2
                ap_uint<32> data_split[4];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                /* Variable Declaration */
D_drain_IO_L1_out_wrapper_3_0_x0_loop_3:                 for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                    // latency
D_drain_IO_L1_out_wrapper_3_0_x0_loop_4:                     for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                        // simd
                        {
                            D_t1 in_data;
                            D_t4 out_data;
                            in_data = fifo_D_drain_local_in.read();
                            int split_idx = (c7) % 4;
                            out_data = local_D[c8][c7 / 4];
D_drain_IO_L1_out_wrapper_3_0_x0_loop_5:                             for (ap_uint<3> n = 0; n < 4; n++) {
                                data_split[n] = out_data(31, 0);
                                out_data = out_data >> 32;
                            }
                            union {
                                unsigned int ui;
                                float ut;
                            } u;
                            u.ut = in_data;
                            data_split[split_idx] = ap_uint<32>(u.ui);
                            out_data = (data_split[3], data_split[2], data_split[1], data_split[0]);
                            local_D[c8][c7 / 4] = out_data;
                        }
                    }
                }
D_drain_IO_L1_out_wrapper_3_0_x0_loop_6:                 for (ap_uint<3> c4 = p1; c4 <= 3; c4 += 1) {
                    // io_L1
                    if (c4 == p1) {
D_drain_IO_L1_out_wrapper_3_0_x0_loop_7:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_3_0_x0_loop_8:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = local_D[c5][c6];
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    } else {
D_drain_IO_L1_out_wrapper_3_0_x0_loop_9:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_3_0_x0_loop_10:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                }
            }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L1_out_wrapper_4_2_x0(int idx, int idy, hls::stream<D_t4> &fifo_D_drain_in, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<float> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    D_t4 local_D[16][2];
    /* Variable Declaration */

D_drain_IO_L1_out_wrapper_4_2_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L1_out_wrapper_4_2_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p0 + 8 * c1 <= 41) {
                // array
                // io_L3
                // io_L2
                ap_uint<32> data_split[4];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                /* Variable Declaration */
D_drain_IO_L1_out_wrapper_4_2_x0_loop_3:                 for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                    // latency
D_drain_IO_L1_out_wrapper_4_2_x0_loop_4:                     for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                        // simd
                        {
                            D_t1 in_data;
                            D_t4 out_data;
                            in_data = fifo_D_drain_local_in.read();
                            int split_idx = (c7) % 4;
                            out_data = local_D[c8][c7 / 4];
D_drain_IO_L1_out_wrapper_4_2_x0_loop_5:                             for (ap_uint<3> n = 0; n < 4; n++) {
                                data_split[n] = out_data(31, 0);
                                out_data = out_data >> 32;
                            }
                            union {
                                unsigned int ui;
                                float ut;
                            } u;
                            u.ut = in_data;
                            data_split[split_idx] = ap_uint<32>(u.ui);
                            out_data = (data_split[3], data_split[2], data_split[1], data_split[0]);
                            local_D[c8][c7 / 4] = out_data;
                        }
                    }
                }
D_drain_IO_L1_out_wrapper_4_2_x0_loop_6:                 for (ap_uint<3> c4 = p1; c4 <= 3; c4 += 1) {
                    // io_L1
                    if (c4 == p1) {
D_drain_IO_L1_out_wrapper_4_2_x0_loop_7:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_4_2_x0_loop_8:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = local_D[c5][c6];
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    } else {
D_drain_IO_L1_out_wrapper_4_2_x0_loop_9:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_4_2_x0_loop_10:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                }
            }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L1_out_wrapper_4_1_x0(int idx, int idy, hls::stream<D_t4> &fifo_D_drain_in, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<float> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    D_t4 local_D[16][2];
    /* Variable Declaration */

D_drain_IO_L1_out_wrapper_4_1_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L1_out_wrapper_4_1_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p0 + 8 * c1 <= 41) {
                // array
                // io_L3
                // io_L2
                ap_uint<32> data_split[4];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                /* Variable Declaration */
D_drain_IO_L1_out_wrapper_4_1_x0_loop_3:                 for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                    // latency
D_drain_IO_L1_out_wrapper_4_1_x0_loop_4:                     for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                        // simd
                        {
                            D_t1 in_data;
                            D_t4 out_data;
                            in_data = fifo_D_drain_local_in.read();
                            int split_idx = (c7) % 4;
                            out_data = local_D[c8][c7 / 4];
D_drain_IO_L1_out_wrapper_4_1_x0_loop_5:                             for (ap_uint<3> n = 0; n < 4; n++) {
                                data_split[n] = out_data(31, 0);
                                out_data = out_data >> 32;
                            }
                            union {
                                unsigned int ui;
                                float ut;
                            } u;
                            u.ut = in_data;
                            data_split[split_idx] = ap_uint<32>(u.ui);
                            out_data = (data_split[3], data_split[2], data_split[1], data_split[0]);
                            local_D[c8][c7 / 4] = out_data;
                        }
                    }
                }
D_drain_IO_L1_out_wrapper_4_1_x0_loop_6:                 for (ap_uint<3> c4 = p1; c4 <= 3; c4 += 1) {
                    // io_L1
                    if (c4 == p1) {
D_drain_IO_L1_out_wrapper_4_1_x0_loop_7:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_4_1_x0_loop_8:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = local_D[c5][c6];
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    } else {
D_drain_IO_L1_out_wrapper_4_1_x0_loop_9:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_4_1_x0_loop_10:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                }
            }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L1_out_wrapper_4_0_x0(int idx, int idy, hls::stream<D_t4> &fifo_D_drain_in, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<float> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    D_t4 local_D[16][2];
    /* Variable Declaration */

D_drain_IO_L1_out_wrapper_4_0_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L1_out_wrapper_4_0_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p0 + 8 * c1 <= 41) {
                // array
                // io_L3
                // io_L2
                ap_uint<32> data_split[4];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                /* Variable Declaration */
D_drain_IO_L1_out_wrapper_4_0_x0_loop_3:                 for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                    // latency
D_drain_IO_L1_out_wrapper_4_0_x0_loop_4:                     for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                        // simd
                        {
                            D_t1 in_data;
                            D_t4 out_data;
                            in_data = fifo_D_drain_local_in.read();
                            int split_idx = (c7) % 4;
                            out_data = local_D[c8][c7 / 4];
D_drain_IO_L1_out_wrapper_4_0_x0_loop_5:                             for (ap_uint<3> n = 0; n < 4; n++) {
                                data_split[n] = out_data(31, 0);
                                out_data = out_data >> 32;
                            }
                            union {
                                unsigned int ui;
                                float ut;
                            } u;
                            u.ut = in_data;
                            data_split[split_idx] = ap_uint<32>(u.ui);
                            out_data = (data_split[3], data_split[2], data_split[1], data_split[0]);
                            local_D[c8][c7 / 4] = out_data;
                        }
                    }
                }
D_drain_IO_L1_out_wrapper_4_0_x0_loop_6:                 for (ap_uint<3> c4 = p1; c4 <= 3; c4 += 1) {
                    // io_L1
                    if (c4 == p1) {
D_drain_IO_L1_out_wrapper_4_0_x0_loop_7:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_4_0_x0_loop_8:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = local_D[c5][c6];
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    } else {
D_drain_IO_L1_out_wrapper_4_0_x0_loop_9:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_4_0_x0_loop_10:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                }
            }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L1_out_wrapper_5_2_x0(int idx, int idy, hls::stream<D_t4> &fifo_D_drain_in, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<float> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    D_t4 local_D[16][2];
    /* Variable Declaration */

D_drain_IO_L1_out_wrapper_5_2_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L1_out_wrapper_5_2_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p0 + 8 * c1 <= 41) {
                // array
                // io_L3
                // io_L2
                ap_uint<32> data_split[4];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                /* Variable Declaration */
D_drain_IO_L1_out_wrapper_5_2_x0_loop_3:                 for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                    // latency
D_drain_IO_L1_out_wrapper_5_2_x0_loop_4:                     for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                        // simd
                        {
                            D_t1 in_data;
                            D_t4 out_data;
                            in_data = fifo_D_drain_local_in.read();
                            int split_idx = (c7) % 4;
                            out_data = local_D[c8][c7 / 4];
D_drain_IO_L1_out_wrapper_5_2_x0_loop_5:                             for (ap_uint<3> n = 0; n < 4; n++) {
                                data_split[n] = out_data(31, 0);
                                out_data = out_data >> 32;
                            }
                            union {
                                unsigned int ui;
                                float ut;
                            } u;
                            u.ut = in_data;
                            data_split[split_idx] = ap_uint<32>(u.ui);
                            out_data = (data_split[3], data_split[2], data_split[1], data_split[0]);
                            local_D[c8][c7 / 4] = out_data;
                        }
                    }
                }
D_drain_IO_L1_out_wrapper_5_2_x0_loop_6:                 for (ap_uint<3> c4 = p1; c4 <= 3; c4 += 1) {
                    // io_L1
                    if (c4 == p1) {
D_drain_IO_L1_out_wrapper_5_2_x0_loop_7:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_5_2_x0_loop_8:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = local_D[c5][c6];
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    } else {
D_drain_IO_L1_out_wrapper_5_2_x0_loop_9:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_5_2_x0_loop_10:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                }
            }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L1_out_wrapper_5_1_x0(int idx, int idy, hls::stream<D_t4> &fifo_D_drain_in, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<float> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    D_t4 local_D[16][2];
    /* Variable Declaration */

D_drain_IO_L1_out_wrapper_5_1_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L1_out_wrapper_5_1_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p0 + 8 * c1 <= 41) {
                // array
                // io_L3
                // io_L2
                ap_uint<32> data_split[4];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                /* Variable Declaration */
D_drain_IO_L1_out_wrapper_5_1_x0_loop_3:                 for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                    // latency
D_drain_IO_L1_out_wrapper_5_1_x0_loop_4:                     for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                        // simd
                        {
                            D_t1 in_data;
                            D_t4 out_data;
                            in_data = fifo_D_drain_local_in.read();
                            int split_idx = (c7) % 4;
                            out_data = local_D[c8][c7 / 4];
D_drain_IO_L1_out_wrapper_5_1_x0_loop_5:                             for (ap_uint<3> n = 0; n < 4; n++) {
                                data_split[n] = out_data(31, 0);
                                out_data = out_data >> 32;
                            }
                            union {
                                unsigned int ui;
                                float ut;
                            } u;
                            u.ut = in_data;
                            data_split[split_idx] = ap_uint<32>(u.ui);
                            out_data = (data_split[3], data_split[2], data_split[1], data_split[0]);
                            local_D[c8][c7 / 4] = out_data;
                        }
                    }
                }
D_drain_IO_L1_out_wrapper_5_1_x0_loop_6:                 for (ap_uint<3> c4 = p1; c4 <= 3; c4 += 1) {
                    // io_L1
                    if (c4 == p1) {
D_drain_IO_L1_out_wrapper_5_1_x0_loop_7:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_5_1_x0_loop_8:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = local_D[c5][c6];
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    } else {
D_drain_IO_L1_out_wrapper_5_1_x0_loop_9:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_5_1_x0_loop_10:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                }
            }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L1_out_wrapper_5_0_x0(int idx, int idy, hls::stream<D_t4> &fifo_D_drain_in, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<float> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    D_t4 local_D[16][2];
    /* Variable Declaration */

D_drain_IO_L1_out_wrapper_5_0_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L1_out_wrapper_5_0_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p0 + 8 * c1 <= 41) {
                // array
                // io_L3
                // io_L2
                ap_uint<32> data_split[4];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                /* Variable Declaration */
D_drain_IO_L1_out_wrapper_5_0_x0_loop_3:                 for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                    // latency
D_drain_IO_L1_out_wrapper_5_0_x0_loop_4:                     for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                        // simd
                        {
                            D_t1 in_data;
                            D_t4 out_data;
                            in_data = fifo_D_drain_local_in.read();
                            int split_idx = (c7) % 4;
                            out_data = local_D[c8][c7 / 4];
D_drain_IO_L1_out_wrapper_5_0_x0_loop_5:                             for (ap_uint<3> n = 0; n < 4; n++) {
                                data_split[n] = out_data(31, 0);
                                out_data = out_data >> 32;
                            }
                            union {
                                unsigned int ui;
                                float ut;
                            } u;
                            u.ut = in_data;
                            data_split[split_idx] = ap_uint<32>(u.ui);
                            out_data = (data_split[3], data_split[2], data_split[1], data_split[0]);
                            local_D[c8][c7 / 4] = out_data;
                        }
                    }
                }
D_drain_IO_L1_out_wrapper_5_0_x0_loop_6:                 for (ap_uint<3> c4 = p1; c4 <= 3; c4 += 1) {
                    // io_L1
                    if (c4 == p1) {
D_drain_IO_L1_out_wrapper_5_0_x0_loop_7:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_5_0_x0_loop_8:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = local_D[c5][c6];
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    } else {
D_drain_IO_L1_out_wrapper_5_0_x0_loop_9:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_5_0_x0_loop_10:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                }
            }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L1_out_wrapper_6_2_x0(int idx, int idy, hls::stream<D_t4> &fifo_D_drain_in, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<float> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    D_t4 local_D[16][2];
    /* Variable Declaration */

D_drain_IO_L1_out_wrapper_6_2_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L1_out_wrapper_6_2_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p0 + 8 * c1 <= 41) {
                // array
                // io_L3
                // io_L2
                ap_uint<32> data_split[4];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                /* Variable Declaration */
D_drain_IO_L1_out_wrapper_6_2_x0_loop_3:                 for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                    // latency
D_drain_IO_L1_out_wrapper_6_2_x0_loop_4:                     for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                        // simd
                        {
                            D_t1 in_data;
                            D_t4 out_data;
                            in_data = fifo_D_drain_local_in.read();
                            int split_idx = (c7) % 4;
                            out_data = local_D[c8][c7 / 4];
D_drain_IO_L1_out_wrapper_6_2_x0_loop_5:                             for (ap_uint<3> n = 0; n < 4; n++) {
                                data_split[n] = out_data(31, 0);
                                out_data = out_data >> 32;
                            }
                            union {
                                unsigned int ui;
                                float ut;
                            } u;
                            u.ut = in_data;
                            data_split[split_idx] = ap_uint<32>(u.ui);
                            out_data = (data_split[3], data_split[2], data_split[1], data_split[0]);
                            local_D[c8][c7 / 4] = out_data;
                        }
                    }
                }
D_drain_IO_L1_out_wrapper_6_2_x0_loop_6:                 for (ap_uint<3> c4 = p1; c4 <= 3; c4 += 1) {
                    // io_L1
                    if (c4 == p1) {
D_drain_IO_L1_out_wrapper_6_2_x0_loop_7:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_6_2_x0_loop_8:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = local_D[c5][c6];
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    } else {
D_drain_IO_L1_out_wrapper_6_2_x0_loop_9:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_6_2_x0_loop_10:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                }
            }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L1_out_wrapper_6_1_x0(int idx, int idy, hls::stream<D_t4> &fifo_D_drain_in, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<float> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    D_t4 local_D[16][2];
    /* Variable Declaration */

D_drain_IO_L1_out_wrapper_6_1_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L1_out_wrapper_6_1_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p0 + 8 * c1 <= 41) {
                // array
                // io_L3
                // io_L2
                ap_uint<32> data_split[4];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                /* Variable Declaration */
D_drain_IO_L1_out_wrapper_6_1_x0_loop_3:                 for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                    // latency
D_drain_IO_L1_out_wrapper_6_1_x0_loop_4:                     for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                        // simd
                        {
                            D_t1 in_data;
                            D_t4 out_data;
                            in_data = fifo_D_drain_local_in.read();
                            int split_idx = (c7) % 4;
                            out_data = local_D[c8][c7 / 4];
D_drain_IO_L1_out_wrapper_6_1_x0_loop_5:                             for (ap_uint<3> n = 0; n < 4; n++) {
                                data_split[n] = out_data(31, 0);
                                out_data = out_data >> 32;
                            }
                            union {
                                unsigned int ui;
                                float ut;
                            } u;
                            u.ut = in_data;
                            data_split[split_idx] = ap_uint<32>(u.ui);
                            out_data = (data_split[3], data_split[2], data_split[1], data_split[0]);
                            local_D[c8][c7 / 4] = out_data;
                        }
                    }
                }
D_drain_IO_L1_out_wrapper_6_1_x0_loop_6:                 for (ap_uint<3> c4 = p1; c4 <= 3; c4 += 1) {
                    // io_L1
                    if (c4 == p1) {
D_drain_IO_L1_out_wrapper_6_1_x0_loop_7:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_6_1_x0_loop_8:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = local_D[c5][c6];
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    } else {
D_drain_IO_L1_out_wrapper_6_1_x0_loop_9:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_6_1_x0_loop_10:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                }
            }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L1_out_wrapper_6_0_x0(int idx, int idy, hls::stream<D_t4> &fifo_D_drain_in, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<float> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    D_t4 local_D[16][2];
    /* Variable Declaration */

D_drain_IO_L1_out_wrapper_6_0_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L1_out_wrapper_6_0_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p0 + 8 * c1 <= 41) {
                // array
                // io_L3
                // io_L2
                ap_uint<32> data_split[4];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                /* Variable Declaration */
D_drain_IO_L1_out_wrapper_6_0_x0_loop_3:                 for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                    // latency
D_drain_IO_L1_out_wrapper_6_0_x0_loop_4:                     for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                        // simd
                        {
                            D_t1 in_data;
                            D_t4 out_data;
                            in_data = fifo_D_drain_local_in.read();
                            int split_idx = (c7) % 4;
                            out_data = local_D[c8][c7 / 4];
D_drain_IO_L1_out_wrapper_6_0_x0_loop_5:                             for (ap_uint<3> n = 0; n < 4; n++) {
                                data_split[n] = out_data(31, 0);
                                out_data = out_data >> 32;
                            }
                            union {
                                unsigned int ui;
                                float ut;
                            } u;
                            u.ut = in_data;
                            data_split[split_idx] = ap_uint<32>(u.ui);
                            out_data = (data_split[3], data_split[2], data_split[1], data_split[0]);
                            local_D[c8][c7 / 4] = out_data;
                        }
                    }
                }
D_drain_IO_L1_out_wrapper_6_0_x0_loop_6:                 for (ap_uint<3> c4 = p1; c4 <= 3; c4 += 1) {
                    // io_L1
                    if (c4 == p1) {
D_drain_IO_L1_out_wrapper_6_0_x0_loop_7:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_6_0_x0_loop_8:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = local_D[c5][c6];
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    } else {
D_drain_IO_L1_out_wrapper_6_0_x0_loop_9:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_6_0_x0_loop_10:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                }
            }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L1_out_wrapper_7_2_x0(int idx, int idy, hls::stream<D_t4> &fifo_D_drain_in, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<float> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    D_t4 local_D[16][2];
    /* Variable Declaration */

D_drain_IO_L1_out_wrapper_7_2_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L1_out_wrapper_7_2_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p0 + 8 * c1 <= 41) {
                // array
                // io_L3
                // io_L2
                ap_uint<32> data_split[4];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                /* Variable Declaration */
D_drain_IO_L1_out_wrapper_7_2_x0_loop_3:                 for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                    // latency
D_drain_IO_L1_out_wrapper_7_2_x0_loop_4:                     for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                        // simd
                        {
                            D_t1 in_data;
                            D_t4 out_data;
                            in_data = fifo_D_drain_local_in.read();
                            int split_idx = (c7) % 4;
                            out_data = local_D[c8][c7 / 4];
D_drain_IO_L1_out_wrapper_7_2_x0_loop_5:                             for (ap_uint<3> n = 0; n < 4; n++) {
                                data_split[n] = out_data(31, 0);
                                out_data = out_data >> 32;
                            }
                            union {
                                unsigned int ui;
                                float ut;
                            } u;
                            u.ut = in_data;
                            data_split[split_idx] = ap_uint<32>(u.ui);
                            out_data = (data_split[3], data_split[2], data_split[1], data_split[0]);
                            local_D[c8][c7 / 4] = out_data;
                        }
                    }
                }
D_drain_IO_L1_out_wrapper_7_2_x0_loop_6:                 for (ap_uint<3> c4 = p1; c4 <= 3; c4 += 1) {
                    // io_L1
                    if (c4 == p1) {
D_drain_IO_L1_out_wrapper_7_2_x0_loop_7:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_7_2_x0_loop_8:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = local_D[c5][c6];
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    } else {
D_drain_IO_L1_out_wrapper_7_2_x0_loop_9:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_7_2_x0_loop_10:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                }
            }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L1_out_wrapper_7_1_x0(int idx, int idy, hls::stream<D_t4> &fifo_D_drain_in, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<float> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    D_t4 local_D[16][2];
    /* Variable Declaration */

D_drain_IO_L1_out_wrapper_7_1_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L1_out_wrapper_7_1_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p0 + 8 * c1 <= 41) {
                // array
                // io_L3
                // io_L2
                ap_uint<32> data_split[4];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                /* Variable Declaration */
D_drain_IO_L1_out_wrapper_7_1_x0_loop_3:                 for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                    // latency
D_drain_IO_L1_out_wrapper_7_1_x0_loop_4:                     for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                        // simd
                        {
                            D_t1 in_data;
                            D_t4 out_data;
                            in_data = fifo_D_drain_local_in.read();
                            int split_idx = (c7) % 4;
                            out_data = local_D[c8][c7 / 4];
D_drain_IO_L1_out_wrapper_7_1_x0_loop_5:                             for (ap_uint<3> n = 0; n < 4; n++) {
                                data_split[n] = out_data(31, 0);
                                out_data = out_data >> 32;
                            }
                            union {
                                unsigned int ui;
                                float ut;
                            } u;
                            u.ut = in_data;
                            data_split[split_idx] = ap_uint<32>(u.ui);
                            out_data = (data_split[3], data_split[2], data_split[1], data_split[0]);
                            local_D[c8][c7 / 4] = out_data;
                        }
                    }
                }
D_drain_IO_L1_out_wrapper_7_1_x0_loop_6:                 for (ap_uint<3> c4 = p1; c4 <= 3; c4 += 1) {
                    // io_L1
                    if (c4 == p1) {
D_drain_IO_L1_out_wrapper_7_1_x0_loop_7:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_7_1_x0_loop_8:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = local_D[c5][c6];
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    } else {
D_drain_IO_L1_out_wrapper_7_1_x0_loop_9:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_7_1_x0_loop_10:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                }
            }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L1_out_wrapper_7_0_x0(int idx, int idy, hls::stream<D_t4> &fifo_D_drain_in, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<float> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    D_t4 local_D[16][2];
    /* Variable Declaration */

D_drain_IO_L1_out_wrapper_7_0_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L1_out_wrapper_7_0_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p0 + 8 * c1 <= 41) {
                // array
                // io_L3
                // io_L2
                ap_uint<32> data_split[4];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                /* Variable Declaration */
D_drain_IO_L1_out_wrapper_7_0_x0_loop_3:                 for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                    // latency
D_drain_IO_L1_out_wrapper_7_0_x0_loop_4:                     for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                        // simd
                        {
                            D_t1 in_data;
                            D_t4 out_data;
                            in_data = fifo_D_drain_local_in.read();
                            int split_idx = (c7) % 4;
                            out_data = local_D[c8][c7 / 4];
D_drain_IO_L1_out_wrapper_7_0_x0_loop_5:                             for (ap_uint<3> n = 0; n < 4; n++) {
                                data_split[n] = out_data(31, 0);
                                out_data = out_data >> 32;
                            }
                            union {
                                unsigned int ui;
                                float ut;
                            } u;
                            u.ut = in_data;
                            data_split[split_idx] = ap_uint<32>(u.ui);
                            out_data = (data_split[3], data_split[2], data_split[1], data_split[0]);
                            local_D[c8][c7 / 4] = out_data;
                        }
                    }
                }
D_drain_IO_L1_out_wrapper_7_0_x0_loop_6:                 for (ap_uint<3> c4 = p1; c4 <= 3; c4 += 1) {
                    // io_L1
                    if (c4 == p1) {
D_drain_IO_L1_out_wrapper_7_0_x0_loop_7:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_7_0_x0_loop_8:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = local_D[c5][c6];
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    } else {
D_drain_IO_L1_out_wrapper_7_0_x0_loop_9:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_7_0_x0_loop_10:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                }
            }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L1_out_boundary_wrapper_0_x0(int idx, int idy, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<float> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    D_t4 local_D[16][2];
    /* Variable Declaration */

D_drain_IO_L1_out_boundary_wrapper_0_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L1_out_boundary_wrapper_0_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p0 + 8 * c1 <= 41) {
                // array
                // io_L3
                // io_L2
                ap_uint<32> data_split[4];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                /* Variable Declaration */
D_drain_IO_L1_out_boundary_wrapper_0_x0_loop_3:                 for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                    // latency
D_drain_IO_L1_out_boundary_wrapper_0_x0_loop_4:                     for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                        // simd
                        {
                            D_t1 in_data;
                            D_t4 out_data;
                            in_data = fifo_D_drain_local_in.read();
                            int split_idx = (c7) % 4;
                            out_data = local_D[c8][c7 / 4];
D_drain_IO_L1_out_boundary_wrapper_0_x0_loop_5:                             for (ap_uint<3> n = 0; n < 4; n++) {
                                data_split[n] = out_data(31, 0);
                                out_data = out_data >> 32;
                            }
                            union {
                                unsigned int ui;
                                float ut;
                            } u;
                            u.ut = in_data;
                            data_split[split_idx] = ap_uint<32>(u.ui);
                            out_data = (data_split[3], data_split[2], data_split[1], data_split[0]);
                            local_D[c8][c7 / 4] = out_data;
                        }
                    }
                }
D_drain_IO_L1_out_boundary_wrapper_0_x0_loop_6:                 for (ap_uint<3> c4 = p1; c4 <= 3; c4 += 1)
                    if (c4 == p1) {
                        // io_L1
D_drain_IO_L1_out_boundary_wrapper_0_x0_loop_7:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_boundary_wrapper_0_x0_loop_8:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = local_D[c5][c6];
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
            }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L1_out_boundary_wrapper_1_x0(int idx, int idy, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<float> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    D_t4 local_D[16][2];
    /* Variable Declaration */

D_drain_IO_L1_out_boundary_wrapper_1_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L1_out_boundary_wrapper_1_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p0 + 8 * c1 <= 41) {
                // array
                // io_L3
                // io_L2
                ap_uint<32> data_split[4];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                /* Variable Declaration */
D_drain_IO_L1_out_boundary_wrapper_1_x0_loop_3:                 for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                    // latency
D_drain_IO_L1_out_boundary_wrapper_1_x0_loop_4:                     for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                        // simd
                        {
                            D_t1 in_data;
                            D_t4 out_data;
                            in_data = fifo_D_drain_local_in.read();
                            int split_idx = (c7) % 4;
                            out_data = local_D[c8][c7 / 4];
D_drain_IO_L1_out_boundary_wrapper_1_x0_loop_5:                             for (ap_uint<3> n = 0; n < 4; n++) {
                                data_split[n] = out_data(31, 0);
                                out_data = out_data >> 32;
                            }
                            union {
                                unsigned int ui;
                                float ut;
                            } u;
                            u.ut = in_data;
                            data_split[split_idx] = ap_uint<32>(u.ui);
                            out_data = (data_split[3], data_split[2], data_split[1], data_split[0]);
                            local_D[c8][c7 / 4] = out_data;
                        }
                    }
                }
D_drain_IO_L1_out_boundary_wrapper_1_x0_loop_6:                 for (ap_uint<3> c4 = p1; c4 <= 3; c4 += 1)
                    if (c4 == p1) {
                        // io_L1
D_drain_IO_L1_out_boundary_wrapper_1_x0_loop_7:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_boundary_wrapper_1_x0_loop_8:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = local_D[c5][c6];
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
            }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L1_out_boundary_wrapper_2_x0(int idx, int idy, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<float> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    D_t4 local_D[16][2];
    /* Variable Declaration */

D_drain_IO_L1_out_boundary_wrapper_2_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L1_out_boundary_wrapper_2_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p0 + 8 * c1 <= 41) {
                // array
                // io_L3
                // io_L2
                ap_uint<32> data_split[4];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                /* Variable Declaration */
D_drain_IO_L1_out_boundary_wrapper_2_x0_loop_3:                 for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                    // latency
D_drain_IO_L1_out_boundary_wrapper_2_x0_loop_4:                     for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                        // simd
                        {
                            D_t1 in_data;
                            D_t4 out_data;
                            in_data = fifo_D_drain_local_in.read();
                            int split_idx = (c7) % 4;
                            out_data = local_D[c8][c7 / 4];
D_drain_IO_L1_out_boundary_wrapper_2_x0_loop_5:                             for (ap_uint<3> n = 0; n < 4; n++) {
                                data_split[n] = out_data(31, 0);
                                out_data = out_data >> 32;
                            }
                            union {
                                unsigned int ui;
                                float ut;
                            } u;
                            u.ut = in_data;
                            data_split[split_idx] = ap_uint<32>(u.ui);
                            out_data = (data_split[3], data_split[2], data_split[1], data_split[0]);
                            local_D[c8][c7 / 4] = out_data;
                        }
                    }
                }
D_drain_IO_L1_out_boundary_wrapper_2_x0_loop_6:                 for (ap_uint<3> c4 = p1; c4 <= 3; c4 += 1)
                    if (c4 == p1) {
                        // io_L1
D_drain_IO_L1_out_boundary_wrapper_2_x0_loop_7:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_boundary_wrapper_2_x0_loop_8:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = local_D[c5][c6];
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
            }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L1_out_boundary_wrapper_3_x0(int idx, int idy, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<float> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    D_t4 local_D[16][2];
    /* Variable Declaration */

D_drain_IO_L1_out_boundary_wrapper_3_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L1_out_boundary_wrapper_3_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p0 + 8 * c1 <= 41) {
                // array
                // io_L3
                // io_L2
                ap_uint<32> data_split[4];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                /* Variable Declaration */
D_drain_IO_L1_out_boundary_wrapper_3_x0_loop_3:                 for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                    // latency
D_drain_IO_L1_out_boundary_wrapper_3_x0_loop_4:                     for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                        // simd
                        {
                            D_t1 in_data;
                            D_t4 out_data;
                            in_data = fifo_D_drain_local_in.read();
                            int split_idx = (c7) % 4;
                            out_data = local_D[c8][c7 / 4];
D_drain_IO_L1_out_boundary_wrapper_3_x0_loop_5:                             for (ap_uint<3> n = 0; n < 4; n++) {
                                data_split[n] = out_data(31, 0);
                                out_data = out_data >> 32;
                            }
                            union {
                                unsigned int ui;
                                float ut;
                            } u;
                            u.ut = in_data;
                            data_split[split_idx] = ap_uint<32>(u.ui);
                            out_data = (data_split[3], data_split[2], data_split[1], data_split[0]);
                            local_D[c8][c7 / 4] = out_data;
                        }
                    }
                }
D_drain_IO_L1_out_boundary_wrapper_3_x0_loop_6:                 for (ap_uint<3> c4 = p1; c4 <= 3; c4 += 1)
                    if (c4 == p1) {
                        // io_L1
D_drain_IO_L1_out_boundary_wrapper_3_x0_loop_7:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_boundary_wrapper_3_x0_loop_8:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = local_D[c5][c6];
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
            }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L1_out_boundary_wrapper_4_x0(int idx, int idy, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<float> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    D_t4 local_D[16][2];
    /* Variable Declaration */

D_drain_IO_L1_out_boundary_wrapper_4_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L1_out_boundary_wrapper_4_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p0 + 8 * c1 <= 41) {
                // array
                // io_L3
                // io_L2
                ap_uint<32> data_split[4];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                /* Variable Declaration */
D_drain_IO_L1_out_boundary_wrapper_4_x0_loop_3:                 for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                    // latency
D_drain_IO_L1_out_boundary_wrapper_4_x0_loop_4:                     for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                        // simd
                        {
                            D_t1 in_data;
                            D_t4 out_data;
                            in_data = fifo_D_drain_local_in.read();
                            int split_idx = (c7) % 4;
                            out_data = local_D[c8][c7 / 4];
D_drain_IO_L1_out_boundary_wrapper_4_x0_loop_5:                             for (ap_uint<3> n = 0; n < 4; n++) {
                                data_split[n] = out_data(31, 0);
                                out_data = out_data >> 32;
                            }
                            union {
                                unsigned int ui;
                                float ut;
                            } u;
                            u.ut = in_data;
                            data_split[split_idx] = ap_uint<32>(u.ui);
                            out_data = (data_split[3], data_split[2], data_split[1], data_split[0]);
                            local_D[c8][c7 / 4] = out_data;
                        }
                    }
                }
D_drain_IO_L1_out_boundary_wrapper_4_x0_loop_6:                 for (ap_uint<3> c4 = p1; c4 <= 3; c4 += 1)
                    if (c4 == p1) {
                        // io_L1
D_drain_IO_L1_out_boundary_wrapper_4_x0_loop_7:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_boundary_wrapper_4_x0_loop_8:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = local_D[c5][c6];
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
            }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L1_out_boundary_wrapper_5_x0(int idx, int idy, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<float> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    D_t4 local_D[16][2];
    /* Variable Declaration */

D_drain_IO_L1_out_boundary_wrapper_5_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L1_out_boundary_wrapper_5_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p0 + 8 * c1 <= 41) {
                // array
                // io_L3
                // io_L2
                ap_uint<32> data_split[4];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                /* Variable Declaration */
D_drain_IO_L1_out_boundary_wrapper_5_x0_loop_3:                 for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                    // latency
D_drain_IO_L1_out_boundary_wrapper_5_x0_loop_4:                     for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                        // simd
                        {
                            D_t1 in_data;
                            D_t4 out_data;
                            in_data = fifo_D_drain_local_in.read();
                            int split_idx = (c7) % 4;
                            out_data = local_D[c8][c7 / 4];
D_drain_IO_L1_out_boundary_wrapper_5_x0_loop_5:                             for (ap_uint<3> n = 0; n < 4; n++) {
                                data_split[n] = out_data(31, 0);
                                out_data = out_data >> 32;
                            }
                            union {
                                unsigned int ui;
                                float ut;
                            } u;
                            u.ut = in_data;
                            data_split[split_idx] = ap_uint<32>(u.ui);
                            out_data = (data_split[3], data_split[2], data_split[1], data_split[0]);
                            local_D[c8][c7 / 4] = out_data;
                        }
                    }
                }
D_drain_IO_L1_out_boundary_wrapper_5_x0_loop_6:                 for (ap_uint<3> c4 = p1; c4 <= 3; c4 += 1)
                    if (c4 == p1) {
                        // io_L1
D_drain_IO_L1_out_boundary_wrapper_5_x0_loop_7:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_boundary_wrapper_5_x0_loop_8:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = local_D[c5][c6];
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
            }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L1_out_boundary_wrapper_6_x0(int idx, int idy, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<float> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    D_t4 local_D[16][2];
    /* Variable Declaration */

D_drain_IO_L1_out_boundary_wrapper_6_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L1_out_boundary_wrapper_6_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p0 + 8 * c1 <= 41) {
                // array
                // io_L3
                // io_L2
                ap_uint<32> data_split[4];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                /* Variable Declaration */
D_drain_IO_L1_out_boundary_wrapper_6_x0_loop_3:                 for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                    // latency
D_drain_IO_L1_out_boundary_wrapper_6_x0_loop_4:                     for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                        // simd
                        {
                            D_t1 in_data;
                            D_t4 out_data;
                            in_data = fifo_D_drain_local_in.read();
                            int split_idx = (c7) % 4;
                            out_data = local_D[c8][c7 / 4];
D_drain_IO_L1_out_boundary_wrapper_6_x0_loop_5:                             for (ap_uint<3> n = 0; n < 4; n++) {
                                data_split[n] = out_data(31, 0);
                                out_data = out_data >> 32;
                            }
                            union {
                                unsigned int ui;
                                float ut;
                            } u;
                            u.ut = in_data;
                            data_split[split_idx] = ap_uint<32>(u.ui);
                            out_data = (data_split[3], data_split[2], data_split[1], data_split[0]);
                            local_D[c8][c7 / 4] = out_data;
                        }
                    }
                }
D_drain_IO_L1_out_boundary_wrapper_6_x0_loop_6:                 for (ap_uint<3> c4 = p1; c4 <= 3; c4 += 1)
                    if (c4 == p1) {
                        // io_L1
D_drain_IO_L1_out_boundary_wrapper_6_x0_loop_7:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_boundary_wrapper_6_x0_loop_8:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = local_D[c5][c6];
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
            }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L1_out_boundary_wrapper_7_x0(int idx, int idy, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<float> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    D_t4 local_D[16][2];
    /* Variable Declaration */

D_drain_IO_L1_out_boundary_wrapper_7_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L1_out_boundary_wrapper_7_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p0 + 8 * c1 <= 41) {
                // array
                // io_L3
                // io_L2
                ap_uint<32> data_split[4];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                /* Variable Declaration */
D_drain_IO_L1_out_boundary_wrapper_7_x0_loop_3:                 for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                    // latency
D_drain_IO_L1_out_boundary_wrapper_7_x0_loop_4:                     for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                        // simd
                        {
                            D_t1 in_data;
                            D_t4 out_data;
                            in_data = fifo_D_drain_local_in.read();
                            int split_idx = (c7) % 4;
                            out_data = local_D[c8][c7 / 4];
D_drain_IO_L1_out_boundary_wrapper_7_x0_loop_5:                             for (ap_uint<3> n = 0; n < 4; n++) {
                                data_split[n] = out_data(31, 0);
                                out_data = out_data >> 32;
                            }
                            union {
                                unsigned int ui;
                                float ut;
                            } u;
                            u.ut = in_data;
                            data_split[split_idx] = ap_uint<32>(u.ui);
                            out_data = (data_split[3], data_split[2], data_split[1], data_split[0]);
                            local_D[c8][c7 / 4] = out_data;
                        }
                    }
                }
D_drain_IO_L1_out_boundary_wrapper_7_x0_loop_6:                 for (ap_uint<3> c4 = p1; c4 <= 3; c4 += 1)
                    if (c4 == p1) {
                        // io_L1
D_drain_IO_L1_out_boundary_wrapper_7_x0_loop_7:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_boundary_wrapper_7_x0_loop_8:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = local_D[c5][c6];
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
            }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L2_out_6_x0(int idx, hls::stream<D_t4> &fifo_D_drain_in, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<D_t4> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx; // module id
    /* Variable Declaration */

D_drain_IO_L2_out_6_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L2_out_6_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
            // array
            // io_L3
D_drain_IO_L2_out_6_x0_loop_3:             for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 2 max = 8
                if (c3 > -8 * c1 + 41)
                    break;
                // io_L2
                if (c3 == p0) {
D_drain_IO_L2_out_6_x0_loop_4:                     for (ap_uint<3> c4 = 0; c4 <= 3; c4 += 1) {
                        // io_L1
D_drain_IO_L2_out_6_x0_loop_5:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L2_out_6_x0_loop_6:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_local_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                } else {
D_drain_IO_L2_out_6_x0_loop_7:                     for (ap_uint<3> c4 = 0; c4 <= 3; c4 += 1) {
                        // io_L1
D_drain_IO_L2_out_6_x0_loop_8:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L2_out_6_x0_loop_9:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                }
            }
        }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L2_out_5_x0(int idx, hls::stream<D_t4> &fifo_D_drain_in, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<D_t4> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx; // module id
    /* Variable Declaration */

D_drain_IO_L2_out_5_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L2_out_5_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
            // array
            // io_L3
D_drain_IO_L2_out_5_x0_loop_3:             for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 2 max = 8
                if (c3 > -8 * c1 + 41)
                    break;
                // io_L2
                if (c3 == p0) {
D_drain_IO_L2_out_5_x0_loop_4:                     for (ap_uint<3> c4 = 0; c4 <= 3; c4 += 1) {
                        // io_L1
D_drain_IO_L2_out_5_x0_loop_5:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L2_out_5_x0_loop_6:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_local_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                } else {
D_drain_IO_L2_out_5_x0_loop_7:                     for (ap_uint<3> c4 = 0; c4 <= 3; c4 += 1) {
                        // io_L1
D_drain_IO_L2_out_5_x0_loop_8:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L2_out_5_x0_loop_9:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                }
            }
        }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L2_out_4_x0(int idx, hls::stream<D_t4> &fifo_D_drain_in, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<D_t4> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx; // module id
    /* Variable Declaration */

D_drain_IO_L2_out_4_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L2_out_4_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
            // array
            // io_L3
D_drain_IO_L2_out_4_x0_loop_3:             for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 2 max = 8
                if (c3 > -8 * c1 + 41)
                    break;
                // io_L2
                if (c3 == p0) {
D_drain_IO_L2_out_4_x0_loop_4:                     for (ap_uint<3> c4 = 0; c4 <= 3; c4 += 1) {
                        // io_L1
D_drain_IO_L2_out_4_x0_loop_5:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L2_out_4_x0_loop_6:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_local_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                } else {
D_drain_IO_L2_out_4_x0_loop_7:                     for (ap_uint<3> c4 = 0; c4 <= 3; c4 += 1) {
                        // io_L1
D_drain_IO_L2_out_4_x0_loop_8:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L2_out_4_x0_loop_9:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                }
            }
        }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L2_out_3_x0(int idx, hls::stream<D_t4> &fifo_D_drain_in, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<D_t4> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx; // module id
    /* Variable Declaration */

D_drain_IO_L2_out_3_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L2_out_3_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
            // array
            // io_L3
D_drain_IO_L2_out_3_x0_loop_3:             for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 2 max = 8
                if (c3 > -8 * c1 + 41)
                    break;
                // io_L2
                if (c3 == p0) {
D_drain_IO_L2_out_3_x0_loop_4:                     for (ap_uint<3> c4 = 0; c4 <= 3; c4 += 1) {
                        // io_L1
D_drain_IO_L2_out_3_x0_loop_5:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L2_out_3_x0_loop_6:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_local_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                } else {
D_drain_IO_L2_out_3_x0_loop_7:                     for (ap_uint<3> c4 = 0; c4 <= 3; c4 += 1) {
                        // io_L1
D_drain_IO_L2_out_3_x0_loop_8:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L2_out_3_x0_loop_9:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                }
            }
        }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L2_out_2_x0(int idx, hls::stream<D_t4> &fifo_D_drain_in, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<D_t4> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx; // module id
    /* Variable Declaration */

D_drain_IO_L2_out_2_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L2_out_2_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
            // array
            // io_L3
D_drain_IO_L2_out_2_x0_loop_3:             for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 2 max = 8
                if (c3 > -8 * c1 + 41)
                    break;
                // io_L2
                if (c3 == p0) {
D_drain_IO_L2_out_2_x0_loop_4:                     for (ap_uint<3> c4 = 0; c4 <= 3; c4 += 1) {
                        // io_L1
D_drain_IO_L2_out_2_x0_loop_5:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L2_out_2_x0_loop_6:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_local_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                } else {
D_drain_IO_L2_out_2_x0_loop_7:                     for (ap_uint<3> c4 = 0; c4 <= 3; c4 += 1) {
                        // io_L1
D_drain_IO_L2_out_2_x0_loop_8:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L2_out_2_x0_loop_9:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                }
            }
        }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L2_out_1_x0(int idx, hls::stream<D_t4> &fifo_D_drain_in, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<D_t4> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx; // module id
    /* Variable Declaration */

D_drain_IO_L2_out_1_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L2_out_1_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
            // array
            // io_L3
D_drain_IO_L2_out_1_x0_loop_3:             for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 2 max = 8
                if (c3 > -8 * c1 + 41)
                    break;
                // io_L2
                if (c3 == p0) {
D_drain_IO_L2_out_1_x0_loop_4:                     for (ap_uint<3> c4 = 0; c4 <= 3; c4 += 1) {
                        // io_L1
D_drain_IO_L2_out_1_x0_loop_5:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L2_out_1_x0_loop_6:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_local_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                } else {
D_drain_IO_L2_out_1_x0_loop_7:                     for (ap_uint<3> c4 = 0; c4 <= 3; c4 += 1) {
                        // io_L1
D_drain_IO_L2_out_1_x0_loop_8:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L2_out_1_x0_loop_9:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                }
            }
        }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L2_out_0_x0(int idx, hls::stream<D_t4> &fifo_D_drain_in, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<D_t4> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx; // module id
    /* Variable Declaration */

D_drain_IO_L2_out_0_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L2_out_0_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
            // array
            // io_L3
D_drain_IO_L2_out_0_x0_loop_3:             for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 2 max = 8
                if (c3 > -8 * c1 + 41)
                    break;
                // io_L2
                if (c3 == p0) {
D_drain_IO_L2_out_0_x0_loop_4:                     for (ap_uint<3> c4 = 0; c4 <= 3; c4 += 1) {
                        // io_L1
D_drain_IO_L2_out_0_x0_loop_5:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L2_out_0_x0_loop_6:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_local_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                } else {
D_drain_IO_L2_out_0_x0_loop_7:                     for (ap_uint<3> c4 = 0; c4 <= 3; c4 += 1) {
                        // io_L1
D_drain_IO_L2_out_0_x0_loop_8:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L2_out_0_x0_loop_9:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                }
            }
        }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L2_out_boundary_x0(int idx, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<D_t4> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx; // module id
    /* Variable Declaration */

D_drain_IO_L2_out_boundary_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L2_out_boundary_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
            // array
            // io_L3
D_drain_IO_L2_out_boundary_x0_loop_3:             for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 1 max = 1
                if (c3 > -8 * c1 + 41)
                    break;
                if (c3 == p0) {
                    // io_L2
D_drain_IO_L2_out_boundary_x0_loop_4:                     for (ap_uint<3> c4 = 0; c4 <= 3; c4 += 1) {
                        // io_L1
D_drain_IO_L2_out_boundary_x0_loop_5:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L2_out_boundary_x0_loop_6:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_local_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                }
            }
        }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L3_out_x0(hls::stream<D_t4> &fifo_D_drain_out, hls::stream<D_t4> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    /* Variable Declaration */

D_drain_IO_L3_out_x0_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L3_out_x0_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
            // array
            // io_L3
D_drain_IO_L3_out_x0_loop_3:             for (int c3 = 0; c3 <= 7; c3 += 1) {
                if (c3 > -8 * c1 + 41)
                    break;
                // io_L2
D_drain_IO_L3_out_x0_loop_4:                 for (ap_uint<3> c4 = 0; c4 <= 3; c4 += 1) {
                    // io_L1
D_drain_IO_L3_out_x0_loop_5:                     for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                        // access_coalesce
                        // access_serialize
D_drain_IO_L3_out_x0_loop_6:                         for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                            {
                                D_t4 in_data;
                                D_t4 out_data;
                                in_data = fifo_D_drain_local_in.read();
                                out_data = in_data;
                                fifo_D_drain_out.write(out_data);
                            }
                        }
                    }
                }
            }
        }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L3_out_serialize_x0(D_t16 *D, hls::stream<D_t4> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    /* Variable Declaration */

D_drain_IO_L3_out_serialize_x0_loop_1:     for (ap_uint<14> i = 0; i < 1024; i++) {

        D_t4 fifo_data;
        D_t16 mem_data;
        D_t4 mem_data_split[4];
#pragma HLS ARRAY_PARTITION variable = mem_data_split complete
D_drain_IO_L3_out_serialize_x0_loop_2:         for (ap_uint<3> p = 0; p < 4; p++) {
            fifo_data = fifo_D_drain_local_in.read();
            mem_data_split[p] = fifo_data;
        }
        mem_data = (mem_data_split[3], mem_data_split[2], mem_data_split[1], mem_data_split[0]);
        D[i] = mem_data;
    }
}
/* Module Definition */

void kernel0_x0(A_t16 *A, B_t16 *B, C_t16 *C, D_t16 *D) {
#pragma HLS INLINE OFF
#pragma HLS DATAFLOW disable_start_propagation

    /* FIFO Declaration */
    /* A_IO_L3_in_serialize fifo */ hls::stream<A_t16> fifo_A_A_IO_L3_in_serialize_x0;
#pragma HLS STREAM variable = fifo_A_A_IO_L3_in_serialize_x0 depth = 2
    /* B_IO_L3_in_serialize fifo */ hls::stream<B_t8> fifo_B_B_IO_L3_in_serialize_x0;
#pragma HLS STREAM variable = fifo_B_B_IO_L3_in_serialize_x0 depth = 2
    /* C_IO_L3_in_serialize fifo */ hls::stream<C_t16> fifo_C_C_IO_L3_in_serialize_x0;
#pragma HLS STREAM variable = fifo_C_C_IO_L3_in_serialize_x0 depth = 2
    /* D_drain_IO_L3_out_serialize fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L3_out_serialize_x0;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L3_out_serialize_x0 depth = 2
    /* A_IO_L2_in fifo */ hls::stream<A_t16> fifo_A_A_IO_L2_in_0_x0;
#pragma HLS STREAM variable = fifo_A_A_IO_L2_in_0_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_A_IO_L2_in_0_x0 type = FIFO impl = SRL
    /* A_IO_L2_in fifo */ hls::stream<A_t16> fifo_A_A_IO_L2_in_1_x0;
#pragma HLS STREAM variable = fifo_A_A_IO_L2_in_1_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_A_IO_L2_in_1_x0 type = FIFO impl = SRL
    /* A_IO_L2_in fifo */ hls::stream<A_t16> fifo_A_A_IO_L2_in_2_x0;
#pragma HLS STREAM variable = fifo_A_A_IO_L2_in_2_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_A_IO_L2_in_2_x0 type = FIFO impl = SRL
    /* A_IO_L2_in fifo */ hls::stream<A_t16> fifo_A_A_IO_L2_in_3_x0;
#pragma HLS STREAM variable = fifo_A_A_IO_L2_in_3_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_A_IO_L2_in_3_x0 type = FIFO impl = SRL
    /* A_IO_L2_in fifo */ hls::stream<A_t16> fifo_A_A_IO_L2_in_4_x0;
#pragma HLS STREAM variable = fifo_A_A_IO_L2_in_4_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_A_IO_L2_in_4_x0 type = FIFO impl = SRL
    /* B_IO_L2_in fifo */ hls::stream<B_t8> fifo_B_B_IO_L2_in_0_x0;
#pragma HLS STREAM variable = fifo_B_B_IO_L2_in_0_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_B_IO_L2_in_0_x0 type = FIFO impl = SRL
    /* B_IO_L2_in fifo */ hls::stream<B_t8> fifo_B_B_IO_L2_in_1_x0;
#pragma HLS STREAM variable = fifo_B_B_IO_L2_in_1_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_B_IO_L2_in_1_x0 type = FIFO impl = SRL
    /* B_IO_L2_in fifo */ hls::stream<B_t8> fifo_B_B_IO_L2_in_2_x0;
#pragma HLS STREAM variable = fifo_B_B_IO_L2_in_2_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_B_IO_L2_in_2_x0 type = FIFO impl = SRL
    /* B_IO_L2_in fifo */ hls::stream<B_t8> fifo_B_B_IO_L2_in_3_x0;
#pragma HLS STREAM variable = fifo_B_B_IO_L2_in_3_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_B_IO_L2_in_3_x0 type = FIFO impl = SRL
    /* B_IO_L2_in fifo */ hls::stream<B_t8> fifo_B_B_IO_L2_in_4_x0;
#pragma HLS STREAM variable = fifo_B_B_IO_L2_in_4_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_B_IO_L2_in_4_x0 type = FIFO impl = SRL
    /* B_IO_L2_in fifo */ hls::stream<B_t8> fifo_B_B_IO_L2_in_5_x0;
#pragma HLS STREAM variable = fifo_B_B_IO_L2_in_5_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_B_IO_L2_in_5_x0 type = FIFO impl = SRL
    /* B_IO_L2_in fifo */ hls::stream<B_t8> fifo_B_B_IO_L2_in_6_x0;
#pragma HLS STREAM variable = fifo_B_B_IO_L2_in_6_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_B_IO_L2_in_6_x0 type = FIFO impl = SRL
    /* B_IO_L2_in fifo */ hls::stream<B_t8> fifo_B_B_IO_L2_in_7_x0;
#pragma HLS STREAM variable = fifo_B_B_IO_L2_in_7_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_B_IO_L2_in_7_x0 type = FIFO impl = SRL
    /* B_IO_L2_in fifo */ hls::stream<B_t8> fifo_B_B_IO_L2_in_8_x0;
#pragma HLS STREAM variable = fifo_B_B_IO_L2_in_8_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_B_IO_L2_in_8_x0 type = FIFO impl = SRL
    /* C_IO_L2_in fifo */ hls::stream<C_t16> fifo_C_C_IO_L2_in_0_x0;
#pragma HLS STREAM variable = fifo_C_C_IO_L2_in_0_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_C_IO_L2_in_0_x0 type = FIFO impl = SRL
    /* C_IO_L2_in fifo */ hls::stream<C_t16> fifo_C_C_IO_L2_in_1_x0;
#pragma HLS STREAM variable = fifo_C_C_IO_L2_in_1_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_C_IO_L2_in_1_x0 type = FIFO impl = SRL
    /* C_IO_L2_in fifo */ hls::stream<C_t16> fifo_C_C_IO_L2_in_2_x0;
#pragma HLS STREAM variable = fifo_C_C_IO_L2_in_2_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_C_IO_L2_in_2_x0 type = FIFO impl = SRL
    /* C_IO_L2_in fifo */ hls::stream<C_t16> fifo_C_C_IO_L2_in_3_x0;
#pragma HLS STREAM variable = fifo_C_C_IO_L2_in_3_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_C_IO_L2_in_3_x0 type = FIFO impl = SRL
    /* C_IO_L2_in fifo */ hls::stream<C_t16> fifo_C_C_IO_L2_in_4_x0;
#pragma HLS STREAM variable = fifo_C_C_IO_L2_in_4_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_C_IO_L2_in_4_x0 type = FIFO impl = SRL
    /* C_IO_L2_in fifo */ hls::stream<C_t16> fifo_C_C_IO_L2_in_5_x0;
#pragma HLS STREAM variable = fifo_C_C_IO_L2_in_5_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_C_IO_L2_in_5_x0 type = FIFO impl = SRL
    /* C_IO_L2_in fifo */ hls::stream<C_t16> fifo_C_C_IO_L2_in_6_x0;
#pragma HLS STREAM variable = fifo_C_C_IO_L2_in_6_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_C_IO_L2_in_6_x0 type = FIFO impl = SRL
    /* C_IO_L2_in fifo */ hls::stream<C_t16> fifo_C_C_IO_L2_in_7_x0;
#pragma HLS STREAM variable = fifo_C_C_IO_L2_in_7_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_C_IO_L2_in_7_x0 type = FIFO impl = SRL
    /* C_IO_L2_in fifo */ hls::stream<C_t16> fifo_C_C_IO_L2_in_8_x0;
#pragma HLS STREAM variable = fifo_C_C_IO_L2_in_8_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_C_IO_L2_in_8_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<A_t8> fifo_A_PE_0_0_x0;
#pragma HLS STREAM variable = fifo_A_PE_0_0_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_PE_0_0_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<A_t8> fifo_A_PE_0_1_x0;
#pragma HLS STREAM variable = fifo_A_PE_0_1_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_PE_0_1_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<A_t8> fifo_A_PE_0_2_x0;
#pragma HLS STREAM variable = fifo_A_PE_0_2_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_PE_0_2_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<A_t8> fifo_A_PE_0_3_x0;
#pragma HLS STREAM variable = fifo_A_PE_0_3_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_PE_0_3_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<A_t8> fifo_A_PE_0_4_x0;
#pragma HLS STREAM variable = fifo_A_PE_0_4_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_PE_0_4_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<A_t8> fifo_A_PE_0_5_x0;
#pragma HLS STREAM variable = fifo_A_PE_0_5_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_PE_0_5_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<A_t8> fifo_A_PE_0_6_x0;
#pragma HLS STREAM variable = fifo_A_PE_0_6_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_PE_0_6_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<A_t8> fifo_A_PE_0_7_x0;
#pragma HLS STREAM variable = fifo_A_PE_0_7_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_PE_0_7_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<A_t8> fifo_A_PE_0_8_x0;
#pragma HLS STREAM variable = fifo_A_PE_0_8_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_PE_0_8_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<A_t8> fifo_A_PE_1_0_x0;
#pragma HLS STREAM variable = fifo_A_PE_1_0_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_PE_1_0_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<A_t8> fifo_A_PE_1_1_x0;
#pragma HLS STREAM variable = fifo_A_PE_1_1_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_PE_1_1_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<A_t8> fifo_A_PE_1_2_x0;
#pragma HLS STREAM variable = fifo_A_PE_1_2_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_PE_1_2_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<A_t8> fifo_A_PE_1_3_x0;
#pragma HLS STREAM variable = fifo_A_PE_1_3_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_PE_1_3_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<A_t8> fifo_A_PE_1_4_x0;
#pragma HLS STREAM variable = fifo_A_PE_1_4_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_PE_1_4_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<A_t8> fifo_A_PE_1_5_x0;
#pragma HLS STREAM variable = fifo_A_PE_1_5_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_PE_1_5_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<A_t8> fifo_A_PE_1_6_x0;
#pragma HLS STREAM variable = fifo_A_PE_1_6_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_PE_1_6_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<A_t8> fifo_A_PE_1_7_x0;
#pragma HLS STREAM variable = fifo_A_PE_1_7_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_PE_1_7_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<A_t8> fifo_A_PE_1_8_x0;
#pragma HLS STREAM variable = fifo_A_PE_1_8_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_PE_1_8_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<A_t8> fifo_A_PE_2_0_x0;
#pragma HLS STREAM variable = fifo_A_PE_2_0_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_PE_2_0_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<A_t8> fifo_A_PE_2_1_x0;
#pragma HLS STREAM variable = fifo_A_PE_2_1_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_PE_2_1_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<A_t8> fifo_A_PE_2_2_x0;
#pragma HLS STREAM variable = fifo_A_PE_2_2_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_PE_2_2_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<A_t8> fifo_A_PE_2_3_x0;
#pragma HLS STREAM variable = fifo_A_PE_2_3_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_PE_2_3_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<A_t8> fifo_A_PE_2_4_x0;
#pragma HLS STREAM variable = fifo_A_PE_2_4_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_PE_2_4_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<A_t8> fifo_A_PE_2_5_x0;
#pragma HLS STREAM variable = fifo_A_PE_2_5_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_PE_2_5_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<A_t8> fifo_A_PE_2_6_x0;
#pragma HLS STREAM variable = fifo_A_PE_2_6_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_PE_2_6_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<A_t8> fifo_A_PE_2_7_x0;
#pragma HLS STREAM variable = fifo_A_PE_2_7_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_PE_2_7_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<A_t8> fifo_A_PE_2_8_x0;
#pragma HLS STREAM variable = fifo_A_PE_2_8_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_PE_2_8_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<A_t8> fifo_A_PE_3_0_x0;
#pragma HLS STREAM variable = fifo_A_PE_3_0_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_PE_3_0_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<A_t8> fifo_A_PE_3_1_x0;
#pragma HLS STREAM variable = fifo_A_PE_3_1_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_PE_3_1_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<A_t8> fifo_A_PE_3_2_x0;
#pragma HLS STREAM variable = fifo_A_PE_3_2_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_PE_3_2_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<A_t8> fifo_A_PE_3_3_x0;
#pragma HLS STREAM variable = fifo_A_PE_3_3_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_PE_3_3_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<A_t8> fifo_A_PE_3_4_x0;
#pragma HLS STREAM variable = fifo_A_PE_3_4_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_PE_3_4_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<A_t8> fifo_A_PE_3_5_x0;
#pragma HLS STREAM variable = fifo_A_PE_3_5_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_PE_3_5_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<A_t8> fifo_A_PE_3_6_x0;
#pragma HLS STREAM variable = fifo_A_PE_3_6_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_PE_3_6_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<A_t8> fifo_A_PE_3_7_x0;
#pragma HLS STREAM variable = fifo_A_PE_3_7_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_PE_3_7_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<A_t8> fifo_A_PE_3_8_x0;
#pragma HLS STREAM variable = fifo_A_PE_3_8_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_PE_3_8_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_0_0_x0;
#pragma HLS STREAM variable = fifo_B_PE_0_0_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_0_0_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_1_0_x0;
#pragma HLS STREAM variable = fifo_B_PE_1_0_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_1_0_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_2_0_x0;
#pragma HLS STREAM variable = fifo_B_PE_2_0_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_2_0_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_3_0_x0;
#pragma HLS STREAM variable = fifo_B_PE_3_0_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_3_0_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_4_0_x0;
#pragma HLS STREAM variable = fifo_B_PE_4_0_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_4_0_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_0_1_x0;
#pragma HLS STREAM variable = fifo_B_PE_0_1_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_0_1_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_1_1_x0;
#pragma HLS STREAM variable = fifo_B_PE_1_1_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_1_1_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_2_1_x0;
#pragma HLS STREAM variable = fifo_B_PE_2_1_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_2_1_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_3_1_x0;
#pragma HLS STREAM variable = fifo_B_PE_3_1_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_3_1_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_4_1_x0;
#pragma HLS STREAM variable = fifo_B_PE_4_1_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_4_1_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_0_2_x0;
#pragma HLS STREAM variable = fifo_B_PE_0_2_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_0_2_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_1_2_x0;
#pragma HLS STREAM variable = fifo_B_PE_1_2_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_1_2_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_2_2_x0;
#pragma HLS STREAM variable = fifo_B_PE_2_2_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_2_2_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_3_2_x0;
#pragma HLS STREAM variable = fifo_B_PE_3_2_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_3_2_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_4_2_x0;
#pragma HLS STREAM variable = fifo_B_PE_4_2_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_4_2_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_0_3_x0;
#pragma HLS STREAM variable = fifo_B_PE_0_3_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_0_3_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_1_3_x0;
#pragma HLS STREAM variable = fifo_B_PE_1_3_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_1_3_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_2_3_x0;
#pragma HLS STREAM variable = fifo_B_PE_2_3_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_2_3_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_3_3_x0;
#pragma HLS STREAM variable = fifo_B_PE_3_3_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_3_3_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_4_3_x0;
#pragma HLS STREAM variable = fifo_B_PE_4_3_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_4_3_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_0_4_x0;
#pragma HLS STREAM variable = fifo_B_PE_0_4_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_0_4_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_1_4_x0;
#pragma HLS STREAM variable = fifo_B_PE_1_4_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_1_4_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_2_4_x0;
#pragma HLS STREAM variable = fifo_B_PE_2_4_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_2_4_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_3_4_x0;
#pragma HLS STREAM variable = fifo_B_PE_3_4_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_3_4_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_4_4_x0;
#pragma HLS STREAM variable = fifo_B_PE_4_4_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_4_4_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_0_5_x0;
#pragma HLS STREAM variable = fifo_B_PE_0_5_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_0_5_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_1_5_x0;
#pragma HLS STREAM variable = fifo_B_PE_1_5_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_1_5_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_2_5_x0;
#pragma HLS STREAM variable = fifo_B_PE_2_5_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_2_5_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_3_5_x0;
#pragma HLS STREAM variable = fifo_B_PE_3_5_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_3_5_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_4_5_x0;
#pragma HLS STREAM variable = fifo_B_PE_4_5_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_4_5_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_0_6_x0;
#pragma HLS STREAM variable = fifo_B_PE_0_6_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_0_6_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_1_6_x0;
#pragma HLS STREAM variable = fifo_B_PE_1_6_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_1_6_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_2_6_x0;
#pragma HLS STREAM variable = fifo_B_PE_2_6_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_2_6_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_3_6_x0;
#pragma HLS STREAM variable = fifo_B_PE_3_6_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_3_6_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_4_6_x0;
#pragma HLS STREAM variable = fifo_B_PE_4_6_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_4_6_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_0_7_x0;
#pragma HLS STREAM variable = fifo_B_PE_0_7_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_0_7_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_1_7_x0;
#pragma HLS STREAM variable = fifo_B_PE_1_7_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_1_7_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_2_7_x0;
#pragma HLS STREAM variable = fifo_B_PE_2_7_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_2_7_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_3_7_x0;
#pragma HLS STREAM variable = fifo_B_PE_3_7_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_3_7_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_4_7_x0;
#pragma HLS STREAM variable = fifo_B_PE_4_7_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_4_7_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_0_0_x0;
#pragma HLS STREAM variable = fifo_C_PE_0_0_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_0_0_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_1_0_x0;
#pragma HLS STREAM variable = fifo_C_PE_1_0_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_1_0_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_2_0_x0;
#pragma HLS STREAM variable = fifo_C_PE_2_0_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_2_0_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_3_0_x0;
#pragma HLS STREAM variable = fifo_C_PE_3_0_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_3_0_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_4_0_x0;
#pragma HLS STREAM variable = fifo_C_PE_4_0_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_4_0_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_0_1_x0;
#pragma HLS STREAM variable = fifo_C_PE_0_1_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_0_1_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_1_1_x0;
#pragma HLS STREAM variable = fifo_C_PE_1_1_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_1_1_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_2_1_x0;
#pragma HLS STREAM variable = fifo_C_PE_2_1_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_2_1_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_3_1_x0;
#pragma HLS STREAM variable = fifo_C_PE_3_1_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_3_1_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_4_1_x0;
#pragma HLS STREAM variable = fifo_C_PE_4_1_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_4_1_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_0_2_x0;
#pragma HLS STREAM variable = fifo_C_PE_0_2_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_0_2_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_1_2_x0;
#pragma HLS STREAM variable = fifo_C_PE_1_2_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_1_2_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_2_2_x0;
#pragma HLS STREAM variable = fifo_C_PE_2_2_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_2_2_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_3_2_x0;
#pragma HLS STREAM variable = fifo_C_PE_3_2_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_3_2_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_4_2_x0;
#pragma HLS STREAM variable = fifo_C_PE_4_2_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_4_2_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_0_3_x0;
#pragma HLS STREAM variable = fifo_C_PE_0_3_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_0_3_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_1_3_x0;
#pragma HLS STREAM variable = fifo_C_PE_1_3_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_1_3_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_2_3_x0;
#pragma HLS STREAM variable = fifo_C_PE_2_3_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_2_3_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_3_3_x0;
#pragma HLS STREAM variable = fifo_C_PE_3_3_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_3_3_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_4_3_x0;
#pragma HLS STREAM variable = fifo_C_PE_4_3_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_4_3_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_0_4_x0;
#pragma HLS STREAM variable = fifo_C_PE_0_4_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_0_4_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_1_4_x0;
#pragma HLS STREAM variable = fifo_C_PE_1_4_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_1_4_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_2_4_x0;
#pragma HLS STREAM variable = fifo_C_PE_2_4_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_2_4_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_3_4_x0;
#pragma HLS STREAM variable = fifo_C_PE_3_4_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_3_4_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_4_4_x0;
#pragma HLS STREAM variable = fifo_C_PE_4_4_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_4_4_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_0_5_x0;
#pragma HLS STREAM variable = fifo_C_PE_0_5_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_0_5_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_1_5_x0;
#pragma HLS STREAM variable = fifo_C_PE_1_5_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_1_5_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_2_5_x0;
#pragma HLS STREAM variable = fifo_C_PE_2_5_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_2_5_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_3_5_x0;
#pragma HLS STREAM variable = fifo_C_PE_3_5_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_3_5_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_4_5_x0;
#pragma HLS STREAM variable = fifo_C_PE_4_5_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_4_5_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_0_6_x0;
#pragma HLS STREAM variable = fifo_C_PE_0_6_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_0_6_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_1_6_x0;
#pragma HLS STREAM variable = fifo_C_PE_1_6_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_1_6_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_2_6_x0;
#pragma HLS STREAM variable = fifo_C_PE_2_6_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_2_6_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_3_6_x0;
#pragma HLS STREAM variable = fifo_C_PE_3_6_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_3_6_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_4_6_x0;
#pragma HLS STREAM variable = fifo_C_PE_4_6_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_4_6_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_0_7_x0;
#pragma HLS STREAM variable = fifo_C_PE_0_7_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_0_7_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_1_7_x0;
#pragma HLS STREAM variable = fifo_C_PE_1_7_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_1_7_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_2_7_x0;
#pragma HLS STREAM variable = fifo_C_PE_2_7_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_2_7_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_3_7_x0;
#pragma HLS STREAM variable = fifo_C_PE_3_7_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_3_7_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_4_7_x0;
#pragma HLS STREAM variable = fifo_C_PE_4_7_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_4_7_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_D_drain_PE_0_0_x0;
#pragma HLS STREAM variable = fifo_D_drain_PE_0_0_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_PE_0_0_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_D_drain_PE_1_0_x0;
#pragma HLS STREAM variable = fifo_D_drain_PE_1_0_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_PE_1_0_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_D_drain_PE_2_0_x0;
#pragma HLS STREAM variable = fifo_D_drain_PE_2_0_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_PE_2_0_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_D_drain_PE_3_0_x0;
#pragma HLS STREAM variable = fifo_D_drain_PE_3_0_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_PE_3_0_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_D_drain_PE_0_1_x0;
#pragma HLS STREAM variable = fifo_D_drain_PE_0_1_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_PE_0_1_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_D_drain_PE_1_1_x0;
#pragma HLS STREAM variable = fifo_D_drain_PE_1_1_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_PE_1_1_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_D_drain_PE_2_1_x0;
#pragma HLS STREAM variable = fifo_D_drain_PE_2_1_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_PE_2_1_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_D_drain_PE_3_1_x0;
#pragma HLS STREAM variable = fifo_D_drain_PE_3_1_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_PE_3_1_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_D_drain_PE_0_2_x0;
#pragma HLS STREAM variable = fifo_D_drain_PE_0_2_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_PE_0_2_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_D_drain_PE_1_2_x0;
#pragma HLS STREAM variable = fifo_D_drain_PE_1_2_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_PE_1_2_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_D_drain_PE_2_2_x0;
#pragma HLS STREAM variable = fifo_D_drain_PE_2_2_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_PE_2_2_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_D_drain_PE_3_2_x0;
#pragma HLS STREAM variable = fifo_D_drain_PE_3_2_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_PE_3_2_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_D_drain_PE_0_3_x0;
#pragma HLS STREAM variable = fifo_D_drain_PE_0_3_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_PE_0_3_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_D_drain_PE_1_3_x0;
#pragma HLS STREAM variable = fifo_D_drain_PE_1_3_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_PE_1_3_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_D_drain_PE_2_3_x0;
#pragma HLS STREAM variable = fifo_D_drain_PE_2_3_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_PE_2_3_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_D_drain_PE_3_3_x0;
#pragma HLS STREAM variable = fifo_D_drain_PE_3_3_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_PE_3_3_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_D_drain_PE_0_4_x0;
#pragma HLS STREAM variable = fifo_D_drain_PE_0_4_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_PE_0_4_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_D_drain_PE_1_4_x0;
#pragma HLS STREAM variable = fifo_D_drain_PE_1_4_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_PE_1_4_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_D_drain_PE_2_4_x0;
#pragma HLS STREAM variable = fifo_D_drain_PE_2_4_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_PE_2_4_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_D_drain_PE_3_4_x0;
#pragma HLS STREAM variable = fifo_D_drain_PE_3_4_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_PE_3_4_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_D_drain_PE_0_5_x0;
#pragma HLS STREAM variable = fifo_D_drain_PE_0_5_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_PE_0_5_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_D_drain_PE_1_5_x0;
#pragma HLS STREAM variable = fifo_D_drain_PE_1_5_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_PE_1_5_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_D_drain_PE_2_5_x0;
#pragma HLS STREAM variable = fifo_D_drain_PE_2_5_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_PE_2_5_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_D_drain_PE_3_5_x0;
#pragma HLS STREAM variable = fifo_D_drain_PE_3_5_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_PE_3_5_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_D_drain_PE_0_6_x0;
#pragma HLS STREAM variable = fifo_D_drain_PE_0_6_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_PE_0_6_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_D_drain_PE_1_6_x0;
#pragma HLS STREAM variable = fifo_D_drain_PE_1_6_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_PE_1_6_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_D_drain_PE_2_6_x0;
#pragma HLS STREAM variable = fifo_D_drain_PE_2_6_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_PE_2_6_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_D_drain_PE_3_6_x0;
#pragma HLS STREAM variable = fifo_D_drain_PE_3_6_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_PE_3_6_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_D_drain_PE_0_7_x0;
#pragma HLS STREAM variable = fifo_D_drain_PE_0_7_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_PE_0_7_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_D_drain_PE_1_7_x0;
#pragma HLS STREAM variable = fifo_D_drain_PE_1_7_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_PE_1_7_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_D_drain_PE_2_7_x0;
#pragma HLS STREAM variable = fifo_D_drain_PE_2_7_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_PE_2_7_x0 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_D_drain_PE_3_7_x0;
#pragma HLS STREAM variable = fifo_D_drain_PE_3_7_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_PE_3_7_x0 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_0_0_x0;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_0_0_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_0_0_x0 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_0_1_x0;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_0_1_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_0_1_x0 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_0_2_x0;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_0_2_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_0_2_x0 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_0_3_x0;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_0_3_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_0_3_x0 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_0_4_x0;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_0_4_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_0_4_x0 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_1_0_x0;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_1_0_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_1_0_x0 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_1_1_x0;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_1_1_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_1_1_x0 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_1_2_x0;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_1_2_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_1_2_x0 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_1_3_x0;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_1_3_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_1_3_x0 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_1_4_x0;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_1_4_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_1_4_x0 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_2_0_x0;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_2_0_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_2_0_x0 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_2_1_x0;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_2_1_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_2_1_x0 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_2_2_x0;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_2_2_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_2_2_x0 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_2_3_x0;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_2_3_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_2_3_x0 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_2_4_x0;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_2_4_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_2_4_x0 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_3_0_x0;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_3_0_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_3_0_x0 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_3_1_x0;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_3_1_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_3_1_x0 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_3_2_x0;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_3_2_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_3_2_x0 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_3_3_x0;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_3_3_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_3_3_x0 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_3_4_x0;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_3_4_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_3_4_x0 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_4_0_x0;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_4_0_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_4_0_x0 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_4_1_x0;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_4_1_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_4_1_x0 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_4_2_x0;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_4_2_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_4_2_x0 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_4_3_x0;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_4_3_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_4_3_x0 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_4_4_x0;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_4_4_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_4_4_x0 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_5_0_x0;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_5_0_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_5_0_x0 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_5_1_x0;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_5_1_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_5_1_x0 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_5_2_x0;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_5_2_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_5_2_x0 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_5_3_x0;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_5_3_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_5_3_x0 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_5_4_x0;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_5_4_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_5_4_x0 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_6_0_x0;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_6_0_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_6_0_x0 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_6_1_x0;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_6_1_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_6_1_x0 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_6_2_x0;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_6_2_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_6_2_x0 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_6_3_x0;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_6_3_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_6_3_x0 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_6_4_x0;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_6_4_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_6_4_x0 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_7_0_x0;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_7_0_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_7_0_x0 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_7_1_x0;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_7_1_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_7_1_x0 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_7_2_x0;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_7_2_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_7_2_x0 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_7_3_x0;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_7_3_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_7_3_x0 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_7_4_x0;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_7_4_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_7_4_x0 type = FIFO impl = SRL
    /* D_drain_IO_L2_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L2_out_0_x0;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L2_out_0_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L2_out_0_x0 type = FIFO impl = SRL
    /* D_drain_IO_L2_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L2_out_1_x0;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L2_out_1_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L2_out_1_x0 type = FIFO impl = SRL
    /* D_drain_IO_L2_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L2_out_2_x0;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L2_out_2_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L2_out_2_x0 type = FIFO impl = SRL
    /* D_drain_IO_L2_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L2_out_3_x0;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L2_out_3_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L2_out_3_x0 type = FIFO impl = SRL
    /* D_drain_IO_L2_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L2_out_4_x0;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L2_out_4_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L2_out_4_x0 type = FIFO impl = SRL
    /* D_drain_IO_L2_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L2_out_5_x0;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L2_out_5_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L2_out_5_x0 type = FIFO impl = SRL
    /* D_drain_IO_L2_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L2_out_6_x0;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L2_out_6_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L2_out_6_x0 type = FIFO impl = SRL
    /* D_drain_IO_L2_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L2_out_7_x0;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L2_out_7_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L2_out_7_x0 type = FIFO impl = SRL
    /* D_drain_IO_L2_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L2_out_8_x0;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L2_out_8_x0 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L2_out_8_x0 type = FIFO impl = SRL
    /* FIFO Declaration */

    /* Module Call */
    A_IO_L3_in_serialize_x0(

        /* array */ A,
        /* fifo */ fifo_A_A_IO_L3_in_serialize_x0);
    /* Module Call */

    /* Module Call */
    A_IO_L3_in_x0(

        /* fifo */ fifo_A_A_IO_L3_in_serialize_x0,
        /* fifo */ fifo_A_A_IO_L2_in_0_x0);
    /* Module Call */

    /* Module Call */
    A_IO_L2_in_0_x0(

        /* module id */ 0,
        /* fifo */ fifo_A_A_IO_L2_in_0_x0,
        /* fifo */ fifo_A_A_IO_L2_in_1_x0,
        /* fifo */ fifo_A_PE_0_0_x0);
    /* Module Call */

    /* Module Call */
    A_IO_L2_in_1_x0(

        /* module id */ 1,
        /* fifo */ fifo_A_A_IO_L2_in_1_x0,
        /* fifo */ fifo_A_A_IO_L2_in_2_x0,
        /* fifo */ fifo_A_PE_1_0_x0);
    /* Module Call */

    /* Module Call */
    A_IO_L2_in_2_x0(

        /* module id */ 2,
        /* fifo */ fifo_A_A_IO_L2_in_2_x0,
        /* fifo */ fifo_A_A_IO_L2_in_3_x0,
        /* fifo */ fifo_A_PE_2_0_x0);
    /* Module Call */

    /* Module Call */
    A_IO_L2_in_boundary_x0(

        /* module id */ 3,
        /* fifo */ fifo_A_A_IO_L2_in_3_x0,
        /* fifo */ fifo_A_PE_3_0_x0);
    /* Module Call */

    /* Module Call */
    B_IO_L3_in_serialize_x0(

        /* array */ B,
        /* fifo */ fifo_B_B_IO_L3_in_serialize_x0);
    /* Module Call */

    /* Module Call */
    B_IO_L3_in_x0(

        /* fifo */ fifo_B_B_IO_L3_in_serialize_x0,
        /* fifo */ fifo_B_B_IO_L2_in_0_x0);
    /* Module Call */

    /* Module Call */
    B_IO_L2_in_0_x0(

        /* module id */ 0,
        /* fifo */ fifo_B_B_IO_L2_in_0_x0,
        /* fifo */ fifo_B_B_IO_L2_in_1_x0,
        /* fifo */ fifo_B_PE_0_0_x0);
    /* Module Call */

    /* Module Call */
    B_IO_L2_in_1_x0(

        /* module id */ 1,
        /* fifo */ fifo_B_B_IO_L2_in_1_x0,
        /* fifo */ fifo_B_B_IO_L2_in_2_x0,
        /* fifo */ fifo_B_PE_0_1_x0);
    /* Module Call */

    /* Module Call */
    B_IO_L2_in_2_x0(

        /* module id */ 2,
        /* fifo */ fifo_B_B_IO_L2_in_2_x0,
        /* fifo */ fifo_B_B_IO_L2_in_3_x0,
        /* fifo */ fifo_B_PE_0_2_x0);
    /* Module Call */

    /* Module Call */
    B_IO_L2_in_3_x0(

        /* module id */ 3,
        /* fifo */ fifo_B_B_IO_L2_in_3_x0,
        /* fifo */ fifo_B_B_IO_L2_in_4_x0,
        /* fifo */ fifo_B_PE_0_3_x0);
    /* Module Call */

    /* Module Call */
    B_IO_L2_in_4_x0(

        /* module id */ 4,
        /* fifo */ fifo_B_B_IO_L2_in_4_x0,
        /* fifo */ fifo_B_B_IO_L2_in_5_x0,
        /* fifo */ fifo_B_PE_0_4_x0);
    /* Module Call */

    /* Module Call */
    B_IO_L2_in_5_x0(

        /* module id */ 5,
        /* fifo */ fifo_B_B_IO_L2_in_5_x0,
        /* fifo */ fifo_B_B_IO_L2_in_6_x0,
        /* fifo */ fifo_B_PE_0_5_x0);
    /* Module Call */

    /* Module Call */
    B_IO_L2_in_6_x0(

        /* module id */ 6,
        /* fifo */ fifo_B_B_IO_L2_in_6_x0,
        /* fifo */ fifo_B_B_IO_L2_in_7_x0,
        /* fifo */ fifo_B_PE_0_6_x0);
    /* Module Call */

    /* Module Call */
    B_IO_L2_in_boundary_x0(

        /* module id */ 7,
        /* fifo */ fifo_B_B_IO_L2_in_7_x0,
        /* fifo */ fifo_B_PE_0_7_x0);
    /* Module Call */

    /* Module Call */
    C_IO_L3_in_serialize_x0(

        /* array */ C,
        /* fifo */ fifo_C_C_IO_L3_in_serialize_x0);
    /* Module Call */

    /* Module Call */
    C_IO_L3_in_x0(

        /* fifo */ fifo_C_C_IO_L3_in_serialize_x0,
        /* fifo */ fifo_C_C_IO_L2_in_0_x0);
    /* Module Call */

    /* Module Call */
    C_IO_L2_in_0_x0(

        /* module id */ 0,
        /* fifo */ fifo_C_C_IO_L2_in_0_x0,
        /* fifo */ fifo_C_C_IO_L2_in_1_x0,
        /* fifo */ fifo_C_PE_0_0_x0);
    /* Module Call */

    /* Module Call */
    C_IO_L2_in_1_x0(

        /* module id */ 1,
        /* fifo */ fifo_C_C_IO_L2_in_1_x0,
        /* fifo */ fifo_C_C_IO_L2_in_2_x0,
        /* fifo */ fifo_C_PE_0_1_x0);
    /* Module Call */

    /* Module Call */
    C_IO_L2_in_2_x0(

        /* module id */ 2,
        /* fifo */ fifo_C_C_IO_L2_in_2_x0,
        /* fifo */ fifo_C_C_IO_L2_in_3_x0,
        /* fifo */ fifo_C_PE_0_2_x0);
    /* Module Call */

    /* Module Call */
    C_IO_L2_in_3_x0(

        /* module id */ 3,
        /* fifo */ fifo_C_C_IO_L2_in_3_x0,
        /* fifo */ fifo_C_C_IO_L2_in_4_x0,
        /* fifo */ fifo_C_PE_0_3_x0);
    /* Module Call */

    /* Module Call */
    C_IO_L2_in_4_x0(

        /* module id */ 4,
        /* fifo */ fifo_C_C_IO_L2_in_4_x0,
        /* fifo */ fifo_C_C_IO_L2_in_5_x0,
        /* fifo */ fifo_C_PE_0_4_x0);
    /* Module Call */

    /* Module Call */
    C_IO_L2_in_5_x0(

        /* module id */ 5,
        /* fifo */ fifo_C_C_IO_L2_in_5_x0,
        /* fifo */ fifo_C_C_IO_L2_in_6_x0,
        /* fifo */ fifo_C_PE_0_5_x0);
    /* Module Call */

    /* Module Call */
    C_IO_L2_in_6_x0(

        /* module id */ 6,
        /* fifo */ fifo_C_C_IO_L2_in_6_x0,
        /* fifo */ fifo_C_C_IO_L2_in_7_x0,
        /* fifo */ fifo_C_PE_0_6_x0);
    /* Module Call */

    /* Module Call */
    C_IO_L2_in_boundary_x0(

        /* module id */ 7,
        /* fifo */ fifo_C_C_IO_L2_in_7_x0,
        /* fifo */ fifo_C_PE_0_7_x0);
    /* Module Call */

    /* Module Call */
    PE_wrapper_0_0_x0(

        /* module id */ 0,
        /* module id */ 0,
        /* fifo */ fifo_A_PE_0_0_x0,
        /* fifo */ fifo_A_PE_0_1_x0,
        /* fifo */ fifo_B_PE_0_0_x0,
        /* fifo */ fifo_B_PE_1_0_x0,
        /* fifo */ fifo_C_PE_0_0_x0,
        /* fifo */ fifo_C_PE_1_0_x0,
        /* fifo */ fifo_D_drain_PE_0_0_x0);
    /* Module Call */

    /* Module Call */
    PE_wrapper_0_1_x0(

        /* module id */ 0,
        /* module id */ 1,
        /* fifo */ fifo_A_PE_0_1_x0,
        /* fifo */ fifo_A_PE_0_2_x0,
        /* fifo */ fifo_B_PE_0_1_x0,
        /* fifo */ fifo_B_PE_1_1_x0,
        /* fifo */ fifo_C_PE_0_1_x0,
        /* fifo */ fifo_C_PE_1_1_x0,
        /* fifo */ fifo_D_drain_PE_0_1_x0);
    /* Module Call */

    /* Module Call */
    PE_wrapper_0_2_x0(

        /* module id */ 0,
        /* module id */ 2,
        /* fifo */ fifo_A_PE_0_2_x0,
        /* fifo */ fifo_A_PE_0_3_x0,
        /* fifo */ fifo_B_PE_0_2_x0,
        /* fifo */ fifo_B_PE_1_2_x0,
        /* fifo */ fifo_C_PE_0_2_x0,
        /* fifo */ fifo_C_PE_1_2_x0,
        /* fifo */ fifo_D_drain_PE_0_2_x0);
    /* Module Call */

    /* Module Call */
    PE_wrapper_0_3_x0(

        /* module id */ 0,
        /* module id */ 3,
        /* fifo */ fifo_A_PE_0_3_x0,
        /* fifo */ fifo_A_PE_0_4_x0,
        /* fifo */ fifo_B_PE_0_3_x0,
        /* fifo */ fifo_B_PE_1_3_x0,
        /* fifo */ fifo_C_PE_0_3_x0,
        /* fifo */ fifo_C_PE_1_3_x0,
        /* fifo */ fifo_D_drain_PE_0_3_x0);
    /* Module Call */

    /* Module Call */
    PE_wrapper_0_4_x0(

        /* module id */ 0,
        /* module id */ 4,
        /* fifo */ fifo_A_PE_0_4_x0,
        /* fifo */ fifo_A_PE_0_5_x0,
        /* fifo */ fifo_B_PE_0_4_x0,
        /* fifo */ fifo_B_PE_1_4_x0,
        /* fifo */ fifo_C_PE_0_4_x0,
        /* fifo */ fifo_C_PE_1_4_x0,
        /* fifo */ fifo_D_drain_PE_0_4_x0);
    /* Module Call */

    /* Module Call */
    PE_wrapper_0_5_x0(

        /* module id */ 0,
        /* module id */ 5,
        /* fifo */ fifo_A_PE_0_5_x0,
        /* fifo */ fifo_A_PE_0_6_x0,
        /* fifo */ fifo_B_PE_0_5_x0,
        /* fifo */ fifo_B_PE_1_5_x0,
        /* fifo */ fifo_C_PE_0_5_x0,
        /* fifo */ fifo_C_PE_1_5_x0,
        /* fifo */ fifo_D_drain_PE_0_5_x0);
    /* Module Call */

    /* Module Call */
    PE_wrapper_0_6_x0(

        /* module id */ 0,
        /* module id */ 6,
        /* fifo */ fifo_A_PE_0_6_x0,
        /* fifo */ fifo_A_PE_0_7_x0,
        /* fifo */ fifo_B_PE_0_6_x0,
        /* fifo */ fifo_B_PE_1_6_x0,
        /* fifo */ fifo_C_PE_0_6_x0,
        /* fifo */ fifo_C_PE_1_6_x0,
        /* fifo */ fifo_D_drain_PE_0_6_x0);
    /* Module Call */

    /* Module Call */
    PE_wrapper_0_7_x0(

        /* module id */ 0,
        /* module id */ 7,
        /* fifo */ fifo_A_PE_0_7_x0,
        /* fifo */ fifo_A_PE_0_8_x0,
        /* fifo */ fifo_B_PE_0_7_x0,
        /* fifo */ fifo_B_PE_1_7_x0,
        /* fifo */ fifo_C_PE_0_7_x0,
        /* fifo */ fifo_C_PE_1_7_x0,
        /* fifo */ fifo_D_drain_PE_0_7_x0);
    /* Module Call */

    /* Module Call */
    PE_wrapper_1_0_x0(

        /* module id */ 1,
        /* module id */ 0,
        /* fifo */ fifo_A_PE_1_0_x0,
        /* fifo */ fifo_A_PE_1_1_x0,
        /* fifo */ fifo_B_PE_1_0_x0,
        /* fifo */ fifo_B_PE_2_0_x0,
        /* fifo */ fifo_C_PE_1_0_x0,
        /* fifo */ fifo_C_PE_2_0_x0,
        /* fifo */ fifo_D_drain_PE_1_0_x0);
    /* Module Call */

    /* Module Call */
    PE_wrapper_1_1_x0(

        /* module id */ 1,
        /* module id */ 1,
        /* fifo */ fifo_A_PE_1_1_x0,
        /* fifo */ fifo_A_PE_1_2_x0,
        /* fifo */ fifo_B_PE_1_1_x0,
        /* fifo */ fifo_B_PE_2_1_x0,
        /* fifo */ fifo_C_PE_1_1_x0,
        /* fifo */ fifo_C_PE_2_1_x0,
        /* fifo */ fifo_D_drain_PE_1_1_x0);
    /* Module Call */

    /* Module Call */
    PE_wrapper_1_2_x0(

        /* module id */ 1,
        /* module id */ 2,
        /* fifo */ fifo_A_PE_1_2_x0,
        /* fifo */ fifo_A_PE_1_3_x0,
        /* fifo */ fifo_B_PE_1_2_x0,
        /* fifo */ fifo_B_PE_2_2_x0,
        /* fifo */ fifo_C_PE_1_2_x0,
        /* fifo */ fifo_C_PE_2_2_x0,
        /* fifo */ fifo_D_drain_PE_1_2_x0);
    /* Module Call */

    /* Module Call */
    PE_wrapper_1_3_x0(

        /* module id */ 1,
        /* module id */ 3,
        /* fifo */ fifo_A_PE_1_3_x0,
        /* fifo */ fifo_A_PE_1_4_x0,
        /* fifo */ fifo_B_PE_1_3_x0,
        /* fifo */ fifo_B_PE_2_3_x0,
        /* fifo */ fifo_C_PE_1_3_x0,
        /* fifo */ fifo_C_PE_2_3_x0,
        /* fifo */ fifo_D_drain_PE_1_3_x0);
    /* Module Call */

    /* Module Call */
    PE_wrapper_1_4_x0(

        /* module id */ 1,
        /* module id */ 4,
        /* fifo */ fifo_A_PE_1_4_x0,
        /* fifo */ fifo_A_PE_1_5_x0,
        /* fifo */ fifo_B_PE_1_4_x0,
        /* fifo */ fifo_B_PE_2_4_x0,
        /* fifo */ fifo_C_PE_1_4_x0,
        /* fifo */ fifo_C_PE_2_4_x0,
        /* fifo */ fifo_D_drain_PE_1_4_x0);
    /* Module Call */

    /* Module Call */
    PE_wrapper_1_5_x0(

        /* module id */ 1,
        /* module id */ 5,
        /* fifo */ fifo_A_PE_1_5_x0,
        /* fifo */ fifo_A_PE_1_6_x0,
        /* fifo */ fifo_B_PE_1_5_x0,
        /* fifo */ fifo_B_PE_2_5_x0,
        /* fifo */ fifo_C_PE_1_5_x0,
        /* fifo */ fifo_C_PE_2_5_x0,
        /* fifo */ fifo_D_drain_PE_1_5_x0);
    /* Module Call */

    /* Module Call */
    PE_wrapper_1_6_x0(

        /* module id */ 1,
        /* module id */ 6,
        /* fifo */ fifo_A_PE_1_6_x0,
        /* fifo */ fifo_A_PE_1_7_x0,
        /* fifo */ fifo_B_PE_1_6_x0,
        /* fifo */ fifo_B_PE_2_6_x0,
        /* fifo */ fifo_C_PE_1_6_x0,
        /* fifo */ fifo_C_PE_2_6_x0,
        /* fifo */ fifo_D_drain_PE_1_6_x0);
    /* Module Call */

    /* Module Call */
    PE_wrapper_1_7_x0(

        /* module id */ 1,
        /* module id */ 7,
        /* fifo */ fifo_A_PE_1_7_x0,
        /* fifo */ fifo_A_PE_1_8_x0,
        /* fifo */ fifo_B_PE_1_7_x0,
        /* fifo */ fifo_B_PE_2_7_x0,
        /* fifo */ fifo_C_PE_1_7_x0,
        /* fifo */ fifo_C_PE_2_7_x0,
        /* fifo */ fifo_D_drain_PE_1_7_x0);
    /* Module Call */

    /* Module Call */
    PE_wrapper_2_0_x0(

        /* module id */ 2,
        /* module id */ 0,
        /* fifo */ fifo_A_PE_2_0_x0,
        /* fifo */ fifo_A_PE_2_1_x0,
        /* fifo */ fifo_B_PE_2_0_x0,
        /* fifo */ fifo_B_PE_3_0_x0,
        /* fifo */ fifo_C_PE_2_0_x0,
        /* fifo */ fifo_C_PE_3_0_x0,
        /* fifo */ fifo_D_drain_PE_2_0_x0);
    /* Module Call */

    /* Module Call */
    PE_wrapper_2_1_x0(

        /* module id */ 2,
        /* module id */ 1,
        /* fifo */ fifo_A_PE_2_1_x0,
        /* fifo */ fifo_A_PE_2_2_x0,
        /* fifo */ fifo_B_PE_2_1_x0,
        /* fifo */ fifo_B_PE_3_1_x0,
        /* fifo */ fifo_C_PE_2_1_x0,
        /* fifo */ fifo_C_PE_3_1_x0,
        /* fifo */ fifo_D_drain_PE_2_1_x0);
    /* Module Call */

    /* Module Call */
    PE_wrapper_2_2_x0(

        /* module id */ 2,
        /* module id */ 2,
        /* fifo */ fifo_A_PE_2_2_x0,
        /* fifo */ fifo_A_PE_2_3_x0,
        /* fifo */ fifo_B_PE_2_2_x0,
        /* fifo */ fifo_B_PE_3_2_x0,
        /* fifo */ fifo_C_PE_2_2_x0,
        /* fifo */ fifo_C_PE_3_2_x0,
        /* fifo */ fifo_D_drain_PE_2_2_x0);
    /* Module Call */

    /* Module Call */
    PE_wrapper_2_3_x0(

        /* module id */ 2,
        /* module id */ 3,
        /* fifo */ fifo_A_PE_2_3_x0,
        /* fifo */ fifo_A_PE_2_4_x0,
        /* fifo */ fifo_B_PE_2_3_x0,
        /* fifo */ fifo_B_PE_3_3_x0,
        /* fifo */ fifo_C_PE_2_3_x0,
        /* fifo */ fifo_C_PE_3_3_x0,
        /* fifo */ fifo_D_drain_PE_2_3_x0);
    /* Module Call */

    /* Module Call */
    PE_wrapper_2_4_x0(

        /* module id */ 2,
        /* module id */ 4,
        /* fifo */ fifo_A_PE_2_4_x0,
        /* fifo */ fifo_A_PE_2_5_x0,
        /* fifo */ fifo_B_PE_2_4_x0,
        /* fifo */ fifo_B_PE_3_4_x0,
        /* fifo */ fifo_C_PE_2_4_x0,
        /* fifo */ fifo_C_PE_3_4_x0,
        /* fifo */ fifo_D_drain_PE_2_4_x0);
    /* Module Call */

    /* Module Call */
    PE_wrapper_2_5_x0(

        /* module id */ 2,
        /* module id */ 5,
        /* fifo */ fifo_A_PE_2_5_x0,
        /* fifo */ fifo_A_PE_2_6_x0,
        /* fifo */ fifo_B_PE_2_5_x0,
        /* fifo */ fifo_B_PE_3_5_x0,
        /* fifo */ fifo_C_PE_2_5_x0,
        /* fifo */ fifo_C_PE_3_5_x0,
        /* fifo */ fifo_D_drain_PE_2_5_x0);
    /* Module Call */

    /* Module Call */
    PE_wrapper_2_6_x0(

        /* module id */ 2,
        /* module id */ 6,
        /* fifo */ fifo_A_PE_2_6_x0,
        /* fifo */ fifo_A_PE_2_7_x0,
        /* fifo */ fifo_B_PE_2_6_x0,
        /* fifo */ fifo_B_PE_3_6_x0,
        /* fifo */ fifo_C_PE_2_6_x0,
        /* fifo */ fifo_C_PE_3_6_x0,
        /* fifo */ fifo_D_drain_PE_2_6_x0);
    /* Module Call */

    /* Module Call */
    PE_wrapper_2_7_x0(

        /* module id */ 2,
        /* module id */ 7,
        /* fifo */ fifo_A_PE_2_7_x0,
        /* fifo */ fifo_A_PE_2_8_x0,
        /* fifo */ fifo_B_PE_2_7_x0,
        /* fifo */ fifo_B_PE_3_7_x0,
        /* fifo */ fifo_C_PE_2_7_x0,
        /* fifo */ fifo_C_PE_3_7_x0,
        /* fifo */ fifo_D_drain_PE_2_7_x0);
    /* Module Call */

    /* Module Call */
    PE_wrapper_3_0_x0(

        /* module id */ 3,
        /* module id */ 0,
        /* fifo */ fifo_A_PE_3_0_x0,
        /* fifo */ fifo_A_PE_3_1_x0,
        /* fifo */ fifo_B_PE_3_0_x0,
        /* fifo */ fifo_B_PE_4_0_x0,
        /* fifo */ fifo_C_PE_3_0_x0,
        /* fifo */ fifo_C_PE_4_0_x0,
        /* fifo */ fifo_D_drain_PE_3_0_x0);
    /* Module Call */

    /* Module Call */
    PE_wrapper_3_1_x0(

        /* module id */ 3,
        /* module id */ 1,
        /* fifo */ fifo_A_PE_3_1_x0,
        /* fifo */ fifo_A_PE_3_2_x0,
        /* fifo */ fifo_B_PE_3_1_x0,
        /* fifo */ fifo_B_PE_4_1_x0,
        /* fifo */ fifo_C_PE_3_1_x0,
        /* fifo */ fifo_C_PE_4_1_x0,
        /* fifo */ fifo_D_drain_PE_3_1_x0);
    /* Module Call */

    /* Module Call */
    PE_wrapper_3_2_x0(

        /* module id */ 3,
        /* module id */ 2,
        /* fifo */ fifo_A_PE_3_2_x0,
        /* fifo */ fifo_A_PE_3_3_x0,
        /* fifo */ fifo_B_PE_3_2_x0,
        /* fifo */ fifo_B_PE_4_2_x0,
        /* fifo */ fifo_C_PE_3_2_x0,
        /* fifo */ fifo_C_PE_4_2_x0,
        /* fifo */ fifo_D_drain_PE_3_2_x0);
    /* Module Call */

    /* Module Call */
    PE_wrapper_3_3_x0(

        /* module id */ 3,
        /* module id */ 3,
        /* fifo */ fifo_A_PE_3_3_x0,
        /* fifo */ fifo_A_PE_3_4_x0,
        /* fifo */ fifo_B_PE_3_3_x0,
        /* fifo */ fifo_B_PE_4_3_x0,
        /* fifo */ fifo_C_PE_3_3_x0,
        /* fifo */ fifo_C_PE_4_3_x0,
        /* fifo */ fifo_D_drain_PE_3_3_x0);
    /* Module Call */

    /* Module Call */
    PE_wrapper_3_4_x0(

        /* module id */ 3,
        /* module id */ 4,
        /* fifo */ fifo_A_PE_3_4_x0,
        /* fifo */ fifo_A_PE_3_5_x0,
        /* fifo */ fifo_B_PE_3_4_x0,
        /* fifo */ fifo_B_PE_4_4_x0,
        /* fifo */ fifo_C_PE_3_4_x0,
        /* fifo */ fifo_C_PE_4_4_x0,
        /* fifo */ fifo_D_drain_PE_3_4_x0);
    /* Module Call */

    /* Module Call */
    PE_wrapper_3_5_x0(

        /* module id */ 3,
        /* module id */ 5,
        /* fifo */ fifo_A_PE_3_5_x0,
        /* fifo */ fifo_A_PE_3_6_x0,
        /* fifo */ fifo_B_PE_3_5_x0,
        /* fifo */ fifo_B_PE_4_5_x0,
        /* fifo */ fifo_C_PE_3_5_x0,
        /* fifo */ fifo_C_PE_4_5_x0,
        /* fifo */ fifo_D_drain_PE_3_5_x0);
    /* Module Call */

    /* Module Call */
    PE_wrapper_3_6_x0(

        /* module id */ 3,
        /* module id */ 6,
        /* fifo */ fifo_A_PE_3_6_x0,
        /* fifo */ fifo_A_PE_3_7_x0,
        /* fifo */ fifo_B_PE_3_6_x0,
        /* fifo */ fifo_B_PE_4_6_x0,
        /* fifo */ fifo_C_PE_3_6_x0,
        /* fifo */ fifo_C_PE_4_6_x0,
        /* fifo */ fifo_D_drain_PE_3_6_x0);
    /* Module Call */

    /* Module Call */
    PE_wrapper_3_7_x0(

        /* module id */ 3,
        /* module id */ 7,
        /* fifo */ fifo_A_PE_3_7_x0,
        /* fifo */ fifo_A_PE_3_8_x0,
        /* fifo */ fifo_B_PE_3_7_x0,
        /* fifo */ fifo_B_PE_4_7_x0,
        /* fifo */ fifo_C_PE_3_7_x0,
        /* fifo */ fifo_C_PE_4_7_x0,
        /* fifo */ fifo_D_drain_PE_3_7_x0);
    /* Module Call */

    /* Module Call */
    A_PE_dummy_in_0_x0(

        /* module id */ 0,
        /* module id */ 7,
        /* fifo */ fifo_A_PE_0_8_x0);
    /* Module Call */

    /* Module Call */
    A_PE_dummy_in_1_x0(

        /* module id */ 1,
        /* module id */ 7,
        /* fifo */ fifo_A_PE_1_8_x0);
    /* Module Call */

    /* Module Call */
    A_PE_dummy_in_2_x0(

        /* module id */ 2,
        /* module id */ 7,
        /* fifo */ fifo_A_PE_2_8_x0);
    /* Module Call */

    /* Module Call */
    A_PE_dummy_in_3_x0(

        /* module id */ 3,
        /* module id */ 7,
        /* fifo */ fifo_A_PE_3_8_x0);
    /* Module Call */

    /* Module Call */
    B_PE_dummy_in_0_x0(

        /* module id */ 3,
        /* module id */ 0,
        /* fifo */ fifo_B_PE_4_0_x0);
    /* Module Call */

    /* Module Call */
    B_PE_dummy_in_1_x0(

        /* module id */ 3,
        /* module id */ 1,
        /* fifo */ fifo_B_PE_4_1_x0);
    /* Module Call */

    /* Module Call */
    B_PE_dummy_in_2_x0(

        /* module id */ 3,
        /* module id */ 2,
        /* fifo */ fifo_B_PE_4_2_x0);
    /* Module Call */

    /* Module Call */
    B_PE_dummy_in_3_x0(

        /* module id */ 3,
        /* module id */ 3,
        /* fifo */ fifo_B_PE_4_3_x0);
    /* Module Call */

    /* Module Call */
    B_PE_dummy_in_4_x0(

        /* module id */ 3,
        /* module id */ 4,
        /* fifo */ fifo_B_PE_4_4_x0);
    /* Module Call */

    /* Module Call */
    B_PE_dummy_in_5_x0(

        /* module id */ 3,
        /* module id */ 5,
        /* fifo */ fifo_B_PE_4_5_x0);
    /* Module Call */

    /* Module Call */
    B_PE_dummy_in_6_x0(

        /* module id */ 3,
        /* module id */ 6,
        /* fifo */ fifo_B_PE_4_6_x0);
    /* Module Call */

    /* Module Call */
    B_PE_dummy_in_7_x0(

        /* module id */ 3,
        /* module id */ 7,
        /* fifo */ fifo_B_PE_4_7_x0);
    /* Module Call */

    /* Module Call */
    C_PE_dummy_in_0_x0(

        /* module id */ 3,
        /* module id */ 0,
        /* fifo */ fifo_C_PE_4_0_x0);
    /* Module Call */

    /* Module Call */
    C_PE_dummy_in_1_x0(

        /* module id */ 3,
        /* module id */ 1,
        /* fifo */ fifo_C_PE_4_1_x0);
    /* Module Call */

    /* Module Call */
    C_PE_dummy_in_2_x0(

        /* module id */ 3,
        /* module id */ 2,
        /* fifo */ fifo_C_PE_4_2_x0);
    /* Module Call */

    /* Module Call */
    C_PE_dummy_in_3_x0(

        /* module id */ 3,
        /* module id */ 3,
        /* fifo */ fifo_C_PE_4_3_x0);
    /* Module Call */

    /* Module Call */
    C_PE_dummy_in_4_x0(

        /* module id */ 3,
        /* module id */ 4,
        /* fifo */ fifo_C_PE_4_4_x0);
    /* Module Call */

    /* Module Call */
    C_PE_dummy_in_5_x0(

        /* module id */ 3,
        /* module id */ 5,
        /* fifo */ fifo_C_PE_4_5_x0);
    /* Module Call */

    /* Module Call */
    C_PE_dummy_in_6_x0(

        /* module id */ 3,
        /* module id */ 6,
        /* fifo */ fifo_C_PE_4_6_x0);
    /* Module Call */

    /* Module Call */
    C_PE_dummy_in_7_x0(

        /* module id */ 3,
        /* module id */ 7,
        /* fifo */ fifo_C_PE_4_7_x0);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L1_out_boundary_wrapper_0_x0(

        /* module id */ 0,
        /* module id */ 3,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_0_3_x0,
        /* fifo */ fifo_D_drain_PE_3_0_x0);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L1_out_wrapper_0_2_x0(

        /* module id */ 0,
        /* module id */ 2,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_0_3_x0,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_0_2_x0,
        /* fifo */ fifo_D_drain_PE_2_0_x0);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L1_out_wrapper_0_1_x0(

        /* module id */ 0,
        /* module id */ 1,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_0_2_x0,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_0_1_x0,
        /* fifo */ fifo_D_drain_PE_1_0_x0);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L1_out_wrapper_0_0_x0(

        /* module id */ 0,
        /* module id */ 0,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_0_1_x0,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_0_0_x0,
        /* fifo */ fifo_D_drain_PE_0_0_x0);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L1_out_boundary_wrapper_1_x0(

        /* module id */ 1,
        /* module id */ 3,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_1_3_x0,
        /* fifo */ fifo_D_drain_PE_3_1_x0);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L1_out_wrapper_1_2_x0(

        /* module id */ 1,
        /* module id */ 2,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_1_3_x0,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_1_2_x0,
        /* fifo */ fifo_D_drain_PE_2_1_x0);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L1_out_wrapper_1_1_x0(

        /* module id */ 1,
        /* module id */ 1,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_1_2_x0,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_1_1_x0,
        /* fifo */ fifo_D_drain_PE_1_1_x0);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L1_out_wrapper_1_0_x0(

        /* module id */ 1,
        /* module id */ 0,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_1_1_x0,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_1_0_x0,
        /* fifo */ fifo_D_drain_PE_0_1_x0);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L1_out_boundary_wrapper_2_x0(

        /* module id */ 2,
        /* module id */ 3,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_2_3_x0,
        /* fifo */ fifo_D_drain_PE_3_2_x0);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L1_out_wrapper_2_2_x0(

        /* module id */ 2,
        /* module id */ 2,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_2_3_x0,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_2_2_x0,
        /* fifo */ fifo_D_drain_PE_2_2_x0);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L1_out_wrapper_2_1_x0(

        /* module id */ 2,
        /* module id */ 1,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_2_2_x0,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_2_1_x0,
        /* fifo */ fifo_D_drain_PE_1_2_x0);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L1_out_wrapper_2_0_x0(

        /* module id */ 2,
        /* module id */ 0,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_2_1_x0,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_2_0_x0,
        /* fifo */ fifo_D_drain_PE_0_2_x0);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L1_out_boundary_wrapper_3_x0(

        /* module id */ 3,
        /* module id */ 3,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_3_3_x0,
        /* fifo */ fifo_D_drain_PE_3_3_x0);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L1_out_wrapper_3_2_x0(

        /* module id */ 3,
        /* module id */ 2,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_3_3_x0,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_3_2_x0,
        /* fifo */ fifo_D_drain_PE_2_3_x0);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L1_out_wrapper_3_1_x0(

        /* module id */ 3,
        /* module id */ 1,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_3_2_x0,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_3_1_x0,
        /* fifo */ fifo_D_drain_PE_1_3_x0);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L1_out_wrapper_3_0_x0(

        /* module id */ 3,
        /* module id */ 0,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_3_1_x0,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_3_0_x0,
        /* fifo */ fifo_D_drain_PE_0_3_x0);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L1_out_boundary_wrapper_4_x0(

        /* module id */ 4,
        /* module id */ 3,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_4_3_x0,
        /* fifo */ fifo_D_drain_PE_3_4_x0);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L1_out_wrapper_4_2_x0(

        /* module id */ 4,
        /* module id */ 2,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_4_3_x0,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_4_2_x0,
        /* fifo */ fifo_D_drain_PE_2_4_x0);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L1_out_wrapper_4_1_x0(

        /* module id */ 4,
        /* module id */ 1,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_4_2_x0,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_4_1_x0,
        /* fifo */ fifo_D_drain_PE_1_4_x0);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L1_out_wrapper_4_0_x0(

        /* module id */ 4,
        /* module id */ 0,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_4_1_x0,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_4_0_x0,
        /* fifo */ fifo_D_drain_PE_0_4_x0);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L1_out_boundary_wrapper_5_x0(

        /* module id */ 5,
        /* module id */ 3,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_5_3_x0,
        /* fifo */ fifo_D_drain_PE_3_5_x0);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L1_out_wrapper_5_2_x0(

        /* module id */ 5,
        /* module id */ 2,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_5_3_x0,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_5_2_x0,
        /* fifo */ fifo_D_drain_PE_2_5_x0);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L1_out_wrapper_5_1_x0(

        /* module id */ 5,
        /* module id */ 1,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_5_2_x0,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_5_1_x0,
        /* fifo */ fifo_D_drain_PE_1_5_x0);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L1_out_wrapper_5_0_x0(

        /* module id */ 5,
        /* module id */ 0,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_5_1_x0,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_5_0_x0,
        /* fifo */ fifo_D_drain_PE_0_5_x0);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L1_out_boundary_wrapper_6_x0(

        /* module id */ 6,
        /* module id */ 3,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_6_3_x0,
        /* fifo */ fifo_D_drain_PE_3_6_x0);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L1_out_wrapper_6_2_x0(

        /* module id */ 6,
        /* module id */ 2,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_6_3_x0,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_6_2_x0,
        /* fifo */ fifo_D_drain_PE_2_6_x0);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L1_out_wrapper_6_1_x0(

        /* module id */ 6,
        /* module id */ 1,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_6_2_x0,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_6_1_x0,
        /* fifo */ fifo_D_drain_PE_1_6_x0);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L1_out_wrapper_6_0_x0(

        /* module id */ 6,
        /* module id */ 0,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_6_1_x0,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_6_0_x0,
        /* fifo */ fifo_D_drain_PE_0_6_x0);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L1_out_boundary_wrapper_7_x0(

        /* module id */ 7,
        /* module id */ 3,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_7_3_x0,
        /* fifo */ fifo_D_drain_PE_3_7_x0);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L1_out_wrapper_7_2_x0(

        /* module id */ 7,
        /* module id */ 2,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_7_3_x0,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_7_2_x0,
        /* fifo */ fifo_D_drain_PE_2_7_x0);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L1_out_wrapper_7_1_x0(

        /* module id */ 7,
        /* module id */ 1,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_7_2_x0,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_7_1_x0,
        /* fifo */ fifo_D_drain_PE_1_7_x0);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L1_out_wrapper_7_0_x0(

        /* module id */ 7,
        /* module id */ 0,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_7_1_x0,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_7_0_x0,
        /* fifo */ fifo_D_drain_PE_0_7_x0);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L2_out_boundary_x0(

        /* module id */ 7,
        /* fifo */ fifo_D_drain_D_drain_IO_L2_out_7_x0,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_7_0_x0);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L2_out_6_x0(

        /* module id */ 6,
        /* fifo */ fifo_D_drain_D_drain_IO_L2_out_7_x0,
        /* fifo */ fifo_D_drain_D_drain_IO_L2_out_6_x0,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_6_0_x0);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L2_out_5_x0(

        /* module id */ 5,
        /* fifo */ fifo_D_drain_D_drain_IO_L2_out_6_x0,
        /* fifo */ fifo_D_drain_D_drain_IO_L2_out_5_x0,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_5_0_x0);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L2_out_4_x0(

        /* module id */ 4,
        /* fifo */ fifo_D_drain_D_drain_IO_L2_out_5_x0,
        /* fifo */ fifo_D_drain_D_drain_IO_L2_out_4_x0,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_4_0_x0);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L2_out_3_x0(

        /* module id */ 3,
        /* fifo */ fifo_D_drain_D_drain_IO_L2_out_4_x0,
        /* fifo */ fifo_D_drain_D_drain_IO_L2_out_3_x0,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_3_0_x0);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L2_out_2_x0(

        /* module id */ 2,
        /* fifo */ fifo_D_drain_D_drain_IO_L2_out_3_x0,
        /* fifo */ fifo_D_drain_D_drain_IO_L2_out_2_x0,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_2_0_x0);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L2_out_1_x0(

        /* module id */ 1,
        /* fifo */ fifo_D_drain_D_drain_IO_L2_out_2_x0,
        /* fifo */ fifo_D_drain_D_drain_IO_L2_out_1_x0,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_1_0_x0);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L2_out_0_x0(

        /* module id */ 0,
        /* fifo */ fifo_D_drain_D_drain_IO_L2_out_1_x0,
        /* fifo */ fifo_D_drain_D_drain_IO_L2_out_0_x0,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_0_0_x0);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L3_out_x0(

        /* fifo */ fifo_D_drain_D_drain_IO_L3_out_serialize_x0,
        /* fifo */ fifo_D_drain_D_drain_IO_L2_out_0_x0);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L3_out_serialize_x0(

        /* array */ D,
        /* fifo */ fifo_D_drain_D_drain_IO_L3_out_serialize_x0);
    /* Module Call */
}
/* Module Definition */
void A_IO_L3_in_x1(hls::stream<A_t16> &fifo_A_in, hls::stream<A_t16> &fifo_A_local_out) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    /* Variable Declaration */

A_IO_L3_in_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
A_IO_L3_in_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
A_IO_L3_in_x1_loop_3:             for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                // array
                // io_L3
A_IO_L3_in_x1_loop_4:                 for (ap_uint<3> c3 = 0; c3 <= 3; c3 += 1) {
                    // io_L2
A_IO_L3_in_x1_loop_5:                     for (ap_uint<5> c4 = 0; c4 <= 15; c4 += 1)
A_IO_L3_in_x1_loop_6:                         for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1) {
                            // access_coalesce
                            // access_serialize
A_IO_L3_in_x1_loop_7:                             for (ap_uint<5> c6 = 0; c6 <= 15; c6 += 1) {

                                {
                                    A_t16 in_data;
                                    A_t16 out_data;
                                    in_data = fifo_A_in.read();
                                    out_data = in_data;
                                    fifo_A_local_out.write(out_data);
                                }
                            }
                        }
                }
            }
}
/* Module Definition */

/* Module Definition */
void A_IO_L3_in_serialize_x1(A_t16 *A, hls::stream<A_t16> &fifo_A_local_out) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    /* Variable Declaration */

A_IO_L3_in_serialize_x1_loop_1:     for (ap_uint<24> i = 0; i < 1024; i++) {

        A_t16 fifo_data;
        fifo_data = A[i];
        fifo_A_local_out.write(fifo_data);
    }
}
/* Module Definition */

/* Module Definition */
void A_IO_L2_in_0_x1(int idx, hls::stream<A_t16> &fifo_A_in, hls::stream<A_t16> &fifo_A_out, hls::stream<A_t8> &fifo_A_local_out) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx; // module id
    A_t16 local_A_ping[16][2][16];
    A_t16 local_A_pong[16][2][16];
    bool arb = 0;
    bool inter_trans_en = 1;
    bool intra_trans_en = 0;
    int c0, c0_prev;
    int c1, c1_prev;
    int c2, c2_prev;
    /* Variable Declaration */

A_IO_L2_in_0_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
A_IO_L2_in_0_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
A_IO_L2_in_0_x1_loop_3:             for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                // array
                // io_L3
                {
                    if (arb == 0) {
                        if (inter_trans_en) {
A_IO_L2_in_0_x1_loop_4:                             for (ap_uint<3> c3 = p0; c3 <= 3; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 2 max = 4
                                // io_L2
                                if (c3 == p0) {
A_IO_L2_in_0_x1_loop_5:                                     for (ap_uint<5> c4 = 0; c4 <= 15; c4 += 1)
A_IO_L2_in_0_x1_loop_6:                                         for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1) {
                                            // access_coalesce
A_IO_L2_in_0_x1_loop_7:                                             for (ap_uint<5> c6 = 0; c6 <= 15; c6 += 1) {

                                                {
                                                    A_t16 in_data;
                                                    A_t16 out_data;
                                                    in_data = fifo_A_in.read();
                                                    out_data = in_data;
                                                    local_A_pong[c4][c5][c6] = out_data;
                                                }
                                            }
                                        }
                                } else {
A_IO_L2_in_0_x1_loop_8:                                     for (ap_uint<5> c4 = 0; c4 <= 15; c4 += 1)
A_IO_L2_in_0_x1_loop_9:                                         for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1) {
                                            // access_coalesce
A_IO_L2_in_0_x1_loop_10:                                             for (ap_uint<5> c6 = 0; c6 <= 15; c6 += 1) {

                                                {
                                                    A_t16 in_data;
                                                    A_t16 out_data;
                                                    in_data = fifo_A_in.read();
                                                    out_data = in_data;
                                                    fifo_A_out.write(out_data);
                                                }
                                            }
                                        }
                                }
                            }
                        }
                        A_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                        /* Variable Declaration */

                        if (intra_trans_en) {
A_IO_L2_in_0_x1_loop_11:                             for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
A_IO_L2_in_0_x1_loop_12:                                 for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                    // latency
A_IO_L2_in_0_x1_loop_13:                                     for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                        // latency
A_IO_L2_in_0_x1_loop_14:                                         for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                            // simd
                                            {
                                                A_t16 in_data;
                                                A_t8 out_data;
                                                in_data = local_A_ping[c8][c5][8 * c6 / 16];
A_IO_L2_in_0_x1_loop_15:                                                 for (ap_uint<2> n = 0; n < 2; n++) {
                                                    data_split[n] = in_data(255, 0);
                                                    in_data = in_data >> 256;
                                                }
                                                int split_idx = (c6) % 2;
                                                out_data = data_split[split_idx];
                                                fifo_A_local_out.write(out_data);
                                            }
                                        }
                                    }
                                }
                        }
                    } else {
                        if (inter_trans_en) {
A_IO_L2_in_0_x1_loop_16:                             for (ap_uint<3> c3 = p0; c3 <= 3; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 2 max = 4
                                // io_L2
                                if (c3 == p0) {
A_IO_L2_in_0_x1_loop_17:                                     for (ap_uint<5> c4 = 0; c4 <= 15; c4 += 1)
A_IO_L2_in_0_x1_loop_18:                                         for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1) {
                                            // access_coalesce
A_IO_L2_in_0_x1_loop_19:                                             for (ap_uint<5> c6 = 0; c6 <= 15; c6 += 1) {

                                                {
                                                    A_t16 in_data;
                                                    A_t16 out_data;
                                                    in_data = fifo_A_in.read();
                                                    out_data = in_data;
                                                    local_A_ping[c4][c5][c6] = out_data;
                                                }
                                            }
                                        }
                                } else {
A_IO_L2_in_0_x1_loop_20:                                     for (ap_uint<5> c4 = 0; c4 <= 15; c4 += 1)
A_IO_L2_in_0_x1_loop_21:                                         for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1) {
                                            // access_coalesce
A_IO_L2_in_0_x1_loop_22:                                             for (ap_uint<5> c6 = 0; c6 <= 15; c6 += 1) {

                                                {
                                                    A_t16 in_data;
                                                    A_t16 out_data;
                                                    in_data = fifo_A_in.read();
                                                    out_data = in_data;
                                                    fifo_A_out.write(out_data);
                                                }
                                            }
                                        }
                                }
                            }
                        }
                        A_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                        /* Variable Declaration */

                        if (intra_trans_en) {
A_IO_L2_in_0_x1_loop_23:                             for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
A_IO_L2_in_0_x1_loop_24:                                 for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                    // latency
A_IO_L2_in_0_x1_loop_25:                                     for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                        // latency
A_IO_L2_in_0_x1_loop_26:                                         for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                            // simd
                                            {
                                                A_t16 in_data;
                                                A_t8 out_data;
                                                in_data = local_A_pong[c8][c5][8 * c6 / 16];
A_IO_L2_in_0_x1_loop_27:                                                 for (ap_uint<2> n = 0; n < 2; n++) {
                                                    data_split[n] = in_data(255, 0);
                                                    in_data = in_data >> 256;
                                                }
                                                int split_idx = (c6) % 2;
                                                out_data = data_split[split_idx];
                                                fifo_A_local_out.write(out_data);
                                            }
                                        }
                                    }
                                }
                        }
                    }
                    intra_trans_en = 1;
                    arb = !arb;
                    c0_prev = c0;
                    c1_prev = c1;
                    c2_prev = c2;
                }
            }
    if (arb == 0) {
        A_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
        /* Variable Declaration */

        if (intra_trans_en) {
A_IO_L2_in_0_x1_loop_28:             for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
A_IO_L2_in_0_x1_loop_29:                 for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                    // latency
A_IO_L2_in_0_x1_loop_30:                     for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                        // latency
A_IO_L2_in_0_x1_loop_31:                         for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                            // simd
                            {
                                A_t16 in_data;
                                A_t8 out_data;
                                in_data = local_A_ping[c8][c5][8 * c6 / 16];
A_IO_L2_in_0_x1_loop_32:                                 for (ap_uint<2> n = 0; n < 2; n++) {
                                    data_split[n] = in_data(255, 0);
                                    in_data = in_data >> 256;
                                }
                                int split_idx = (c6) % 2;
                                out_data = data_split[split_idx];
                                fifo_A_local_out.write(out_data);
                            }
                        }
                    }
                }
        }
    } else {
        A_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
        /* Variable Declaration */

        if (intra_trans_en) {
A_IO_L2_in_0_x1_loop_33:             for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
A_IO_L2_in_0_x1_loop_34:                 for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                    // latency
A_IO_L2_in_0_x1_loop_35:                     for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                        // latency
A_IO_L2_in_0_x1_loop_36:                         for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                            // simd
                            {
                                A_t16 in_data;
                                A_t8 out_data;
                                in_data = local_A_pong[c8][c5][8 * c6 / 16];
A_IO_L2_in_0_x1_loop_37:                                 for (ap_uint<2> n = 0; n < 2; n++) {
                                    data_split[n] = in_data(255, 0);
                                    in_data = in_data >> 256;
                                }
                                int split_idx = (c6) % 2;
                                out_data = data_split[split_idx];
                                fifo_A_local_out.write(out_data);
                            }
                        }
                    }
                }
        }
    }
}
/* Module Definition */

/* Module Definition */
void A_IO_L2_in_1_x1(int idx, hls::stream<A_t16> &fifo_A_in, hls::stream<A_t16> &fifo_A_out, hls::stream<A_t8> &fifo_A_local_out) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx; // module id
    A_t16 local_A_ping[16][2][16];
    A_t16 local_A_pong[16][2][16];
    bool arb = 0;
    bool inter_trans_en = 1;
    bool intra_trans_en = 0;
    int c0, c0_prev;
    int c1, c1_prev;
    int c2, c2_prev;
    /* Variable Declaration */

A_IO_L2_in_1_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
A_IO_L2_in_1_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
A_IO_L2_in_1_x1_loop_3:             for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                // array
                // io_L3
                {
                    if (arb == 0) {
                        if (inter_trans_en) {
A_IO_L2_in_1_x1_loop_4:                             for (ap_uint<3> c3 = p0; c3 <= 3; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 2 max = 4
                                // io_L2
                                if (c3 == p0) {
A_IO_L2_in_1_x1_loop_5:                                     for (ap_uint<5> c4 = 0; c4 <= 15; c4 += 1)
A_IO_L2_in_1_x1_loop_6:                                         for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1) {
                                            // access_coalesce
A_IO_L2_in_1_x1_loop_7:                                             for (ap_uint<5> c6 = 0; c6 <= 15; c6 += 1) {

                                                {
                                                    A_t16 in_data;
                                                    A_t16 out_data;
                                                    in_data = fifo_A_in.read();
                                                    out_data = in_data;
                                                    local_A_pong[c4][c5][c6] = out_data;
                                                }
                                            }
                                        }
                                } else {
A_IO_L2_in_1_x1_loop_8:                                     for (ap_uint<5> c4 = 0; c4 <= 15; c4 += 1)
A_IO_L2_in_1_x1_loop_9:                                         for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1) {
                                            // access_coalesce
A_IO_L2_in_1_x1_loop_10:                                             for (ap_uint<5> c6 = 0; c6 <= 15; c6 += 1) {

                                                {
                                                    A_t16 in_data;
                                                    A_t16 out_data;
                                                    in_data = fifo_A_in.read();
                                                    out_data = in_data;
                                                    fifo_A_out.write(out_data);
                                                }
                                            }
                                        }
                                }
                            }
                        }
                        A_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                        /* Variable Declaration */

                        if (intra_trans_en) {
A_IO_L2_in_1_x1_loop_11:                             for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
A_IO_L2_in_1_x1_loop_12:                                 for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                    // latency
A_IO_L2_in_1_x1_loop_13:                                     for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                        // latency
A_IO_L2_in_1_x1_loop_14:                                         for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                            // simd
                                            {
                                                A_t16 in_data;
                                                A_t8 out_data;
                                                in_data = local_A_ping[c8][c5][8 * c6 / 16];
A_IO_L2_in_1_x1_loop_15:                                                 for (ap_uint<2> n = 0; n < 2; n++) {
                                                    data_split[n] = in_data(255, 0);
                                                    in_data = in_data >> 256;
                                                }
                                                int split_idx = (c6) % 2;
                                                out_data = data_split[split_idx];
                                                fifo_A_local_out.write(out_data);
                                            }
                                        }
                                    }
                                }
                        }
                    } else {
                        if (inter_trans_en) {
A_IO_L2_in_1_x1_loop_16:                             for (ap_uint<3> c3 = p0; c3 <= 3; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 2 max = 4
                                // io_L2
                                if (c3 == p0) {
A_IO_L2_in_1_x1_loop_17:                                     for (ap_uint<5> c4 = 0; c4 <= 15; c4 += 1)
A_IO_L2_in_1_x1_loop_18:                                         for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1) {
                                            // access_coalesce
A_IO_L2_in_1_x1_loop_19:                                             for (ap_uint<5> c6 = 0; c6 <= 15; c6 += 1) {

                                                {
                                                    A_t16 in_data;
                                                    A_t16 out_data;
                                                    in_data = fifo_A_in.read();
                                                    out_data = in_data;
                                                    local_A_ping[c4][c5][c6] = out_data;
                                                }
                                            }
                                        }
                                } else {
A_IO_L2_in_1_x1_loop_20:                                     for (ap_uint<5> c4 = 0; c4 <= 15; c4 += 1)
A_IO_L2_in_1_x1_loop_21:                                         for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1) {
                                            // access_coalesce
A_IO_L2_in_1_x1_loop_22:                                             for (ap_uint<5> c6 = 0; c6 <= 15; c6 += 1) {

                                                {
                                                    A_t16 in_data;
                                                    A_t16 out_data;
                                                    in_data = fifo_A_in.read();
                                                    out_data = in_data;
                                                    fifo_A_out.write(out_data);
                                                }
                                            }
                                        }
                                }
                            }
                        }
                        A_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                        /* Variable Declaration */

                        if (intra_trans_en) {
A_IO_L2_in_1_x1_loop_23:                             for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
A_IO_L2_in_1_x1_loop_24:                                 for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                    // latency
A_IO_L2_in_1_x1_loop_25:                                     for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                        // latency
A_IO_L2_in_1_x1_loop_26:                                         for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                            // simd
                                            {
                                                A_t16 in_data;
                                                A_t8 out_data;
                                                in_data = local_A_pong[c8][c5][8 * c6 / 16];
A_IO_L2_in_1_x1_loop_27:                                                 for (ap_uint<2> n = 0; n < 2; n++) {
                                                    data_split[n] = in_data(255, 0);
                                                    in_data = in_data >> 256;
                                                }
                                                int split_idx = (c6) % 2;
                                                out_data = data_split[split_idx];
                                                fifo_A_local_out.write(out_data);
                                            }
                                        }
                                    }
                                }
                        }
                    }
                    intra_trans_en = 1;
                    arb = !arb;
                    c0_prev = c0;
                    c1_prev = c1;
                    c2_prev = c2;
                }
            }
    if (arb == 0) {
        A_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
        /* Variable Declaration */

        if (intra_trans_en) {
A_IO_L2_in_1_x1_loop_28:             for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
A_IO_L2_in_1_x1_loop_29:                 for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                    // latency
A_IO_L2_in_1_x1_loop_30:                     for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                        // latency
A_IO_L2_in_1_x1_loop_31:                         for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                            // simd
                            {
                                A_t16 in_data;
                                A_t8 out_data;
                                in_data = local_A_ping[c8][c5][8 * c6 / 16];
A_IO_L2_in_1_x1_loop_32:                                 for (ap_uint<2> n = 0; n < 2; n++) {
                                    data_split[n] = in_data(255, 0);
                                    in_data = in_data >> 256;
                                }
                                int split_idx = (c6) % 2;
                                out_data = data_split[split_idx];
                                fifo_A_local_out.write(out_data);
                            }
                        }
                    }
                }
        }
    } else {
        A_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
        /* Variable Declaration */

        if (intra_trans_en) {
A_IO_L2_in_1_x1_loop_33:             for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
A_IO_L2_in_1_x1_loop_34:                 for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                    // latency
A_IO_L2_in_1_x1_loop_35:                     for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                        // latency
A_IO_L2_in_1_x1_loop_36:                         for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                            // simd
                            {
                                A_t16 in_data;
                                A_t8 out_data;
                                in_data = local_A_pong[c8][c5][8 * c6 / 16];
A_IO_L2_in_1_x1_loop_37:                                 for (ap_uint<2> n = 0; n < 2; n++) {
                                    data_split[n] = in_data(255, 0);
                                    in_data = in_data >> 256;
                                }
                                int split_idx = (c6) % 2;
                                out_data = data_split[split_idx];
                                fifo_A_local_out.write(out_data);
                            }
                        }
                    }
                }
        }
    }
}
/* Module Definition */

/* Module Definition */
void A_IO_L2_in_2_x1(int idx, hls::stream<A_t16> &fifo_A_in, hls::stream<A_t16> &fifo_A_out, hls::stream<A_t8> &fifo_A_local_out) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx; // module id
    A_t16 local_A_ping[16][2][16];
    A_t16 local_A_pong[16][2][16];
    bool arb = 0;
    bool inter_trans_en = 1;
    bool intra_trans_en = 0;
    int c0, c0_prev;
    int c1, c1_prev;
    int c2, c2_prev;
    /* Variable Declaration */

A_IO_L2_in_2_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
A_IO_L2_in_2_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
A_IO_L2_in_2_x1_loop_3:             for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                // array
                // io_L3
                {
                    if (arb == 0) {
                        if (inter_trans_en) {
A_IO_L2_in_2_x1_loop_4:                             for (ap_uint<3> c3 = p0; c3 <= 3; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 2 max = 4
                                // io_L2
                                if (c3 == p0) {
A_IO_L2_in_2_x1_loop_5:                                     for (ap_uint<5> c4 = 0; c4 <= 15; c4 += 1)
A_IO_L2_in_2_x1_loop_6:                                         for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1) {
                                            // access_coalesce
A_IO_L2_in_2_x1_loop_7:                                             for (ap_uint<5> c6 = 0; c6 <= 15; c6 += 1) {

                                                {
                                                    A_t16 in_data;
                                                    A_t16 out_data;
                                                    in_data = fifo_A_in.read();
                                                    out_data = in_data;
                                                    local_A_pong[c4][c5][c6] = out_data;
                                                }
                                            }
                                        }
                                } else {
A_IO_L2_in_2_x1_loop_8:                                     for (ap_uint<5> c4 = 0; c4 <= 15; c4 += 1)
A_IO_L2_in_2_x1_loop_9:                                         for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1) {
                                            // access_coalesce
A_IO_L2_in_2_x1_loop_10:                                             for (ap_uint<5> c6 = 0; c6 <= 15; c6 += 1) {

                                                {
                                                    A_t16 in_data;
                                                    A_t16 out_data;
                                                    in_data = fifo_A_in.read();
                                                    out_data = in_data;
                                                    fifo_A_out.write(out_data);
                                                }
                                            }
                                        }
                                }
                            }
                        }
                        A_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                        /* Variable Declaration */

                        if (intra_trans_en) {
A_IO_L2_in_2_x1_loop_11:                             for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
A_IO_L2_in_2_x1_loop_12:                                 for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                    // latency
A_IO_L2_in_2_x1_loop_13:                                     for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                        // latency
A_IO_L2_in_2_x1_loop_14:                                         for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                            // simd
                                            {
                                                A_t16 in_data;
                                                A_t8 out_data;
                                                in_data = local_A_ping[c8][c5][8 * c6 / 16];
A_IO_L2_in_2_x1_loop_15:                                                 for (ap_uint<2> n = 0; n < 2; n++) {
                                                    data_split[n] = in_data(255, 0);
                                                    in_data = in_data >> 256;
                                                }
                                                int split_idx = (c6) % 2;
                                                out_data = data_split[split_idx];
                                                fifo_A_local_out.write(out_data);
                                            }
                                        }
                                    }
                                }
                        }
                    } else {
                        if (inter_trans_en) {
A_IO_L2_in_2_x1_loop_16:                             for (ap_uint<3> c3 = p0; c3 <= 3; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 2 max = 4
                                // io_L2
                                if (c3 == p0) {
A_IO_L2_in_2_x1_loop_17:                                     for (ap_uint<5> c4 = 0; c4 <= 15; c4 += 1)
A_IO_L2_in_2_x1_loop_18:                                         for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1) {
                                            // access_coalesce
A_IO_L2_in_2_x1_loop_19:                                             for (ap_uint<5> c6 = 0; c6 <= 15; c6 += 1) {

                                                {
                                                    A_t16 in_data;
                                                    A_t16 out_data;
                                                    in_data = fifo_A_in.read();
                                                    out_data = in_data;
                                                    local_A_ping[c4][c5][c6] = out_data;
                                                }
                                            }
                                        }
                                } else {
A_IO_L2_in_2_x1_loop_20:                                     for (ap_uint<5> c4 = 0; c4 <= 15; c4 += 1)
A_IO_L2_in_2_x1_loop_21:                                         for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1) {
                                            // access_coalesce
A_IO_L2_in_2_x1_loop_22:                                             for (ap_uint<5> c6 = 0; c6 <= 15; c6 += 1) {

                                                {
                                                    A_t16 in_data;
                                                    A_t16 out_data;
                                                    in_data = fifo_A_in.read();
                                                    out_data = in_data;
                                                    fifo_A_out.write(out_data);
                                                }
                                            }
                                        }
                                }
                            }
                        }
                        A_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                        /* Variable Declaration */

                        if (intra_trans_en) {
A_IO_L2_in_2_x1_loop_23:                             for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
A_IO_L2_in_2_x1_loop_24:                                 for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                    // latency
A_IO_L2_in_2_x1_loop_25:                                     for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                        // latency
A_IO_L2_in_2_x1_loop_26:                                         for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                            // simd
                                            {
                                                A_t16 in_data;
                                                A_t8 out_data;
                                                in_data = local_A_pong[c8][c5][8 * c6 / 16];
A_IO_L2_in_2_x1_loop_27:                                                 for (ap_uint<2> n = 0; n < 2; n++) {
                                                    data_split[n] = in_data(255, 0);
                                                    in_data = in_data >> 256;
                                                }
                                                int split_idx = (c6) % 2;
                                                out_data = data_split[split_idx];
                                                fifo_A_local_out.write(out_data);
                                            }
                                        }
                                    }
                                }
                        }
                    }
                    intra_trans_en = 1;
                    arb = !arb;
                    c0_prev = c0;
                    c1_prev = c1;
                    c2_prev = c2;
                }
            }
    if (arb == 0) {
        A_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
        /* Variable Declaration */

        if (intra_trans_en) {
A_IO_L2_in_2_x1_loop_28:             for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
A_IO_L2_in_2_x1_loop_29:                 for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                    // latency
A_IO_L2_in_2_x1_loop_30:                     for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                        // latency
A_IO_L2_in_2_x1_loop_31:                         for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                            // simd
                            {
                                A_t16 in_data;
                                A_t8 out_data;
                                in_data = local_A_ping[c8][c5][8 * c6 / 16];
A_IO_L2_in_2_x1_loop_32:                                 for (ap_uint<2> n = 0; n < 2; n++) {
                                    data_split[n] = in_data(255, 0);
                                    in_data = in_data >> 256;
                                }
                                int split_idx = (c6) % 2;
                                out_data = data_split[split_idx];
                                fifo_A_local_out.write(out_data);
                            }
                        }
                    }
                }
        }
    } else {
        A_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
        /* Variable Declaration */

        if (intra_trans_en) {
A_IO_L2_in_2_x1_loop_33:             for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
A_IO_L2_in_2_x1_loop_34:                 for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                    // latency
A_IO_L2_in_2_x1_loop_35:                     for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                        // latency
A_IO_L2_in_2_x1_loop_36:                         for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                            // simd
                            {
                                A_t16 in_data;
                                A_t8 out_data;
                                in_data = local_A_pong[c8][c5][8 * c6 / 16];
A_IO_L2_in_2_x1_loop_37:                                 for (ap_uint<2> n = 0; n < 2; n++) {
                                    data_split[n] = in_data(255, 0);
                                    in_data = in_data >> 256;
                                }
                                int split_idx = (c6) % 2;
                                out_data = data_split[split_idx];
                                fifo_A_local_out.write(out_data);
                            }
                        }
                    }
                }
        }
    }
}
/* Module Definition */

/* Module Definition */
void A_IO_L2_in_boundary_x1(int idx, hls::stream<A_t16> &fifo_A_in, hls::stream<A_t8> &fifo_A_local_out) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx; // module id
    A_t16 local_A_ping[16][2][16];
    A_t16 local_A_pong[16][2][16];
    bool arb = 0;
    bool inter_trans_en = 1;
    bool intra_trans_en = 0;
    int c0, c0_prev;
    int c1, c1_prev;
    int c2, c2_prev;
    /* Variable Declaration */

    {
A_IO_L2_in_boundary_x1_loop_1:         for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
A_IO_L2_in_boundary_x1_loop_2:             for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
A_IO_L2_in_boundary_x1_loop_3:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // io_L3
                    {
                        if (arb == 0) {
                            if (inter_trans_en) {
A_IO_L2_in_boundary_x1_loop_4:                                 for (ap_uint<3> c3 = p0; c3 <= 3; c3 += 1)
#pragma HLS LOOP_TRIPCOUNT min = 1 max = 1
                                    if (c3 == p0) {
                                        // io_L2
A_IO_L2_in_boundary_x1_loop_5:                                         for (ap_uint<5> c4 = 0; c4 <= 15; c4 += 1)
A_IO_L2_in_boundary_x1_loop_6:                                             for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1) {
                                                // access_coalesce
A_IO_L2_in_boundary_x1_loop_7:                                                 for (ap_uint<5> c6 = 0; c6 <= 15; c6 += 1) {

                                                    {
                                                        A_t16 in_data;
                                                        A_t16 out_data;
                                                        in_data = fifo_A_in.read();
                                                        out_data = in_data;
                                                        local_A_pong[c4][c5][c6] = out_data;
                                                    }
                                                }
                                            }
                                    }
                            }
                            A_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                            /* Variable Declaration */

                            if (intra_trans_en) {
A_IO_L2_in_boundary_x1_loop_8:                                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
A_IO_L2_in_boundary_x1_loop_9:                                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                        // latency
A_IO_L2_in_boundary_x1_loop_10:                                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                            // latency
A_IO_L2_in_boundary_x1_loop_11:                                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                                // simd
                                                {
                                                    A_t16 in_data;
                                                    A_t8 out_data;
                                                    in_data = local_A_ping[c8][c5][8 * c6 / 16];
A_IO_L2_in_boundary_x1_loop_12:                                                     for (ap_uint<2> n = 0; n < 2; n++) {
                                                        data_split[n] = in_data(255, 0);
                                                        in_data = in_data >> 256;
                                                    }
                                                    int split_idx = (c6) % 2;
                                                    out_data = data_split[split_idx];
                                                    fifo_A_local_out.write(out_data);
                                                }
                                            }
                                        }
                                    }
                            }
                        } else {
                            if (inter_trans_en) {
A_IO_L2_in_boundary_x1_loop_13:                                 for (ap_uint<3> c3 = p0; c3 <= 3; c3 += 1)
#pragma HLS LOOP_TRIPCOUNT min = 1 max = 1
                                    if (c3 == p0) {
                                        // io_L2
A_IO_L2_in_boundary_x1_loop_14:                                         for (ap_uint<5> c4 = 0; c4 <= 15; c4 += 1)
A_IO_L2_in_boundary_x1_loop_15:                                             for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1) {
                                                // access_coalesce
A_IO_L2_in_boundary_x1_loop_16:                                                 for (ap_uint<5> c6 = 0; c6 <= 15; c6 += 1) {

                                                    {
                                                        A_t16 in_data;
                                                        A_t16 out_data;
                                                        in_data = fifo_A_in.read();
                                                        out_data = in_data;
                                                        local_A_ping[c4][c5][c6] = out_data;
                                                    }
                                                }
                                            }
                                    }
                            }
                            A_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                            /* Variable Declaration */

                            if (intra_trans_en) {
A_IO_L2_in_boundary_x1_loop_17:                                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
A_IO_L2_in_boundary_x1_loop_18:                                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                        // latency
A_IO_L2_in_boundary_x1_loop_19:                                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                            // latency
A_IO_L2_in_boundary_x1_loop_20:                                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                                // simd
                                                {
                                                    A_t16 in_data;
                                                    A_t8 out_data;
                                                    in_data = local_A_pong[c8][c5][8 * c6 / 16];
A_IO_L2_in_boundary_x1_loop_21:                                                     for (ap_uint<2> n = 0; n < 2; n++) {
                                                        data_split[n] = in_data(255, 0);
                                                        in_data = in_data >> 256;
                                                    }
                                                    int split_idx = (c6) % 2;
                                                    out_data = data_split[split_idx];
                                                    fifo_A_local_out.write(out_data);
                                                }
                                            }
                                        }
                                    }
                            }
                        }
                        intra_trans_en = 1;
                        arb = !arb;
                        c0_prev = c0;
                        c1_prev = c1;
                        c2_prev = c2;
                    }
                }
        if (arb == 0) {
            A_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
            /* Variable Declaration */

            if (intra_trans_en) {
A_IO_L2_in_boundary_x1_loop_22:                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
A_IO_L2_in_boundary_x1_loop_23:                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                        // latency
A_IO_L2_in_boundary_x1_loop_24:                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                            // latency
A_IO_L2_in_boundary_x1_loop_25:                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                // simd
                                {
                                    A_t16 in_data;
                                    A_t8 out_data;
                                    in_data = local_A_ping[c8][c5][8 * c6 / 16];
A_IO_L2_in_boundary_x1_loop_26:                                     for (ap_uint<2> n = 0; n < 2; n++) {
                                        data_split[n] = in_data(255, 0);
                                        in_data = in_data >> 256;
                                    }
                                    int split_idx = (c6) % 2;
                                    out_data = data_split[split_idx];
                                    fifo_A_local_out.write(out_data);
                                }
                            }
                        }
                    }
            }
        } else {
            A_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
            /* Variable Declaration */

            if (intra_trans_en) {
A_IO_L2_in_boundary_x1_loop_27:                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
A_IO_L2_in_boundary_x1_loop_28:                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                        // latency
A_IO_L2_in_boundary_x1_loop_29:                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                            // latency
A_IO_L2_in_boundary_x1_loop_30:                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                // simd
                                {
                                    A_t16 in_data;
                                    A_t8 out_data;
                                    in_data = local_A_pong[c8][c5][8 * c6 / 16];
A_IO_L2_in_boundary_x1_loop_31:                                     for (ap_uint<2> n = 0; n < 2; n++) {
                                        data_split[n] = in_data(255, 0);
                                        in_data = in_data >> 256;
                                    }
                                    int split_idx = (c6) % 2;
                                    out_data = data_split[split_idx];
                                    fifo_A_local_out.write(out_data);
                                }
                            }
                        }
                    }
            }
        }
    }
}
/* Module Definition */

/* Module Definition */
void B_IO_L3_in_x1(hls::stream<B_t8> &fifo_B_in, hls::stream<B_t8> &fifo_B_local_out) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    /* Variable Declaration */

B_IO_L3_in_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
B_IO_L3_in_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
B_IO_L3_in_x1_loop_3:             for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                // array
                // io_L3
B_IO_L3_in_x1_loop_4:                 for (int c3 = 0; c3 <= 7; c3 += 1) {
                    if (c3 > -8 * c1 + 41)
                        break;
                    // io_L2
B_IO_L3_in_x1_loop_5:                     for (ap_uint<2> c4 = 0; c4 <= 1; c4 += 1) {

                        // access_coalesce
                        // access_serialize
                        {
                            B_t8 in_data;
                            B_t8 out_data;
                            in_data = fifo_B_in.read();
                            out_data = in_data;
                            fifo_B_local_out.write(out_data);
                        }
                    }
                }
            }
}
/* Module Definition */

/* Module Definition */
void B_IO_L3_in_serialize_x1(B_t16 *B, hls::stream<B_t8> &fifo_B_local_out) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    /* Variable Declaration */

    B_t8 fifo_data;
    B_t16 mem_data;
B_IO_L3_in_serialize_x1_loop_1:     for (ap_uint<16> i = 0; i < 1024; i++) {

        mem_data = B[i];
B_IO_L3_in_serialize_x1_loop_2:         for (ap_uint<2> p = 0; p < 2; p++) {
            fifo_data = mem_data(255, 0);
            mem_data = mem_data >> 256;
            fifo_B_local_out.write(fifo_data);
        }
    }
}
/* Module Definition */

/* Module Definition */
void B_IO_L2_in_0_x1(int idx, hls::stream<B_t8> &fifo_B_in, hls::stream<B_t8> &fifo_B_out, hls::stream<float> &fifo_B_local_out) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx; // module id
    B_t8 local_B_ping[2][1];
    B_t8 local_B_pong[2][1];
    bool arb = 0;
    bool inter_trans_en = 1;
    bool intra_trans_en = 0;
    int c0, c0_prev;
    int c1, c1_prev;
    int c2, c2_prev;
    /* Variable Declaration */

    {
B_IO_L2_in_0_x1_loop_1:         for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
B_IO_L2_in_0_x1_loop_2:             for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
B_IO_L2_in_0_x1_loop_3:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // io_L3
                    {
                        if (arb == 0) {
                            if (inter_trans_en) {
B_IO_L2_in_0_x1_loop_4:                                 for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 2 max = 8
                                    if (c3 > -8 * c1 + 41)
                                        break;
                                    // io_L2
                                    if (c3 == p0) {
B_IO_L2_in_0_x1_loop_5:                                         for (ap_uint<2> c4 = 0; c4 <= 1; c4 += 1) {

                                            // access_coalesce
                                            {
                                                B_t8 in_data;
                                                B_t8 out_data;
                                                in_data = fifo_B_in.read();
                                                out_data = in_data;
                                                local_B_pong[c4][0] = out_data;
                                            }
                                        }
                                    } else {
B_IO_L2_in_0_x1_loop_6:                                         for (ap_uint<2> c4 = 0; c4 <= 1; c4 += 1) {

                                            // access_coalesce
                                            {
                                                B_t8 in_data;
                                                B_t8 out_data;
                                                in_data = fifo_B_in.read();
                                                out_data = in_data;
                                                fifo_B_out.write(out_data);
                                            }
                                        }
                                    }
                                }
                            }
                            ap_uint<32> data_split[8];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                            /* Variable Declaration */

                            if (intra_trans_en) {
B_IO_L2_in_0_x1_loop_7:                                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_IO_L2_in_0_x1_loop_8:                                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                        // latency
B_IO_L2_in_0_x1_loop_9:                                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                            // latency
B_IO_L2_in_0_x1_loop_10:                                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                                // simd
                                                {
                                                    B_t8 in_data;
                                                    B_t1 out_data;
                                                    in_data = local_B_ping[c5][c7 / 8];
B_IO_L2_in_0_x1_loop_11:                                                     for (ap_uint<4> n = 0; n < 8; n++) {
                                                        data_split[n] = in_data(31, 0);
                                                        in_data = in_data >> 32;
                                                    }
                                                    int split_idx = (c7) % 8;
                                                    union {
                                                        unsigned int ui;
                                                        float ut;
                                                    } u;
                                                    u.ui = (unsigned int)data_split[split_idx];
                                                    out_data = u.ut;
                                                    fifo_B_local_out.write(out_data);
                                                }
                                            }
                                        }
                                    }
                            }
                        } else {
                            if (inter_trans_en) {
B_IO_L2_in_0_x1_loop_12:                                 for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 2 max = 8
                                    if (c3 > -8 * c1 + 41)
                                        break;
                                    // io_L2
                                    if (c3 == p0) {
B_IO_L2_in_0_x1_loop_13:                                         for (ap_uint<2> c4 = 0; c4 <= 1; c4 += 1) {

                                            // access_coalesce
                                            {
                                                B_t8 in_data;
                                                B_t8 out_data;
                                                in_data = fifo_B_in.read();
                                                out_data = in_data;
                                                local_B_ping[c4][0] = out_data;
                                            }
                                        }
                                    } else {
B_IO_L2_in_0_x1_loop_14:                                         for (ap_uint<2> c4 = 0; c4 <= 1; c4 += 1) {

                                            // access_coalesce
                                            {
                                                B_t8 in_data;
                                                B_t8 out_data;
                                                in_data = fifo_B_in.read();
                                                out_data = in_data;
                                                fifo_B_out.write(out_data);
                                            }
                                        }
                                    }
                                }
                            }
                            ap_uint<32> data_split[8];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                            /* Variable Declaration */

                            if (intra_trans_en) {
B_IO_L2_in_0_x1_loop_15:                                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_IO_L2_in_0_x1_loop_16:                                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                        // latency
B_IO_L2_in_0_x1_loop_17:                                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                            // latency
B_IO_L2_in_0_x1_loop_18:                                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                                // simd
                                                {
                                                    B_t8 in_data;
                                                    B_t1 out_data;
                                                    in_data = local_B_pong[c5][c7 / 8];
B_IO_L2_in_0_x1_loop_19:                                                     for (ap_uint<4> n = 0; n < 8; n++) {
                                                        data_split[n] = in_data(31, 0);
                                                        in_data = in_data >> 32;
                                                    }
                                                    int split_idx = (c7) % 8;
                                                    union {
                                                        unsigned int ui;
                                                        float ut;
                                                    } u;
                                                    u.ui = (unsigned int)data_split[split_idx];
                                                    out_data = u.ut;
                                                    fifo_B_local_out.write(out_data);
                                                }
                                            }
                                        }
                                    }
                            }
                        }
                        intra_trans_en = 1;
                        arb = !arb;
                        c0_prev = c0;
                        c1_prev = c1;
                        c2_prev = c2;
                    }
                }
        if (arb == 0) {
            ap_uint<32> data_split[8];
#pragma HLS ARRAY_PARTITION variable = data_split complete
            /* Variable Declaration */

            if (intra_trans_en) {
B_IO_L2_in_0_x1_loop_20:                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_IO_L2_in_0_x1_loop_21:                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                        // latency
B_IO_L2_in_0_x1_loop_22:                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                            // latency
B_IO_L2_in_0_x1_loop_23:                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                // simd
                                {
                                    B_t8 in_data;
                                    B_t1 out_data;
                                    in_data = local_B_ping[c5][c7 / 8];
B_IO_L2_in_0_x1_loop_24:                                     for (ap_uint<4> n = 0; n < 8; n++) {
                                        data_split[n] = in_data(31, 0);
                                        in_data = in_data >> 32;
                                    }
                                    int split_idx = (c7) % 8;
                                    union {
                                        unsigned int ui;
                                        float ut;
                                    } u;
                                    u.ui = (unsigned int)data_split[split_idx];
                                    out_data = u.ut;
                                    fifo_B_local_out.write(out_data);
                                }
                            }
                        }
                    }
            }
        } else {
            ap_uint<32> data_split[8];
#pragma HLS ARRAY_PARTITION variable = data_split complete
            /* Variable Declaration */

            if (intra_trans_en) {
B_IO_L2_in_0_x1_loop_25:                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_IO_L2_in_0_x1_loop_26:                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                        // latency
B_IO_L2_in_0_x1_loop_27:                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                            // latency
B_IO_L2_in_0_x1_loop_28:                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                // simd
                                {
                                    B_t8 in_data;
                                    B_t1 out_data;
                                    in_data = local_B_pong[c5][c7 / 8];
B_IO_L2_in_0_x1_loop_29:                                     for (ap_uint<4> n = 0; n < 8; n++) {
                                        data_split[n] = in_data(31, 0);
                                        in_data = in_data >> 32;
                                    }
                                    int split_idx = (c7) % 8;
                                    union {
                                        unsigned int ui;
                                        float ut;
                                    } u;
                                    u.ui = (unsigned int)data_split[split_idx];
                                    out_data = u.ut;
                                    fifo_B_local_out.write(out_data);
                                }
                            }
                        }
                    }
            }
        }
    }
}
/* Module Definition */

/* Module Definition */
void B_IO_L2_in_1_x1(int idx, hls::stream<B_t8> &fifo_B_in, hls::stream<B_t8> &fifo_B_out, hls::stream<float> &fifo_B_local_out) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx; // module id
    B_t8 local_B_ping[2][1];
    B_t8 local_B_pong[2][1];
    bool arb = 0;
    bool inter_trans_en = 1;
    bool intra_trans_en = 0;
    int c0, c0_prev;
    int c1, c1_prev;
    int c2, c2_prev;
    /* Variable Declaration */

    {
B_IO_L2_in_1_x1_loop_1:         for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
B_IO_L2_in_1_x1_loop_2:             for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
B_IO_L2_in_1_x1_loop_3:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // io_L3
                    {
                        if (arb == 0) {
                            if (inter_trans_en) {
B_IO_L2_in_1_x1_loop_4:                                 for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 2 max = 8
                                    if (c3 > -8 * c1 + 41)
                                        break;
                                    // io_L2
                                    if (c3 == p0) {
B_IO_L2_in_1_x1_loop_5:                                         for (ap_uint<2> c4 = 0; c4 <= 1; c4 += 1) {

                                            // access_coalesce
                                            {
                                                B_t8 in_data;
                                                B_t8 out_data;
                                                in_data = fifo_B_in.read();
                                                out_data = in_data;
                                                local_B_pong[c4][0] = out_data;
                                            }
                                        }
                                    } else {
B_IO_L2_in_1_x1_loop_6:                                         for (ap_uint<2> c4 = 0; c4 <= 1; c4 += 1) {

                                            // access_coalesce
                                            {
                                                B_t8 in_data;
                                                B_t8 out_data;
                                                in_data = fifo_B_in.read();
                                                out_data = in_data;
                                                fifo_B_out.write(out_data);
                                            }
                                        }
                                    }
                                }
                            }
                            ap_uint<32> data_split[8];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                            /* Variable Declaration */

                            if (intra_trans_en) {
B_IO_L2_in_1_x1_loop_7:                                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_IO_L2_in_1_x1_loop_8:                                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                        // latency
B_IO_L2_in_1_x1_loop_9:                                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                            // latency
B_IO_L2_in_1_x1_loop_10:                                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                                // simd
                                                {
                                                    B_t8 in_data;
                                                    B_t1 out_data;
                                                    in_data = local_B_ping[c5][c7 / 8];
B_IO_L2_in_1_x1_loop_11:                                                     for (ap_uint<4> n = 0; n < 8; n++) {
                                                        data_split[n] = in_data(31, 0);
                                                        in_data = in_data >> 32;
                                                    }
                                                    int split_idx = (c7) % 8;
                                                    union {
                                                        unsigned int ui;
                                                        float ut;
                                                    } u;
                                                    u.ui = (unsigned int)data_split[split_idx];
                                                    out_data = u.ut;
                                                    fifo_B_local_out.write(out_data);
                                                }
                                            }
                                        }
                                    }
                            }
                        } else {
                            if (inter_trans_en) {
B_IO_L2_in_1_x1_loop_12:                                 for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 2 max = 8
                                    if (c3 > -8 * c1 + 41)
                                        break;
                                    // io_L2
                                    if (c3 == p0) {
B_IO_L2_in_1_x1_loop_13:                                         for (ap_uint<2> c4 = 0; c4 <= 1; c4 += 1) {

                                            // access_coalesce
                                            {
                                                B_t8 in_data;
                                                B_t8 out_data;
                                                in_data = fifo_B_in.read();
                                                out_data = in_data;
                                                local_B_ping[c4][0] = out_data;
                                            }
                                        }
                                    } else {
B_IO_L2_in_1_x1_loop_14:                                         for (ap_uint<2> c4 = 0; c4 <= 1; c4 += 1) {

                                            // access_coalesce
                                            {
                                                B_t8 in_data;
                                                B_t8 out_data;
                                                in_data = fifo_B_in.read();
                                                out_data = in_data;
                                                fifo_B_out.write(out_data);
                                            }
                                        }
                                    }
                                }
                            }
                            ap_uint<32> data_split[8];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                            /* Variable Declaration */

                            if (intra_trans_en) {
B_IO_L2_in_1_x1_loop_15:                                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_IO_L2_in_1_x1_loop_16:                                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                        // latency
B_IO_L2_in_1_x1_loop_17:                                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                            // latency
B_IO_L2_in_1_x1_loop_18:                                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                                // simd
                                                {
                                                    B_t8 in_data;
                                                    B_t1 out_data;
                                                    in_data = local_B_pong[c5][c7 / 8];
B_IO_L2_in_1_x1_loop_19:                                                     for (ap_uint<4> n = 0; n < 8; n++) {
                                                        data_split[n] = in_data(31, 0);
                                                        in_data = in_data >> 32;
                                                    }
                                                    int split_idx = (c7) % 8;
                                                    union {
                                                        unsigned int ui;
                                                        float ut;
                                                    } u;
                                                    u.ui = (unsigned int)data_split[split_idx];
                                                    out_data = u.ut;
                                                    fifo_B_local_out.write(out_data);
                                                }
                                            }
                                        }
                                    }
                            }
                        }
                        intra_trans_en = 1;
                        arb = !arb;
                        c0_prev = c0;
                        c1_prev = c1;
                        c2_prev = c2;
                    }
                }
        if (arb == 0) {
            ap_uint<32> data_split[8];
#pragma HLS ARRAY_PARTITION variable = data_split complete
            /* Variable Declaration */

            if (intra_trans_en) {
B_IO_L2_in_1_x1_loop_20:                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_IO_L2_in_1_x1_loop_21:                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                        // latency
B_IO_L2_in_1_x1_loop_22:                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                            // latency
B_IO_L2_in_1_x1_loop_23:                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                // simd
                                {
                                    B_t8 in_data;
                                    B_t1 out_data;
                                    in_data = local_B_ping[c5][c7 / 8];
B_IO_L2_in_1_x1_loop_24:                                     for (ap_uint<4> n = 0; n < 8; n++) {
                                        data_split[n] = in_data(31, 0);
                                        in_data = in_data >> 32;
                                    }
                                    int split_idx = (c7) % 8;
                                    union {
                                        unsigned int ui;
                                        float ut;
                                    } u;
                                    u.ui = (unsigned int)data_split[split_idx];
                                    out_data = u.ut;
                                    fifo_B_local_out.write(out_data);
                                }
                            }
                        }
                    }
            }
        } else {
            ap_uint<32> data_split[8];
#pragma HLS ARRAY_PARTITION variable = data_split complete
            /* Variable Declaration */

            if (intra_trans_en) {
B_IO_L2_in_1_x1_loop_25:                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_IO_L2_in_1_x1_loop_26:                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                        // latency
B_IO_L2_in_1_x1_loop_27:                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                            // latency
B_IO_L2_in_1_x1_loop_28:                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                // simd
                                {
                                    B_t8 in_data;
                                    B_t1 out_data;
                                    in_data = local_B_pong[c5][c7 / 8];
B_IO_L2_in_1_x1_loop_29:                                     for (ap_uint<4> n = 0; n < 8; n++) {
                                        data_split[n] = in_data(31, 0);
                                        in_data = in_data >> 32;
                                    }
                                    int split_idx = (c7) % 8;
                                    union {
                                        unsigned int ui;
                                        float ut;
                                    } u;
                                    u.ui = (unsigned int)data_split[split_idx];
                                    out_data = u.ut;
                                    fifo_B_local_out.write(out_data);
                                }
                            }
                        }
                    }
            }
        }
    }
}
/* Module Definition */

/* Module Definition */
void B_IO_L2_in_2_x1(int idx, hls::stream<B_t8> &fifo_B_in, hls::stream<B_t8> &fifo_B_out, hls::stream<float> &fifo_B_local_out) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx; // module id
    B_t8 local_B_ping[2][1];
    B_t8 local_B_pong[2][1];
    bool arb = 0;
    bool inter_trans_en = 1;
    bool intra_trans_en = 0;
    int c0, c0_prev;
    int c1, c1_prev;
    int c2, c2_prev;
    /* Variable Declaration */

    {
B_IO_L2_in_2_x1_loop_1:         for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
B_IO_L2_in_2_x1_loop_2:             for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
B_IO_L2_in_2_x1_loop_3:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // io_L3
                    {
                        if (arb == 0) {
                            if (inter_trans_en) {
B_IO_L2_in_2_x1_loop_4:                                 for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 2 max = 8
                                    if (c3 > -8 * c1 + 41)
                                        break;
                                    // io_L2
                                    if (c3 == p0) {
B_IO_L2_in_2_x1_loop_5:                                         for (ap_uint<2> c4 = 0; c4 <= 1; c4 += 1) {

                                            // access_coalesce
                                            {
                                                B_t8 in_data;
                                                B_t8 out_data;
                                                in_data = fifo_B_in.read();
                                                out_data = in_data;
                                                local_B_pong[c4][0] = out_data;
                                            }
                                        }
                                    } else {
B_IO_L2_in_2_x1_loop_6:                                         for (ap_uint<2> c4 = 0; c4 <= 1; c4 += 1) {

                                            // access_coalesce
                                            {
                                                B_t8 in_data;
                                                B_t8 out_data;
                                                in_data = fifo_B_in.read();
                                                out_data = in_data;
                                                fifo_B_out.write(out_data);
                                            }
                                        }
                                    }
                                }
                            }
                            ap_uint<32> data_split[8];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                            /* Variable Declaration */

                            if (intra_trans_en) {
B_IO_L2_in_2_x1_loop_7:                                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_IO_L2_in_2_x1_loop_8:                                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                        // latency
B_IO_L2_in_2_x1_loop_9:                                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                            // latency
B_IO_L2_in_2_x1_loop_10:                                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                                // simd
                                                {
                                                    B_t8 in_data;
                                                    B_t1 out_data;
                                                    in_data = local_B_ping[c5][c7 / 8];
B_IO_L2_in_2_x1_loop_11:                                                     for (ap_uint<4> n = 0; n < 8; n++) {
                                                        data_split[n] = in_data(31, 0);
                                                        in_data = in_data >> 32;
                                                    }
                                                    int split_idx = (c7) % 8;
                                                    union {
                                                        unsigned int ui;
                                                        float ut;
                                                    } u;
                                                    u.ui = (unsigned int)data_split[split_idx];
                                                    out_data = u.ut;
                                                    fifo_B_local_out.write(out_data);
                                                }
                                            }
                                        }
                                    }
                            }
                        } else {
                            if (inter_trans_en) {
B_IO_L2_in_2_x1_loop_12:                                 for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 2 max = 8
                                    if (c3 > -8 * c1 + 41)
                                        break;
                                    // io_L2
                                    if (c3 == p0) {
B_IO_L2_in_2_x1_loop_13:                                         for (ap_uint<2> c4 = 0; c4 <= 1; c4 += 1) {

                                            // access_coalesce
                                            {
                                                B_t8 in_data;
                                                B_t8 out_data;
                                                in_data = fifo_B_in.read();
                                                out_data = in_data;
                                                local_B_ping[c4][0] = out_data;
                                            }
                                        }
                                    } else {
B_IO_L2_in_2_x1_loop_14:                                         for (ap_uint<2> c4 = 0; c4 <= 1; c4 += 1) {

                                            // access_coalesce
                                            {
                                                B_t8 in_data;
                                                B_t8 out_data;
                                                in_data = fifo_B_in.read();
                                                out_data = in_data;
                                                fifo_B_out.write(out_data);
                                            }
                                        }
                                    }
                                }
                            }
                            ap_uint<32> data_split[8];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                            /* Variable Declaration */

                            if (intra_trans_en) {
B_IO_L2_in_2_x1_loop_15:                                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_IO_L2_in_2_x1_loop_16:                                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                        // latency
B_IO_L2_in_2_x1_loop_17:                                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                            // latency
B_IO_L2_in_2_x1_loop_18:                                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                                // simd
                                                {
                                                    B_t8 in_data;
                                                    B_t1 out_data;
                                                    in_data = local_B_pong[c5][c7 / 8];
B_IO_L2_in_2_x1_loop_19:                                                     for (ap_uint<4> n = 0; n < 8; n++) {
                                                        data_split[n] = in_data(31, 0);
                                                        in_data = in_data >> 32;
                                                    }
                                                    int split_idx = (c7) % 8;
                                                    union {
                                                        unsigned int ui;
                                                        float ut;
                                                    } u;
                                                    u.ui = (unsigned int)data_split[split_idx];
                                                    out_data = u.ut;
                                                    fifo_B_local_out.write(out_data);
                                                }
                                            }
                                        }
                                    }
                            }
                        }
                        intra_trans_en = 1;
                        arb = !arb;
                        c0_prev = c0;
                        c1_prev = c1;
                        c2_prev = c2;
                    }
                }
        if (arb == 0) {
            ap_uint<32> data_split[8];
#pragma HLS ARRAY_PARTITION variable = data_split complete
            /* Variable Declaration */

            if (intra_trans_en) {
B_IO_L2_in_2_x1_loop_20:                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_IO_L2_in_2_x1_loop_21:                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                        // latency
B_IO_L2_in_2_x1_loop_22:                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                            // latency
B_IO_L2_in_2_x1_loop_23:                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                // simd
                                {
                                    B_t8 in_data;
                                    B_t1 out_data;
                                    in_data = local_B_ping[c5][c7 / 8];
B_IO_L2_in_2_x1_loop_24:                                     for (ap_uint<4> n = 0; n < 8; n++) {
                                        data_split[n] = in_data(31, 0);
                                        in_data = in_data >> 32;
                                    }
                                    int split_idx = (c7) % 8;
                                    union {
                                        unsigned int ui;
                                        float ut;
                                    } u;
                                    u.ui = (unsigned int)data_split[split_idx];
                                    out_data = u.ut;
                                    fifo_B_local_out.write(out_data);
                                }
                            }
                        }
                    }
            }
        } else {
            ap_uint<32> data_split[8];
#pragma HLS ARRAY_PARTITION variable = data_split complete
            /* Variable Declaration */

            if (intra_trans_en) {
B_IO_L2_in_2_x1_loop_25:                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_IO_L2_in_2_x1_loop_26:                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                        // latency
B_IO_L2_in_2_x1_loop_27:                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                            // latency
B_IO_L2_in_2_x1_loop_28:                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                // simd
                                {
                                    B_t8 in_data;
                                    B_t1 out_data;
                                    in_data = local_B_pong[c5][c7 / 8];
B_IO_L2_in_2_x1_loop_29:                                     for (ap_uint<4> n = 0; n < 8; n++) {
                                        data_split[n] = in_data(31, 0);
                                        in_data = in_data >> 32;
                                    }
                                    int split_idx = (c7) % 8;
                                    union {
                                        unsigned int ui;
                                        float ut;
                                    } u;
                                    u.ui = (unsigned int)data_split[split_idx];
                                    out_data = u.ut;
                                    fifo_B_local_out.write(out_data);
                                }
                            }
                        }
                    }
            }
        }
    }
}
/* Module Definition */

/* Module Definition */
void B_IO_L2_in_3_x1(int idx, hls::stream<B_t8> &fifo_B_in, hls::stream<B_t8> &fifo_B_out, hls::stream<float> &fifo_B_local_out) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx; // module id
    B_t8 local_B_ping[2][1];
    B_t8 local_B_pong[2][1];
    bool arb = 0;
    bool inter_trans_en = 1;
    bool intra_trans_en = 0;
    int c0, c0_prev;
    int c1, c1_prev;
    int c2, c2_prev;
    /* Variable Declaration */

    {
B_IO_L2_in_3_x1_loop_1:         for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
B_IO_L2_in_3_x1_loop_2:             for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
B_IO_L2_in_3_x1_loop_3:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // io_L3
                    {
                        if (arb == 0) {
                            if (inter_trans_en) {
B_IO_L2_in_3_x1_loop_4:                                 for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 2 max = 8
                                    if (c3 > -8 * c1 + 41)
                                        break;
                                    // io_L2
                                    if (c3 == p0) {
B_IO_L2_in_3_x1_loop_5:                                         for (ap_uint<2> c4 = 0; c4 <= 1; c4 += 1) {

                                            // access_coalesce
                                            {
                                                B_t8 in_data;
                                                B_t8 out_data;
                                                in_data = fifo_B_in.read();
                                                out_data = in_data;
                                                local_B_pong[c4][0] = out_data;
                                            }
                                        }
                                    } else {
B_IO_L2_in_3_x1_loop_6:                                         for (ap_uint<2> c4 = 0; c4 <= 1; c4 += 1) {

                                            // access_coalesce
                                            {
                                                B_t8 in_data;
                                                B_t8 out_data;
                                                in_data = fifo_B_in.read();
                                                out_data = in_data;
                                                fifo_B_out.write(out_data);
                                            }
                                        }
                                    }
                                }
                            }
                            ap_uint<32> data_split[8];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                            /* Variable Declaration */

                            if (intra_trans_en) {
B_IO_L2_in_3_x1_loop_7:                                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_IO_L2_in_3_x1_loop_8:                                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                        // latency
B_IO_L2_in_3_x1_loop_9:                                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                            // latency
B_IO_L2_in_3_x1_loop_10:                                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                                // simd
                                                {
                                                    B_t8 in_data;
                                                    B_t1 out_data;
                                                    in_data = local_B_ping[c5][c7 / 8];
B_IO_L2_in_3_x1_loop_11:                                                     for (ap_uint<4> n = 0; n < 8; n++) {
                                                        data_split[n] = in_data(31, 0);
                                                        in_data = in_data >> 32;
                                                    }
                                                    int split_idx = (c7) % 8;
                                                    union {
                                                        unsigned int ui;
                                                        float ut;
                                                    } u;
                                                    u.ui = (unsigned int)data_split[split_idx];
                                                    out_data = u.ut;
                                                    fifo_B_local_out.write(out_data);
                                                }
                                            }
                                        }
                                    }
                            }
                        } else {
                            if (inter_trans_en) {
B_IO_L2_in_3_x1_loop_12:                                 for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 2 max = 8
                                    if (c3 > -8 * c1 + 41)
                                        break;
                                    // io_L2
                                    if (c3 == p0) {
B_IO_L2_in_3_x1_loop_13:                                         for (ap_uint<2> c4 = 0; c4 <= 1; c4 += 1) {

                                            // access_coalesce
                                            {
                                                B_t8 in_data;
                                                B_t8 out_data;
                                                in_data = fifo_B_in.read();
                                                out_data = in_data;
                                                local_B_ping[c4][0] = out_data;
                                            }
                                        }
                                    } else {
B_IO_L2_in_3_x1_loop_14:                                         for (ap_uint<2> c4 = 0; c4 <= 1; c4 += 1) {

                                            // access_coalesce
                                            {
                                                B_t8 in_data;
                                                B_t8 out_data;
                                                in_data = fifo_B_in.read();
                                                out_data = in_data;
                                                fifo_B_out.write(out_data);
                                            }
                                        }
                                    }
                                }
                            }
                            ap_uint<32> data_split[8];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                            /* Variable Declaration */

                            if (intra_trans_en) {
B_IO_L2_in_3_x1_loop_15:                                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_IO_L2_in_3_x1_loop_16:                                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                        // latency
B_IO_L2_in_3_x1_loop_17:                                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                            // latency
B_IO_L2_in_3_x1_loop_18:                                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                                // simd
                                                {
                                                    B_t8 in_data;
                                                    B_t1 out_data;
                                                    in_data = local_B_pong[c5][c7 / 8];
B_IO_L2_in_3_x1_loop_19:                                                     for (ap_uint<4> n = 0; n < 8; n++) {
                                                        data_split[n] = in_data(31, 0);
                                                        in_data = in_data >> 32;
                                                    }
                                                    int split_idx = (c7) % 8;
                                                    union {
                                                        unsigned int ui;
                                                        float ut;
                                                    } u;
                                                    u.ui = (unsigned int)data_split[split_idx];
                                                    out_data = u.ut;
                                                    fifo_B_local_out.write(out_data);
                                                }
                                            }
                                        }
                                    }
                            }
                        }
                        intra_trans_en = 1;
                        arb = !arb;
                        c0_prev = c0;
                        c1_prev = c1;
                        c2_prev = c2;
                    }
                }
        if (arb == 0) {
            ap_uint<32> data_split[8];
#pragma HLS ARRAY_PARTITION variable = data_split complete
            /* Variable Declaration */

            if (intra_trans_en) {
B_IO_L2_in_3_x1_loop_20:                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_IO_L2_in_3_x1_loop_21:                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                        // latency
B_IO_L2_in_3_x1_loop_22:                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                            // latency
B_IO_L2_in_3_x1_loop_23:                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                // simd
                                {
                                    B_t8 in_data;
                                    B_t1 out_data;
                                    in_data = local_B_ping[c5][c7 / 8];
B_IO_L2_in_3_x1_loop_24:                                     for (ap_uint<4> n = 0; n < 8; n++) {
                                        data_split[n] = in_data(31, 0);
                                        in_data = in_data >> 32;
                                    }
                                    int split_idx = (c7) % 8;
                                    union {
                                        unsigned int ui;
                                        float ut;
                                    } u;
                                    u.ui = (unsigned int)data_split[split_idx];
                                    out_data = u.ut;
                                    fifo_B_local_out.write(out_data);
                                }
                            }
                        }
                    }
            }
        } else {
            ap_uint<32> data_split[8];
#pragma HLS ARRAY_PARTITION variable = data_split complete
            /* Variable Declaration */

            if (intra_trans_en) {
B_IO_L2_in_3_x1_loop_25:                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_IO_L2_in_3_x1_loop_26:                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                        // latency
B_IO_L2_in_3_x1_loop_27:                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                            // latency
B_IO_L2_in_3_x1_loop_28:                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                // simd
                                {
                                    B_t8 in_data;
                                    B_t1 out_data;
                                    in_data = local_B_pong[c5][c7 / 8];
B_IO_L2_in_3_x1_loop_29:                                     for (ap_uint<4> n = 0; n < 8; n++) {
                                        data_split[n] = in_data(31, 0);
                                        in_data = in_data >> 32;
                                    }
                                    int split_idx = (c7) % 8;
                                    union {
                                        unsigned int ui;
                                        float ut;
                                    } u;
                                    u.ui = (unsigned int)data_split[split_idx];
                                    out_data = u.ut;
                                    fifo_B_local_out.write(out_data);
                                }
                            }
                        }
                    }
            }
        }
    }
}
/* Module Definition */

/* Module Definition */
void B_IO_L2_in_4_x1(int idx, hls::stream<B_t8> &fifo_B_in, hls::stream<B_t8> &fifo_B_out, hls::stream<float> &fifo_B_local_out) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx; // module id
    B_t8 local_B_ping[2][1];
    B_t8 local_B_pong[2][1];
    bool arb = 0;
    bool inter_trans_en = 1;
    bool intra_trans_en = 0;
    int c0, c0_prev;
    int c1, c1_prev;
    int c2, c2_prev;
    /* Variable Declaration */

    {
B_IO_L2_in_4_x1_loop_1:         for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
B_IO_L2_in_4_x1_loop_2:             for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
B_IO_L2_in_4_x1_loop_3:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // io_L3
                    {
                        if (arb == 0) {
                            if (inter_trans_en) {
B_IO_L2_in_4_x1_loop_4:                                 for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 2 max = 8
                                    if (c3 > -8 * c1 + 41)
                                        break;
                                    // io_L2
                                    if (c3 == p0) {
B_IO_L2_in_4_x1_loop_5:                                         for (ap_uint<2> c4 = 0; c4 <= 1; c4 += 1) {

                                            // access_coalesce
                                            {
                                                B_t8 in_data;
                                                B_t8 out_data;
                                                in_data = fifo_B_in.read();
                                                out_data = in_data;
                                                local_B_pong[c4][0] = out_data;
                                            }
                                        }
                                    } else {
B_IO_L2_in_4_x1_loop_6:                                         for (ap_uint<2> c4 = 0; c4 <= 1; c4 += 1) {

                                            // access_coalesce
                                            {
                                                B_t8 in_data;
                                                B_t8 out_data;
                                                in_data = fifo_B_in.read();
                                                out_data = in_data;
                                                fifo_B_out.write(out_data);
                                            }
                                        }
                                    }
                                }
                            }
                            ap_uint<32> data_split[8];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                            /* Variable Declaration */

                            if (intra_trans_en) {
B_IO_L2_in_4_x1_loop_7:                                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_IO_L2_in_4_x1_loop_8:                                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                        // latency
B_IO_L2_in_4_x1_loop_9:                                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                            // latency
B_IO_L2_in_4_x1_loop_10:                                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                                // simd
                                                {
                                                    B_t8 in_data;
                                                    B_t1 out_data;
                                                    in_data = local_B_ping[c5][c7 / 8];
B_IO_L2_in_4_x1_loop_11:                                                     for (ap_uint<4> n = 0; n < 8; n++) {
                                                        data_split[n] = in_data(31, 0);
                                                        in_data = in_data >> 32;
                                                    }
                                                    int split_idx = (c7) % 8;
                                                    union {
                                                        unsigned int ui;
                                                        float ut;
                                                    } u;
                                                    u.ui = (unsigned int)data_split[split_idx];
                                                    out_data = u.ut;
                                                    fifo_B_local_out.write(out_data);
                                                }
                                            }
                                        }
                                    }
                            }
                        } else {
                            if (inter_trans_en) {
B_IO_L2_in_4_x1_loop_12:                                 for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 2 max = 8
                                    if (c3 > -8 * c1 + 41)
                                        break;
                                    // io_L2
                                    if (c3 == p0) {
B_IO_L2_in_4_x1_loop_13:                                         for (ap_uint<2> c4 = 0; c4 <= 1; c4 += 1) {

                                            // access_coalesce
                                            {
                                                B_t8 in_data;
                                                B_t8 out_data;
                                                in_data = fifo_B_in.read();
                                                out_data = in_data;
                                                local_B_ping[c4][0] = out_data;
                                            }
                                        }
                                    } else {
B_IO_L2_in_4_x1_loop_14:                                         for (ap_uint<2> c4 = 0; c4 <= 1; c4 += 1) {

                                            // access_coalesce
                                            {
                                                B_t8 in_data;
                                                B_t8 out_data;
                                                in_data = fifo_B_in.read();
                                                out_data = in_data;
                                                fifo_B_out.write(out_data);
                                            }
                                        }
                                    }
                                }
                            }
                            ap_uint<32> data_split[8];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                            /* Variable Declaration */

                            if (intra_trans_en) {
B_IO_L2_in_4_x1_loop_15:                                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_IO_L2_in_4_x1_loop_16:                                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                        // latency
B_IO_L2_in_4_x1_loop_17:                                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                            // latency
B_IO_L2_in_4_x1_loop_18:                                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                                // simd
                                                {
                                                    B_t8 in_data;
                                                    B_t1 out_data;
                                                    in_data = local_B_pong[c5][c7 / 8];
B_IO_L2_in_4_x1_loop_19:                                                     for (ap_uint<4> n = 0; n < 8; n++) {
                                                        data_split[n] = in_data(31, 0);
                                                        in_data = in_data >> 32;
                                                    }
                                                    int split_idx = (c7) % 8;
                                                    union {
                                                        unsigned int ui;
                                                        float ut;
                                                    } u;
                                                    u.ui = (unsigned int)data_split[split_idx];
                                                    out_data = u.ut;
                                                    fifo_B_local_out.write(out_data);
                                                }
                                            }
                                        }
                                    }
                            }
                        }
                        intra_trans_en = 1;
                        arb = !arb;
                        c0_prev = c0;
                        c1_prev = c1;
                        c2_prev = c2;
                    }
                }
        if (arb == 0) {
            ap_uint<32> data_split[8];
#pragma HLS ARRAY_PARTITION variable = data_split complete
            /* Variable Declaration */

            if (intra_trans_en) {
B_IO_L2_in_4_x1_loop_20:                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_IO_L2_in_4_x1_loop_21:                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                        // latency
B_IO_L2_in_4_x1_loop_22:                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                            // latency
B_IO_L2_in_4_x1_loop_23:                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                // simd
                                {
                                    B_t8 in_data;
                                    B_t1 out_data;
                                    in_data = local_B_ping[c5][c7 / 8];
B_IO_L2_in_4_x1_loop_24:                                     for (ap_uint<4> n = 0; n < 8; n++) {
                                        data_split[n] = in_data(31, 0);
                                        in_data = in_data >> 32;
                                    }
                                    int split_idx = (c7) % 8;
                                    union {
                                        unsigned int ui;
                                        float ut;
                                    } u;
                                    u.ui = (unsigned int)data_split[split_idx];
                                    out_data = u.ut;
                                    fifo_B_local_out.write(out_data);
                                }
                            }
                        }
                    }
            }
        } else {
            ap_uint<32> data_split[8];
#pragma HLS ARRAY_PARTITION variable = data_split complete
            /* Variable Declaration */

            if (intra_trans_en) {
B_IO_L2_in_4_x1_loop_25:                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_IO_L2_in_4_x1_loop_26:                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                        // latency
B_IO_L2_in_4_x1_loop_27:                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                            // latency
B_IO_L2_in_4_x1_loop_28:                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                // simd
                                {
                                    B_t8 in_data;
                                    B_t1 out_data;
                                    in_data = local_B_pong[c5][c7 / 8];
B_IO_L2_in_4_x1_loop_29:                                     for (ap_uint<4> n = 0; n < 8; n++) {
                                        data_split[n] = in_data(31, 0);
                                        in_data = in_data >> 32;
                                    }
                                    int split_idx = (c7) % 8;
                                    union {
                                        unsigned int ui;
                                        float ut;
                                    } u;
                                    u.ui = (unsigned int)data_split[split_idx];
                                    out_data = u.ut;
                                    fifo_B_local_out.write(out_data);
                                }
                            }
                        }
                    }
            }
        }
    }
}
/* Module Definition */

/* Module Definition */
void B_IO_L2_in_5_x1(int idx, hls::stream<B_t8> &fifo_B_in, hls::stream<B_t8> &fifo_B_out, hls::stream<float> &fifo_B_local_out) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx; // module id
    B_t8 local_B_ping[2][1];
    B_t8 local_B_pong[2][1];
    bool arb = 0;
    bool inter_trans_en = 1;
    bool intra_trans_en = 0;
    int c0, c0_prev;
    int c1, c1_prev;
    int c2, c2_prev;
    /* Variable Declaration */

    {
B_IO_L2_in_5_x1_loop_1:         for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
B_IO_L2_in_5_x1_loop_2:             for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
B_IO_L2_in_5_x1_loop_3:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // io_L3
                    {
                        if (arb == 0) {
                            if (inter_trans_en) {
B_IO_L2_in_5_x1_loop_4:                                 for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 2 max = 8
                                    if (c3 > -8 * c1 + 41)
                                        break;
                                    // io_L2
                                    if (c3 == p0) {
B_IO_L2_in_5_x1_loop_5:                                         for (ap_uint<2> c4 = 0; c4 <= 1; c4 += 1) {

                                            // access_coalesce
                                            {
                                                B_t8 in_data;
                                                B_t8 out_data;
                                                in_data = fifo_B_in.read();
                                                out_data = in_data;
                                                local_B_pong[c4][0] = out_data;
                                            }
                                        }
                                    } else {
B_IO_L2_in_5_x1_loop_6:                                         for (ap_uint<2> c4 = 0; c4 <= 1; c4 += 1) {

                                            // access_coalesce
                                            {
                                                B_t8 in_data;
                                                B_t8 out_data;
                                                in_data = fifo_B_in.read();
                                                out_data = in_data;
                                                fifo_B_out.write(out_data);
                                            }
                                        }
                                    }
                                }
                            }
                            ap_uint<32> data_split[8];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                            /* Variable Declaration */

                            if (intra_trans_en) {
B_IO_L2_in_5_x1_loop_7:                                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_IO_L2_in_5_x1_loop_8:                                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                        // latency
B_IO_L2_in_5_x1_loop_9:                                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                            // latency
B_IO_L2_in_5_x1_loop_10:                                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                                // simd
                                                {
                                                    B_t8 in_data;
                                                    B_t1 out_data;
                                                    in_data = local_B_ping[c5][c7 / 8];
B_IO_L2_in_5_x1_loop_11:                                                     for (ap_uint<4> n = 0; n < 8; n++) {
                                                        data_split[n] = in_data(31, 0);
                                                        in_data = in_data >> 32;
                                                    }
                                                    int split_idx = (c7) % 8;
                                                    union {
                                                        unsigned int ui;
                                                        float ut;
                                                    } u;
                                                    u.ui = (unsigned int)data_split[split_idx];
                                                    out_data = u.ut;
                                                    fifo_B_local_out.write(out_data);
                                                }
                                            }
                                        }
                                    }
                            }
                        } else {
                            if (inter_trans_en) {
B_IO_L2_in_5_x1_loop_12:                                 for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 2 max = 8
                                    if (c3 > -8 * c1 + 41)
                                        break;
                                    // io_L2
                                    if (c3 == p0) {
B_IO_L2_in_5_x1_loop_13:                                         for (ap_uint<2> c4 = 0; c4 <= 1; c4 += 1) {

                                            // access_coalesce
                                            {
                                                B_t8 in_data;
                                                B_t8 out_data;
                                                in_data = fifo_B_in.read();
                                                out_data = in_data;
                                                local_B_ping[c4][0] = out_data;
                                            }
                                        }
                                    } else {
B_IO_L2_in_5_x1_loop_14:                                         for (ap_uint<2> c4 = 0; c4 <= 1; c4 += 1) {

                                            // access_coalesce
                                            {
                                                B_t8 in_data;
                                                B_t8 out_data;
                                                in_data = fifo_B_in.read();
                                                out_data = in_data;
                                                fifo_B_out.write(out_data);
                                            }
                                        }
                                    }
                                }
                            }
                            ap_uint<32> data_split[8];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                            /* Variable Declaration */

                            if (intra_trans_en) {
B_IO_L2_in_5_x1_loop_15:                                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_IO_L2_in_5_x1_loop_16:                                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                        // latency
B_IO_L2_in_5_x1_loop_17:                                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                            // latency
B_IO_L2_in_5_x1_loop_18:                                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                                // simd
                                                {
                                                    B_t8 in_data;
                                                    B_t1 out_data;
                                                    in_data = local_B_pong[c5][c7 / 8];
B_IO_L2_in_5_x1_loop_19:                                                     for (ap_uint<4> n = 0; n < 8; n++) {
                                                        data_split[n] = in_data(31, 0);
                                                        in_data = in_data >> 32;
                                                    }
                                                    int split_idx = (c7) % 8;
                                                    union {
                                                        unsigned int ui;
                                                        float ut;
                                                    } u;
                                                    u.ui = (unsigned int)data_split[split_idx];
                                                    out_data = u.ut;
                                                    fifo_B_local_out.write(out_data);
                                                }
                                            }
                                        }
                                    }
                            }
                        }
                        intra_trans_en = 1;
                        arb = !arb;
                        c0_prev = c0;
                        c1_prev = c1;
                        c2_prev = c2;
                    }
                }
        if (arb == 0) {
            ap_uint<32> data_split[8];
#pragma HLS ARRAY_PARTITION variable = data_split complete
            /* Variable Declaration */

            if (intra_trans_en) {
B_IO_L2_in_5_x1_loop_20:                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_IO_L2_in_5_x1_loop_21:                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                        // latency
B_IO_L2_in_5_x1_loop_22:                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                            // latency
B_IO_L2_in_5_x1_loop_23:                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                // simd
                                {
                                    B_t8 in_data;
                                    B_t1 out_data;
                                    in_data = local_B_ping[c5][c7 / 8];
B_IO_L2_in_5_x1_loop_24:                                     for (ap_uint<4> n = 0; n < 8; n++) {
                                        data_split[n] = in_data(31, 0);
                                        in_data = in_data >> 32;
                                    }
                                    int split_idx = (c7) % 8;
                                    union {
                                        unsigned int ui;
                                        float ut;
                                    } u;
                                    u.ui = (unsigned int)data_split[split_idx];
                                    out_data = u.ut;
                                    fifo_B_local_out.write(out_data);
                                }
                            }
                        }
                    }
            }
        } else {
            ap_uint<32> data_split[8];
#pragma HLS ARRAY_PARTITION variable = data_split complete
            /* Variable Declaration */

            if (intra_trans_en) {
B_IO_L2_in_5_x1_loop_25:                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_IO_L2_in_5_x1_loop_26:                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                        // latency
B_IO_L2_in_5_x1_loop_27:                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                            // latency
B_IO_L2_in_5_x1_loop_28:                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                // simd
                                {
                                    B_t8 in_data;
                                    B_t1 out_data;
                                    in_data = local_B_pong[c5][c7 / 8];
B_IO_L2_in_5_x1_loop_29:                                     for (ap_uint<4> n = 0; n < 8; n++) {
                                        data_split[n] = in_data(31, 0);
                                        in_data = in_data >> 32;
                                    }
                                    int split_idx = (c7) % 8;
                                    union {
                                        unsigned int ui;
                                        float ut;
                                    } u;
                                    u.ui = (unsigned int)data_split[split_idx];
                                    out_data = u.ut;
                                    fifo_B_local_out.write(out_data);
                                }
                            }
                        }
                    }
            }
        }
    }
}
/* Module Definition */

/* Module Definition */
void B_IO_L2_in_6_x1(int idx, hls::stream<B_t8> &fifo_B_in, hls::stream<B_t8> &fifo_B_out, hls::stream<float> &fifo_B_local_out) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx; // module id
    B_t8 local_B_ping[2][1];
    B_t8 local_B_pong[2][1];
    bool arb = 0;
    bool inter_trans_en = 1;
    bool intra_trans_en = 0;
    int c0, c0_prev;
    int c1, c1_prev;
    int c2, c2_prev;
    /* Variable Declaration */

    {
B_IO_L2_in_6_x1_loop_1:         for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
B_IO_L2_in_6_x1_loop_2:             for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
B_IO_L2_in_6_x1_loop_3:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // io_L3
                    {
                        if (arb == 0) {
                            if (inter_trans_en) {
B_IO_L2_in_6_x1_loop_4:                                 for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 2 max = 8
                                    if (c3 > -8 * c1 + 41)
                                        break;
                                    // io_L2
                                    if (c3 == p0) {
B_IO_L2_in_6_x1_loop_5:                                         for (ap_uint<2> c4 = 0; c4 <= 1; c4 += 1) {

                                            // access_coalesce
                                            {
                                                B_t8 in_data;
                                                B_t8 out_data;
                                                in_data = fifo_B_in.read();
                                                out_data = in_data;
                                                local_B_pong[c4][0] = out_data;
                                            }
                                        }
                                    } else {
B_IO_L2_in_6_x1_loop_6:                                         for (ap_uint<2> c4 = 0; c4 <= 1; c4 += 1) {

                                            // access_coalesce
                                            {
                                                B_t8 in_data;
                                                B_t8 out_data;
                                                in_data = fifo_B_in.read();
                                                out_data = in_data;
                                                fifo_B_out.write(out_data);
                                            }
                                        }
                                    }
                                }
                            }
                            ap_uint<32> data_split[8];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                            /* Variable Declaration */

                            if (intra_trans_en) {
B_IO_L2_in_6_x1_loop_7:                                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_IO_L2_in_6_x1_loop_8:                                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                        // latency
B_IO_L2_in_6_x1_loop_9:                                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                            // latency
B_IO_L2_in_6_x1_loop_10:                                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                                // simd
                                                {
                                                    B_t8 in_data;
                                                    B_t1 out_data;
                                                    in_data = local_B_ping[c5][c7 / 8];
B_IO_L2_in_6_x1_loop_11:                                                     for (ap_uint<4> n = 0; n < 8; n++) {
                                                        data_split[n] = in_data(31, 0);
                                                        in_data = in_data >> 32;
                                                    }
                                                    int split_idx = (c7) % 8;
                                                    union {
                                                        unsigned int ui;
                                                        float ut;
                                                    } u;
                                                    u.ui = (unsigned int)data_split[split_idx];
                                                    out_data = u.ut;
                                                    fifo_B_local_out.write(out_data);
                                                }
                                            }
                                        }
                                    }
                            }
                        } else {
                            if (inter_trans_en) {
B_IO_L2_in_6_x1_loop_12:                                 for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 2 max = 8
                                    if (c3 > -8 * c1 + 41)
                                        break;
                                    // io_L2
                                    if (c3 == p0) {
B_IO_L2_in_6_x1_loop_13:                                         for (ap_uint<2> c4 = 0; c4 <= 1; c4 += 1) {

                                            // access_coalesce
                                            {
                                                B_t8 in_data;
                                                B_t8 out_data;
                                                in_data = fifo_B_in.read();
                                                out_data = in_data;
                                                local_B_ping[c4][0] = out_data;
                                            }
                                        }
                                    } else {
B_IO_L2_in_6_x1_loop_14:                                         for (ap_uint<2> c4 = 0; c4 <= 1; c4 += 1) {

                                            // access_coalesce
                                            {
                                                B_t8 in_data;
                                                B_t8 out_data;
                                                in_data = fifo_B_in.read();
                                                out_data = in_data;
                                                fifo_B_out.write(out_data);
                                            }
                                        }
                                    }
                                }
                            }
                            ap_uint<32> data_split[8];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                            /* Variable Declaration */

                            if (intra_trans_en) {
B_IO_L2_in_6_x1_loop_15:                                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_IO_L2_in_6_x1_loop_16:                                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                        // latency
B_IO_L2_in_6_x1_loop_17:                                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                            // latency
B_IO_L2_in_6_x1_loop_18:                                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                                // simd
                                                {
                                                    B_t8 in_data;
                                                    B_t1 out_data;
                                                    in_data = local_B_pong[c5][c7 / 8];
B_IO_L2_in_6_x1_loop_19:                                                     for (ap_uint<4> n = 0; n < 8; n++) {
                                                        data_split[n] = in_data(31, 0);
                                                        in_data = in_data >> 32;
                                                    }
                                                    int split_idx = (c7) % 8;
                                                    union {
                                                        unsigned int ui;
                                                        float ut;
                                                    } u;
                                                    u.ui = (unsigned int)data_split[split_idx];
                                                    out_data = u.ut;
                                                    fifo_B_local_out.write(out_data);
                                                }
                                            }
                                        }
                                    }
                            }
                        }
                        intra_trans_en = 1;
                        arb = !arb;
                        c0_prev = c0;
                        c1_prev = c1;
                        c2_prev = c2;
                    }
                }
        if (arb == 0) {
            ap_uint<32> data_split[8];
#pragma HLS ARRAY_PARTITION variable = data_split complete
            /* Variable Declaration */

            if (intra_trans_en) {
B_IO_L2_in_6_x1_loop_20:                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_IO_L2_in_6_x1_loop_21:                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                        // latency
B_IO_L2_in_6_x1_loop_22:                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                            // latency
B_IO_L2_in_6_x1_loop_23:                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                // simd
                                {
                                    B_t8 in_data;
                                    B_t1 out_data;
                                    in_data = local_B_ping[c5][c7 / 8];
B_IO_L2_in_6_x1_loop_24:                                     for (ap_uint<4> n = 0; n < 8; n++) {
                                        data_split[n] = in_data(31, 0);
                                        in_data = in_data >> 32;
                                    }
                                    int split_idx = (c7) % 8;
                                    union {
                                        unsigned int ui;
                                        float ut;
                                    } u;
                                    u.ui = (unsigned int)data_split[split_idx];
                                    out_data = u.ut;
                                    fifo_B_local_out.write(out_data);
                                }
                            }
                        }
                    }
            }
        } else {
            ap_uint<32> data_split[8];
#pragma HLS ARRAY_PARTITION variable = data_split complete
            /* Variable Declaration */

            if (intra_trans_en) {
B_IO_L2_in_6_x1_loop_25:                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_IO_L2_in_6_x1_loop_26:                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                        // latency
B_IO_L2_in_6_x1_loop_27:                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                            // latency
B_IO_L2_in_6_x1_loop_28:                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                // simd
                                {
                                    B_t8 in_data;
                                    B_t1 out_data;
                                    in_data = local_B_pong[c5][c7 / 8];
B_IO_L2_in_6_x1_loop_29:                                     for (ap_uint<4> n = 0; n < 8; n++) {
                                        data_split[n] = in_data(31, 0);
                                        in_data = in_data >> 32;
                                    }
                                    int split_idx = (c7) % 8;
                                    union {
                                        unsigned int ui;
                                        float ut;
                                    } u;
                                    u.ui = (unsigned int)data_split[split_idx];
                                    out_data = u.ut;
                                    fifo_B_local_out.write(out_data);
                                }
                            }
                        }
                    }
            }
        }
    }
}
/* Module Definition */

/* Module Definition */
void B_IO_L2_in_boundary_x1(int idx, hls::stream<B_t8> &fifo_B_in, hls::stream<float> &fifo_B_local_out) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx; // module id
    B_t8 local_B_ping[2][1];
    B_t8 local_B_pong[2][1];
    bool arb = 0;
    bool inter_trans_en = 1;
    bool intra_trans_en = 0;
    int c0, c0_prev;
    int c1, c1_prev;
    int c2, c2_prev;
    /* Variable Declaration */

    {
B_IO_L2_in_boundary_x1_loop_1:         for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
B_IO_L2_in_boundary_x1_loop_2:             for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
B_IO_L2_in_boundary_x1_loop_3:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // io_L3
                    {
                        if (arb == 0) {
                            if (inter_trans_en) {
B_IO_L2_in_boundary_x1_loop_4:                                 for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 1 max = 1
                                    if (c3 > -8 * c1 + 41)
                                        break;
                                    if (c3 == p0) {
                                        // io_L2
B_IO_L2_in_boundary_x1_loop_5:                                         for (ap_uint<2> c4 = 0; c4 <= 1; c4 += 1) {

                                            // access_coalesce
                                            {
                                                B_t8 in_data;
                                                B_t8 out_data;
                                                in_data = fifo_B_in.read();
                                                out_data = in_data;
                                                local_B_pong[c4][0] = out_data;
                                            }
                                        }
                                    }
                                }
                            }
                            ap_uint<32> data_split[8];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                            /* Variable Declaration */

                            if (intra_trans_en) {
B_IO_L2_in_boundary_x1_loop_6:                                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_IO_L2_in_boundary_x1_loop_7:                                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                        // latency
B_IO_L2_in_boundary_x1_loop_8:                                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                            // latency
B_IO_L2_in_boundary_x1_loop_9:                                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                                // simd
                                                {
                                                    B_t8 in_data;
                                                    B_t1 out_data;
                                                    in_data = local_B_ping[c5][c7 / 8];
B_IO_L2_in_boundary_x1_loop_10:                                                     for (ap_uint<4> n = 0; n < 8; n++) {
                                                        data_split[n] = in_data(31, 0);
                                                        in_data = in_data >> 32;
                                                    }
                                                    int split_idx = (c7) % 8;
                                                    union {
                                                        unsigned int ui;
                                                        float ut;
                                                    } u;
                                                    u.ui = (unsigned int)data_split[split_idx];
                                                    out_data = u.ut;
                                                    fifo_B_local_out.write(out_data);
                                                }
                                            }
                                        }
                                    }
                            }
                        } else {
                            if (inter_trans_en) {
B_IO_L2_in_boundary_x1_loop_11:                                 for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 1 max = 1
                                    if (c3 > -8 * c1 + 41)
                                        break;
                                    if (c3 == p0) {
                                        // io_L2
B_IO_L2_in_boundary_x1_loop_12:                                         for (ap_uint<2> c4 = 0; c4 <= 1; c4 += 1) {

                                            // access_coalesce
                                            {
                                                B_t8 in_data;
                                                B_t8 out_data;
                                                in_data = fifo_B_in.read();
                                                out_data = in_data;
                                                local_B_ping[c4][0] = out_data;
                                            }
                                        }
                                    }
                                }
                            }
                            ap_uint<32> data_split[8];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                            /* Variable Declaration */

                            if (intra_trans_en) {
B_IO_L2_in_boundary_x1_loop_13:                                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_IO_L2_in_boundary_x1_loop_14:                                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                        // latency
B_IO_L2_in_boundary_x1_loop_15:                                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                            // latency
B_IO_L2_in_boundary_x1_loop_16:                                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                                // simd
                                                {
                                                    B_t8 in_data;
                                                    B_t1 out_data;
                                                    in_data = local_B_pong[c5][c7 / 8];
B_IO_L2_in_boundary_x1_loop_17:                                                     for (ap_uint<4> n = 0; n < 8; n++) {
                                                        data_split[n] = in_data(31, 0);
                                                        in_data = in_data >> 32;
                                                    }
                                                    int split_idx = (c7) % 8;
                                                    union {
                                                        unsigned int ui;
                                                        float ut;
                                                    } u;
                                                    u.ui = (unsigned int)data_split[split_idx];
                                                    out_data = u.ut;
                                                    fifo_B_local_out.write(out_data);
                                                }
                                            }
                                        }
                                    }
                            }
                        }
                        intra_trans_en = 1;
                        arb = !arb;
                        c0_prev = c0;
                        c1_prev = c1;
                        c2_prev = c2;
                    }
                }
        if (arb == 0) {
            ap_uint<32> data_split[8];
#pragma HLS ARRAY_PARTITION variable = data_split complete
            /* Variable Declaration */

            if (intra_trans_en) {
B_IO_L2_in_boundary_x1_loop_18:                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_IO_L2_in_boundary_x1_loop_19:                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                        // latency
B_IO_L2_in_boundary_x1_loop_20:                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                            // latency
B_IO_L2_in_boundary_x1_loop_21:                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                // simd
                                {
                                    B_t8 in_data;
                                    B_t1 out_data;
                                    in_data = local_B_ping[c5][c7 / 8];
B_IO_L2_in_boundary_x1_loop_22:                                     for (ap_uint<4> n = 0; n < 8; n++) {
                                        data_split[n] = in_data(31, 0);
                                        in_data = in_data >> 32;
                                    }
                                    int split_idx = (c7) % 8;
                                    union {
                                        unsigned int ui;
                                        float ut;
                                    } u;
                                    u.ui = (unsigned int)data_split[split_idx];
                                    out_data = u.ut;
                                    fifo_B_local_out.write(out_data);
                                }
                            }
                        }
                    }
            }
        } else {
            ap_uint<32> data_split[8];
#pragma HLS ARRAY_PARTITION variable = data_split complete
            /* Variable Declaration */

            if (intra_trans_en) {
B_IO_L2_in_boundary_x1_loop_23:                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_IO_L2_in_boundary_x1_loop_24:                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                        // latency
B_IO_L2_in_boundary_x1_loop_25:                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                            // latency
B_IO_L2_in_boundary_x1_loop_26:                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                // simd
                                {
                                    B_t8 in_data;
                                    B_t1 out_data;
                                    in_data = local_B_pong[c5][c7 / 8];
B_IO_L2_in_boundary_x1_loop_27:                                     for (ap_uint<4> n = 0; n < 8; n++) {
                                        data_split[n] = in_data(31, 0);
                                        in_data = in_data >> 32;
                                    }
                                    int split_idx = (c7) % 8;
                                    union {
                                        unsigned int ui;
                                        float ut;
                                    } u;
                                    u.ui = (unsigned int)data_split[split_idx];
                                    out_data = u.ut;
                                    fifo_B_local_out.write(out_data);
                                }
                            }
                        }
                    }
            }
        }
    }
}
/* Module Definition */

/* Module Definition */
void C_IO_L3_in_x1(hls::stream<C_t16> &fifo_C_in, hls::stream<C_t16> &fifo_C_local_out) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    /* Variable Declaration */

C_IO_L3_in_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
C_IO_L3_in_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
            // array
            // io_L3
C_IO_L3_in_x1_loop_3:             for (int c3 = 0; c3 <= 7; c3 += 1) {
                if (c3 > -8 * c1 + 41)
                    break;
                // io_L2
C_IO_L3_in_x1_loop_4:                 for (ap_uint<4> c4 = 0; c4 <= 7; c4 += 1) {
                    // access_coalesce
                    // access_serialize
C_IO_L3_in_x1_loop_5:                     for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {

                        {
                            C_t16 in_data;
                            C_t16 out_data;
                            in_data = fifo_C_in.read();
                            out_data = in_data;
                            fifo_C_local_out.write(out_data);
                        }
                    }
                }
            }
        }
}
/* Module Definition */

/* Module Definition */
void C_IO_L3_in_serialize_x1(C_t16 *C, hls::stream<C_t16> &fifo_C_local_out) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    /* Variable Declaration */

C_IO_L3_in_serialize_x1_loop_1:     for (ap_uint<23> i = 0; i < 1024; i++) {

        C_t16 fifo_data;
        fifo_data = C[i];
        fifo_C_local_out.write(fifo_data);
    }
}
/* Module Definition */

/* Module Definition */
void C_IO_L2_in_0_x1(int idx, hls::stream<C_t16> &fifo_C_in, hls::stream<C_t16> &fifo_C_out, hls::stream<C_t8> &fifo_C_local_out) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx; // module id
    C_t16 local_C_ping[8][16];
    C_t16 local_C_pong[8][16];
    bool arb = 0;
    bool inter_trans_en = 1;
    bool intra_trans_en = 0;
    int c0, c0_prev;
    int c1, c1_prev;
    /* Variable Declaration */

    {
C_IO_L2_in_0_x1_loop_1:         for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
C_IO_L2_in_0_x1_loop_2:             for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
                // array
                // io_L3
                {
                    if (arb == 0) {
                        if (inter_trans_en) {
C_IO_L2_in_0_x1_loop_3:                             for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 1 max = 8
                                if (c3 > -8 * c1 + 41)
                                    break;
                                // io_L2
                                if (c3 == p0) {
C_IO_L2_in_0_x1_loop_4:                                     for (ap_uint<4> c4 = 0; c4 <= 7; c4 += 1) {
                                        // access_coalesce
C_IO_L2_in_0_x1_loop_5:                                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {

                                            {
                                                C_t16 in_data;
                                                C_t16 out_data;
                                                in_data = fifo_C_in.read();
                                                out_data = in_data;
                                                local_C_pong[c4][c5] = out_data;
                                            }
                                        }
                                    }
                                } else {
C_IO_L2_in_0_x1_loop_6:                                     for (ap_uint<4> c4 = 0; c4 <= 7; c4 += 1) {
                                        // access_coalesce
C_IO_L2_in_0_x1_loop_7:                                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {

                                            {
                                                C_t16 in_data;
                                                C_t16 out_data;
                                                in_data = fifo_C_in.read();
                                                out_data = in_data;
                                                fifo_C_out.write(out_data);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        C_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                        /* Variable Declaration */

                        if (intra_trans_en) {
C_IO_L2_in_0_x1_loop_8:                             for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                                // array
                                // io_L3
                                // io_L2
                                // io_L1
                                // pe
C_IO_L2_in_0_x1_loop_9:                                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_IO_L2_in_0_x1_loop_10:                                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                        // latency
C_IO_L2_in_0_x1_loop_11:                                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                            // latency
C_IO_L2_in_0_x1_loop_12:                                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                                // simd
                                                {
                                                    C_t16 in_data;
                                                    C_t8 out_data;
                                                    in_data = local_C_ping[c7][8 * c6 / 16];
C_IO_L2_in_0_x1_loop_13:                                                     for (ap_uint<2> n = 0; n < 2; n++) {
                                                        data_split[n] = in_data(255, 0);
                                                        in_data = in_data >> 256;
                                                    }
                                                    int split_idx = (c6) % 2;
                                                    out_data = data_split[split_idx];
                                                    fifo_C_local_out.write(out_data);
                                                }
                                            }
                                        }
                                    }
                            }
                        }
                    } else {
                        if (inter_trans_en) {
C_IO_L2_in_0_x1_loop_14:                             for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 1 max = 8
                                if (c3 > -8 * c1 + 41)
                                    break;
                                // io_L2
                                if (c3 == p0) {
C_IO_L2_in_0_x1_loop_15:                                     for (ap_uint<4> c4 = 0; c4 <= 7; c4 += 1) {
                                        // access_coalesce
C_IO_L2_in_0_x1_loop_16:                                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {

                                            {
                                                C_t16 in_data;
                                                C_t16 out_data;
                                                in_data = fifo_C_in.read();
                                                out_data = in_data;
                                                local_C_ping[c4][c5] = out_data;
                                            }
                                        }
                                    }
                                } else {
C_IO_L2_in_0_x1_loop_17:                                     for (ap_uint<4> c4 = 0; c4 <= 7; c4 += 1) {
                                        // access_coalesce
C_IO_L2_in_0_x1_loop_18:                                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {

                                            {
                                                C_t16 in_data;
                                                C_t16 out_data;
                                                in_data = fifo_C_in.read();
                                                out_data = in_data;
                                                fifo_C_out.write(out_data);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        C_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                        /* Variable Declaration */

                        if (intra_trans_en) {
C_IO_L2_in_0_x1_loop_19:                             for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                                // array
                                // io_L3
                                // io_L2
                                // io_L1
                                // pe
C_IO_L2_in_0_x1_loop_20:                                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_IO_L2_in_0_x1_loop_21:                                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                        // latency
C_IO_L2_in_0_x1_loop_22:                                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                            // latency
C_IO_L2_in_0_x1_loop_23:                                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                                // simd
                                                {
                                                    C_t16 in_data;
                                                    C_t8 out_data;
                                                    in_data = local_C_pong[c7][8 * c6 / 16];
C_IO_L2_in_0_x1_loop_24:                                                     for (ap_uint<2> n = 0; n < 2; n++) {
                                                        data_split[n] = in_data(255, 0);
                                                        in_data = in_data >> 256;
                                                    }
                                                    int split_idx = (c6) % 2;
                                                    out_data = data_split[split_idx];
                                                    fifo_C_local_out.write(out_data);
                                                }
                                            }
                                        }
                                    }
                            }
                        }
                    }
                    intra_trans_en = 1;
                    arb = !arb;
                    c0_prev = c0;
                    c1_prev = c1;
                }
            }
        if (arb == 0) {
            C_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
            /* Variable Declaration */

            if (intra_trans_en) {
C_IO_L2_in_0_x1_loop_25:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // io_L3
                    // io_L2
                    // io_L1
                    // pe
C_IO_L2_in_0_x1_loop_26:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_IO_L2_in_0_x1_loop_27:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
C_IO_L2_in_0_x1_loop_28:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
C_IO_L2_in_0_x1_loop_29:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    // simd
                                    {
                                        C_t16 in_data;
                                        C_t8 out_data;
                                        in_data = local_C_ping[c7][8 * c6 / 16];
C_IO_L2_in_0_x1_loop_30:                                         for (ap_uint<2> n = 0; n < 2; n++) {
                                            data_split[n] = in_data(255, 0);
                                            in_data = in_data >> 256;
                                        }
                                        int split_idx = (c6) % 2;
                                        out_data = data_split[split_idx];
                                        fifo_C_local_out.write(out_data);
                                    }
                                }
                            }
                        }
                }
            }
        } else {
            C_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
            /* Variable Declaration */

            if (intra_trans_en) {
C_IO_L2_in_0_x1_loop_31:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // io_L3
                    // io_L2
                    // io_L1
                    // pe
C_IO_L2_in_0_x1_loop_32:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_IO_L2_in_0_x1_loop_33:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
C_IO_L2_in_0_x1_loop_34:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
C_IO_L2_in_0_x1_loop_35:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    // simd
                                    {
                                        C_t16 in_data;
                                        C_t8 out_data;
                                        in_data = local_C_pong[c7][8 * c6 / 16];
C_IO_L2_in_0_x1_loop_36:                                         for (ap_uint<2> n = 0; n < 2; n++) {
                                            data_split[n] = in_data(255, 0);
                                            in_data = in_data >> 256;
                                        }
                                        int split_idx = (c6) % 2;
                                        out_data = data_split[split_idx];
                                        fifo_C_local_out.write(out_data);
                                    }
                                }
                            }
                        }
                }
            }
        }
    }
}
/* Module Definition */

/* Module Definition */
void C_IO_L2_in_1_x1(int idx, hls::stream<C_t16> &fifo_C_in, hls::stream<C_t16> &fifo_C_out, hls::stream<C_t8> &fifo_C_local_out) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx; // module id
    C_t16 local_C_ping[8][16];
    C_t16 local_C_pong[8][16];
    bool arb = 0;
    bool inter_trans_en = 1;
    bool intra_trans_en = 0;
    int c0, c0_prev;
    int c1, c1_prev;
    /* Variable Declaration */

    {
C_IO_L2_in_1_x1_loop_1:         for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
C_IO_L2_in_1_x1_loop_2:             for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
                // array
                // io_L3
                {
                    if (arb == 0) {
                        if (inter_trans_en) {
C_IO_L2_in_1_x1_loop_3:                             for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 1 max = 8
                                if (c3 > -8 * c1 + 41)
                                    break;
                                // io_L2
                                if (c3 == p0) {
C_IO_L2_in_1_x1_loop_4:                                     for (ap_uint<4> c4 = 0; c4 <= 7; c4 += 1) {
                                        // access_coalesce
C_IO_L2_in_1_x1_loop_5:                                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {

                                            {
                                                C_t16 in_data;
                                                C_t16 out_data;
                                                in_data = fifo_C_in.read();
                                                out_data = in_data;
                                                local_C_pong[c4][c5] = out_data;
                                            }
                                        }
                                    }
                                } else {
C_IO_L2_in_1_x1_loop_6:                                     for (ap_uint<4> c4 = 0; c4 <= 7; c4 += 1) {
                                        // access_coalesce
C_IO_L2_in_1_x1_loop_7:                                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {

                                            {
                                                C_t16 in_data;
                                                C_t16 out_data;
                                                in_data = fifo_C_in.read();
                                                out_data = in_data;
                                                fifo_C_out.write(out_data);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        C_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                        /* Variable Declaration */

                        if (intra_trans_en) {
C_IO_L2_in_1_x1_loop_8:                             for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                                // array
                                // io_L3
                                // io_L2
                                // io_L1
                                // pe
C_IO_L2_in_1_x1_loop_9:                                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_IO_L2_in_1_x1_loop_10:                                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                        // latency
C_IO_L2_in_1_x1_loop_11:                                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                            // latency
C_IO_L2_in_1_x1_loop_12:                                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                                // simd
                                                {
                                                    C_t16 in_data;
                                                    C_t8 out_data;
                                                    in_data = local_C_ping[c7][8 * c6 / 16];
C_IO_L2_in_1_x1_loop_13:                                                     for (ap_uint<2> n = 0; n < 2; n++) {
                                                        data_split[n] = in_data(255, 0);
                                                        in_data = in_data >> 256;
                                                    }
                                                    int split_idx = (c6) % 2;
                                                    out_data = data_split[split_idx];
                                                    fifo_C_local_out.write(out_data);
                                                }
                                            }
                                        }
                                    }
                            }
                        }
                    } else {
                        if (inter_trans_en) {
C_IO_L2_in_1_x1_loop_14:                             for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 1 max = 8
                                if (c3 > -8 * c1 + 41)
                                    break;
                                // io_L2
                                if (c3 == p0) {
C_IO_L2_in_1_x1_loop_15:                                     for (ap_uint<4> c4 = 0; c4 <= 7; c4 += 1) {
                                        // access_coalesce
C_IO_L2_in_1_x1_loop_16:                                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {

                                            {
                                                C_t16 in_data;
                                                C_t16 out_data;
                                                in_data = fifo_C_in.read();
                                                out_data = in_data;
                                                local_C_ping[c4][c5] = out_data;
                                            }
                                        }
                                    }
                                } else {
C_IO_L2_in_1_x1_loop_17:                                     for (ap_uint<4> c4 = 0; c4 <= 7; c4 += 1) {
                                        // access_coalesce
C_IO_L2_in_1_x1_loop_18:                                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {

                                            {
                                                C_t16 in_data;
                                                C_t16 out_data;
                                                in_data = fifo_C_in.read();
                                                out_data = in_data;
                                                fifo_C_out.write(out_data);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        C_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                        /* Variable Declaration */

                        if (intra_trans_en) {
C_IO_L2_in_1_x1_loop_19:                             for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                                // array
                                // io_L3
                                // io_L2
                                // io_L1
                                // pe
C_IO_L2_in_1_x1_loop_20:                                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_IO_L2_in_1_x1_loop_21:                                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                        // latency
C_IO_L2_in_1_x1_loop_22:                                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                            // latency
C_IO_L2_in_1_x1_loop_23:                                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                                // simd
                                                {
                                                    C_t16 in_data;
                                                    C_t8 out_data;
                                                    in_data = local_C_pong[c7][8 * c6 / 16];
C_IO_L2_in_1_x1_loop_24:                                                     for (ap_uint<2> n = 0; n < 2; n++) {
                                                        data_split[n] = in_data(255, 0);
                                                        in_data = in_data >> 256;
                                                    }
                                                    int split_idx = (c6) % 2;
                                                    out_data = data_split[split_idx];
                                                    fifo_C_local_out.write(out_data);
                                                }
                                            }
                                        }
                                    }
                            }
                        }
                    }
                    intra_trans_en = 1;
                    arb = !arb;
                    c0_prev = c0;
                    c1_prev = c1;
                }
            }
        if (arb == 0) {
            C_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
            /* Variable Declaration */

            if (intra_trans_en) {
C_IO_L2_in_1_x1_loop_25:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // io_L3
                    // io_L2
                    // io_L1
                    // pe
C_IO_L2_in_1_x1_loop_26:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_IO_L2_in_1_x1_loop_27:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
C_IO_L2_in_1_x1_loop_28:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
C_IO_L2_in_1_x1_loop_29:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    // simd
                                    {
                                        C_t16 in_data;
                                        C_t8 out_data;
                                        in_data = local_C_ping[c7][8 * c6 / 16];
C_IO_L2_in_1_x1_loop_30:                                         for (ap_uint<2> n = 0; n < 2; n++) {
                                            data_split[n] = in_data(255, 0);
                                            in_data = in_data >> 256;
                                        }
                                        int split_idx = (c6) % 2;
                                        out_data = data_split[split_idx];
                                        fifo_C_local_out.write(out_data);
                                    }
                                }
                            }
                        }
                }
            }
        } else {
            C_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
            /* Variable Declaration */

            if (intra_trans_en) {
C_IO_L2_in_1_x1_loop_31:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // io_L3
                    // io_L2
                    // io_L1
                    // pe
C_IO_L2_in_1_x1_loop_32:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_IO_L2_in_1_x1_loop_33:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
C_IO_L2_in_1_x1_loop_34:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
C_IO_L2_in_1_x1_loop_35:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    // simd
                                    {
                                        C_t16 in_data;
                                        C_t8 out_data;
                                        in_data = local_C_pong[c7][8 * c6 / 16];
C_IO_L2_in_1_x1_loop_36:                                         for (ap_uint<2> n = 0; n < 2; n++) {
                                            data_split[n] = in_data(255, 0);
                                            in_data = in_data >> 256;
                                        }
                                        int split_idx = (c6) % 2;
                                        out_data = data_split[split_idx];
                                        fifo_C_local_out.write(out_data);
                                    }
                                }
                            }
                        }
                }
            }
        }
    }
}
/* Module Definition */

/* Module Definition */
void C_IO_L2_in_2_x1(int idx, hls::stream<C_t16> &fifo_C_in, hls::stream<C_t16> &fifo_C_out, hls::stream<C_t8> &fifo_C_local_out) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx; // module id
    C_t16 local_C_ping[8][16];
    C_t16 local_C_pong[8][16];
    bool arb = 0;
    bool inter_trans_en = 1;
    bool intra_trans_en = 0;
    int c0, c0_prev;
    int c1, c1_prev;
    /* Variable Declaration */

    {
C_IO_L2_in_2_x1_loop_1:         for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
C_IO_L2_in_2_x1_loop_2:             for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
                // array
                // io_L3
                {
                    if (arb == 0) {
                        if (inter_trans_en) {
C_IO_L2_in_2_x1_loop_3:                             for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 1 max = 8
                                if (c3 > -8 * c1 + 41)
                                    break;
                                // io_L2
                                if (c3 == p0) {
C_IO_L2_in_2_x1_loop_4:                                     for (ap_uint<4> c4 = 0; c4 <= 7; c4 += 1) {
                                        // access_coalesce
C_IO_L2_in_2_x1_loop_5:                                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {

                                            {
                                                C_t16 in_data;
                                                C_t16 out_data;
                                                in_data = fifo_C_in.read();
                                                out_data = in_data;
                                                local_C_pong[c4][c5] = out_data;
                                            }
                                        }
                                    }
                                } else {
C_IO_L2_in_2_x1_loop_6:                                     for (ap_uint<4> c4 = 0; c4 <= 7; c4 += 1) {
                                        // access_coalesce
C_IO_L2_in_2_x1_loop_7:                                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {

                                            {
                                                C_t16 in_data;
                                                C_t16 out_data;
                                                in_data = fifo_C_in.read();
                                                out_data = in_data;
                                                fifo_C_out.write(out_data);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        C_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                        /* Variable Declaration */

                        if (intra_trans_en) {
C_IO_L2_in_2_x1_loop_8:                             for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                                // array
                                // io_L3
                                // io_L2
                                // io_L1
                                // pe
C_IO_L2_in_2_x1_loop_9:                                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_IO_L2_in_2_x1_loop_10:                                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                        // latency
C_IO_L2_in_2_x1_loop_11:                                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                            // latency
C_IO_L2_in_2_x1_loop_12:                                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                                // simd
                                                {
                                                    C_t16 in_data;
                                                    C_t8 out_data;
                                                    in_data = local_C_ping[c7][8 * c6 / 16];
C_IO_L2_in_2_x1_loop_13:                                                     for (ap_uint<2> n = 0; n < 2; n++) {
                                                        data_split[n] = in_data(255, 0);
                                                        in_data = in_data >> 256;
                                                    }
                                                    int split_idx = (c6) % 2;
                                                    out_data = data_split[split_idx];
                                                    fifo_C_local_out.write(out_data);
                                                }
                                            }
                                        }
                                    }
                            }
                        }
                    } else {
                        if (inter_trans_en) {
C_IO_L2_in_2_x1_loop_14:                             for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 1 max = 8
                                if (c3 > -8 * c1 + 41)
                                    break;
                                // io_L2
                                if (c3 == p0) {
C_IO_L2_in_2_x1_loop_15:                                     for (ap_uint<4> c4 = 0; c4 <= 7; c4 += 1) {
                                        // access_coalesce
C_IO_L2_in_2_x1_loop_16:                                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {

                                            {
                                                C_t16 in_data;
                                                C_t16 out_data;
                                                in_data = fifo_C_in.read();
                                                out_data = in_data;
                                                local_C_ping[c4][c5] = out_data;
                                            }
                                        }
                                    }
                                } else {
C_IO_L2_in_2_x1_loop_17:                                     for (ap_uint<4> c4 = 0; c4 <= 7; c4 += 1) {
                                        // access_coalesce
C_IO_L2_in_2_x1_loop_18:                                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {

                                            {
                                                C_t16 in_data;
                                                C_t16 out_data;
                                                in_data = fifo_C_in.read();
                                                out_data = in_data;
                                                fifo_C_out.write(out_data);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        C_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                        /* Variable Declaration */

                        if (intra_trans_en) {
C_IO_L2_in_2_x1_loop_19:                             for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                                // array
                                // io_L3
                                // io_L2
                                // io_L1
                                // pe
C_IO_L2_in_2_x1_loop_20:                                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_IO_L2_in_2_x1_loop_21:                                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                        // latency
C_IO_L2_in_2_x1_loop_22:                                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                            // latency
C_IO_L2_in_2_x1_loop_23:                                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                                // simd
                                                {
                                                    C_t16 in_data;
                                                    C_t8 out_data;
                                                    in_data = local_C_pong[c7][8 * c6 / 16];
C_IO_L2_in_2_x1_loop_24:                                                     for (ap_uint<2> n = 0; n < 2; n++) {
                                                        data_split[n] = in_data(255, 0);
                                                        in_data = in_data >> 256;
                                                    }
                                                    int split_idx = (c6) % 2;
                                                    out_data = data_split[split_idx];
                                                    fifo_C_local_out.write(out_data);
                                                }
                                            }
                                        }
                                    }
                            }
                        }
                    }
                    intra_trans_en = 1;
                    arb = !arb;
                    c0_prev = c0;
                    c1_prev = c1;
                }
            }
        if (arb == 0) {
            C_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
            /* Variable Declaration */

            if (intra_trans_en) {
C_IO_L2_in_2_x1_loop_25:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // io_L3
                    // io_L2
                    // io_L1
                    // pe
C_IO_L2_in_2_x1_loop_26:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_IO_L2_in_2_x1_loop_27:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
C_IO_L2_in_2_x1_loop_28:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
C_IO_L2_in_2_x1_loop_29:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    // simd
                                    {
                                        C_t16 in_data;
                                        C_t8 out_data;
                                        in_data = local_C_ping[c7][8 * c6 / 16];
C_IO_L2_in_2_x1_loop_30:                                         for (ap_uint<2> n = 0; n < 2; n++) {
                                            data_split[n] = in_data(255, 0);
                                            in_data = in_data >> 256;
                                        }
                                        int split_idx = (c6) % 2;
                                        out_data = data_split[split_idx];
                                        fifo_C_local_out.write(out_data);
                                    }
                                }
                            }
                        }
                }
            }
        } else {
            C_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
            /* Variable Declaration */

            if (intra_trans_en) {
C_IO_L2_in_2_x1_loop_31:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // io_L3
                    // io_L2
                    // io_L1
                    // pe
C_IO_L2_in_2_x1_loop_32:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_IO_L2_in_2_x1_loop_33:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
C_IO_L2_in_2_x1_loop_34:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
C_IO_L2_in_2_x1_loop_35:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    // simd
                                    {
                                        C_t16 in_data;
                                        C_t8 out_data;
                                        in_data = local_C_pong[c7][8 * c6 / 16];
C_IO_L2_in_2_x1_loop_36:                                         for (ap_uint<2> n = 0; n < 2; n++) {
                                            data_split[n] = in_data(255, 0);
                                            in_data = in_data >> 256;
                                        }
                                        int split_idx = (c6) % 2;
                                        out_data = data_split[split_idx];
                                        fifo_C_local_out.write(out_data);
                                    }
                                }
                            }
                        }
                }
            }
        }
    }
}
/* Module Definition */

/* Module Definition */
void C_IO_L2_in_3_x1(int idx, hls::stream<C_t16> &fifo_C_in, hls::stream<C_t16> &fifo_C_out, hls::stream<C_t8> &fifo_C_local_out) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx; // module id
    C_t16 local_C_ping[8][16];
    C_t16 local_C_pong[8][16];
    bool arb = 0;
    bool inter_trans_en = 1;
    bool intra_trans_en = 0;
    int c0, c0_prev;
    int c1, c1_prev;
    /* Variable Declaration */

    {
C_IO_L2_in_3_x1_loop_1:         for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
C_IO_L2_in_3_x1_loop_2:             for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
                // array
                // io_L3
                {
                    if (arb == 0) {
                        if (inter_trans_en) {
C_IO_L2_in_3_x1_loop_3:                             for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 1 max = 8
                                if (c3 > -8 * c1 + 41)
                                    break;
                                // io_L2
                                if (c3 == p0) {
C_IO_L2_in_3_x1_loop_4:                                     for (ap_uint<4> c4 = 0; c4 <= 7; c4 += 1) {
                                        // access_coalesce
C_IO_L2_in_3_x1_loop_5:                                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {

                                            {
                                                C_t16 in_data;
                                                C_t16 out_data;
                                                in_data = fifo_C_in.read();
                                                out_data = in_data;
                                                local_C_pong[c4][c5] = out_data;
                                            }
                                        }
                                    }
                                } else {
C_IO_L2_in_3_x1_loop_6:                                     for (ap_uint<4> c4 = 0; c4 <= 7; c4 += 1) {
                                        // access_coalesce
C_IO_L2_in_3_x1_loop_7:                                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {

                                            {
                                                C_t16 in_data;
                                                C_t16 out_data;
                                                in_data = fifo_C_in.read();
                                                out_data = in_data;
                                                fifo_C_out.write(out_data);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        C_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                        /* Variable Declaration */

                        if (intra_trans_en) {
C_IO_L2_in_3_x1_loop_8:                             for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                                // array
                                // io_L3
                                // io_L2
                                // io_L1
                                // pe
C_IO_L2_in_3_x1_loop_9:                                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_IO_L2_in_3_x1_loop_10:                                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                        // latency
C_IO_L2_in_3_x1_loop_11:                                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                            // latency
C_IO_L2_in_3_x1_loop_12:                                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                                // simd
                                                {
                                                    C_t16 in_data;
                                                    C_t8 out_data;
                                                    in_data = local_C_ping[c7][8 * c6 / 16];
C_IO_L2_in_3_x1_loop_13:                                                     for (ap_uint<2> n = 0; n < 2; n++) {
                                                        data_split[n] = in_data(255, 0);
                                                        in_data = in_data >> 256;
                                                    }
                                                    int split_idx = (c6) % 2;
                                                    out_data = data_split[split_idx];
                                                    fifo_C_local_out.write(out_data);
                                                }
                                            }
                                        }
                                    }
                            }
                        }
                    } else {
                        if (inter_trans_en) {
C_IO_L2_in_3_x1_loop_14:                             for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 1 max = 8
                                if (c3 > -8 * c1 + 41)
                                    break;
                                // io_L2
                                if (c3 == p0) {
C_IO_L2_in_3_x1_loop_15:                                     for (ap_uint<4> c4 = 0; c4 <= 7; c4 += 1) {
                                        // access_coalesce
C_IO_L2_in_3_x1_loop_16:                                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {

                                            {
                                                C_t16 in_data;
                                                C_t16 out_data;
                                                in_data = fifo_C_in.read();
                                                out_data = in_data;
                                                local_C_ping[c4][c5] = out_data;
                                            }
                                        }
                                    }
                                } else {
C_IO_L2_in_3_x1_loop_17:                                     for (ap_uint<4> c4 = 0; c4 <= 7; c4 += 1) {
                                        // access_coalesce
C_IO_L2_in_3_x1_loop_18:                                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {

                                            {
                                                C_t16 in_data;
                                                C_t16 out_data;
                                                in_data = fifo_C_in.read();
                                                out_data = in_data;
                                                fifo_C_out.write(out_data);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        C_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                        /* Variable Declaration */

                        if (intra_trans_en) {
C_IO_L2_in_3_x1_loop_19:                             for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                                // array
                                // io_L3
                                // io_L2
                                // io_L1
                                // pe
C_IO_L2_in_3_x1_loop_20:                                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_IO_L2_in_3_x1_loop_21:                                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                        // latency
C_IO_L2_in_3_x1_loop_22:                                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                            // latency
C_IO_L2_in_3_x1_loop_23:                                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                                // simd
                                                {
                                                    C_t16 in_data;
                                                    C_t8 out_data;
                                                    in_data = local_C_pong[c7][8 * c6 / 16];
C_IO_L2_in_3_x1_loop_24:                                                     for (ap_uint<2> n = 0; n < 2; n++) {
                                                        data_split[n] = in_data(255, 0);
                                                        in_data = in_data >> 256;
                                                    }
                                                    int split_idx = (c6) % 2;
                                                    out_data = data_split[split_idx];
                                                    fifo_C_local_out.write(out_data);
                                                }
                                            }
                                        }
                                    }
                            }
                        }
                    }
                    intra_trans_en = 1;
                    arb = !arb;
                    c0_prev = c0;
                    c1_prev = c1;
                }
            }
        if (arb == 0) {
            C_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
            /* Variable Declaration */

            if (intra_trans_en) {
C_IO_L2_in_3_x1_loop_25:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // io_L3
                    // io_L2
                    // io_L1
                    // pe
C_IO_L2_in_3_x1_loop_26:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_IO_L2_in_3_x1_loop_27:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
C_IO_L2_in_3_x1_loop_28:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
C_IO_L2_in_3_x1_loop_29:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    // simd
                                    {
                                        C_t16 in_data;
                                        C_t8 out_data;
                                        in_data = local_C_ping[c7][8 * c6 / 16];
C_IO_L2_in_3_x1_loop_30:                                         for (ap_uint<2> n = 0; n < 2; n++) {
                                            data_split[n] = in_data(255, 0);
                                            in_data = in_data >> 256;
                                        }
                                        int split_idx = (c6) % 2;
                                        out_data = data_split[split_idx];
                                        fifo_C_local_out.write(out_data);
                                    }
                                }
                            }
                        }
                }
            }
        } else {
            C_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
            /* Variable Declaration */

            if (intra_trans_en) {
C_IO_L2_in_3_x1_loop_31:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // io_L3
                    // io_L2
                    // io_L1
                    // pe
C_IO_L2_in_3_x1_loop_32:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_IO_L2_in_3_x1_loop_33:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
C_IO_L2_in_3_x1_loop_34:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
C_IO_L2_in_3_x1_loop_35:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    // simd
                                    {
                                        C_t16 in_data;
                                        C_t8 out_data;
                                        in_data = local_C_pong[c7][8 * c6 / 16];
C_IO_L2_in_3_x1_loop_36:                                         for (ap_uint<2> n = 0; n < 2; n++) {
                                            data_split[n] = in_data(255, 0);
                                            in_data = in_data >> 256;
                                        }
                                        int split_idx = (c6) % 2;
                                        out_data = data_split[split_idx];
                                        fifo_C_local_out.write(out_data);
                                    }
                                }
                            }
                        }
                }
            }
        }
    }
}
/* Module Definition */

/* Module Definition */
void C_IO_L2_in_4_x1(int idx, hls::stream<C_t16> &fifo_C_in, hls::stream<C_t16> &fifo_C_out, hls::stream<C_t8> &fifo_C_local_out) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx; // module id
    C_t16 local_C_ping[8][16];
    C_t16 local_C_pong[8][16];
    bool arb = 0;
    bool inter_trans_en = 1;
    bool intra_trans_en = 0;
    int c0, c0_prev;
    int c1, c1_prev;
    /* Variable Declaration */

    {
C_IO_L2_in_4_x1_loop_1:         for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
C_IO_L2_in_4_x1_loop_2:             for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
                // array
                // io_L3
                {
                    if (arb == 0) {
                        if (inter_trans_en) {
C_IO_L2_in_4_x1_loop_3:                             for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 1 max = 8
                                if (c3 > -8 * c1 + 41)
                                    break;
                                // io_L2
                                if (c3 == p0) {
C_IO_L2_in_4_x1_loop_4:                                     for (ap_uint<4> c4 = 0; c4 <= 7; c4 += 1) {
                                        // access_coalesce
C_IO_L2_in_4_x1_loop_5:                                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {

                                            {
                                                C_t16 in_data;
                                                C_t16 out_data;
                                                in_data = fifo_C_in.read();
                                                out_data = in_data;
                                                local_C_pong[c4][c5] = out_data;
                                            }
                                        }
                                    }
                                } else {
C_IO_L2_in_4_x1_loop_6:                                     for (ap_uint<4> c4 = 0; c4 <= 7; c4 += 1) {
                                        // access_coalesce
C_IO_L2_in_4_x1_loop_7:                                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {

                                            {
                                                C_t16 in_data;
                                                C_t16 out_data;
                                                in_data = fifo_C_in.read();
                                                out_data = in_data;
                                                fifo_C_out.write(out_data);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        C_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                        /* Variable Declaration */

                        if (intra_trans_en) {
C_IO_L2_in_4_x1_loop_8:                             for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                                // array
                                // io_L3
                                // io_L2
                                // io_L1
                                // pe
C_IO_L2_in_4_x1_loop_9:                                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_IO_L2_in_4_x1_loop_10:                                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                        // latency
C_IO_L2_in_4_x1_loop_11:                                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                            // latency
C_IO_L2_in_4_x1_loop_12:                                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                                // simd
                                                {
                                                    C_t16 in_data;
                                                    C_t8 out_data;
                                                    in_data = local_C_ping[c7][8 * c6 / 16];
C_IO_L2_in_4_x1_loop_13:                                                     for (ap_uint<2> n = 0; n < 2; n++) {
                                                        data_split[n] = in_data(255, 0);
                                                        in_data = in_data >> 256;
                                                    }
                                                    int split_idx = (c6) % 2;
                                                    out_data = data_split[split_idx];
                                                    fifo_C_local_out.write(out_data);
                                                }
                                            }
                                        }
                                    }
                            }
                        }
                    } else {
                        if (inter_trans_en) {
C_IO_L2_in_4_x1_loop_14:                             for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 1 max = 8
                                if (c3 > -8 * c1 + 41)
                                    break;
                                // io_L2
                                if (c3 == p0) {
C_IO_L2_in_4_x1_loop_15:                                     for (ap_uint<4> c4 = 0; c4 <= 7; c4 += 1) {
                                        // access_coalesce
C_IO_L2_in_4_x1_loop_16:                                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {

                                            {
                                                C_t16 in_data;
                                                C_t16 out_data;
                                                in_data = fifo_C_in.read();
                                                out_data = in_data;
                                                local_C_ping[c4][c5] = out_data;
                                            }
                                        }
                                    }
                                } else {
C_IO_L2_in_4_x1_loop_17:                                     for (ap_uint<4> c4 = 0; c4 <= 7; c4 += 1) {
                                        // access_coalesce
C_IO_L2_in_4_x1_loop_18:                                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {

                                            {
                                                C_t16 in_data;
                                                C_t16 out_data;
                                                in_data = fifo_C_in.read();
                                                out_data = in_data;
                                                fifo_C_out.write(out_data);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        C_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                        /* Variable Declaration */

                        if (intra_trans_en) {
C_IO_L2_in_4_x1_loop_19:                             for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                                // array
                                // io_L3
                                // io_L2
                                // io_L1
                                // pe
C_IO_L2_in_4_x1_loop_20:                                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_IO_L2_in_4_x1_loop_21:                                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                        // latency
C_IO_L2_in_4_x1_loop_22:                                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                            // latency
C_IO_L2_in_4_x1_loop_23:                                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                                // simd
                                                {
                                                    C_t16 in_data;
                                                    C_t8 out_data;
                                                    in_data = local_C_pong[c7][8 * c6 / 16];
C_IO_L2_in_4_x1_loop_24:                                                     for (ap_uint<2> n = 0; n < 2; n++) {
                                                        data_split[n] = in_data(255, 0);
                                                        in_data = in_data >> 256;
                                                    }
                                                    int split_idx = (c6) % 2;
                                                    out_data = data_split[split_idx];
                                                    fifo_C_local_out.write(out_data);
                                                }
                                            }
                                        }
                                    }
                            }
                        }
                    }
                    intra_trans_en = 1;
                    arb = !arb;
                    c0_prev = c0;
                    c1_prev = c1;
                }
            }
        if (arb == 0) {
            C_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
            /* Variable Declaration */

            if (intra_trans_en) {
C_IO_L2_in_4_x1_loop_25:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // io_L3
                    // io_L2
                    // io_L1
                    // pe
C_IO_L2_in_4_x1_loop_26:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_IO_L2_in_4_x1_loop_27:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
C_IO_L2_in_4_x1_loop_28:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
C_IO_L2_in_4_x1_loop_29:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    // simd
                                    {
                                        C_t16 in_data;
                                        C_t8 out_data;
                                        in_data = local_C_ping[c7][8 * c6 / 16];
C_IO_L2_in_4_x1_loop_30:                                         for (ap_uint<2> n = 0; n < 2; n++) {
                                            data_split[n] = in_data(255, 0);
                                            in_data = in_data >> 256;
                                        }
                                        int split_idx = (c6) % 2;
                                        out_data = data_split[split_idx];
                                        fifo_C_local_out.write(out_data);
                                    }
                                }
                            }
                        }
                }
            }
        } else {
            C_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
            /* Variable Declaration */

            if (intra_trans_en) {
C_IO_L2_in_4_x1_loop_31:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // io_L3
                    // io_L2
                    // io_L1
                    // pe
C_IO_L2_in_4_x1_loop_32:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_IO_L2_in_4_x1_loop_33:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
C_IO_L2_in_4_x1_loop_34:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
C_IO_L2_in_4_x1_loop_35:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    // simd
                                    {
                                        C_t16 in_data;
                                        C_t8 out_data;
                                        in_data = local_C_pong[c7][8 * c6 / 16];
C_IO_L2_in_4_x1_loop_36:                                         for (ap_uint<2> n = 0; n < 2; n++) {
                                            data_split[n] = in_data(255, 0);
                                            in_data = in_data >> 256;
                                        }
                                        int split_idx = (c6) % 2;
                                        out_data = data_split[split_idx];
                                        fifo_C_local_out.write(out_data);
                                    }
                                }
                            }
                        }
                }
            }
        }
    }
}
/* Module Definition */

/* Module Definition */
void C_IO_L2_in_5_x1(int idx, hls::stream<C_t16> &fifo_C_in, hls::stream<C_t16> &fifo_C_out, hls::stream<C_t8> &fifo_C_local_out) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx; // module id
    C_t16 local_C_ping[8][16];
    C_t16 local_C_pong[8][16];
    bool arb = 0;
    bool inter_trans_en = 1;
    bool intra_trans_en = 0;
    int c0, c0_prev;
    int c1, c1_prev;
    /* Variable Declaration */

    {
C_IO_L2_in_5_x1_loop_1:         for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
C_IO_L2_in_5_x1_loop_2:             for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
                // array
                // io_L3
                {
                    if (arb == 0) {
                        if (inter_trans_en) {
C_IO_L2_in_5_x1_loop_3:                             for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 1 max = 8
                                if (c3 > -8 * c1 + 41)
                                    break;
                                // io_L2
                                if (c3 == p0) {
C_IO_L2_in_5_x1_loop_4:                                     for (ap_uint<4> c4 = 0; c4 <= 7; c4 += 1) {
                                        // access_coalesce
C_IO_L2_in_5_x1_loop_5:                                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {

                                            {
                                                C_t16 in_data;
                                                C_t16 out_data;
                                                in_data = fifo_C_in.read();
                                                out_data = in_data;
                                                local_C_pong[c4][c5] = out_data;
                                            }
                                        }
                                    }
                                } else {
C_IO_L2_in_5_x1_loop_6:                                     for (ap_uint<4> c4 = 0; c4 <= 7; c4 += 1) {
                                        // access_coalesce
C_IO_L2_in_5_x1_loop_7:                                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {

                                            {
                                                C_t16 in_data;
                                                C_t16 out_data;
                                                in_data = fifo_C_in.read();
                                                out_data = in_data;
                                                fifo_C_out.write(out_data);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        C_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                        /* Variable Declaration */

                        if (intra_trans_en) {
C_IO_L2_in_5_x1_loop_8:                             for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                                // array
                                // io_L3
                                // io_L2
                                // io_L1
                                // pe
C_IO_L2_in_5_x1_loop_9:                                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_IO_L2_in_5_x1_loop_10:                                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                        // latency
C_IO_L2_in_5_x1_loop_11:                                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                            // latency
C_IO_L2_in_5_x1_loop_12:                                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                                // simd
                                                {
                                                    C_t16 in_data;
                                                    C_t8 out_data;
                                                    in_data = local_C_ping[c7][8 * c6 / 16];
C_IO_L2_in_5_x1_loop_13:                                                     for (ap_uint<2> n = 0; n < 2; n++) {
                                                        data_split[n] = in_data(255, 0);
                                                        in_data = in_data >> 256;
                                                    }
                                                    int split_idx = (c6) % 2;
                                                    out_data = data_split[split_idx];
                                                    fifo_C_local_out.write(out_data);
                                                }
                                            }
                                        }
                                    }
                            }
                        }
                    } else {
                        if (inter_trans_en) {
C_IO_L2_in_5_x1_loop_14:                             for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 1 max = 8
                                if (c3 > -8 * c1 + 41)
                                    break;
                                // io_L2
                                if (c3 == p0) {
C_IO_L2_in_5_x1_loop_15:                                     for (ap_uint<4> c4 = 0; c4 <= 7; c4 += 1) {
                                        // access_coalesce
C_IO_L2_in_5_x1_loop_16:                                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {

                                            {
                                                C_t16 in_data;
                                                C_t16 out_data;
                                                in_data = fifo_C_in.read();
                                                out_data = in_data;
                                                local_C_ping[c4][c5] = out_data;
                                            }
                                        }
                                    }
                                } else {
C_IO_L2_in_5_x1_loop_17:                                     for (ap_uint<4> c4 = 0; c4 <= 7; c4 += 1) {
                                        // access_coalesce
C_IO_L2_in_5_x1_loop_18:                                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {

                                            {
                                                C_t16 in_data;
                                                C_t16 out_data;
                                                in_data = fifo_C_in.read();
                                                out_data = in_data;
                                                fifo_C_out.write(out_data);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        C_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                        /* Variable Declaration */

                        if (intra_trans_en) {
C_IO_L2_in_5_x1_loop_19:                             for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                                // array
                                // io_L3
                                // io_L2
                                // io_L1
                                // pe
C_IO_L2_in_5_x1_loop_20:                                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_IO_L2_in_5_x1_loop_21:                                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                        // latency
C_IO_L2_in_5_x1_loop_22:                                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                            // latency
C_IO_L2_in_5_x1_loop_23:                                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                                // simd
                                                {
                                                    C_t16 in_data;
                                                    C_t8 out_data;
                                                    in_data = local_C_pong[c7][8 * c6 / 16];
C_IO_L2_in_5_x1_loop_24:                                                     for (ap_uint<2> n = 0; n < 2; n++) {
                                                        data_split[n] = in_data(255, 0);
                                                        in_data = in_data >> 256;
                                                    }
                                                    int split_idx = (c6) % 2;
                                                    out_data = data_split[split_idx];
                                                    fifo_C_local_out.write(out_data);
                                                }
                                            }
                                        }
                                    }
                            }
                        }
                    }
                    intra_trans_en = 1;
                    arb = !arb;
                    c0_prev = c0;
                    c1_prev = c1;
                }
            }
        if (arb == 0) {
            C_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
            /* Variable Declaration */

            if (intra_trans_en) {
C_IO_L2_in_5_x1_loop_25:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // io_L3
                    // io_L2
                    // io_L1
                    // pe
C_IO_L2_in_5_x1_loop_26:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_IO_L2_in_5_x1_loop_27:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
C_IO_L2_in_5_x1_loop_28:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
C_IO_L2_in_5_x1_loop_29:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    // simd
                                    {
                                        C_t16 in_data;
                                        C_t8 out_data;
                                        in_data = local_C_ping[c7][8 * c6 / 16];
C_IO_L2_in_5_x1_loop_30:                                         for (ap_uint<2> n = 0; n < 2; n++) {
                                            data_split[n] = in_data(255, 0);
                                            in_data = in_data >> 256;
                                        }
                                        int split_idx = (c6) % 2;
                                        out_data = data_split[split_idx];
                                        fifo_C_local_out.write(out_data);
                                    }
                                }
                            }
                        }
                }
            }
        } else {
            C_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
            /* Variable Declaration */

            if (intra_trans_en) {
C_IO_L2_in_5_x1_loop_31:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // io_L3
                    // io_L2
                    // io_L1
                    // pe
C_IO_L2_in_5_x1_loop_32:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_IO_L2_in_5_x1_loop_33:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
C_IO_L2_in_5_x1_loop_34:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
C_IO_L2_in_5_x1_loop_35:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    // simd
                                    {
                                        C_t16 in_data;
                                        C_t8 out_data;
                                        in_data = local_C_pong[c7][8 * c6 / 16];
C_IO_L2_in_5_x1_loop_36:                                         for (ap_uint<2> n = 0; n < 2; n++) {
                                            data_split[n] = in_data(255, 0);
                                            in_data = in_data >> 256;
                                        }
                                        int split_idx = (c6) % 2;
                                        out_data = data_split[split_idx];
                                        fifo_C_local_out.write(out_data);
                                    }
                                }
                            }
                        }
                }
            }
        }
    }
}
/* Module Definition */

/* Module Definition */
void C_IO_L2_in_6_x1(int idx, hls::stream<C_t16> &fifo_C_in, hls::stream<C_t16> &fifo_C_out, hls::stream<C_t8> &fifo_C_local_out) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx; // module id
    C_t16 local_C_ping[8][16];
    C_t16 local_C_pong[8][16];
    bool arb = 0;
    bool inter_trans_en = 1;
    bool intra_trans_en = 0;
    int c0, c0_prev;
    int c1, c1_prev;
    /* Variable Declaration */

    {
C_IO_L2_in_6_x1_loop_1:         for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
C_IO_L2_in_6_x1_loop_2:             for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
                // array
                // io_L3
                {
                    if (arb == 0) {
                        if (inter_trans_en) {
C_IO_L2_in_6_x1_loop_3:                             for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 1 max = 8
                                if (c3 > -8 * c1 + 41)
                                    break;
                                // io_L2
                                if (c3 == p0) {
C_IO_L2_in_6_x1_loop_4:                                     for (ap_uint<4> c4 = 0; c4 <= 7; c4 += 1) {
                                        // access_coalesce
C_IO_L2_in_6_x1_loop_5:                                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {

                                            {
                                                C_t16 in_data;
                                                C_t16 out_data;
                                                in_data = fifo_C_in.read();
                                                out_data = in_data;
                                                local_C_pong[c4][c5] = out_data;
                                            }
                                        }
                                    }
                                } else {
C_IO_L2_in_6_x1_loop_6:                                     for (ap_uint<4> c4 = 0; c4 <= 7; c4 += 1) {
                                        // access_coalesce
C_IO_L2_in_6_x1_loop_7:                                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {

                                            {
                                                C_t16 in_data;
                                                C_t16 out_data;
                                                in_data = fifo_C_in.read();
                                                out_data = in_data;
                                                fifo_C_out.write(out_data);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        C_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                        /* Variable Declaration */

                        if (intra_trans_en) {
C_IO_L2_in_6_x1_loop_8:                             for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                                // array
                                // io_L3
                                // io_L2
                                // io_L1
                                // pe
C_IO_L2_in_6_x1_loop_9:                                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_IO_L2_in_6_x1_loop_10:                                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                        // latency
C_IO_L2_in_6_x1_loop_11:                                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                            // latency
C_IO_L2_in_6_x1_loop_12:                                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                                // simd
                                                {
                                                    C_t16 in_data;
                                                    C_t8 out_data;
                                                    in_data = local_C_ping[c7][8 * c6 / 16];
C_IO_L2_in_6_x1_loop_13:                                                     for (ap_uint<2> n = 0; n < 2; n++) {
                                                        data_split[n] = in_data(255, 0);
                                                        in_data = in_data >> 256;
                                                    }
                                                    int split_idx = (c6) % 2;
                                                    out_data = data_split[split_idx];
                                                    fifo_C_local_out.write(out_data);
                                                }
                                            }
                                        }
                                    }
                            }
                        }
                    } else {
                        if (inter_trans_en) {
C_IO_L2_in_6_x1_loop_14:                             for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 1 max = 8
                                if (c3 > -8 * c1 + 41)
                                    break;
                                // io_L2
                                if (c3 == p0) {
C_IO_L2_in_6_x1_loop_15:                                     for (ap_uint<4> c4 = 0; c4 <= 7; c4 += 1) {
                                        // access_coalesce
C_IO_L2_in_6_x1_loop_16:                                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {

                                            {
                                                C_t16 in_data;
                                                C_t16 out_data;
                                                in_data = fifo_C_in.read();
                                                out_data = in_data;
                                                local_C_ping[c4][c5] = out_data;
                                            }
                                        }
                                    }
                                } else {
C_IO_L2_in_6_x1_loop_17:                                     for (ap_uint<4> c4 = 0; c4 <= 7; c4 += 1) {
                                        // access_coalesce
C_IO_L2_in_6_x1_loop_18:                                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {

                                            {
                                                C_t16 in_data;
                                                C_t16 out_data;
                                                in_data = fifo_C_in.read();
                                                out_data = in_data;
                                                fifo_C_out.write(out_data);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        C_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                        /* Variable Declaration */

                        if (intra_trans_en) {
C_IO_L2_in_6_x1_loop_19:                             for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                                // array
                                // io_L3
                                // io_L2
                                // io_L1
                                // pe
C_IO_L2_in_6_x1_loop_20:                                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_IO_L2_in_6_x1_loop_21:                                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                        // latency
C_IO_L2_in_6_x1_loop_22:                                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                            // latency
C_IO_L2_in_6_x1_loop_23:                                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                                // simd
                                                {
                                                    C_t16 in_data;
                                                    C_t8 out_data;
                                                    in_data = local_C_pong[c7][8 * c6 / 16];
C_IO_L2_in_6_x1_loop_24:                                                     for (ap_uint<2> n = 0; n < 2; n++) {
                                                        data_split[n] = in_data(255, 0);
                                                        in_data = in_data >> 256;
                                                    }
                                                    int split_idx = (c6) % 2;
                                                    out_data = data_split[split_idx];
                                                    fifo_C_local_out.write(out_data);
                                                }
                                            }
                                        }
                                    }
                            }
                        }
                    }
                    intra_trans_en = 1;
                    arb = !arb;
                    c0_prev = c0;
                    c1_prev = c1;
                }
            }
        if (arb == 0) {
            C_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
            /* Variable Declaration */

            if (intra_trans_en) {
C_IO_L2_in_6_x1_loop_25:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // io_L3
                    // io_L2
                    // io_L1
                    // pe
C_IO_L2_in_6_x1_loop_26:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_IO_L2_in_6_x1_loop_27:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
C_IO_L2_in_6_x1_loop_28:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
C_IO_L2_in_6_x1_loop_29:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    // simd
                                    {
                                        C_t16 in_data;
                                        C_t8 out_data;
                                        in_data = local_C_ping[c7][8 * c6 / 16];
C_IO_L2_in_6_x1_loop_30:                                         for (ap_uint<2> n = 0; n < 2; n++) {
                                            data_split[n] = in_data(255, 0);
                                            in_data = in_data >> 256;
                                        }
                                        int split_idx = (c6) % 2;
                                        out_data = data_split[split_idx];
                                        fifo_C_local_out.write(out_data);
                                    }
                                }
                            }
                        }
                }
            }
        } else {
            C_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
            /* Variable Declaration */

            if (intra_trans_en) {
C_IO_L2_in_6_x1_loop_31:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // io_L3
                    // io_L2
                    // io_L1
                    // pe
C_IO_L2_in_6_x1_loop_32:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_IO_L2_in_6_x1_loop_33:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
C_IO_L2_in_6_x1_loop_34:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
C_IO_L2_in_6_x1_loop_35:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    // simd
                                    {
                                        C_t16 in_data;
                                        C_t8 out_data;
                                        in_data = local_C_pong[c7][8 * c6 / 16];
C_IO_L2_in_6_x1_loop_36:                                         for (ap_uint<2> n = 0; n < 2; n++) {
                                            data_split[n] = in_data(255, 0);
                                            in_data = in_data >> 256;
                                        }
                                        int split_idx = (c6) % 2;
                                        out_data = data_split[split_idx];
                                        fifo_C_local_out.write(out_data);
                                    }
                                }
                            }
                        }
                }
            }
        }
    }
}
/* Module Definition */

/* Module Definition */
void C_IO_L2_in_boundary_x1(int idx, hls::stream<C_t16> &fifo_C_in, hls::stream<C_t8> &fifo_C_local_out) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx; // module id
    C_t16 local_C_ping[8][16];
    C_t16 local_C_pong[8][16];
    bool arb = 0;
    bool inter_trans_en = 1;
    bool intra_trans_en = 0;
    int c0, c0_prev;
    int c1, c1_prev;
    /* Variable Declaration */

    {
C_IO_L2_in_boundary_x1_loop_1:         for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
C_IO_L2_in_boundary_x1_loop_2:             for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
                // array
                // io_L3
                {
                    if (arb == 0) {
                        if (inter_trans_en) {
C_IO_L2_in_boundary_x1_loop_3:                             for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 1 max = 1
                                if (c3 > -8 * c1 + 41)
                                    break;
                                if (c3 == p0) {
                                    // io_L2
C_IO_L2_in_boundary_x1_loop_4:                                     for (ap_uint<4> c4 = 0; c4 <= 7; c4 += 1) {
                                        // access_coalesce
C_IO_L2_in_boundary_x1_loop_5:                                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {

                                            {
                                                C_t16 in_data;
                                                C_t16 out_data;
                                                in_data = fifo_C_in.read();
                                                out_data = in_data;
                                                local_C_pong[c4][c5] = out_data;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        C_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                        /* Variable Declaration */

                        if (intra_trans_en) {
C_IO_L2_in_boundary_x1_loop_6:                             for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                                // array
                                // io_L3
                                // io_L2
                                // io_L1
                                // pe
C_IO_L2_in_boundary_x1_loop_7:                                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_IO_L2_in_boundary_x1_loop_8:                                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                        // latency
C_IO_L2_in_boundary_x1_loop_9:                                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                            // latency
C_IO_L2_in_boundary_x1_loop_10:                                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                                // simd
                                                {
                                                    C_t16 in_data;
                                                    C_t8 out_data;
                                                    in_data = local_C_ping[c7][8 * c6 / 16];
C_IO_L2_in_boundary_x1_loop_11:                                                     for (ap_uint<2> n = 0; n < 2; n++) {
                                                        data_split[n] = in_data(255, 0);
                                                        in_data = in_data >> 256;
                                                    }
                                                    int split_idx = (c6) % 2;
                                                    out_data = data_split[split_idx];
                                                    fifo_C_local_out.write(out_data);
                                                }
                                            }
                                        }
                                    }
                            }
                        }
                    } else {
                        if (inter_trans_en) {
C_IO_L2_in_boundary_x1_loop_12:                             for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 1 max = 1
                                if (c3 > -8 * c1 + 41)
                                    break;
                                if (c3 == p0) {
                                    // io_L2
C_IO_L2_in_boundary_x1_loop_13:                                     for (ap_uint<4> c4 = 0; c4 <= 7; c4 += 1) {
                                        // access_coalesce
C_IO_L2_in_boundary_x1_loop_14:                                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {

                                            {
                                                C_t16 in_data;
                                                C_t16 out_data;
                                                in_data = fifo_C_in.read();
                                                out_data = in_data;
                                                local_C_ping[c4][c5] = out_data;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        C_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                        /* Variable Declaration */

                        if (intra_trans_en) {
C_IO_L2_in_boundary_x1_loop_15:                             for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                                // array
                                // io_L3
                                // io_L2
                                // io_L1
                                // pe
C_IO_L2_in_boundary_x1_loop_16:                                 for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_IO_L2_in_boundary_x1_loop_17:                                     for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                                        // latency
C_IO_L2_in_boundary_x1_loop_18:                                         for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                            // latency
C_IO_L2_in_boundary_x1_loop_19:                                             for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                                // simd
                                                {
                                                    C_t16 in_data;
                                                    C_t8 out_data;
                                                    in_data = local_C_pong[c7][8 * c6 / 16];
C_IO_L2_in_boundary_x1_loop_20:                                                     for (ap_uint<2> n = 0; n < 2; n++) {
                                                        data_split[n] = in_data(255, 0);
                                                        in_data = in_data >> 256;
                                                    }
                                                    int split_idx = (c6) % 2;
                                                    out_data = data_split[split_idx];
                                                    fifo_C_local_out.write(out_data);
                                                }
                                            }
                                        }
                                    }
                            }
                        }
                    }
                    intra_trans_en = 1;
                    arb = !arb;
                    c0_prev = c0;
                    c1_prev = c1;
                }
            }
        if (arb == 0) {
            C_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
            /* Variable Declaration */

            if (intra_trans_en) {
C_IO_L2_in_boundary_x1_loop_21:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // io_L3
                    // io_L2
                    // io_L1
                    // pe
C_IO_L2_in_boundary_x1_loop_22:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_IO_L2_in_boundary_x1_loop_23:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
C_IO_L2_in_boundary_x1_loop_24:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
C_IO_L2_in_boundary_x1_loop_25:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    // simd
                                    {
                                        C_t16 in_data;
                                        C_t8 out_data;
                                        in_data = local_C_ping[c7][8 * c6 / 16];
C_IO_L2_in_boundary_x1_loop_26:                                         for (ap_uint<2> n = 0; n < 2; n++) {
                                            data_split[n] = in_data(255, 0);
                                            in_data = in_data >> 256;
                                        }
                                        int split_idx = (c6) % 2;
                                        out_data = data_split[split_idx];
                                        fifo_C_local_out.write(out_data);
                                    }
                                }
                            }
                        }
                }
            }
        } else {
            C_t8 data_split[2];
#pragma HLS ARRAY_PARTITION variable = data_split complete
            /* Variable Declaration */

            if (intra_trans_en) {
C_IO_L2_in_boundary_x1_loop_27:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // io_L3
                    // io_L2
                    // io_L1
                    // pe
C_IO_L2_in_boundary_x1_loop_28:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_IO_L2_in_boundary_x1_loop_29:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
C_IO_L2_in_boundary_x1_loop_30:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
C_IO_L2_in_boundary_x1_loop_31:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    // simd
                                    {
                                        C_t16 in_data;
                                        C_t8 out_data;
                                        in_data = local_C_pong[c7][8 * c6 / 16];
C_IO_L2_in_boundary_x1_loop_32:                                         for (ap_uint<2> n = 0; n < 2; n++) {
                                            data_split[n] = in_data(255, 0);
                                            in_data = in_data >> 256;
                                        }
                                        int split_idx = (c6) % 2;
                                        out_data = data_split[split_idx];
                                        fifo_C_local_out.write(out_data);
                                    }
                                }
                            }
                        }
                }
            }
        }
    }
}
/* Module Definition */

/* Module Definition */
void PE_wrapper_0_0_x1(int idx, int idy, hls::stream<A_t8> &fifo_A_in, hls::stream<A_t8> &fifo_A_out, hls::stream<float> &fifo_B_in, hls::stream<float> &fifo_B_out, hls::stream<C_t8> &fifo_C_in, hls::stream<C_t8> &fifo_C_out, hls::stream<float> &fifo_D_drain_out) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    A_t1 local_A[1][1][8];
#pragma HLS ARRAY_PARTITION variable = local_A dim = 0 complete
    B_t1 local_B[1][1];
#pragma HLS ARRAY_PARTITION variable = local_B dim = 0 complete
    C_t1 local_C[1][8];
#pragma HLS ARRAY_PARTITION variable = local_C dim = 0 complete
    D_t1 local_D[16][8];
    /* Variable Declaration */

PE_wrapper_0_0_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
PE_wrapper_0_0_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p1 + 8 * c1 <= 41) {
                // array
                // pe
                // latency
PE_wrapper_0_0_x1_loop_3:                 for (ap_uint<4> c6 = 0; c6 <= 7; c6 += 1) {
                    // latency
PE_wrapper_0_0_x1_loop_4:                     for (ap_uint<5> c7 = 0; c7 <= 15; c7 += 1) {

                        local_D[c7][c6] = 0;
                    }
                }
PE_wrapper_0_0_x1_loop_5:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
PE_wrapper_0_0_x1_loop_6:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
PE_wrapper_0_0_x1_loop_7:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
PE_wrapper_0_0_x1_loop_8:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
PE_wrapper_0_0_x1_loop_9:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    {
                                        {
                                            A_t8 fifo_data;
                                            fifo_data = fifo_A_in.read();
PE_wrapper_0_0_x1_loop_10:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_A[0][0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        local_B[0][0] = fifo_B_in.read();
                                        {
                                            C_t8 fifo_data;
                                            fifo_data = fifo_C_in.read();
PE_wrapper_0_0_x1_loop_11:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_C[0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        // simd
PE_wrapper_0_0_x1_loop_12:                                         for (ap_uint<4> c9 = 0; c9 <= 7; c9 += 1) {
                                            local_D[c8][c7] = (local_D[c8][c7] + ((local_A[0][0][c9] * local_B[0][0]) * local_C[0][c9]));
                                        }
                                        if (c2 == 127 && c5 == 1 && c6 == 31)
                                            fifo_D_drain_out.write(local_D[c8][c7]);
                                        {
                                            C_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_C[0][7];
                                            u6.ut = local_C[0][6];
                                            u5.ut = local_C[0][5];
                                            u4.ut = local_C[0][4];
                                            u3.ut = local_C[0][3];
                                            u2.ut = local_C[0][2];
                                            u1.ut = local_C[0][1];
                                            u0.ut = local_C[0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_C_out.write(fifo_data);
                                        }
                                        fifo_B_out.write(local_B[0][0]);
                                        {
                                            A_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_A[0][0][7];
                                            u6.ut = local_A[0][0][6];
                                            u5.ut = local_A[0][0][5];
                                            u4.ut = local_A[0][0][4];
                                            u3.ut = local_A[0][0][3];
                                            u2.ut = local_A[0][0][2];
                                            u1.ut = local_A[0][0][1];
                                            u0.ut = local_A[0][0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_A_out.write(fifo_data);
                                        }
                                    }
                                }
                            }
                        }
                }
            }
}
/* Module Definition */

/* Module Definition */
void PE_wrapper_0_1_x1(int idx, int idy, hls::stream<A_t8> &fifo_A_in, hls::stream<A_t8> &fifo_A_out, hls::stream<float> &fifo_B_in, hls::stream<float> &fifo_B_out, hls::stream<C_t8> &fifo_C_in, hls::stream<C_t8> &fifo_C_out, hls::stream<float> &fifo_D_drain_out) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    A_t1 local_A[1][1][8];
#pragma HLS ARRAY_PARTITION variable = local_A dim = 0 complete
    B_t1 local_B[1][1];
#pragma HLS ARRAY_PARTITION variable = local_B dim = 0 complete
    C_t1 local_C[1][8];
#pragma HLS ARRAY_PARTITION variable = local_C dim = 0 complete
    D_t1 local_D[16][8];
    /* Variable Declaration */

PE_wrapper_0_1_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
PE_wrapper_0_1_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p1 + 8 * c1 <= 41) {
                // array
                // pe
                // latency
PE_wrapper_0_1_x1_loop_3:                 for (ap_uint<4> c6 = 0; c6 <= 7; c6 += 1) {
                    // latency
PE_wrapper_0_1_x1_loop_4:                     for (ap_uint<5> c7 = 0; c7 <= 15; c7 += 1) {

                        local_D[c7][c6] = 0;
                    }
                }
PE_wrapper_0_1_x1_loop_5:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
PE_wrapper_0_1_x1_loop_6:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
PE_wrapper_0_1_x1_loop_7:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
PE_wrapper_0_1_x1_loop_8:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
PE_wrapper_0_1_x1_loop_9:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    {
                                        {
                                            A_t8 fifo_data;
                                            fifo_data = fifo_A_in.read();
PE_wrapper_0_1_x1_loop_10:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_A[0][0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        local_B[0][0] = fifo_B_in.read();
                                        {
                                            C_t8 fifo_data;
                                            fifo_data = fifo_C_in.read();
PE_wrapper_0_1_x1_loop_11:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_C[0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        // simd
PE_wrapper_0_1_x1_loop_12:                                         for (ap_uint<4> c9 = 0; c9 <= 7; c9 += 1) {
                                            local_D[c8][c7] = (local_D[c8][c7] + ((local_A[0][0][c9] * local_B[0][0]) * local_C[0][c9]));
                                        }
                                        if (c2 == 127 && c5 == 1 && c6 == 31)
                                            fifo_D_drain_out.write(local_D[c8][c7]);
                                        {
                                            C_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_C[0][7];
                                            u6.ut = local_C[0][6];
                                            u5.ut = local_C[0][5];
                                            u4.ut = local_C[0][4];
                                            u3.ut = local_C[0][3];
                                            u2.ut = local_C[0][2];
                                            u1.ut = local_C[0][1];
                                            u0.ut = local_C[0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_C_out.write(fifo_data);
                                        }
                                        fifo_B_out.write(local_B[0][0]);
                                        {
                                            A_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_A[0][0][7];
                                            u6.ut = local_A[0][0][6];
                                            u5.ut = local_A[0][0][5];
                                            u4.ut = local_A[0][0][4];
                                            u3.ut = local_A[0][0][3];
                                            u2.ut = local_A[0][0][2];
                                            u1.ut = local_A[0][0][1];
                                            u0.ut = local_A[0][0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_A_out.write(fifo_data);
                                        }
                                    }
                                }
                            }
                        }
                }
            }
}
/* Module Definition */

/* Module Definition */
void PE_wrapper_0_2_x1(int idx, int idy, hls::stream<A_t8> &fifo_A_in, hls::stream<A_t8> &fifo_A_out, hls::stream<float> &fifo_B_in, hls::stream<float> &fifo_B_out, hls::stream<C_t8> &fifo_C_in, hls::stream<C_t8> &fifo_C_out, hls::stream<float> &fifo_D_drain_out) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    A_t1 local_A[1][1][8];
#pragma HLS ARRAY_PARTITION variable = local_A dim = 0 complete
    B_t1 local_B[1][1];
#pragma HLS ARRAY_PARTITION variable = local_B dim = 0 complete
    C_t1 local_C[1][8];
#pragma HLS ARRAY_PARTITION variable = local_C dim = 0 complete
    D_t1 local_D[16][8];
    /* Variable Declaration */

PE_wrapper_0_2_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
PE_wrapper_0_2_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p1 + 8 * c1 <= 41) {
                // array
                // pe
                // latency
PE_wrapper_0_2_x1_loop_3:                 for (ap_uint<4> c6 = 0; c6 <= 7; c6 += 1) {
                    // latency
PE_wrapper_0_2_x1_loop_4:                     for (ap_uint<5> c7 = 0; c7 <= 15; c7 += 1) {

                        local_D[c7][c6] = 0;
                    }
                }
PE_wrapper_0_2_x1_loop_5:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
PE_wrapper_0_2_x1_loop_6:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
PE_wrapper_0_2_x1_loop_7:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
PE_wrapper_0_2_x1_loop_8:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
PE_wrapper_0_2_x1_loop_9:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    {
                                        {
                                            A_t8 fifo_data;
                                            fifo_data = fifo_A_in.read();
PE_wrapper_0_2_x1_loop_10:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_A[0][0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        local_B[0][0] = fifo_B_in.read();
                                        {
                                            C_t8 fifo_data;
                                            fifo_data = fifo_C_in.read();
PE_wrapper_0_2_x1_loop_11:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_C[0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        // simd
PE_wrapper_0_2_x1_loop_12:                                         for (ap_uint<4> c9 = 0; c9 <= 7; c9 += 1) {
                                            local_D[c8][c7] = (local_D[c8][c7] + ((local_A[0][0][c9] * local_B[0][0]) * local_C[0][c9]));
                                        }
                                        if (c2 == 127 && c5 == 1 && c6 == 31)
                                            fifo_D_drain_out.write(local_D[c8][c7]);
                                        {
                                            C_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_C[0][7];
                                            u6.ut = local_C[0][6];
                                            u5.ut = local_C[0][5];
                                            u4.ut = local_C[0][4];
                                            u3.ut = local_C[0][3];
                                            u2.ut = local_C[0][2];
                                            u1.ut = local_C[0][1];
                                            u0.ut = local_C[0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_C_out.write(fifo_data);
                                        }
                                        fifo_B_out.write(local_B[0][0]);
                                        {
                                            A_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_A[0][0][7];
                                            u6.ut = local_A[0][0][6];
                                            u5.ut = local_A[0][0][5];
                                            u4.ut = local_A[0][0][4];
                                            u3.ut = local_A[0][0][3];
                                            u2.ut = local_A[0][0][2];
                                            u1.ut = local_A[0][0][1];
                                            u0.ut = local_A[0][0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_A_out.write(fifo_data);
                                        }
                                    }
                                }
                            }
                        }
                }
            }
}
/* Module Definition */

/* Module Definition */
void PE_wrapper_0_3_x1(int idx, int idy, hls::stream<A_t8> &fifo_A_in, hls::stream<A_t8> &fifo_A_out, hls::stream<float> &fifo_B_in, hls::stream<float> &fifo_B_out, hls::stream<C_t8> &fifo_C_in, hls::stream<C_t8> &fifo_C_out, hls::stream<float> &fifo_D_drain_out) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    A_t1 local_A[1][1][8];
#pragma HLS ARRAY_PARTITION variable = local_A dim = 0 complete
    B_t1 local_B[1][1];
#pragma HLS ARRAY_PARTITION variable = local_B dim = 0 complete
    C_t1 local_C[1][8];
#pragma HLS ARRAY_PARTITION variable = local_C dim = 0 complete
    D_t1 local_D[16][8];
    /* Variable Declaration */

PE_wrapper_0_3_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
PE_wrapper_0_3_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p1 + 8 * c1 <= 41) {
                // array
                // pe
                // latency
PE_wrapper_0_3_x1_loop_3:                 for (ap_uint<4> c6 = 0; c6 <= 7; c6 += 1) {
                    // latency
PE_wrapper_0_3_x1_loop_4:                     for (ap_uint<5> c7 = 0; c7 <= 15; c7 += 1) {

                        local_D[c7][c6] = 0;
                    }
                }
PE_wrapper_0_3_x1_loop_5:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
PE_wrapper_0_3_x1_loop_6:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
PE_wrapper_0_3_x1_loop_7:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
PE_wrapper_0_3_x1_loop_8:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
PE_wrapper_0_3_x1_loop_9:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    {
                                        {
                                            A_t8 fifo_data;
                                            fifo_data = fifo_A_in.read();
PE_wrapper_0_3_x1_loop_10:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_A[0][0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        local_B[0][0] = fifo_B_in.read();
                                        {
                                            C_t8 fifo_data;
                                            fifo_data = fifo_C_in.read();
PE_wrapper_0_3_x1_loop_11:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_C[0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        // simd
PE_wrapper_0_3_x1_loop_12:                                         for (ap_uint<4> c9 = 0; c9 <= 7; c9 += 1) {
                                            local_D[c8][c7] = (local_D[c8][c7] + ((local_A[0][0][c9] * local_B[0][0]) * local_C[0][c9]));
                                        }
                                        if (c2 == 127 && c5 == 1 && c6 == 31)
                                            fifo_D_drain_out.write(local_D[c8][c7]);
                                        {
                                            C_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_C[0][7];
                                            u6.ut = local_C[0][6];
                                            u5.ut = local_C[0][5];
                                            u4.ut = local_C[0][4];
                                            u3.ut = local_C[0][3];
                                            u2.ut = local_C[0][2];
                                            u1.ut = local_C[0][1];
                                            u0.ut = local_C[0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_C_out.write(fifo_data);
                                        }
                                        fifo_B_out.write(local_B[0][0]);
                                        {
                                            A_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_A[0][0][7];
                                            u6.ut = local_A[0][0][6];
                                            u5.ut = local_A[0][0][5];
                                            u4.ut = local_A[0][0][4];
                                            u3.ut = local_A[0][0][3];
                                            u2.ut = local_A[0][0][2];
                                            u1.ut = local_A[0][0][1];
                                            u0.ut = local_A[0][0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_A_out.write(fifo_data);
                                        }
                                    }
                                }
                            }
                        }
                }
            }
}
/* Module Definition */

/* Module Definition */
void PE_wrapper_0_4_x1(int idx, int idy, hls::stream<A_t8> &fifo_A_in, hls::stream<A_t8> &fifo_A_out, hls::stream<float> &fifo_B_in, hls::stream<float> &fifo_B_out, hls::stream<C_t8> &fifo_C_in, hls::stream<C_t8> &fifo_C_out, hls::stream<float> &fifo_D_drain_out) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    A_t1 local_A[1][1][8];
#pragma HLS ARRAY_PARTITION variable = local_A dim = 0 complete
    B_t1 local_B[1][1];
#pragma HLS ARRAY_PARTITION variable = local_B dim = 0 complete
    C_t1 local_C[1][8];
#pragma HLS ARRAY_PARTITION variable = local_C dim = 0 complete
    D_t1 local_D[16][8];
    /* Variable Declaration */

PE_wrapper_0_4_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
PE_wrapper_0_4_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p1 + 8 * c1 <= 41) {
                // array
                // pe
                // latency
PE_wrapper_0_4_x1_loop_3:                 for (ap_uint<4> c6 = 0; c6 <= 7; c6 += 1) {
                    // latency
PE_wrapper_0_4_x1_loop_4:                     for (ap_uint<5> c7 = 0; c7 <= 15; c7 += 1) {

                        local_D[c7][c6] = 0;
                    }
                }
PE_wrapper_0_4_x1_loop_5:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
PE_wrapper_0_4_x1_loop_6:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
PE_wrapper_0_4_x1_loop_7:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
PE_wrapper_0_4_x1_loop_8:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
PE_wrapper_0_4_x1_loop_9:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    {
                                        {
                                            A_t8 fifo_data;
                                            fifo_data = fifo_A_in.read();
PE_wrapper_0_4_x1_loop_10:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_A[0][0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        local_B[0][0] = fifo_B_in.read();
                                        {
                                            C_t8 fifo_data;
                                            fifo_data = fifo_C_in.read();
PE_wrapper_0_4_x1_loop_11:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_C[0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        // simd
PE_wrapper_0_4_x1_loop_12:                                         for (ap_uint<4> c9 = 0; c9 <= 7; c9 += 1) {
                                            local_D[c8][c7] = (local_D[c8][c7] + ((local_A[0][0][c9] * local_B[0][0]) * local_C[0][c9]));
                                        }
                                        if (c2 == 127 && c5 == 1 && c6 == 31)
                                            fifo_D_drain_out.write(local_D[c8][c7]);
                                        {
                                            C_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_C[0][7];
                                            u6.ut = local_C[0][6];
                                            u5.ut = local_C[0][5];
                                            u4.ut = local_C[0][4];
                                            u3.ut = local_C[0][3];
                                            u2.ut = local_C[0][2];
                                            u1.ut = local_C[0][1];
                                            u0.ut = local_C[0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_C_out.write(fifo_data);
                                        }
                                        fifo_B_out.write(local_B[0][0]);
                                        {
                                            A_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_A[0][0][7];
                                            u6.ut = local_A[0][0][6];
                                            u5.ut = local_A[0][0][5];
                                            u4.ut = local_A[0][0][4];
                                            u3.ut = local_A[0][0][3];
                                            u2.ut = local_A[0][0][2];
                                            u1.ut = local_A[0][0][1];
                                            u0.ut = local_A[0][0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_A_out.write(fifo_data);
                                        }
                                    }
                                }
                            }
                        }
                }
            }
}
/* Module Definition */

/* Module Definition */
void PE_wrapper_0_5_x1(int idx, int idy, hls::stream<A_t8> &fifo_A_in, hls::stream<A_t8> &fifo_A_out, hls::stream<float> &fifo_B_in, hls::stream<float> &fifo_B_out, hls::stream<C_t8> &fifo_C_in, hls::stream<C_t8> &fifo_C_out, hls::stream<float> &fifo_D_drain_out) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    A_t1 local_A[1][1][8];
#pragma HLS ARRAY_PARTITION variable = local_A dim = 0 complete
    B_t1 local_B[1][1];
#pragma HLS ARRAY_PARTITION variable = local_B dim = 0 complete
    C_t1 local_C[1][8];
#pragma HLS ARRAY_PARTITION variable = local_C dim = 0 complete
    D_t1 local_D[16][8];
    /* Variable Declaration */

PE_wrapper_0_5_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
PE_wrapper_0_5_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p1 + 8 * c1 <= 41) {
                // array
                // pe
                // latency
PE_wrapper_0_5_x1_loop_3:                 for (ap_uint<4> c6 = 0; c6 <= 7; c6 += 1) {
                    // latency
PE_wrapper_0_5_x1_loop_4:                     for (ap_uint<5> c7 = 0; c7 <= 15; c7 += 1) {

                        local_D[c7][c6] = 0;
                    }
                }
PE_wrapper_0_5_x1_loop_5:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
PE_wrapper_0_5_x1_loop_6:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
PE_wrapper_0_5_x1_loop_7:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
PE_wrapper_0_5_x1_loop_8:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
PE_wrapper_0_5_x1_loop_9:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    {
                                        {
                                            A_t8 fifo_data;
                                            fifo_data = fifo_A_in.read();
PE_wrapper_0_5_x1_loop_10:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_A[0][0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        local_B[0][0] = fifo_B_in.read();
                                        {
                                            C_t8 fifo_data;
                                            fifo_data = fifo_C_in.read();
PE_wrapper_0_5_x1_loop_11:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_C[0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        // simd
PE_wrapper_0_5_x1_loop_12:                                         for (ap_uint<4> c9 = 0; c9 <= 7; c9 += 1) {
                                            local_D[c8][c7] = (local_D[c8][c7] + ((local_A[0][0][c9] * local_B[0][0]) * local_C[0][c9]));
                                        }
                                        if (c2 == 127 && c5 == 1 && c6 == 31)
                                            fifo_D_drain_out.write(local_D[c8][c7]);
                                        {
                                            C_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_C[0][7];
                                            u6.ut = local_C[0][6];
                                            u5.ut = local_C[0][5];
                                            u4.ut = local_C[0][4];
                                            u3.ut = local_C[0][3];
                                            u2.ut = local_C[0][2];
                                            u1.ut = local_C[0][1];
                                            u0.ut = local_C[0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_C_out.write(fifo_data);
                                        }
                                        fifo_B_out.write(local_B[0][0]);
                                        {
                                            A_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_A[0][0][7];
                                            u6.ut = local_A[0][0][6];
                                            u5.ut = local_A[0][0][5];
                                            u4.ut = local_A[0][0][4];
                                            u3.ut = local_A[0][0][3];
                                            u2.ut = local_A[0][0][2];
                                            u1.ut = local_A[0][0][1];
                                            u0.ut = local_A[0][0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_A_out.write(fifo_data);
                                        }
                                    }
                                }
                            }
                        }
                }
            }
}
/* Module Definition */

/* Module Definition */
void PE_wrapper_0_6_x1(int idx, int idy, hls::stream<A_t8> &fifo_A_in, hls::stream<A_t8> &fifo_A_out, hls::stream<float> &fifo_B_in, hls::stream<float> &fifo_B_out, hls::stream<C_t8> &fifo_C_in, hls::stream<C_t8> &fifo_C_out, hls::stream<float> &fifo_D_drain_out) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    A_t1 local_A[1][1][8];
#pragma HLS ARRAY_PARTITION variable = local_A dim = 0 complete
    B_t1 local_B[1][1];
#pragma HLS ARRAY_PARTITION variable = local_B dim = 0 complete
    C_t1 local_C[1][8];
#pragma HLS ARRAY_PARTITION variable = local_C dim = 0 complete
    D_t1 local_D[16][8];
    /* Variable Declaration */

PE_wrapper_0_6_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
PE_wrapper_0_6_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p1 + 8 * c1 <= 41) {
                // array
                // pe
                // latency
PE_wrapper_0_6_x1_loop_3:                 for (ap_uint<4> c6 = 0; c6 <= 7; c6 += 1) {
                    // latency
PE_wrapper_0_6_x1_loop_4:                     for (ap_uint<5> c7 = 0; c7 <= 15; c7 += 1) {

                        local_D[c7][c6] = 0;
                    }
                }
PE_wrapper_0_6_x1_loop_5:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
PE_wrapper_0_6_x1_loop_6:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
PE_wrapper_0_6_x1_loop_7:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
PE_wrapper_0_6_x1_loop_8:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
PE_wrapper_0_6_x1_loop_9:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    {
                                        {
                                            A_t8 fifo_data;
                                            fifo_data = fifo_A_in.read();
PE_wrapper_0_6_x1_loop_10:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_A[0][0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        local_B[0][0] = fifo_B_in.read();
                                        {
                                            C_t8 fifo_data;
                                            fifo_data = fifo_C_in.read();
PE_wrapper_0_6_x1_loop_11:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_C[0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        // simd
PE_wrapper_0_6_x1_loop_12:                                         for (ap_uint<4> c9 = 0; c9 <= 7; c9 += 1) {
                                            local_D[c8][c7] = (local_D[c8][c7] + ((local_A[0][0][c9] * local_B[0][0]) * local_C[0][c9]));
                                        }
                                        if (c2 == 127 && c5 == 1 && c6 == 31)
                                            fifo_D_drain_out.write(local_D[c8][c7]);
                                        {
                                            C_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_C[0][7];
                                            u6.ut = local_C[0][6];
                                            u5.ut = local_C[0][5];
                                            u4.ut = local_C[0][4];
                                            u3.ut = local_C[0][3];
                                            u2.ut = local_C[0][2];
                                            u1.ut = local_C[0][1];
                                            u0.ut = local_C[0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_C_out.write(fifo_data);
                                        }
                                        fifo_B_out.write(local_B[0][0]);
                                        {
                                            A_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_A[0][0][7];
                                            u6.ut = local_A[0][0][6];
                                            u5.ut = local_A[0][0][5];
                                            u4.ut = local_A[0][0][4];
                                            u3.ut = local_A[0][0][3];
                                            u2.ut = local_A[0][0][2];
                                            u1.ut = local_A[0][0][1];
                                            u0.ut = local_A[0][0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_A_out.write(fifo_data);
                                        }
                                    }
                                }
                            }
                        }
                }
            }
}
/* Module Definition */

/* Module Definition */
void PE_wrapper_0_7_x1(int idx, int idy, hls::stream<A_t8> &fifo_A_in, hls::stream<A_t8> &fifo_A_out, hls::stream<float> &fifo_B_in, hls::stream<float> &fifo_B_out, hls::stream<C_t8> &fifo_C_in, hls::stream<C_t8> &fifo_C_out, hls::stream<float> &fifo_D_drain_out) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    A_t1 local_A[1][1][8];
#pragma HLS ARRAY_PARTITION variable = local_A dim = 0 complete
    B_t1 local_B[1][1];
#pragma HLS ARRAY_PARTITION variable = local_B dim = 0 complete
    C_t1 local_C[1][8];
#pragma HLS ARRAY_PARTITION variable = local_C dim = 0 complete
    D_t1 local_D[16][8];
    /* Variable Declaration */

PE_wrapper_0_7_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
PE_wrapper_0_7_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p1 + 8 * c1 <= 41) {
                // array
                // pe
                // latency
PE_wrapper_0_7_x1_loop_3:                 for (ap_uint<4> c6 = 0; c6 <= 7; c6 += 1) {
                    // latency
PE_wrapper_0_7_x1_loop_4:                     for (ap_uint<5> c7 = 0; c7 <= 15; c7 += 1) {

                        local_D[c7][c6] = 0;
                    }
                }
PE_wrapper_0_7_x1_loop_5:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
PE_wrapper_0_7_x1_loop_6:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
PE_wrapper_0_7_x1_loop_7:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
PE_wrapper_0_7_x1_loop_8:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
PE_wrapper_0_7_x1_loop_9:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    {
                                        {
                                            A_t8 fifo_data;
                                            fifo_data = fifo_A_in.read();
PE_wrapper_0_7_x1_loop_10:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_A[0][0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        local_B[0][0] = fifo_B_in.read();
                                        {
                                            C_t8 fifo_data;
                                            fifo_data = fifo_C_in.read();
PE_wrapper_0_7_x1_loop_11:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_C[0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        // simd
PE_wrapper_0_7_x1_loop_12:                                         for (ap_uint<4> c9 = 0; c9 <= 7; c9 += 1) {
                                            local_D[c8][c7] = (local_D[c8][c7] + ((local_A[0][0][c9] * local_B[0][0]) * local_C[0][c9]));
                                        }
                                        if (c2 == 127 && c5 == 1 && c6 == 31)
                                            fifo_D_drain_out.write(local_D[c8][c7]);
                                        {
                                            C_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_C[0][7];
                                            u6.ut = local_C[0][6];
                                            u5.ut = local_C[0][5];
                                            u4.ut = local_C[0][4];
                                            u3.ut = local_C[0][3];
                                            u2.ut = local_C[0][2];
                                            u1.ut = local_C[0][1];
                                            u0.ut = local_C[0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_C_out.write(fifo_data);
                                        }
                                        fifo_B_out.write(local_B[0][0]);
                                        {
                                            A_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_A[0][0][7];
                                            u6.ut = local_A[0][0][6];
                                            u5.ut = local_A[0][0][5];
                                            u4.ut = local_A[0][0][4];
                                            u3.ut = local_A[0][0][3];
                                            u2.ut = local_A[0][0][2];
                                            u1.ut = local_A[0][0][1];
                                            u0.ut = local_A[0][0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_A_out.write(fifo_data);
                                        }
                                    }
                                }
                            }
                        }
                }
            }
}
/* Module Definition */

/* Module Definition */
void PE_wrapper_1_0_x1(int idx, int idy, hls::stream<A_t8> &fifo_A_in, hls::stream<A_t8> &fifo_A_out, hls::stream<float> &fifo_B_in, hls::stream<float> &fifo_B_out, hls::stream<C_t8> &fifo_C_in, hls::stream<C_t8> &fifo_C_out, hls::stream<float> &fifo_D_drain_out) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    A_t1 local_A[1][1][8];
#pragma HLS ARRAY_PARTITION variable = local_A dim = 0 complete
    B_t1 local_B[1][1];
#pragma HLS ARRAY_PARTITION variable = local_B dim = 0 complete
    C_t1 local_C[1][8];
#pragma HLS ARRAY_PARTITION variable = local_C dim = 0 complete
    D_t1 local_D[16][8];
    /* Variable Declaration */

PE_wrapper_1_0_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
PE_wrapper_1_0_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p1 + 8 * c1 <= 41) {
                // array
                // pe
                // latency
PE_wrapper_1_0_x1_loop_3:                 for (ap_uint<4> c6 = 0; c6 <= 7; c6 += 1) {
                    // latency
PE_wrapper_1_0_x1_loop_4:                     for (ap_uint<5> c7 = 0; c7 <= 15; c7 += 1) {

                        local_D[c7][c6] = 0;
                    }
                }
PE_wrapper_1_0_x1_loop_5:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
PE_wrapper_1_0_x1_loop_6:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
PE_wrapper_1_0_x1_loop_7:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
PE_wrapper_1_0_x1_loop_8:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
PE_wrapper_1_0_x1_loop_9:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    {
                                        {
                                            A_t8 fifo_data;
                                            fifo_data = fifo_A_in.read();
PE_wrapper_1_0_x1_loop_10:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_A[0][0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        local_B[0][0] = fifo_B_in.read();
                                        {
                                            C_t8 fifo_data;
                                            fifo_data = fifo_C_in.read();
PE_wrapper_1_0_x1_loop_11:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_C[0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        // simd
PE_wrapper_1_0_x1_loop_12:                                         for (ap_uint<4> c9 = 0; c9 <= 7; c9 += 1) {
                                            local_D[c8][c7] = (local_D[c8][c7] + ((local_A[0][0][c9] * local_B[0][0]) * local_C[0][c9]));
                                        }
                                        if (c2 == 127 && c5 == 1 && c6 == 31)
                                            fifo_D_drain_out.write(local_D[c8][c7]);
                                        {
                                            C_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_C[0][7];
                                            u6.ut = local_C[0][6];
                                            u5.ut = local_C[0][5];
                                            u4.ut = local_C[0][4];
                                            u3.ut = local_C[0][3];
                                            u2.ut = local_C[0][2];
                                            u1.ut = local_C[0][1];
                                            u0.ut = local_C[0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_C_out.write(fifo_data);
                                        }
                                        fifo_B_out.write(local_B[0][0]);
                                        {
                                            A_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_A[0][0][7];
                                            u6.ut = local_A[0][0][6];
                                            u5.ut = local_A[0][0][5];
                                            u4.ut = local_A[0][0][4];
                                            u3.ut = local_A[0][0][3];
                                            u2.ut = local_A[0][0][2];
                                            u1.ut = local_A[0][0][1];
                                            u0.ut = local_A[0][0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_A_out.write(fifo_data);
                                        }
                                    }
                                }
                            }
                        }
                }
            }
}
/* Module Definition */

/* Module Definition */
void PE_wrapper_1_1_x1(int idx, int idy, hls::stream<A_t8> &fifo_A_in, hls::stream<A_t8> &fifo_A_out, hls::stream<float> &fifo_B_in, hls::stream<float> &fifo_B_out, hls::stream<C_t8> &fifo_C_in, hls::stream<C_t8> &fifo_C_out, hls::stream<float> &fifo_D_drain_out) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    A_t1 local_A[1][1][8];
#pragma HLS ARRAY_PARTITION variable = local_A dim = 0 complete
    B_t1 local_B[1][1];
#pragma HLS ARRAY_PARTITION variable = local_B dim = 0 complete
    C_t1 local_C[1][8];
#pragma HLS ARRAY_PARTITION variable = local_C dim = 0 complete
    D_t1 local_D[16][8];
    /* Variable Declaration */

PE_wrapper_1_1_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
PE_wrapper_1_1_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p1 + 8 * c1 <= 41) {
                // array
                // pe
                // latency
PE_wrapper_1_1_x1_loop_3:                 for (ap_uint<4> c6 = 0; c6 <= 7; c6 += 1) {
                    // latency
PE_wrapper_1_1_x1_loop_4:                     for (ap_uint<5> c7 = 0; c7 <= 15; c7 += 1) {

                        local_D[c7][c6] = 0;
                    }
                }
PE_wrapper_1_1_x1_loop_5:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
PE_wrapper_1_1_x1_loop_6:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
PE_wrapper_1_1_x1_loop_7:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
PE_wrapper_1_1_x1_loop_8:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
PE_wrapper_1_1_x1_loop_9:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    {
                                        {
                                            A_t8 fifo_data;
                                            fifo_data = fifo_A_in.read();
PE_wrapper_1_1_x1_loop_10:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_A[0][0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        local_B[0][0] = fifo_B_in.read();
                                        {
                                            C_t8 fifo_data;
                                            fifo_data = fifo_C_in.read();
PE_wrapper_1_1_x1_loop_11:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_C[0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        // simd
PE_wrapper_1_1_x1_loop_12:                                         for (ap_uint<4> c9 = 0; c9 <= 7; c9 += 1) {
                                            local_D[c8][c7] = (local_D[c8][c7] + ((local_A[0][0][c9] * local_B[0][0]) * local_C[0][c9]));
                                        }
                                        if (c2 == 127 && c5 == 1 && c6 == 31)
                                            fifo_D_drain_out.write(local_D[c8][c7]);
                                        {
                                            C_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_C[0][7];
                                            u6.ut = local_C[0][6];
                                            u5.ut = local_C[0][5];
                                            u4.ut = local_C[0][4];
                                            u3.ut = local_C[0][3];
                                            u2.ut = local_C[0][2];
                                            u1.ut = local_C[0][1];
                                            u0.ut = local_C[0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_C_out.write(fifo_data);
                                        }
                                        fifo_B_out.write(local_B[0][0]);
                                        {
                                            A_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_A[0][0][7];
                                            u6.ut = local_A[0][0][6];
                                            u5.ut = local_A[0][0][5];
                                            u4.ut = local_A[0][0][4];
                                            u3.ut = local_A[0][0][3];
                                            u2.ut = local_A[0][0][2];
                                            u1.ut = local_A[0][0][1];
                                            u0.ut = local_A[0][0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_A_out.write(fifo_data);
                                        }
                                    }
                                }
                            }
                        }
                }
            }
}
/* Module Definition */

/* Module Definition */
void PE_wrapper_1_2_x1(int idx, int idy, hls::stream<A_t8> &fifo_A_in, hls::stream<A_t8> &fifo_A_out, hls::stream<float> &fifo_B_in, hls::stream<float> &fifo_B_out, hls::stream<C_t8> &fifo_C_in, hls::stream<C_t8> &fifo_C_out, hls::stream<float> &fifo_D_drain_out) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    A_t1 local_A[1][1][8];
#pragma HLS ARRAY_PARTITION variable = local_A dim = 0 complete
    B_t1 local_B[1][1];
#pragma HLS ARRAY_PARTITION variable = local_B dim = 0 complete
    C_t1 local_C[1][8];
#pragma HLS ARRAY_PARTITION variable = local_C dim = 0 complete
    D_t1 local_D[16][8];
    /* Variable Declaration */

PE_wrapper_1_2_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
PE_wrapper_1_2_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p1 + 8 * c1 <= 41) {
                // array
                // pe
                // latency
PE_wrapper_1_2_x1_loop_3:                 for (ap_uint<4> c6 = 0; c6 <= 7; c6 += 1) {
                    // latency
PE_wrapper_1_2_x1_loop_4:                     for (ap_uint<5> c7 = 0; c7 <= 15; c7 += 1) {

                        local_D[c7][c6] = 0;
                    }
                }
PE_wrapper_1_2_x1_loop_5:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
PE_wrapper_1_2_x1_loop_6:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
PE_wrapper_1_2_x1_loop_7:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
PE_wrapper_1_2_x1_loop_8:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
PE_wrapper_1_2_x1_loop_9:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    {
                                        {
                                            A_t8 fifo_data;
                                            fifo_data = fifo_A_in.read();
PE_wrapper_1_2_x1_loop_10:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_A[0][0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        local_B[0][0] = fifo_B_in.read();
                                        {
                                            C_t8 fifo_data;
                                            fifo_data = fifo_C_in.read();
PE_wrapper_1_2_x1_loop_11:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_C[0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        // simd
PE_wrapper_1_2_x1_loop_12:                                         for (ap_uint<4> c9 = 0; c9 <= 7; c9 += 1) {
                                            local_D[c8][c7] = (local_D[c8][c7] + ((local_A[0][0][c9] * local_B[0][0]) * local_C[0][c9]));
                                        }
                                        if (c2 == 127 && c5 == 1 && c6 == 31)
                                            fifo_D_drain_out.write(local_D[c8][c7]);
                                        {
                                            C_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_C[0][7];
                                            u6.ut = local_C[0][6];
                                            u5.ut = local_C[0][5];
                                            u4.ut = local_C[0][4];
                                            u3.ut = local_C[0][3];
                                            u2.ut = local_C[0][2];
                                            u1.ut = local_C[0][1];
                                            u0.ut = local_C[0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_C_out.write(fifo_data);
                                        }
                                        fifo_B_out.write(local_B[0][0]);
                                        {
                                            A_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_A[0][0][7];
                                            u6.ut = local_A[0][0][6];
                                            u5.ut = local_A[0][0][5];
                                            u4.ut = local_A[0][0][4];
                                            u3.ut = local_A[0][0][3];
                                            u2.ut = local_A[0][0][2];
                                            u1.ut = local_A[0][0][1];
                                            u0.ut = local_A[0][0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_A_out.write(fifo_data);
                                        }
                                    }
                                }
                            }
                        }
                }
            }
}
/* Module Definition */

/* Module Definition */
void PE_wrapper_1_3_x1(int idx, int idy, hls::stream<A_t8> &fifo_A_in, hls::stream<A_t8> &fifo_A_out, hls::stream<float> &fifo_B_in, hls::stream<float> &fifo_B_out, hls::stream<C_t8> &fifo_C_in, hls::stream<C_t8> &fifo_C_out, hls::stream<float> &fifo_D_drain_out) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    A_t1 local_A[1][1][8];
#pragma HLS ARRAY_PARTITION variable = local_A dim = 0 complete
    B_t1 local_B[1][1];
#pragma HLS ARRAY_PARTITION variable = local_B dim = 0 complete
    C_t1 local_C[1][8];
#pragma HLS ARRAY_PARTITION variable = local_C dim = 0 complete
    D_t1 local_D[16][8];
    /* Variable Declaration */

PE_wrapper_1_3_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
PE_wrapper_1_3_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p1 + 8 * c1 <= 41) {
                // array
                // pe
                // latency
PE_wrapper_1_3_x1_loop_3:                 for (ap_uint<4> c6 = 0; c6 <= 7; c6 += 1) {
                    // latency
PE_wrapper_1_3_x1_loop_4:                     for (ap_uint<5> c7 = 0; c7 <= 15; c7 += 1) {

                        local_D[c7][c6] = 0;
                    }
                }
PE_wrapper_1_3_x1_loop_5:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
PE_wrapper_1_3_x1_loop_6:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
PE_wrapper_1_3_x1_loop_7:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
PE_wrapper_1_3_x1_loop_8:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
PE_wrapper_1_3_x1_loop_9:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    {
                                        {
                                            A_t8 fifo_data;
                                            fifo_data = fifo_A_in.read();
PE_wrapper_1_3_x1_loop_10:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_A[0][0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        local_B[0][0] = fifo_B_in.read();
                                        {
                                            C_t8 fifo_data;
                                            fifo_data = fifo_C_in.read();
PE_wrapper_1_3_x1_loop_11:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_C[0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        // simd
PE_wrapper_1_3_x1_loop_12:                                         for (ap_uint<4> c9 = 0; c9 <= 7; c9 += 1) {
                                            local_D[c8][c7] = (local_D[c8][c7] + ((local_A[0][0][c9] * local_B[0][0]) * local_C[0][c9]));
                                        }
                                        if (c2 == 127 && c5 == 1 && c6 == 31)
                                            fifo_D_drain_out.write(local_D[c8][c7]);
                                        {
                                            C_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_C[0][7];
                                            u6.ut = local_C[0][6];
                                            u5.ut = local_C[0][5];
                                            u4.ut = local_C[0][4];
                                            u3.ut = local_C[0][3];
                                            u2.ut = local_C[0][2];
                                            u1.ut = local_C[0][1];
                                            u0.ut = local_C[0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_C_out.write(fifo_data);
                                        }
                                        fifo_B_out.write(local_B[0][0]);
                                        {
                                            A_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_A[0][0][7];
                                            u6.ut = local_A[0][0][6];
                                            u5.ut = local_A[0][0][5];
                                            u4.ut = local_A[0][0][4];
                                            u3.ut = local_A[0][0][3];
                                            u2.ut = local_A[0][0][2];
                                            u1.ut = local_A[0][0][1];
                                            u0.ut = local_A[0][0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_A_out.write(fifo_data);
                                        }
                                    }
                                }
                            }
                        }
                }
            }
}
/* Module Definition */

/* Module Definition */
void PE_wrapper_1_4_x1(int idx, int idy, hls::stream<A_t8> &fifo_A_in, hls::stream<A_t8> &fifo_A_out, hls::stream<float> &fifo_B_in, hls::stream<float> &fifo_B_out, hls::stream<C_t8> &fifo_C_in, hls::stream<C_t8> &fifo_C_out, hls::stream<float> &fifo_D_drain_out) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    A_t1 local_A[1][1][8];
#pragma HLS ARRAY_PARTITION variable = local_A dim = 0 complete
    B_t1 local_B[1][1];
#pragma HLS ARRAY_PARTITION variable = local_B dim = 0 complete
    C_t1 local_C[1][8];
#pragma HLS ARRAY_PARTITION variable = local_C dim = 0 complete
    D_t1 local_D[16][8];
    /* Variable Declaration */

PE_wrapper_1_4_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
PE_wrapper_1_4_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p1 + 8 * c1 <= 41) {
                // array
                // pe
                // latency
PE_wrapper_1_4_x1_loop_3:                 for (ap_uint<4> c6 = 0; c6 <= 7; c6 += 1) {
                    // latency
PE_wrapper_1_4_x1_loop_4:                     for (ap_uint<5> c7 = 0; c7 <= 15; c7 += 1) {

                        local_D[c7][c6] = 0;
                    }
                }
PE_wrapper_1_4_x1_loop_5:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
PE_wrapper_1_4_x1_loop_6:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
PE_wrapper_1_4_x1_loop_7:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
PE_wrapper_1_4_x1_loop_8:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
PE_wrapper_1_4_x1_loop_9:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    {
                                        {
                                            A_t8 fifo_data;
                                            fifo_data = fifo_A_in.read();
PE_wrapper_1_4_x1_loop_10:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_A[0][0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        local_B[0][0] = fifo_B_in.read();
                                        {
                                            C_t8 fifo_data;
                                            fifo_data = fifo_C_in.read();
PE_wrapper_1_4_x1_loop_11:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_C[0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        // simd
PE_wrapper_1_4_x1_loop_12:                                         for (ap_uint<4> c9 = 0; c9 <= 7; c9 += 1) {
                                            local_D[c8][c7] = (local_D[c8][c7] + ((local_A[0][0][c9] * local_B[0][0]) * local_C[0][c9]));
                                        }
                                        if (c2 == 127 && c5 == 1 && c6 == 31)
                                            fifo_D_drain_out.write(local_D[c8][c7]);
                                        {
                                            C_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_C[0][7];
                                            u6.ut = local_C[0][6];
                                            u5.ut = local_C[0][5];
                                            u4.ut = local_C[0][4];
                                            u3.ut = local_C[0][3];
                                            u2.ut = local_C[0][2];
                                            u1.ut = local_C[0][1];
                                            u0.ut = local_C[0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_C_out.write(fifo_data);
                                        }
                                        fifo_B_out.write(local_B[0][0]);
                                        {
                                            A_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_A[0][0][7];
                                            u6.ut = local_A[0][0][6];
                                            u5.ut = local_A[0][0][5];
                                            u4.ut = local_A[0][0][4];
                                            u3.ut = local_A[0][0][3];
                                            u2.ut = local_A[0][0][2];
                                            u1.ut = local_A[0][0][1];
                                            u0.ut = local_A[0][0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_A_out.write(fifo_data);
                                        }
                                    }
                                }
                            }
                        }
                }
            }
}
/* Module Definition */

/* Module Definition */
void PE_wrapper_1_5_x1(int idx, int idy, hls::stream<A_t8> &fifo_A_in, hls::stream<A_t8> &fifo_A_out, hls::stream<float> &fifo_B_in, hls::stream<float> &fifo_B_out, hls::stream<C_t8> &fifo_C_in, hls::stream<C_t8> &fifo_C_out, hls::stream<float> &fifo_D_drain_out) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    A_t1 local_A[1][1][8];
#pragma HLS ARRAY_PARTITION variable = local_A dim = 0 complete
    B_t1 local_B[1][1];
#pragma HLS ARRAY_PARTITION variable = local_B dim = 0 complete
    C_t1 local_C[1][8];
#pragma HLS ARRAY_PARTITION variable = local_C dim = 0 complete
    D_t1 local_D[16][8];
    /* Variable Declaration */

PE_wrapper_1_5_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
PE_wrapper_1_5_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p1 + 8 * c1 <= 41) {
                // array
                // pe
                // latency
PE_wrapper_1_5_x1_loop_3:                 for (ap_uint<4> c6 = 0; c6 <= 7; c6 += 1) {
                    // latency
PE_wrapper_1_5_x1_loop_4:                     for (ap_uint<5> c7 = 0; c7 <= 15; c7 += 1) {

                        local_D[c7][c6] = 0;
                    }
                }
PE_wrapper_1_5_x1_loop_5:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
PE_wrapper_1_5_x1_loop_6:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
PE_wrapper_1_5_x1_loop_7:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
PE_wrapper_1_5_x1_loop_8:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
PE_wrapper_1_5_x1_loop_9:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    {
                                        {
                                            A_t8 fifo_data;
                                            fifo_data = fifo_A_in.read();
PE_wrapper_1_5_x1_loop_10:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_A[0][0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        local_B[0][0] = fifo_B_in.read();
                                        {
                                            C_t8 fifo_data;
                                            fifo_data = fifo_C_in.read();
PE_wrapper_1_5_x1_loop_11:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_C[0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        // simd
PE_wrapper_1_5_x1_loop_12:                                         for (ap_uint<4> c9 = 0; c9 <= 7; c9 += 1) {
                                            local_D[c8][c7] = (local_D[c8][c7] + ((local_A[0][0][c9] * local_B[0][0]) * local_C[0][c9]));
                                        }
                                        if (c2 == 127 && c5 == 1 && c6 == 31)
                                            fifo_D_drain_out.write(local_D[c8][c7]);
                                        {
                                            C_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_C[0][7];
                                            u6.ut = local_C[0][6];
                                            u5.ut = local_C[0][5];
                                            u4.ut = local_C[0][4];
                                            u3.ut = local_C[0][3];
                                            u2.ut = local_C[0][2];
                                            u1.ut = local_C[0][1];
                                            u0.ut = local_C[0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_C_out.write(fifo_data);
                                        }
                                        fifo_B_out.write(local_B[0][0]);
                                        {
                                            A_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_A[0][0][7];
                                            u6.ut = local_A[0][0][6];
                                            u5.ut = local_A[0][0][5];
                                            u4.ut = local_A[0][0][4];
                                            u3.ut = local_A[0][0][3];
                                            u2.ut = local_A[0][0][2];
                                            u1.ut = local_A[0][0][1];
                                            u0.ut = local_A[0][0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_A_out.write(fifo_data);
                                        }
                                    }
                                }
                            }
                        }
                }
            }
}
/* Module Definition */

/* Module Definition */
void PE_wrapper_1_6_x1(int idx, int idy, hls::stream<A_t8> &fifo_A_in, hls::stream<A_t8> &fifo_A_out, hls::stream<float> &fifo_B_in, hls::stream<float> &fifo_B_out, hls::stream<C_t8> &fifo_C_in, hls::stream<C_t8> &fifo_C_out, hls::stream<float> &fifo_D_drain_out) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    A_t1 local_A[1][1][8];
#pragma HLS ARRAY_PARTITION variable = local_A dim = 0 complete
    B_t1 local_B[1][1];
#pragma HLS ARRAY_PARTITION variable = local_B dim = 0 complete
    C_t1 local_C[1][8];
#pragma HLS ARRAY_PARTITION variable = local_C dim = 0 complete
    D_t1 local_D[16][8];
    /* Variable Declaration */

PE_wrapper_1_6_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
PE_wrapper_1_6_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p1 + 8 * c1 <= 41) {
                // array
                // pe
                // latency
PE_wrapper_1_6_x1_loop_3:                 for (ap_uint<4> c6 = 0; c6 <= 7; c6 += 1) {
                    // latency
PE_wrapper_1_6_x1_loop_4:                     for (ap_uint<5> c7 = 0; c7 <= 15; c7 += 1) {

                        local_D[c7][c6] = 0;
                    }
                }
PE_wrapper_1_6_x1_loop_5:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
PE_wrapper_1_6_x1_loop_6:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
PE_wrapper_1_6_x1_loop_7:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
PE_wrapper_1_6_x1_loop_8:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
PE_wrapper_1_6_x1_loop_9:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    {
                                        {
                                            A_t8 fifo_data;
                                            fifo_data = fifo_A_in.read();
PE_wrapper_1_6_x1_loop_10:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_A[0][0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        local_B[0][0] = fifo_B_in.read();
                                        {
                                            C_t8 fifo_data;
                                            fifo_data = fifo_C_in.read();
PE_wrapper_1_6_x1_loop_11:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_C[0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        // simd
PE_wrapper_1_6_x1_loop_12:                                         for (ap_uint<4> c9 = 0; c9 <= 7; c9 += 1) {
                                            local_D[c8][c7] = (local_D[c8][c7] + ((local_A[0][0][c9] * local_B[0][0]) * local_C[0][c9]));
                                        }
                                        if (c2 == 127 && c5 == 1 && c6 == 31)
                                            fifo_D_drain_out.write(local_D[c8][c7]);
                                        {
                                            C_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_C[0][7];
                                            u6.ut = local_C[0][6];
                                            u5.ut = local_C[0][5];
                                            u4.ut = local_C[0][4];
                                            u3.ut = local_C[0][3];
                                            u2.ut = local_C[0][2];
                                            u1.ut = local_C[0][1];
                                            u0.ut = local_C[0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_C_out.write(fifo_data);
                                        }
                                        fifo_B_out.write(local_B[0][0]);
                                        {
                                            A_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_A[0][0][7];
                                            u6.ut = local_A[0][0][6];
                                            u5.ut = local_A[0][0][5];
                                            u4.ut = local_A[0][0][4];
                                            u3.ut = local_A[0][0][3];
                                            u2.ut = local_A[0][0][2];
                                            u1.ut = local_A[0][0][1];
                                            u0.ut = local_A[0][0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_A_out.write(fifo_data);
                                        }
                                    }
                                }
                            }
                        }
                }
            }
}
/* Module Definition */

/* Module Definition */
void PE_wrapper_1_7_x1(int idx, int idy, hls::stream<A_t8> &fifo_A_in, hls::stream<A_t8> &fifo_A_out, hls::stream<float> &fifo_B_in, hls::stream<float> &fifo_B_out, hls::stream<C_t8> &fifo_C_in, hls::stream<C_t8> &fifo_C_out, hls::stream<float> &fifo_D_drain_out) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    A_t1 local_A[1][1][8];
#pragma HLS ARRAY_PARTITION variable = local_A dim = 0 complete
    B_t1 local_B[1][1];
#pragma HLS ARRAY_PARTITION variable = local_B dim = 0 complete
    C_t1 local_C[1][8];
#pragma HLS ARRAY_PARTITION variable = local_C dim = 0 complete
    D_t1 local_D[16][8];
    /* Variable Declaration */

PE_wrapper_1_7_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
PE_wrapper_1_7_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p1 + 8 * c1 <= 41) {
                // array
                // pe
                // latency
PE_wrapper_1_7_x1_loop_3:                 for (ap_uint<4> c6 = 0; c6 <= 7; c6 += 1) {
                    // latency
PE_wrapper_1_7_x1_loop_4:                     for (ap_uint<5> c7 = 0; c7 <= 15; c7 += 1) {

                        local_D[c7][c6] = 0;
                    }
                }
PE_wrapper_1_7_x1_loop_5:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
PE_wrapper_1_7_x1_loop_6:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
PE_wrapper_1_7_x1_loop_7:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
PE_wrapper_1_7_x1_loop_8:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
PE_wrapper_1_7_x1_loop_9:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    {
                                        {
                                            A_t8 fifo_data;
                                            fifo_data = fifo_A_in.read();
PE_wrapper_1_7_x1_loop_10:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_A[0][0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        local_B[0][0] = fifo_B_in.read();
                                        {
                                            C_t8 fifo_data;
                                            fifo_data = fifo_C_in.read();
PE_wrapper_1_7_x1_loop_11:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_C[0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        // simd
PE_wrapper_1_7_x1_loop_12:                                         for (ap_uint<4> c9 = 0; c9 <= 7; c9 += 1) {
                                            local_D[c8][c7] = (local_D[c8][c7] + ((local_A[0][0][c9] * local_B[0][0]) * local_C[0][c9]));
                                        }
                                        if (c2 == 127 && c5 == 1 && c6 == 31)
                                            fifo_D_drain_out.write(local_D[c8][c7]);
                                        {
                                            C_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_C[0][7];
                                            u6.ut = local_C[0][6];
                                            u5.ut = local_C[0][5];
                                            u4.ut = local_C[0][4];
                                            u3.ut = local_C[0][3];
                                            u2.ut = local_C[0][2];
                                            u1.ut = local_C[0][1];
                                            u0.ut = local_C[0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_C_out.write(fifo_data);
                                        }
                                        fifo_B_out.write(local_B[0][0]);
                                        {
                                            A_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_A[0][0][7];
                                            u6.ut = local_A[0][0][6];
                                            u5.ut = local_A[0][0][5];
                                            u4.ut = local_A[0][0][4];
                                            u3.ut = local_A[0][0][3];
                                            u2.ut = local_A[0][0][2];
                                            u1.ut = local_A[0][0][1];
                                            u0.ut = local_A[0][0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_A_out.write(fifo_data);
                                        }
                                    }
                                }
                            }
                        }
                }
            }
}
/* Module Definition */

/* Module Definition */
void PE_wrapper_2_0_x1(int idx, int idy, hls::stream<A_t8> &fifo_A_in, hls::stream<A_t8> &fifo_A_out, hls::stream<float> &fifo_B_in, hls::stream<float> &fifo_B_out, hls::stream<C_t8> &fifo_C_in, hls::stream<C_t8> &fifo_C_out, hls::stream<float> &fifo_D_drain_out) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    A_t1 local_A[1][1][8];
#pragma HLS ARRAY_PARTITION variable = local_A dim = 0 complete
    B_t1 local_B[1][1];
#pragma HLS ARRAY_PARTITION variable = local_B dim = 0 complete
    C_t1 local_C[1][8];
#pragma HLS ARRAY_PARTITION variable = local_C dim = 0 complete
    D_t1 local_D[16][8];
    /* Variable Declaration */

PE_wrapper_2_0_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
PE_wrapper_2_0_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p1 + 8 * c1 <= 41) {
                // array
                // pe
                // latency
PE_wrapper_2_0_x1_loop_3:                 for (ap_uint<4> c6 = 0; c6 <= 7; c6 += 1) {
                    // latency
PE_wrapper_2_0_x1_loop_4:                     for (ap_uint<5> c7 = 0; c7 <= 15; c7 += 1) {

                        local_D[c7][c6] = 0;
                    }
                }
PE_wrapper_2_0_x1_loop_5:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
PE_wrapper_2_0_x1_loop_6:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
PE_wrapper_2_0_x1_loop_7:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
PE_wrapper_2_0_x1_loop_8:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
PE_wrapper_2_0_x1_loop_9:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    {
                                        {
                                            A_t8 fifo_data;
                                            fifo_data = fifo_A_in.read();
PE_wrapper_2_0_x1_loop_10:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_A[0][0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        local_B[0][0] = fifo_B_in.read();
                                        {
                                            C_t8 fifo_data;
                                            fifo_data = fifo_C_in.read();
PE_wrapper_2_0_x1_loop_11:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_C[0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        // simd
PE_wrapper_2_0_x1_loop_12:                                         for (ap_uint<4> c9 = 0; c9 <= 7; c9 += 1) {
                                            local_D[c8][c7] = (local_D[c8][c7] + ((local_A[0][0][c9] * local_B[0][0]) * local_C[0][c9]));
                                        }
                                        if (c2 == 127 && c5 == 1 && c6 == 31)
                                            fifo_D_drain_out.write(local_D[c8][c7]);
                                        {
                                            C_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_C[0][7];
                                            u6.ut = local_C[0][6];
                                            u5.ut = local_C[0][5];
                                            u4.ut = local_C[0][4];
                                            u3.ut = local_C[0][3];
                                            u2.ut = local_C[0][2];
                                            u1.ut = local_C[0][1];
                                            u0.ut = local_C[0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_C_out.write(fifo_data);
                                        }
                                        fifo_B_out.write(local_B[0][0]);
                                        {
                                            A_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_A[0][0][7];
                                            u6.ut = local_A[0][0][6];
                                            u5.ut = local_A[0][0][5];
                                            u4.ut = local_A[0][0][4];
                                            u3.ut = local_A[0][0][3];
                                            u2.ut = local_A[0][0][2];
                                            u1.ut = local_A[0][0][1];
                                            u0.ut = local_A[0][0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_A_out.write(fifo_data);
                                        }
                                    }
                                }
                            }
                        }
                }
            }
}
/* Module Definition */

/* Module Definition */
void PE_wrapper_2_1_x1(int idx, int idy, hls::stream<A_t8> &fifo_A_in, hls::stream<A_t8> &fifo_A_out, hls::stream<float> &fifo_B_in, hls::stream<float> &fifo_B_out, hls::stream<C_t8> &fifo_C_in, hls::stream<C_t8> &fifo_C_out, hls::stream<float> &fifo_D_drain_out) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    A_t1 local_A[1][1][8];
#pragma HLS ARRAY_PARTITION variable = local_A dim = 0 complete
    B_t1 local_B[1][1];
#pragma HLS ARRAY_PARTITION variable = local_B dim = 0 complete
    C_t1 local_C[1][8];
#pragma HLS ARRAY_PARTITION variable = local_C dim = 0 complete
    D_t1 local_D[16][8];
    /* Variable Declaration */

PE_wrapper_2_1_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
PE_wrapper_2_1_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p1 + 8 * c1 <= 41) {
                // array
                // pe
                // latency
PE_wrapper_2_1_x1_loop_3:                 for (ap_uint<4> c6 = 0; c6 <= 7; c6 += 1) {
                    // latency
PE_wrapper_2_1_x1_loop_4:                     for (ap_uint<5> c7 = 0; c7 <= 15; c7 += 1) {

                        local_D[c7][c6] = 0;
                    }
                }
PE_wrapper_2_1_x1_loop_5:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
PE_wrapper_2_1_x1_loop_6:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
PE_wrapper_2_1_x1_loop_7:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
PE_wrapper_2_1_x1_loop_8:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
PE_wrapper_2_1_x1_loop_9:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    {
                                        {
                                            A_t8 fifo_data;
                                            fifo_data = fifo_A_in.read();
PE_wrapper_2_1_x1_loop_10:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_A[0][0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        local_B[0][0] = fifo_B_in.read();
                                        {
                                            C_t8 fifo_data;
                                            fifo_data = fifo_C_in.read();
PE_wrapper_2_1_x1_loop_11:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_C[0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        // simd
PE_wrapper_2_1_x1_loop_12:                                         for (ap_uint<4> c9 = 0; c9 <= 7; c9 += 1) {
                                            local_D[c8][c7] = (local_D[c8][c7] + ((local_A[0][0][c9] * local_B[0][0]) * local_C[0][c9]));
                                        }
                                        if (c2 == 127 && c5 == 1 && c6 == 31)
                                            fifo_D_drain_out.write(local_D[c8][c7]);
                                        {
                                            C_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_C[0][7];
                                            u6.ut = local_C[0][6];
                                            u5.ut = local_C[0][5];
                                            u4.ut = local_C[0][4];
                                            u3.ut = local_C[0][3];
                                            u2.ut = local_C[0][2];
                                            u1.ut = local_C[0][1];
                                            u0.ut = local_C[0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_C_out.write(fifo_data);
                                        }
                                        fifo_B_out.write(local_B[0][0]);
                                        {
                                            A_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_A[0][0][7];
                                            u6.ut = local_A[0][0][6];
                                            u5.ut = local_A[0][0][5];
                                            u4.ut = local_A[0][0][4];
                                            u3.ut = local_A[0][0][3];
                                            u2.ut = local_A[0][0][2];
                                            u1.ut = local_A[0][0][1];
                                            u0.ut = local_A[0][0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_A_out.write(fifo_data);
                                        }
                                    }
                                }
                            }
                        }
                }
            }
}
/* Module Definition */

/* Module Definition */
void PE_wrapper_2_2_x1(int idx, int idy, hls::stream<A_t8> &fifo_A_in, hls::stream<A_t8> &fifo_A_out, hls::stream<float> &fifo_B_in, hls::stream<float> &fifo_B_out, hls::stream<C_t8> &fifo_C_in, hls::stream<C_t8> &fifo_C_out, hls::stream<float> &fifo_D_drain_out) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    A_t1 local_A[1][1][8];
#pragma HLS ARRAY_PARTITION variable = local_A dim = 0 complete
    B_t1 local_B[1][1];
#pragma HLS ARRAY_PARTITION variable = local_B dim = 0 complete
    C_t1 local_C[1][8];
#pragma HLS ARRAY_PARTITION variable = local_C dim = 0 complete
    D_t1 local_D[16][8];
    /* Variable Declaration */

PE_wrapper_2_2_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
PE_wrapper_2_2_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p1 + 8 * c1 <= 41) {
                // array
                // pe
                // latency
PE_wrapper_2_2_x1_loop_3:                 for (ap_uint<4> c6 = 0; c6 <= 7; c6 += 1) {
                    // latency
PE_wrapper_2_2_x1_loop_4:                     for (ap_uint<5> c7 = 0; c7 <= 15; c7 += 1) {

                        local_D[c7][c6] = 0;
                    }
                }
PE_wrapper_2_2_x1_loop_5:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
PE_wrapper_2_2_x1_loop_6:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
PE_wrapper_2_2_x1_loop_7:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
PE_wrapper_2_2_x1_loop_8:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
PE_wrapper_2_2_x1_loop_9:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    {
                                        {
                                            A_t8 fifo_data;
                                            fifo_data = fifo_A_in.read();
PE_wrapper_2_2_x1_loop_10:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_A[0][0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        local_B[0][0] = fifo_B_in.read();
                                        {
                                            C_t8 fifo_data;
                                            fifo_data = fifo_C_in.read();
PE_wrapper_2_2_x1_loop_11:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_C[0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        // simd
PE_wrapper_2_2_x1_loop_12:                                         for (ap_uint<4> c9 = 0; c9 <= 7; c9 += 1) {
                                            local_D[c8][c7] = (local_D[c8][c7] + ((local_A[0][0][c9] * local_B[0][0]) * local_C[0][c9]));
                                        }
                                        if (c2 == 127 && c5 == 1 && c6 == 31)
                                            fifo_D_drain_out.write(local_D[c8][c7]);
                                        {
                                            C_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_C[0][7];
                                            u6.ut = local_C[0][6];
                                            u5.ut = local_C[0][5];
                                            u4.ut = local_C[0][4];
                                            u3.ut = local_C[0][3];
                                            u2.ut = local_C[0][2];
                                            u1.ut = local_C[0][1];
                                            u0.ut = local_C[0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_C_out.write(fifo_data);
                                        }
                                        fifo_B_out.write(local_B[0][0]);
                                        {
                                            A_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_A[0][0][7];
                                            u6.ut = local_A[0][0][6];
                                            u5.ut = local_A[0][0][5];
                                            u4.ut = local_A[0][0][4];
                                            u3.ut = local_A[0][0][3];
                                            u2.ut = local_A[0][0][2];
                                            u1.ut = local_A[0][0][1];
                                            u0.ut = local_A[0][0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_A_out.write(fifo_data);
                                        }
                                    }
                                }
                            }
                        }
                }
            }
}
/* Module Definition */

/* Module Definition */
void PE_wrapper_2_3_x1(int idx, int idy, hls::stream<A_t8> &fifo_A_in, hls::stream<A_t8> &fifo_A_out, hls::stream<float> &fifo_B_in, hls::stream<float> &fifo_B_out, hls::stream<C_t8> &fifo_C_in, hls::stream<C_t8> &fifo_C_out, hls::stream<float> &fifo_D_drain_out) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    A_t1 local_A[1][1][8];
#pragma HLS ARRAY_PARTITION variable = local_A dim = 0 complete
    B_t1 local_B[1][1];
#pragma HLS ARRAY_PARTITION variable = local_B dim = 0 complete
    C_t1 local_C[1][8];
#pragma HLS ARRAY_PARTITION variable = local_C dim = 0 complete
    D_t1 local_D[16][8];
    /* Variable Declaration */

PE_wrapper_2_3_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
PE_wrapper_2_3_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p1 + 8 * c1 <= 41) {
                // array
                // pe
                // latency
PE_wrapper_2_3_x1_loop_3:                 for (ap_uint<4> c6 = 0; c6 <= 7; c6 += 1) {
                    // latency
PE_wrapper_2_3_x1_loop_4:                     for (ap_uint<5> c7 = 0; c7 <= 15; c7 += 1) {

                        local_D[c7][c6] = 0;
                    }
                }
PE_wrapper_2_3_x1_loop_5:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
PE_wrapper_2_3_x1_loop_6:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
PE_wrapper_2_3_x1_loop_7:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
PE_wrapper_2_3_x1_loop_8:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
PE_wrapper_2_3_x1_loop_9:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    {
                                        {
                                            A_t8 fifo_data;
                                            fifo_data = fifo_A_in.read();
PE_wrapper_2_3_x1_loop_10:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_A[0][0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        local_B[0][0] = fifo_B_in.read();
                                        {
                                            C_t8 fifo_data;
                                            fifo_data = fifo_C_in.read();
PE_wrapper_2_3_x1_loop_11:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_C[0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        // simd
PE_wrapper_2_3_x1_loop_12:                                         for (ap_uint<4> c9 = 0; c9 <= 7; c9 += 1) {
                                            local_D[c8][c7] = (local_D[c8][c7] + ((local_A[0][0][c9] * local_B[0][0]) * local_C[0][c9]));
                                        }
                                        if (c2 == 127 && c5 == 1 && c6 == 31)
                                            fifo_D_drain_out.write(local_D[c8][c7]);
                                        {
                                            C_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_C[0][7];
                                            u6.ut = local_C[0][6];
                                            u5.ut = local_C[0][5];
                                            u4.ut = local_C[0][4];
                                            u3.ut = local_C[0][3];
                                            u2.ut = local_C[0][2];
                                            u1.ut = local_C[0][1];
                                            u0.ut = local_C[0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_C_out.write(fifo_data);
                                        }
                                        fifo_B_out.write(local_B[0][0]);
                                        {
                                            A_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_A[0][0][7];
                                            u6.ut = local_A[0][0][6];
                                            u5.ut = local_A[0][0][5];
                                            u4.ut = local_A[0][0][4];
                                            u3.ut = local_A[0][0][3];
                                            u2.ut = local_A[0][0][2];
                                            u1.ut = local_A[0][0][1];
                                            u0.ut = local_A[0][0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_A_out.write(fifo_data);
                                        }
                                    }
                                }
                            }
                        }
                }
            }
}
/* Module Definition */

/* Module Definition */
void PE_wrapper_2_4_x1(int idx, int idy, hls::stream<A_t8> &fifo_A_in, hls::stream<A_t8> &fifo_A_out, hls::stream<float> &fifo_B_in, hls::stream<float> &fifo_B_out, hls::stream<C_t8> &fifo_C_in, hls::stream<C_t8> &fifo_C_out, hls::stream<float> &fifo_D_drain_out) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    A_t1 local_A[1][1][8];
#pragma HLS ARRAY_PARTITION variable = local_A dim = 0 complete
    B_t1 local_B[1][1];
#pragma HLS ARRAY_PARTITION variable = local_B dim = 0 complete
    C_t1 local_C[1][8];
#pragma HLS ARRAY_PARTITION variable = local_C dim = 0 complete
    D_t1 local_D[16][8];
    /* Variable Declaration */

PE_wrapper_2_4_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
PE_wrapper_2_4_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p1 + 8 * c1 <= 41) {
                // array
                // pe
                // latency
PE_wrapper_2_4_x1_loop_3:                 for (ap_uint<4> c6 = 0; c6 <= 7; c6 += 1) {
                    // latency
PE_wrapper_2_4_x1_loop_4:                     for (ap_uint<5> c7 = 0; c7 <= 15; c7 += 1) {

                        local_D[c7][c6] = 0;
                    }
                }
PE_wrapper_2_4_x1_loop_5:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
PE_wrapper_2_4_x1_loop_6:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
PE_wrapper_2_4_x1_loop_7:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
PE_wrapper_2_4_x1_loop_8:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
PE_wrapper_2_4_x1_loop_9:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    {
                                        {
                                            A_t8 fifo_data;
                                            fifo_data = fifo_A_in.read();
PE_wrapper_2_4_x1_loop_10:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_A[0][0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        local_B[0][0] = fifo_B_in.read();
                                        {
                                            C_t8 fifo_data;
                                            fifo_data = fifo_C_in.read();
PE_wrapper_2_4_x1_loop_11:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_C[0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        // simd
PE_wrapper_2_4_x1_loop_12:                                         for (ap_uint<4> c9 = 0; c9 <= 7; c9 += 1) {
                                            local_D[c8][c7] = (local_D[c8][c7] + ((local_A[0][0][c9] * local_B[0][0]) * local_C[0][c9]));
                                        }
                                        if (c2 == 127 && c5 == 1 && c6 == 31)
                                            fifo_D_drain_out.write(local_D[c8][c7]);
                                        {
                                            C_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_C[0][7];
                                            u6.ut = local_C[0][6];
                                            u5.ut = local_C[0][5];
                                            u4.ut = local_C[0][4];
                                            u3.ut = local_C[0][3];
                                            u2.ut = local_C[0][2];
                                            u1.ut = local_C[0][1];
                                            u0.ut = local_C[0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_C_out.write(fifo_data);
                                        }
                                        fifo_B_out.write(local_B[0][0]);
                                        {
                                            A_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_A[0][0][7];
                                            u6.ut = local_A[0][0][6];
                                            u5.ut = local_A[0][0][5];
                                            u4.ut = local_A[0][0][4];
                                            u3.ut = local_A[0][0][3];
                                            u2.ut = local_A[0][0][2];
                                            u1.ut = local_A[0][0][1];
                                            u0.ut = local_A[0][0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_A_out.write(fifo_data);
                                        }
                                    }
                                }
                            }
                        }
                }
            }
}
/* Module Definition */

/* Module Definition */
void PE_wrapper_2_5_x1(int idx, int idy, hls::stream<A_t8> &fifo_A_in, hls::stream<A_t8> &fifo_A_out, hls::stream<float> &fifo_B_in, hls::stream<float> &fifo_B_out, hls::stream<C_t8> &fifo_C_in, hls::stream<C_t8> &fifo_C_out, hls::stream<float> &fifo_D_drain_out) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    A_t1 local_A[1][1][8];
#pragma HLS ARRAY_PARTITION variable = local_A dim = 0 complete
    B_t1 local_B[1][1];
#pragma HLS ARRAY_PARTITION variable = local_B dim = 0 complete
    C_t1 local_C[1][8];
#pragma HLS ARRAY_PARTITION variable = local_C dim = 0 complete
    D_t1 local_D[16][8];
    /* Variable Declaration */

PE_wrapper_2_5_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
PE_wrapper_2_5_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p1 + 8 * c1 <= 41) {
                // array
                // pe
                // latency
PE_wrapper_2_5_x1_loop_3:                 for (ap_uint<4> c6 = 0; c6 <= 7; c6 += 1) {
                    // latency
PE_wrapper_2_5_x1_loop_4:                     for (ap_uint<5> c7 = 0; c7 <= 15; c7 += 1) {

                        local_D[c7][c6] = 0;
                    }
                }
PE_wrapper_2_5_x1_loop_5:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
PE_wrapper_2_5_x1_loop_6:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
PE_wrapper_2_5_x1_loop_7:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
PE_wrapper_2_5_x1_loop_8:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
PE_wrapper_2_5_x1_loop_9:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    {
                                        {
                                            A_t8 fifo_data;
                                            fifo_data = fifo_A_in.read();
PE_wrapper_2_5_x1_loop_10:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_A[0][0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        local_B[0][0] = fifo_B_in.read();
                                        {
                                            C_t8 fifo_data;
                                            fifo_data = fifo_C_in.read();
PE_wrapper_2_5_x1_loop_11:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_C[0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        // simd
PE_wrapper_2_5_x1_loop_12:                                         for (ap_uint<4> c9 = 0; c9 <= 7; c9 += 1) {
                                            local_D[c8][c7] = (local_D[c8][c7] + ((local_A[0][0][c9] * local_B[0][0]) * local_C[0][c9]));
                                        }
                                        if (c2 == 127 && c5 == 1 && c6 == 31)
                                            fifo_D_drain_out.write(local_D[c8][c7]);
                                        {
                                            C_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_C[0][7];
                                            u6.ut = local_C[0][6];
                                            u5.ut = local_C[0][5];
                                            u4.ut = local_C[0][4];
                                            u3.ut = local_C[0][3];
                                            u2.ut = local_C[0][2];
                                            u1.ut = local_C[0][1];
                                            u0.ut = local_C[0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_C_out.write(fifo_data);
                                        }
                                        fifo_B_out.write(local_B[0][0]);
                                        {
                                            A_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_A[0][0][7];
                                            u6.ut = local_A[0][0][6];
                                            u5.ut = local_A[0][0][5];
                                            u4.ut = local_A[0][0][4];
                                            u3.ut = local_A[0][0][3];
                                            u2.ut = local_A[0][0][2];
                                            u1.ut = local_A[0][0][1];
                                            u0.ut = local_A[0][0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_A_out.write(fifo_data);
                                        }
                                    }
                                }
                            }
                        }
                }
            }
}
/* Module Definition */

/* Module Definition */
void PE_wrapper_2_6_x1(int idx, int idy, hls::stream<A_t8> &fifo_A_in, hls::stream<A_t8> &fifo_A_out, hls::stream<float> &fifo_B_in, hls::stream<float> &fifo_B_out, hls::stream<C_t8> &fifo_C_in, hls::stream<C_t8> &fifo_C_out, hls::stream<float> &fifo_D_drain_out) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    A_t1 local_A[1][1][8];
#pragma HLS ARRAY_PARTITION variable = local_A dim = 0 complete
    B_t1 local_B[1][1];
#pragma HLS ARRAY_PARTITION variable = local_B dim = 0 complete
    C_t1 local_C[1][8];
#pragma HLS ARRAY_PARTITION variable = local_C dim = 0 complete
    D_t1 local_D[16][8];
    /* Variable Declaration */

PE_wrapper_2_6_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
PE_wrapper_2_6_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p1 + 8 * c1 <= 41) {
                // array
                // pe
                // latency
PE_wrapper_2_6_x1_loop_3:                 for (ap_uint<4> c6 = 0; c6 <= 7; c6 += 1) {
                    // latency
PE_wrapper_2_6_x1_loop_4:                     for (ap_uint<5> c7 = 0; c7 <= 15; c7 += 1) {

                        local_D[c7][c6] = 0;
                    }
                }
PE_wrapper_2_6_x1_loop_5:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
PE_wrapper_2_6_x1_loop_6:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
PE_wrapper_2_6_x1_loop_7:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
PE_wrapper_2_6_x1_loop_8:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
PE_wrapper_2_6_x1_loop_9:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    {
                                        {
                                            A_t8 fifo_data;
                                            fifo_data = fifo_A_in.read();
PE_wrapper_2_6_x1_loop_10:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_A[0][0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        local_B[0][0] = fifo_B_in.read();
                                        {
                                            C_t8 fifo_data;
                                            fifo_data = fifo_C_in.read();
PE_wrapper_2_6_x1_loop_11:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_C[0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        // simd
PE_wrapper_2_6_x1_loop_12:                                         for (ap_uint<4> c9 = 0; c9 <= 7; c9 += 1) {
                                            local_D[c8][c7] = (local_D[c8][c7] + ((local_A[0][0][c9] * local_B[0][0]) * local_C[0][c9]));
                                        }
                                        if (c2 == 127 && c5 == 1 && c6 == 31)
                                            fifo_D_drain_out.write(local_D[c8][c7]);
                                        {
                                            C_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_C[0][7];
                                            u6.ut = local_C[0][6];
                                            u5.ut = local_C[0][5];
                                            u4.ut = local_C[0][4];
                                            u3.ut = local_C[0][3];
                                            u2.ut = local_C[0][2];
                                            u1.ut = local_C[0][1];
                                            u0.ut = local_C[0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_C_out.write(fifo_data);
                                        }
                                        fifo_B_out.write(local_B[0][0]);
                                        {
                                            A_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_A[0][0][7];
                                            u6.ut = local_A[0][0][6];
                                            u5.ut = local_A[0][0][5];
                                            u4.ut = local_A[0][0][4];
                                            u3.ut = local_A[0][0][3];
                                            u2.ut = local_A[0][0][2];
                                            u1.ut = local_A[0][0][1];
                                            u0.ut = local_A[0][0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_A_out.write(fifo_data);
                                        }
                                    }
                                }
                            }
                        }
                }
            }
}
/* Module Definition */

/* Module Definition */
void PE_wrapper_2_7_x1(int idx, int idy, hls::stream<A_t8> &fifo_A_in, hls::stream<A_t8> &fifo_A_out, hls::stream<float> &fifo_B_in, hls::stream<float> &fifo_B_out, hls::stream<C_t8> &fifo_C_in, hls::stream<C_t8> &fifo_C_out, hls::stream<float> &fifo_D_drain_out) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    A_t1 local_A[1][1][8];
#pragma HLS ARRAY_PARTITION variable = local_A dim = 0 complete
    B_t1 local_B[1][1];
#pragma HLS ARRAY_PARTITION variable = local_B dim = 0 complete
    C_t1 local_C[1][8];
#pragma HLS ARRAY_PARTITION variable = local_C dim = 0 complete
    D_t1 local_D[16][8];
    /* Variable Declaration */

PE_wrapper_2_7_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
PE_wrapper_2_7_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p1 + 8 * c1 <= 41) {
                // array
                // pe
                // latency
PE_wrapper_2_7_x1_loop_3:                 for (ap_uint<4> c6 = 0; c6 <= 7; c6 += 1) {
                    // latency
PE_wrapper_2_7_x1_loop_4:                     for (ap_uint<5> c7 = 0; c7 <= 15; c7 += 1) {

                        local_D[c7][c6] = 0;
                    }
                }
PE_wrapper_2_7_x1_loop_5:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
PE_wrapper_2_7_x1_loop_6:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
PE_wrapper_2_7_x1_loop_7:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
PE_wrapper_2_7_x1_loop_8:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
PE_wrapper_2_7_x1_loop_9:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    {
                                        {
                                            A_t8 fifo_data;
                                            fifo_data = fifo_A_in.read();
PE_wrapper_2_7_x1_loop_10:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_A[0][0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        local_B[0][0] = fifo_B_in.read();
                                        {
                                            C_t8 fifo_data;
                                            fifo_data = fifo_C_in.read();
PE_wrapper_2_7_x1_loop_11:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_C[0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        // simd
PE_wrapper_2_7_x1_loop_12:                                         for (ap_uint<4> c9 = 0; c9 <= 7; c9 += 1) {
                                            local_D[c8][c7] = (local_D[c8][c7] + ((local_A[0][0][c9] * local_B[0][0]) * local_C[0][c9]));
                                        }
                                        if (c2 == 127 && c5 == 1 && c6 == 31)
                                            fifo_D_drain_out.write(local_D[c8][c7]);
                                        {
                                            C_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_C[0][7];
                                            u6.ut = local_C[0][6];
                                            u5.ut = local_C[0][5];
                                            u4.ut = local_C[0][4];
                                            u3.ut = local_C[0][3];
                                            u2.ut = local_C[0][2];
                                            u1.ut = local_C[0][1];
                                            u0.ut = local_C[0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_C_out.write(fifo_data);
                                        }
                                        fifo_B_out.write(local_B[0][0]);
                                        {
                                            A_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_A[0][0][7];
                                            u6.ut = local_A[0][0][6];
                                            u5.ut = local_A[0][0][5];
                                            u4.ut = local_A[0][0][4];
                                            u3.ut = local_A[0][0][3];
                                            u2.ut = local_A[0][0][2];
                                            u1.ut = local_A[0][0][1];
                                            u0.ut = local_A[0][0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_A_out.write(fifo_data);
                                        }
                                    }
                                }
                            }
                        }
                }
            }
}
/* Module Definition */

/* Module Definition */
void PE_wrapper_3_0_x1(int idx, int idy, hls::stream<A_t8> &fifo_A_in, hls::stream<A_t8> &fifo_A_out, hls::stream<float> &fifo_B_in, hls::stream<float> &fifo_B_out, hls::stream<C_t8> &fifo_C_in, hls::stream<C_t8> &fifo_C_out, hls::stream<float> &fifo_D_drain_out) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    A_t1 local_A[1][1][8];
#pragma HLS ARRAY_PARTITION variable = local_A dim = 0 complete
    B_t1 local_B[1][1];
#pragma HLS ARRAY_PARTITION variable = local_B dim = 0 complete
    C_t1 local_C[1][8];
#pragma HLS ARRAY_PARTITION variable = local_C dim = 0 complete
    D_t1 local_D[16][8];
    /* Variable Declaration */

PE_wrapper_3_0_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
PE_wrapper_3_0_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p1 + 8 * c1 <= 41) {
                // array
                // pe
                // latency
PE_wrapper_3_0_x1_loop_3:                 for (ap_uint<4> c6 = 0; c6 <= 7; c6 += 1) {
                    // latency
PE_wrapper_3_0_x1_loop_4:                     for (ap_uint<5> c7 = 0; c7 <= 15; c7 += 1) {

                        local_D[c7][c6] = 0;
                    }
                }
PE_wrapper_3_0_x1_loop_5:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
PE_wrapper_3_0_x1_loop_6:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
PE_wrapper_3_0_x1_loop_7:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
PE_wrapper_3_0_x1_loop_8:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
PE_wrapper_3_0_x1_loop_9:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    {
                                        {
                                            A_t8 fifo_data;
                                            fifo_data = fifo_A_in.read();
PE_wrapper_3_0_x1_loop_10:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_A[0][0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        local_B[0][0] = fifo_B_in.read();
                                        {
                                            C_t8 fifo_data;
                                            fifo_data = fifo_C_in.read();
PE_wrapper_3_0_x1_loop_11:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_C[0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        // simd
PE_wrapper_3_0_x1_loop_12:                                         for (ap_uint<4> c9 = 0; c9 <= 7; c9 += 1) {
                                            local_D[c8][c7] = (local_D[c8][c7] + ((local_A[0][0][c9] * local_B[0][0]) * local_C[0][c9]));
                                        }
                                        if (c2 == 127 && c5 == 1 && c6 == 31)
                                            fifo_D_drain_out.write(local_D[c8][c7]);
                                        {
                                            C_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_C[0][7];
                                            u6.ut = local_C[0][6];
                                            u5.ut = local_C[0][5];
                                            u4.ut = local_C[0][4];
                                            u3.ut = local_C[0][3];
                                            u2.ut = local_C[0][2];
                                            u1.ut = local_C[0][1];
                                            u0.ut = local_C[0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_C_out.write(fifo_data);
                                        }
                                        fifo_B_out.write(local_B[0][0]);
                                        {
                                            A_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_A[0][0][7];
                                            u6.ut = local_A[0][0][6];
                                            u5.ut = local_A[0][0][5];
                                            u4.ut = local_A[0][0][4];
                                            u3.ut = local_A[0][0][3];
                                            u2.ut = local_A[0][0][2];
                                            u1.ut = local_A[0][0][1];
                                            u0.ut = local_A[0][0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_A_out.write(fifo_data);
                                        }
                                    }
                                }
                            }
                        }
                }
            }
}
/* Module Definition */

/* Module Definition */
void PE_wrapper_3_1_x1(int idx, int idy, hls::stream<A_t8> &fifo_A_in, hls::stream<A_t8> &fifo_A_out, hls::stream<float> &fifo_B_in, hls::stream<float> &fifo_B_out, hls::stream<C_t8> &fifo_C_in, hls::stream<C_t8> &fifo_C_out, hls::stream<float> &fifo_D_drain_out) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    A_t1 local_A[1][1][8];
#pragma HLS ARRAY_PARTITION variable = local_A dim = 0 complete
    B_t1 local_B[1][1];
#pragma HLS ARRAY_PARTITION variable = local_B dim = 0 complete
    C_t1 local_C[1][8];
#pragma HLS ARRAY_PARTITION variable = local_C dim = 0 complete
    D_t1 local_D[16][8];
    /* Variable Declaration */

PE_wrapper_3_1_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
PE_wrapper_3_1_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p1 + 8 * c1 <= 41) {
                // array
                // pe
                // latency
PE_wrapper_3_1_x1_loop_3:                 for (ap_uint<4> c6 = 0; c6 <= 7; c6 += 1) {
                    // latency
PE_wrapper_3_1_x1_loop_4:                     for (ap_uint<5> c7 = 0; c7 <= 15; c7 += 1) {

                        local_D[c7][c6] = 0;
                    }
                }
PE_wrapper_3_1_x1_loop_5:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
PE_wrapper_3_1_x1_loop_6:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
PE_wrapper_3_1_x1_loop_7:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
PE_wrapper_3_1_x1_loop_8:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
PE_wrapper_3_1_x1_loop_9:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    {
                                        {
                                            A_t8 fifo_data;
                                            fifo_data = fifo_A_in.read();
PE_wrapper_3_1_x1_loop_10:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_A[0][0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        local_B[0][0] = fifo_B_in.read();
                                        {
                                            C_t8 fifo_data;
                                            fifo_data = fifo_C_in.read();
PE_wrapper_3_1_x1_loop_11:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_C[0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        // simd
PE_wrapper_3_1_x1_loop_12:                                         for (ap_uint<4> c9 = 0; c9 <= 7; c9 += 1) {
                                            local_D[c8][c7] = (local_D[c8][c7] + ((local_A[0][0][c9] * local_B[0][0]) * local_C[0][c9]));
                                        }
                                        if (c2 == 127 && c5 == 1 && c6 == 31)
                                            fifo_D_drain_out.write(local_D[c8][c7]);
                                        {
                                            C_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_C[0][7];
                                            u6.ut = local_C[0][6];
                                            u5.ut = local_C[0][5];
                                            u4.ut = local_C[0][4];
                                            u3.ut = local_C[0][3];
                                            u2.ut = local_C[0][2];
                                            u1.ut = local_C[0][1];
                                            u0.ut = local_C[0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_C_out.write(fifo_data);
                                        }
                                        fifo_B_out.write(local_B[0][0]);
                                        {
                                            A_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_A[0][0][7];
                                            u6.ut = local_A[0][0][6];
                                            u5.ut = local_A[0][0][5];
                                            u4.ut = local_A[0][0][4];
                                            u3.ut = local_A[0][0][3];
                                            u2.ut = local_A[0][0][2];
                                            u1.ut = local_A[0][0][1];
                                            u0.ut = local_A[0][0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_A_out.write(fifo_data);
                                        }
                                    }
                                }
                            }
                        }
                }
            }
}
/* Module Definition */

/* Module Definition */
void PE_wrapper_3_2_x1(int idx, int idy, hls::stream<A_t8> &fifo_A_in, hls::stream<A_t8> &fifo_A_out, hls::stream<float> &fifo_B_in, hls::stream<float> &fifo_B_out, hls::stream<C_t8> &fifo_C_in, hls::stream<C_t8> &fifo_C_out, hls::stream<float> &fifo_D_drain_out) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    A_t1 local_A[1][1][8];
#pragma HLS ARRAY_PARTITION variable = local_A dim = 0 complete
    B_t1 local_B[1][1];
#pragma HLS ARRAY_PARTITION variable = local_B dim = 0 complete
    C_t1 local_C[1][8];
#pragma HLS ARRAY_PARTITION variable = local_C dim = 0 complete
    D_t1 local_D[16][8];
    /* Variable Declaration */

PE_wrapper_3_2_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
PE_wrapper_3_2_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p1 + 8 * c1 <= 41) {
                // array
                // pe
                // latency
PE_wrapper_3_2_x1_loop_3:                 for (ap_uint<4> c6 = 0; c6 <= 7; c6 += 1) {
                    // latency
PE_wrapper_3_2_x1_loop_4:                     for (ap_uint<5> c7 = 0; c7 <= 15; c7 += 1) {

                        local_D[c7][c6] = 0;
                    }
                }
PE_wrapper_3_2_x1_loop_5:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
PE_wrapper_3_2_x1_loop_6:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
PE_wrapper_3_2_x1_loop_7:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
PE_wrapper_3_2_x1_loop_8:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
PE_wrapper_3_2_x1_loop_9:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    {
                                        {
                                            A_t8 fifo_data;
                                            fifo_data = fifo_A_in.read();
PE_wrapper_3_2_x1_loop_10:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_A[0][0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        local_B[0][0] = fifo_B_in.read();
                                        {
                                            C_t8 fifo_data;
                                            fifo_data = fifo_C_in.read();
PE_wrapper_3_2_x1_loop_11:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_C[0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        // simd
PE_wrapper_3_2_x1_loop_12:                                         for (ap_uint<4> c9 = 0; c9 <= 7; c9 += 1) {
                                            local_D[c8][c7] = (local_D[c8][c7] + ((local_A[0][0][c9] * local_B[0][0]) * local_C[0][c9]));
                                        }
                                        if (c2 == 127 && c5 == 1 && c6 == 31)
                                            fifo_D_drain_out.write(local_D[c8][c7]);
                                        {
                                            C_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_C[0][7];
                                            u6.ut = local_C[0][6];
                                            u5.ut = local_C[0][5];
                                            u4.ut = local_C[0][4];
                                            u3.ut = local_C[0][3];
                                            u2.ut = local_C[0][2];
                                            u1.ut = local_C[0][1];
                                            u0.ut = local_C[0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_C_out.write(fifo_data);
                                        }
                                        fifo_B_out.write(local_B[0][0]);
                                        {
                                            A_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_A[0][0][7];
                                            u6.ut = local_A[0][0][6];
                                            u5.ut = local_A[0][0][5];
                                            u4.ut = local_A[0][0][4];
                                            u3.ut = local_A[0][0][3];
                                            u2.ut = local_A[0][0][2];
                                            u1.ut = local_A[0][0][1];
                                            u0.ut = local_A[0][0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_A_out.write(fifo_data);
                                        }
                                    }
                                }
                            }
                        }
                }
            }
}
/* Module Definition */

/* Module Definition */
void PE_wrapper_3_3_x1(int idx, int idy, hls::stream<A_t8> &fifo_A_in, hls::stream<A_t8> &fifo_A_out, hls::stream<float> &fifo_B_in, hls::stream<float> &fifo_B_out, hls::stream<C_t8> &fifo_C_in, hls::stream<C_t8> &fifo_C_out, hls::stream<float> &fifo_D_drain_out) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    A_t1 local_A[1][1][8];
#pragma HLS ARRAY_PARTITION variable = local_A dim = 0 complete
    B_t1 local_B[1][1];
#pragma HLS ARRAY_PARTITION variable = local_B dim = 0 complete
    C_t1 local_C[1][8];
#pragma HLS ARRAY_PARTITION variable = local_C dim = 0 complete
    D_t1 local_D[16][8];
    /* Variable Declaration */

PE_wrapper_3_3_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
PE_wrapper_3_3_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p1 + 8 * c1 <= 41) {
                // array
                // pe
                // latency
PE_wrapper_3_3_x1_loop_3:                 for (ap_uint<4> c6 = 0; c6 <= 7; c6 += 1) {
                    // latency
PE_wrapper_3_3_x1_loop_4:                     for (ap_uint<5> c7 = 0; c7 <= 15; c7 += 1) {

                        local_D[c7][c6] = 0;
                    }
                }
PE_wrapper_3_3_x1_loop_5:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
PE_wrapper_3_3_x1_loop_6:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
PE_wrapper_3_3_x1_loop_7:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
PE_wrapper_3_3_x1_loop_8:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
PE_wrapper_3_3_x1_loop_9:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    {
                                        {
                                            A_t8 fifo_data;
                                            fifo_data = fifo_A_in.read();
PE_wrapper_3_3_x1_loop_10:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_A[0][0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        local_B[0][0] = fifo_B_in.read();
                                        {
                                            C_t8 fifo_data;
                                            fifo_data = fifo_C_in.read();
PE_wrapper_3_3_x1_loop_11:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_C[0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        // simd
PE_wrapper_3_3_x1_loop_12:                                         for (ap_uint<4> c9 = 0; c9 <= 7; c9 += 1) {
                                            local_D[c8][c7] = (local_D[c8][c7] + ((local_A[0][0][c9] * local_B[0][0]) * local_C[0][c9]));
                                        }
                                        if (c2 == 127 && c5 == 1 && c6 == 31)
                                            fifo_D_drain_out.write(local_D[c8][c7]);
                                        {
                                            C_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_C[0][7];
                                            u6.ut = local_C[0][6];
                                            u5.ut = local_C[0][5];
                                            u4.ut = local_C[0][4];
                                            u3.ut = local_C[0][3];
                                            u2.ut = local_C[0][2];
                                            u1.ut = local_C[0][1];
                                            u0.ut = local_C[0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_C_out.write(fifo_data);
                                        }
                                        fifo_B_out.write(local_B[0][0]);
                                        {
                                            A_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_A[0][0][7];
                                            u6.ut = local_A[0][0][6];
                                            u5.ut = local_A[0][0][5];
                                            u4.ut = local_A[0][0][4];
                                            u3.ut = local_A[0][0][3];
                                            u2.ut = local_A[0][0][2];
                                            u1.ut = local_A[0][0][1];
                                            u0.ut = local_A[0][0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_A_out.write(fifo_data);
                                        }
                                    }
                                }
                            }
                        }
                }
            }
}
/* Module Definition */

/* Module Definition */
void PE_wrapper_3_4_x1(int idx, int idy, hls::stream<A_t8> &fifo_A_in, hls::stream<A_t8> &fifo_A_out, hls::stream<float> &fifo_B_in, hls::stream<float> &fifo_B_out, hls::stream<C_t8> &fifo_C_in, hls::stream<C_t8> &fifo_C_out, hls::stream<float> &fifo_D_drain_out) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    A_t1 local_A[1][1][8];
#pragma HLS ARRAY_PARTITION variable = local_A dim = 0 complete
    B_t1 local_B[1][1];
#pragma HLS ARRAY_PARTITION variable = local_B dim = 0 complete
    C_t1 local_C[1][8];
#pragma HLS ARRAY_PARTITION variable = local_C dim = 0 complete
    D_t1 local_D[16][8];
    /* Variable Declaration */

PE_wrapper_3_4_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
PE_wrapper_3_4_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p1 + 8 * c1 <= 41) {
                // array
                // pe
                // latency
PE_wrapper_3_4_x1_loop_3:                 for (ap_uint<4> c6 = 0; c6 <= 7; c6 += 1) {
                    // latency
PE_wrapper_3_4_x1_loop_4:                     for (ap_uint<5> c7 = 0; c7 <= 15; c7 += 1) {

                        local_D[c7][c6] = 0;
                    }
                }
PE_wrapper_3_4_x1_loop_5:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
PE_wrapper_3_4_x1_loop_6:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
PE_wrapper_3_4_x1_loop_7:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
PE_wrapper_3_4_x1_loop_8:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
PE_wrapper_3_4_x1_loop_9:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    {
                                        {
                                            A_t8 fifo_data;
                                            fifo_data = fifo_A_in.read();
PE_wrapper_3_4_x1_loop_10:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_A[0][0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        local_B[0][0] = fifo_B_in.read();
                                        {
                                            C_t8 fifo_data;
                                            fifo_data = fifo_C_in.read();
PE_wrapper_3_4_x1_loop_11:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_C[0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        // simd
PE_wrapper_3_4_x1_loop_12:                                         for (ap_uint<4> c9 = 0; c9 <= 7; c9 += 1) {
                                            local_D[c8][c7] = (local_D[c8][c7] + ((local_A[0][0][c9] * local_B[0][0]) * local_C[0][c9]));
                                        }
                                        if (c2 == 127 && c5 == 1 && c6 == 31)
                                            fifo_D_drain_out.write(local_D[c8][c7]);
                                        {
                                            C_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_C[0][7];
                                            u6.ut = local_C[0][6];
                                            u5.ut = local_C[0][5];
                                            u4.ut = local_C[0][4];
                                            u3.ut = local_C[0][3];
                                            u2.ut = local_C[0][2];
                                            u1.ut = local_C[0][1];
                                            u0.ut = local_C[0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_C_out.write(fifo_data);
                                        }
                                        fifo_B_out.write(local_B[0][0]);
                                        {
                                            A_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_A[0][0][7];
                                            u6.ut = local_A[0][0][6];
                                            u5.ut = local_A[0][0][5];
                                            u4.ut = local_A[0][0][4];
                                            u3.ut = local_A[0][0][3];
                                            u2.ut = local_A[0][0][2];
                                            u1.ut = local_A[0][0][1];
                                            u0.ut = local_A[0][0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_A_out.write(fifo_data);
                                        }
                                    }
                                }
                            }
                        }
                }
            }
}
/* Module Definition */

/* Module Definition */
void PE_wrapper_3_5_x1(int idx, int idy, hls::stream<A_t8> &fifo_A_in, hls::stream<A_t8> &fifo_A_out, hls::stream<float> &fifo_B_in, hls::stream<float> &fifo_B_out, hls::stream<C_t8> &fifo_C_in, hls::stream<C_t8> &fifo_C_out, hls::stream<float> &fifo_D_drain_out) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    A_t1 local_A[1][1][8];
#pragma HLS ARRAY_PARTITION variable = local_A dim = 0 complete
    B_t1 local_B[1][1];
#pragma HLS ARRAY_PARTITION variable = local_B dim = 0 complete
    C_t1 local_C[1][8];
#pragma HLS ARRAY_PARTITION variable = local_C dim = 0 complete
    D_t1 local_D[16][8];
    /* Variable Declaration */

PE_wrapper_3_5_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
PE_wrapper_3_5_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p1 + 8 * c1 <= 41) {
                // array
                // pe
                // latency
PE_wrapper_3_5_x1_loop_3:                 for (ap_uint<4> c6 = 0; c6 <= 7; c6 += 1) {
                    // latency
PE_wrapper_3_5_x1_loop_4:                     for (ap_uint<5> c7 = 0; c7 <= 15; c7 += 1) {

                        local_D[c7][c6] = 0;
                    }
                }
PE_wrapper_3_5_x1_loop_5:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
PE_wrapper_3_5_x1_loop_6:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
PE_wrapper_3_5_x1_loop_7:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
PE_wrapper_3_5_x1_loop_8:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
PE_wrapper_3_5_x1_loop_9:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    {
                                        {
                                            A_t8 fifo_data;
                                            fifo_data = fifo_A_in.read();
PE_wrapper_3_5_x1_loop_10:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_A[0][0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        local_B[0][0] = fifo_B_in.read();
                                        {
                                            C_t8 fifo_data;
                                            fifo_data = fifo_C_in.read();
PE_wrapper_3_5_x1_loop_11:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_C[0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        // simd
PE_wrapper_3_5_x1_loop_12:                                         for (ap_uint<4> c9 = 0; c9 <= 7; c9 += 1) {
                                            local_D[c8][c7] = (local_D[c8][c7] + ((local_A[0][0][c9] * local_B[0][0]) * local_C[0][c9]));
                                        }
                                        if (c2 == 127 && c5 == 1 && c6 == 31)
                                            fifo_D_drain_out.write(local_D[c8][c7]);
                                        {
                                            C_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_C[0][7];
                                            u6.ut = local_C[0][6];
                                            u5.ut = local_C[0][5];
                                            u4.ut = local_C[0][4];
                                            u3.ut = local_C[0][3];
                                            u2.ut = local_C[0][2];
                                            u1.ut = local_C[0][1];
                                            u0.ut = local_C[0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_C_out.write(fifo_data);
                                        }
                                        fifo_B_out.write(local_B[0][0]);
                                        {
                                            A_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_A[0][0][7];
                                            u6.ut = local_A[0][0][6];
                                            u5.ut = local_A[0][0][5];
                                            u4.ut = local_A[0][0][4];
                                            u3.ut = local_A[0][0][3];
                                            u2.ut = local_A[0][0][2];
                                            u1.ut = local_A[0][0][1];
                                            u0.ut = local_A[0][0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_A_out.write(fifo_data);
                                        }
                                    }
                                }
                            }
                        }
                }
            }
}
/* Module Definition */

/* Module Definition */
void PE_wrapper_3_6_x1(int idx, int idy, hls::stream<A_t8> &fifo_A_in, hls::stream<A_t8> &fifo_A_out, hls::stream<float> &fifo_B_in, hls::stream<float> &fifo_B_out, hls::stream<C_t8> &fifo_C_in, hls::stream<C_t8> &fifo_C_out, hls::stream<float> &fifo_D_drain_out) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    A_t1 local_A[1][1][8];
#pragma HLS ARRAY_PARTITION variable = local_A dim = 0 complete
    B_t1 local_B[1][1];
#pragma HLS ARRAY_PARTITION variable = local_B dim = 0 complete
    C_t1 local_C[1][8];
#pragma HLS ARRAY_PARTITION variable = local_C dim = 0 complete
    D_t1 local_D[16][8];
    /* Variable Declaration */

PE_wrapper_3_6_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
PE_wrapper_3_6_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p1 + 8 * c1 <= 41) {
                // array
                // pe
                // latency
PE_wrapper_3_6_x1_loop_3:                 for (ap_uint<4> c6 = 0; c6 <= 7; c6 += 1) {
                    // latency
PE_wrapper_3_6_x1_loop_4:                     for (ap_uint<5> c7 = 0; c7 <= 15; c7 += 1) {

                        local_D[c7][c6] = 0;
                    }
                }
PE_wrapper_3_6_x1_loop_5:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
PE_wrapper_3_6_x1_loop_6:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
PE_wrapper_3_6_x1_loop_7:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
PE_wrapper_3_6_x1_loop_8:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
PE_wrapper_3_6_x1_loop_9:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    {
                                        {
                                            A_t8 fifo_data;
                                            fifo_data = fifo_A_in.read();
PE_wrapper_3_6_x1_loop_10:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_A[0][0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        local_B[0][0] = fifo_B_in.read();
                                        {
                                            C_t8 fifo_data;
                                            fifo_data = fifo_C_in.read();
PE_wrapper_3_6_x1_loop_11:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_C[0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        // simd
PE_wrapper_3_6_x1_loop_12:                                         for (ap_uint<4> c9 = 0; c9 <= 7; c9 += 1) {
                                            local_D[c8][c7] = (local_D[c8][c7] + ((local_A[0][0][c9] * local_B[0][0]) * local_C[0][c9]));
                                        }
                                        if (c2 == 127 && c5 == 1 && c6 == 31)
                                            fifo_D_drain_out.write(local_D[c8][c7]);
                                        {
                                            C_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_C[0][7];
                                            u6.ut = local_C[0][6];
                                            u5.ut = local_C[0][5];
                                            u4.ut = local_C[0][4];
                                            u3.ut = local_C[0][3];
                                            u2.ut = local_C[0][2];
                                            u1.ut = local_C[0][1];
                                            u0.ut = local_C[0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_C_out.write(fifo_data);
                                        }
                                        fifo_B_out.write(local_B[0][0]);
                                        {
                                            A_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_A[0][0][7];
                                            u6.ut = local_A[0][0][6];
                                            u5.ut = local_A[0][0][5];
                                            u4.ut = local_A[0][0][4];
                                            u3.ut = local_A[0][0][3];
                                            u2.ut = local_A[0][0][2];
                                            u1.ut = local_A[0][0][1];
                                            u0.ut = local_A[0][0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_A_out.write(fifo_data);
                                        }
                                    }
                                }
                            }
                        }
                }
            }
}
/* Module Definition */

/* Module Definition */
void PE_wrapper_3_7_x1(int idx, int idy, hls::stream<A_t8> &fifo_A_in, hls::stream<A_t8> &fifo_A_out, hls::stream<float> &fifo_B_in, hls::stream<float> &fifo_B_out, hls::stream<C_t8> &fifo_C_in, hls::stream<C_t8> &fifo_C_out, hls::stream<float> &fifo_D_drain_out) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    A_t1 local_A[1][1][8];
#pragma HLS ARRAY_PARTITION variable = local_A dim = 0 complete
    B_t1 local_B[1][1];
#pragma HLS ARRAY_PARTITION variable = local_B dim = 0 complete
    C_t1 local_C[1][8];
#pragma HLS ARRAY_PARTITION variable = local_C dim = 0 complete
    D_t1 local_D[16][8];
    /* Variable Declaration */

PE_wrapper_3_7_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
PE_wrapper_3_7_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p1 + 8 * c1 <= 41) {
                // array
                // pe
                // latency
PE_wrapper_3_7_x1_loop_3:                 for (ap_uint<4> c6 = 0; c6 <= 7; c6 += 1) {
                    // latency
PE_wrapper_3_7_x1_loop_4:                     for (ap_uint<5> c7 = 0; c7 <= 15; c7 += 1) {

                        local_D[c7][c6] = 0;
                    }
                }
PE_wrapper_3_7_x1_loop_5:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
PE_wrapper_3_7_x1_loop_6:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
PE_wrapper_3_7_x1_loop_7:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
PE_wrapper_3_7_x1_loop_8:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
PE_wrapper_3_7_x1_loop_9:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    {
                                        {
                                            A_t8 fifo_data;
                                            fifo_data = fifo_A_in.read();
PE_wrapper_3_7_x1_loop_10:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_A[0][0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        local_B[0][0] = fifo_B_in.read();
                                        {
                                            C_t8 fifo_data;
                                            fifo_data = fifo_C_in.read();
PE_wrapper_3_7_x1_loop_11:                                             for (ap_uint<4> n = 0; n < 8; n++) {
                                                union {
                                                    unsigned int ui;
                                                    float ut;
                                                } u;
                                                u.ui = (unsigned int)fifo_data(31, 0);
                                                local_C[0][n] = u.ut;
                                                fifo_data = fifo_data >> 32;
                                            }
                                        }
                                        // simd
PE_wrapper_3_7_x1_loop_12:                                         for (ap_uint<4> c9 = 0; c9 <= 7; c9 += 1) {
                                            local_D[c8][c7] = (local_D[c8][c7] + ((local_A[0][0][c9] * local_B[0][0]) * local_C[0][c9]));
                                        }
                                        if (c2 == 127 && c5 == 1 && c6 == 31)
                                            fifo_D_drain_out.write(local_D[c8][c7]);
                                        {
                                            C_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_C[0][7];
                                            u6.ut = local_C[0][6];
                                            u5.ut = local_C[0][5];
                                            u4.ut = local_C[0][4];
                                            u3.ut = local_C[0][3];
                                            u2.ut = local_C[0][2];
                                            u1.ut = local_C[0][1];
                                            u0.ut = local_C[0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_C_out.write(fifo_data);
                                        }
                                        fifo_B_out.write(local_B[0][0]);
                                        {
                                            A_t8 fifo_data;
                                            union {
                                                unsigned int ui;
                                                float ut;
                                            } u7, u6, u5, u4, u3, u2, u1, u0;
                                            u7.ut = local_A[0][0][7];
                                            u6.ut = local_A[0][0][6];
                                            u5.ut = local_A[0][0][5];
                                            u4.ut = local_A[0][0][4];
                                            u3.ut = local_A[0][0][3];
                                            u2.ut = local_A[0][0][2];
                                            u1.ut = local_A[0][0][1];
                                            u0.ut = local_A[0][0][0];
                                            fifo_data = (ap_uint<32>(u7.ui), ap_uint<32>(u6.ui), ap_uint<32>(u5.ui), ap_uint<32>(u4.ui), ap_uint<32>(u3.ui), ap_uint<32>(u2.ui), ap_uint<32>(u1.ui), ap_uint<32>(u0.ui));
                                            fifo_A_out.write(fifo_data);
                                        }
                                    }
                                }
                            }
                        }
                }
            }
}
/* Module Definition */

/* Module Definition */
void A_PE_dummy_in_0_x1(int idx, int idy, hls::stream<A_t8> &fifo_A_in) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    /* Variable Declaration */

A_PE_dummy_in_0_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
A_PE_dummy_in_0_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
            // array
            {}
            if (p1 + 8 * c1 <= 41)
A_PE_dummy_in_0_x1_loop_3:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
A_PE_dummy_in_0_x1_loop_4:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
A_PE_dummy_in_0_x1_loop_5:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
A_PE_dummy_in_0_x1_loop_6:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
A_PE_dummy_in_0_x1_loop_7:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    A_t8 fifo_data;
                                    fifo_data = fifo_A_in.read();
                                }
                            }
                        }
                }
        }
}
/* Module Definition */

/* Module Definition */
void A_PE_dummy_in_1_x1(int idx, int idy, hls::stream<A_t8> &fifo_A_in) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    /* Variable Declaration */

A_PE_dummy_in_1_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
A_PE_dummy_in_1_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
            // array
            {}
            if (p1 + 8 * c1 <= 41)
A_PE_dummy_in_1_x1_loop_3:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
A_PE_dummy_in_1_x1_loop_4:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
A_PE_dummy_in_1_x1_loop_5:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
A_PE_dummy_in_1_x1_loop_6:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
A_PE_dummy_in_1_x1_loop_7:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    A_t8 fifo_data;
                                    fifo_data = fifo_A_in.read();
                                }
                            }
                        }
                }
        }
}
/* Module Definition */

/* Module Definition */
void A_PE_dummy_in_2_x1(int idx, int idy, hls::stream<A_t8> &fifo_A_in) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    /* Variable Declaration */

A_PE_dummy_in_2_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
A_PE_dummy_in_2_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
            // array
            {}
            if (p1 + 8 * c1 <= 41)
A_PE_dummy_in_2_x1_loop_3:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
A_PE_dummy_in_2_x1_loop_4:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
A_PE_dummy_in_2_x1_loop_5:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
A_PE_dummy_in_2_x1_loop_6:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
A_PE_dummy_in_2_x1_loop_7:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    A_t8 fifo_data;
                                    fifo_data = fifo_A_in.read();
                                }
                            }
                        }
                }
        }
}
/* Module Definition */

/* Module Definition */
void A_PE_dummy_in_3_x1(int idx, int idy, hls::stream<A_t8> &fifo_A_in) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    /* Variable Declaration */

A_PE_dummy_in_3_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
A_PE_dummy_in_3_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
            // array
            {}
            if (p1 + 8 * c1 <= 41)
A_PE_dummy_in_3_x1_loop_3:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
A_PE_dummy_in_3_x1_loop_4:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
A_PE_dummy_in_3_x1_loop_5:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
A_PE_dummy_in_3_x1_loop_6:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
A_PE_dummy_in_3_x1_loop_7:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    A_t8 fifo_data;
                                    fifo_data = fifo_A_in.read();
                                }
                            }
                        }
                }
        }
}
/* Module Definition */

/* Module Definition */
void B_PE_dummy_in_0_x1(int idx, int idy, hls::stream<float> &fifo_B_in) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    /* Variable Declaration */

B_PE_dummy_in_0_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
B_PE_dummy_in_0_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
            // array
            {}
            if (p1 + 8 * c1 <= 41)
B_PE_dummy_in_0_x1_loop_3:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
B_PE_dummy_in_0_x1_loop_4:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_PE_dummy_in_0_x1_loop_5:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
B_PE_dummy_in_0_x1_loop_6:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
B_PE_dummy_in_0_x1_loop_7:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    B_t1 fifo_data;
                                    fifo_data = fifo_B_in.read();
                                }
                            }
                        }
                }
        }
}
/* Module Definition */

/* Module Definition */
void B_PE_dummy_in_1_x1(int idx, int idy, hls::stream<float> &fifo_B_in) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    /* Variable Declaration */

B_PE_dummy_in_1_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
B_PE_dummy_in_1_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
            // array
            {}
            if (p1 + 8 * c1 <= 41)
B_PE_dummy_in_1_x1_loop_3:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
B_PE_dummy_in_1_x1_loop_4:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_PE_dummy_in_1_x1_loop_5:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
B_PE_dummy_in_1_x1_loop_6:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
B_PE_dummy_in_1_x1_loop_7:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    B_t1 fifo_data;
                                    fifo_data = fifo_B_in.read();
                                }
                            }
                        }
                }
        }
}
/* Module Definition */

/* Module Definition */
void B_PE_dummy_in_2_x1(int idx, int idy, hls::stream<float> &fifo_B_in) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    /* Variable Declaration */

B_PE_dummy_in_2_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
B_PE_dummy_in_2_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
            // array
            {}
            if (p1 + 8 * c1 <= 41)
B_PE_dummy_in_2_x1_loop_3:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
B_PE_dummy_in_2_x1_loop_4:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_PE_dummy_in_2_x1_loop_5:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
B_PE_dummy_in_2_x1_loop_6:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
B_PE_dummy_in_2_x1_loop_7:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    B_t1 fifo_data;
                                    fifo_data = fifo_B_in.read();
                                }
                            }
                        }
                }
        }
}
/* Module Definition */

/* Module Definition */
void B_PE_dummy_in_3_x1(int idx, int idy, hls::stream<float> &fifo_B_in) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    /* Variable Declaration */

B_PE_dummy_in_3_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
B_PE_dummy_in_3_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
            // array
            {}
            if (p1 + 8 * c1 <= 41)
B_PE_dummy_in_3_x1_loop_3:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
B_PE_dummy_in_3_x1_loop_4:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_PE_dummy_in_3_x1_loop_5:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
B_PE_dummy_in_3_x1_loop_6:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
B_PE_dummy_in_3_x1_loop_7:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    B_t1 fifo_data;
                                    fifo_data = fifo_B_in.read();
                                }
                            }
                        }
                }
        }
}
/* Module Definition */

/* Module Definition */
void B_PE_dummy_in_4_x1(int idx, int idy, hls::stream<float> &fifo_B_in) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    /* Variable Declaration */

B_PE_dummy_in_4_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
B_PE_dummy_in_4_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
            // array
            {}
            if (p1 + 8 * c1 <= 41)
B_PE_dummy_in_4_x1_loop_3:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
B_PE_dummy_in_4_x1_loop_4:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_PE_dummy_in_4_x1_loop_5:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
B_PE_dummy_in_4_x1_loop_6:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
B_PE_dummy_in_4_x1_loop_7:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    B_t1 fifo_data;
                                    fifo_data = fifo_B_in.read();
                                }
                            }
                        }
                }
        }
}
/* Module Definition */

/* Module Definition */
void B_PE_dummy_in_5_x1(int idx, int idy, hls::stream<float> &fifo_B_in) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    /* Variable Declaration */

B_PE_dummy_in_5_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
B_PE_dummy_in_5_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
            // array
            {}
            if (p1 + 8 * c1 <= 41)
B_PE_dummy_in_5_x1_loop_3:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
B_PE_dummy_in_5_x1_loop_4:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_PE_dummy_in_5_x1_loop_5:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
B_PE_dummy_in_5_x1_loop_6:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
B_PE_dummy_in_5_x1_loop_7:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    B_t1 fifo_data;
                                    fifo_data = fifo_B_in.read();
                                }
                            }
                        }
                }
        }
}
/* Module Definition */

/* Module Definition */
void B_PE_dummy_in_6_x1(int idx, int idy, hls::stream<float> &fifo_B_in) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    /* Variable Declaration */

B_PE_dummy_in_6_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
B_PE_dummy_in_6_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
            // array
            {}
            if (p1 + 8 * c1 <= 41)
B_PE_dummy_in_6_x1_loop_3:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
B_PE_dummy_in_6_x1_loop_4:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_PE_dummy_in_6_x1_loop_5:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
B_PE_dummy_in_6_x1_loop_6:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
B_PE_dummy_in_6_x1_loop_7:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    B_t1 fifo_data;
                                    fifo_data = fifo_B_in.read();
                                }
                            }
                        }
                }
        }
}
/* Module Definition */

/* Module Definition */
void B_PE_dummy_in_7_x1(int idx, int idy, hls::stream<float> &fifo_B_in) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    /* Variable Declaration */

B_PE_dummy_in_7_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
B_PE_dummy_in_7_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
            // array
            {}
            if (p1 + 8 * c1 <= 41)
B_PE_dummy_in_7_x1_loop_3:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
B_PE_dummy_in_7_x1_loop_4:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
B_PE_dummy_in_7_x1_loop_5:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
B_PE_dummy_in_7_x1_loop_6:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
B_PE_dummy_in_7_x1_loop_7:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    B_t1 fifo_data;
                                    fifo_data = fifo_B_in.read();
                                }
                            }
                        }
                }
        }
}
/* Module Definition */

/* Module Definition */
void C_PE_dummy_in_0_x1(int idx, int idy, hls::stream<C_t8> &fifo_C_in) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    /* Variable Declaration */

C_PE_dummy_in_0_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
C_PE_dummy_in_0_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
            // array
            {}
            if (p1 + 8 * c1 <= 41)
C_PE_dummy_in_0_x1_loop_3:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
C_PE_dummy_in_0_x1_loop_4:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_PE_dummy_in_0_x1_loop_5:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
C_PE_dummy_in_0_x1_loop_6:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
C_PE_dummy_in_0_x1_loop_7:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    C_t8 fifo_data;
                                    fifo_data = fifo_C_in.read();
                                }
                            }
                        }
                }
        }
}
/* Module Definition */

/* Module Definition */
void C_PE_dummy_in_1_x1(int idx, int idy, hls::stream<C_t8> &fifo_C_in) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    /* Variable Declaration */

C_PE_dummy_in_1_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
C_PE_dummy_in_1_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
            // array
            {}
            if (p1 + 8 * c1 <= 41)
C_PE_dummy_in_1_x1_loop_3:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
C_PE_dummy_in_1_x1_loop_4:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_PE_dummy_in_1_x1_loop_5:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
C_PE_dummy_in_1_x1_loop_6:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
C_PE_dummy_in_1_x1_loop_7:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    C_t8 fifo_data;
                                    fifo_data = fifo_C_in.read();
                                }
                            }
                        }
                }
        }
}
/* Module Definition */

/* Module Definition */
void C_PE_dummy_in_2_x1(int idx, int idy, hls::stream<C_t8> &fifo_C_in) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    /* Variable Declaration */

C_PE_dummy_in_2_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
C_PE_dummy_in_2_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
            // array
            {}
            if (p1 + 8 * c1 <= 41)
C_PE_dummy_in_2_x1_loop_3:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
C_PE_dummy_in_2_x1_loop_4:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_PE_dummy_in_2_x1_loop_5:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
C_PE_dummy_in_2_x1_loop_6:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
C_PE_dummy_in_2_x1_loop_7:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    C_t8 fifo_data;
                                    fifo_data = fifo_C_in.read();
                                }
                            }
                        }
                }
        }
}
/* Module Definition */

/* Module Definition */
void C_PE_dummy_in_3_x1(int idx, int idy, hls::stream<C_t8> &fifo_C_in) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    /* Variable Declaration */

C_PE_dummy_in_3_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
C_PE_dummy_in_3_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
            // array
            {}
            if (p1 + 8 * c1 <= 41)
C_PE_dummy_in_3_x1_loop_3:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
C_PE_dummy_in_3_x1_loop_4:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_PE_dummy_in_3_x1_loop_5:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
C_PE_dummy_in_3_x1_loop_6:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
C_PE_dummy_in_3_x1_loop_7:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    C_t8 fifo_data;
                                    fifo_data = fifo_C_in.read();
                                }
                            }
                        }
                }
        }
}
/* Module Definition */

/* Module Definition */
void C_PE_dummy_in_4_x1(int idx, int idy, hls::stream<C_t8> &fifo_C_in) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    /* Variable Declaration */

C_PE_dummy_in_4_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
C_PE_dummy_in_4_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
            // array
            {}
            if (p1 + 8 * c1 <= 41)
C_PE_dummy_in_4_x1_loop_3:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
C_PE_dummy_in_4_x1_loop_4:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_PE_dummy_in_4_x1_loop_5:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
C_PE_dummy_in_4_x1_loop_6:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
C_PE_dummy_in_4_x1_loop_7:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    C_t8 fifo_data;
                                    fifo_data = fifo_C_in.read();
                                }
                            }
                        }
                }
        }
}
/* Module Definition */

/* Module Definition */
void C_PE_dummy_in_5_x1(int idx, int idy, hls::stream<C_t8> &fifo_C_in) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    /* Variable Declaration */

C_PE_dummy_in_5_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
C_PE_dummy_in_5_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
            // array
            {}
            if (p1 + 8 * c1 <= 41)
C_PE_dummy_in_5_x1_loop_3:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
C_PE_dummy_in_5_x1_loop_4:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_PE_dummy_in_5_x1_loop_5:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
C_PE_dummy_in_5_x1_loop_6:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
C_PE_dummy_in_5_x1_loop_7:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    C_t8 fifo_data;
                                    fifo_data = fifo_C_in.read();
                                }
                            }
                        }
                }
        }
}
/* Module Definition */

/* Module Definition */
void C_PE_dummy_in_6_x1(int idx, int idy, hls::stream<C_t8> &fifo_C_in) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    /* Variable Declaration */

C_PE_dummy_in_6_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
C_PE_dummy_in_6_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
            // array
            {}
            if (p1 + 8 * c1 <= 41)
C_PE_dummy_in_6_x1_loop_3:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
C_PE_dummy_in_6_x1_loop_4:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_PE_dummy_in_6_x1_loop_5:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
C_PE_dummy_in_6_x1_loop_6:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
C_PE_dummy_in_6_x1_loop_7:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    C_t8 fifo_data;
                                    fifo_data = fifo_C_in.read();
                                }
                            }
                        }
                }
        }
}
/* Module Definition */

/* Module Definition */
void C_PE_dummy_in_7_x1(int idx, int idy, hls::stream<C_t8> &fifo_C_in) {
#pragma HLS INLINE off
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    /* Variable Declaration */

C_PE_dummy_in_7_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
C_PE_dummy_in_7_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
            // array
            {}
            if (p1 + 8 * c1 <= 41)
C_PE_dummy_in_7_x1_loop_3:                 for (ap_uint<8> c2 = 0; c2 <= 127; c2 += 1) {
                    // array
                    // pe
C_PE_dummy_in_7_x1_loop_4:                     for (ap_uint<2> c5 = 0; c5 <= 1; c5 += 1)
C_PE_dummy_in_7_x1_loop_5:                         for (ap_uint<6> c6 = 0; c6 <= 31; c6 += 1) {
                            // latency
C_PE_dummy_in_7_x1_loop_6:                             for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                                // latency
C_PE_dummy_in_7_x1_loop_7:                                 for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                                    C_t8 fifo_data;
                                    fifo_data = fifo_C_in.read();
                                }
                            }
                        }
                }
        }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L1_out_wrapper_0_2_x1(int idx, int idy, hls::stream<D_t4> &fifo_D_drain_in, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<float> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    D_t4 local_D[16][2];
    /* Variable Declaration */

D_drain_IO_L1_out_wrapper_0_2_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L1_out_wrapper_0_2_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p0 + 8 * c1 <= 41) {
                // array
                // io_L3
                // io_L2
                ap_uint<32> data_split[4];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                /* Variable Declaration */
D_drain_IO_L1_out_wrapper_0_2_x1_loop_3:                 for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                    // latency
D_drain_IO_L1_out_wrapper_0_2_x1_loop_4:                     for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                        // simd
                        {
                            D_t1 in_data;
                            D_t4 out_data;
                            in_data = fifo_D_drain_local_in.read();
                            int split_idx = (c7) % 4;
                            out_data = local_D[c8][c7 / 4];
D_drain_IO_L1_out_wrapper_0_2_x1_loop_5:                             for (ap_uint<3> n = 0; n < 4; n++) {
                                data_split[n] = out_data(31, 0);
                                out_data = out_data >> 32;
                            }
                            union {
                                unsigned int ui;
                                float ut;
                            } u;
                            u.ut = in_data;
                            data_split[split_idx] = ap_uint<32>(u.ui);
                            out_data = (data_split[3], data_split[2], data_split[1], data_split[0]);
                            local_D[c8][c7 / 4] = out_data;
                        }
                    }
                }
D_drain_IO_L1_out_wrapper_0_2_x1_loop_6:                 for (ap_uint<3> c4 = p1; c4 <= 3; c4 += 1) {
                    // io_L1
                    if (c4 == p1) {
D_drain_IO_L1_out_wrapper_0_2_x1_loop_7:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_0_2_x1_loop_8:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = local_D[c5][c6];
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    } else {
D_drain_IO_L1_out_wrapper_0_2_x1_loop_9:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_0_2_x1_loop_10:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                }
            }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L1_out_wrapper_0_1_x1(int idx, int idy, hls::stream<D_t4> &fifo_D_drain_in, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<float> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    D_t4 local_D[16][2];
    /* Variable Declaration */

D_drain_IO_L1_out_wrapper_0_1_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L1_out_wrapper_0_1_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p0 + 8 * c1 <= 41) {
                // array
                // io_L3
                // io_L2
                ap_uint<32> data_split[4];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                /* Variable Declaration */
D_drain_IO_L1_out_wrapper_0_1_x1_loop_3:                 for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                    // latency
D_drain_IO_L1_out_wrapper_0_1_x1_loop_4:                     for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                        // simd
                        {
                            D_t1 in_data;
                            D_t4 out_data;
                            in_data = fifo_D_drain_local_in.read();
                            int split_idx = (c7) % 4;
                            out_data = local_D[c8][c7 / 4];
D_drain_IO_L1_out_wrapper_0_1_x1_loop_5:                             for (ap_uint<3> n = 0; n < 4; n++) {
                                data_split[n] = out_data(31, 0);
                                out_data = out_data >> 32;
                            }
                            union {
                                unsigned int ui;
                                float ut;
                            } u;
                            u.ut = in_data;
                            data_split[split_idx] = ap_uint<32>(u.ui);
                            out_data = (data_split[3], data_split[2], data_split[1], data_split[0]);
                            local_D[c8][c7 / 4] = out_data;
                        }
                    }
                }
D_drain_IO_L1_out_wrapper_0_1_x1_loop_6:                 for (ap_uint<3> c4 = p1; c4 <= 3; c4 += 1) {
                    // io_L1
                    if (c4 == p1) {
D_drain_IO_L1_out_wrapper_0_1_x1_loop_7:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_0_1_x1_loop_8:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = local_D[c5][c6];
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    } else {
D_drain_IO_L1_out_wrapper_0_1_x1_loop_9:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_0_1_x1_loop_10:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                }
            }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L1_out_wrapper_0_0_x1(int idx, int idy, hls::stream<D_t4> &fifo_D_drain_in, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<float> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    D_t4 local_D[16][2];
    /* Variable Declaration */

D_drain_IO_L1_out_wrapper_0_0_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L1_out_wrapper_0_0_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p0 + 8 * c1 <= 41) {
                // array
                // io_L3
                // io_L2
                ap_uint<32> data_split[4];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                /* Variable Declaration */
D_drain_IO_L1_out_wrapper_0_0_x1_loop_3:                 for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                    // latency
D_drain_IO_L1_out_wrapper_0_0_x1_loop_4:                     for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                        // simd
                        {
                            D_t1 in_data;
                            D_t4 out_data;
                            in_data = fifo_D_drain_local_in.read();
                            int split_idx = (c7) % 4;
                            out_data = local_D[c8][c7 / 4];
D_drain_IO_L1_out_wrapper_0_0_x1_loop_5:                             for (ap_uint<3> n = 0; n < 4; n++) {
                                data_split[n] = out_data(31, 0);
                                out_data = out_data >> 32;
                            }
                            union {
                                unsigned int ui;
                                float ut;
                            } u;
                            u.ut = in_data;
                            data_split[split_idx] = ap_uint<32>(u.ui);
                            out_data = (data_split[3], data_split[2], data_split[1], data_split[0]);
                            local_D[c8][c7 / 4] = out_data;
                        }
                    }
                }
D_drain_IO_L1_out_wrapper_0_0_x1_loop_6:                 for (ap_uint<3> c4 = p1; c4 <= 3; c4 += 1) {
                    // io_L1
                    if (c4 == p1) {
D_drain_IO_L1_out_wrapper_0_0_x1_loop_7:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_0_0_x1_loop_8:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = local_D[c5][c6];
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    } else {
D_drain_IO_L1_out_wrapper_0_0_x1_loop_9:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_0_0_x1_loop_10:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                }
            }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L1_out_wrapper_1_2_x1(int idx, int idy, hls::stream<D_t4> &fifo_D_drain_in, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<float> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    D_t4 local_D[16][2];
    /* Variable Declaration */

D_drain_IO_L1_out_wrapper_1_2_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L1_out_wrapper_1_2_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p0 + 8 * c1 <= 41) {
                // array
                // io_L3
                // io_L2
                ap_uint<32> data_split[4];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                /* Variable Declaration */
D_drain_IO_L1_out_wrapper_1_2_x1_loop_3:                 for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                    // latency
D_drain_IO_L1_out_wrapper_1_2_x1_loop_4:                     for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                        // simd
                        {
                            D_t1 in_data;
                            D_t4 out_data;
                            in_data = fifo_D_drain_local_in.read();
                            int split_idx = (c7) % 4;
                            out_data = local_D[c8][c7 / 4];
D_drain_IO_L1_out_wrapper_1_2_x1_loop_5:                             for (ap_uint<3> n = 0; n < 4; n++) {
                                data_split[n] = out_data(31, 0);
                                out_data = out_data >> 32;
                            }
                            union {
                                unsigned int ui;
                                float ut;
                            } u;
                            u.ut = in_data;
                            data_split[split_idx] = ap_uint<32>(u.ui);
                            out_data = (data_split[3], data_split[2], data_split[1], data_split[0]);
                            local_D[c8][c7 / 4] = out_data;
                        }
                    }
                }
D_drain_IO_L1_out_wrapper_1_2_x1_loop_6:                 for (ap_uint<3> c4 = p1; c4 <= 3; c4 += 1) {
                    // io_L1
                    if (c4 == p1) {
D_drain_IO_L1_out_wrapper_1_2_x1_loop_7:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_1_2_x1_loop_8:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = local_D[c5][c6];
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    } else {
D_drain_IO_L1_out_wrapper_1_2_x1_loop_9:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_1_2_x1_loop_10:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                }
            }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L1_out_wrapper_1_1_x1(int idx, int idy, hls::stream<D_t4> &fifo_D_drain_in, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<float> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    D_t4 local_D[16][2];
    /* Variable Declaration */

D_drain_IO_L1_out_wrapper_1_1_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L1_out_wrapper_1_1_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p0 + 8 * c1 <= 41) {
                // array
                // io_L3
                // io_L2
                ap_uint<32> data_split[4];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                /* Variable Declaration */
D_drain_IO_L1_out_wrapper_1_1_x1_loop_3:                 for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                    // latency
D_drain_IO_L1_out_wrapper_1_1_x1_loop_4:                     for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                        // simd
                        {
                            D_t1 in_data;
                            D_t4 out_data;
                            in_data = fifo_D_drain_local_in.read();
                            int split_idx = (c7) % 4;
                            out_data = local_D[c8][c7 / 4];
D_drain_IO_L1_out_wrapper_1_1_x1_loop_5:                             for (ap_uint<3> n = 0; n < 4; n++) {
                                data_split[n] = out_data(31, 0);
                                out_data = out_data >> 32;
                            }
                            union {
                                unsigned int ui;
                                float ut;
                            } u;
                            u.ut = in_data;
                            data_split[split_idx] = ap_uint<32>(u.ui);
                            out_data = (data_split[3], data_split[2], data_split[1], data_split[0]);
                            local_D[c8][c7 / 4] = out_data;
                        }
                    }
                }
D_drain_IO_L1_out_wrapper_1_1_x1_loop_6:                 for (ap_uint<3> c4 = p1; c4 <= 3; c4 += 1) {
                    // io_L1
                    if (c4 == p1) {
D_drain_IO_L1_out_wrapper_1_1_x1_loop_7:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_1_1_x1_loop_8:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = local_D[c5][c6];
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    } else {
D_drain_IO_L1_out_wrapper_1_1_x1_loop_9:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_1_1_x1_loop_10:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                }
            }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L1_out_wrapper_1_0_x1(int idx, int idy, hls::stream<D_t4> &fifo_D_drain_in, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<float> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    D_t4 local_D[16][2];
    /* Variable Declaration */

D_drain_IO_L1_out_wrapper_1_0_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L1_out_wrapper_1_0_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p0 + 8 * c1 <= 41) {
                // array
                // io_L3
                // io_L2
                ap_uint<32> data_split[4];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                /* Variable Declaration */
D_drain_IO_L1_out_wrapper_1_0_x1_loop_3:                 for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                    // latency
D_drain_IO_L1_out_wrapper_1_0_x1_loop_4:                     for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                        // simd
                        {
                            D_t1 in_data;
                            D_t4 out_data;
                            in_data = fifo_D_drain_local_in.read();
                            int split_idx = (c7) % 4;
                            out_data = local_D[c8][c7 / 4];
D_drain_IO_L1_out_wrapper_1_0_x1_loop_5:                             for (ap_uint<3> n = 0; n < 4; n++) {
                                data_split[n] = out_data(31, 0);
                                out_data = out_data >> 32;
                            }
                            union {
                                unsigned int ui;
                                float ut;
                            } u;
                            u.ut = in_data;
                            data_split[split_idx] = ap_uint<32>(u.ui);
                            out_data = (data_split[3], data_split[2], data_split[1], data_split[0]);
                            local_D[c8][c7 / 4] = out_data;
                        }
                    }
                }
D_drain_IO_L1_out_wrapper_1_0_x1_loop_6:                 for (ap_uint<3> c4 = p1; c4 <= 3; c4 += 1) {
                    // io_L1
                    if (c4 == p1) {
D_drain_IO_L1_out_wrapper_1_0_x1_loop_7:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_1_0_x1_loop_8:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = local_D[c5][c6];
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    } else {
D_drain_IO_L1_out_wrapper_1_0_x1_loop_9:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_1_0_x1_loop_10:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                }
            }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L1_out_wrapper_2_2_x1(int idx, int idy, hls::stream<D_t4> &fifo_D_drain_in, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<float> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    D_t4 local_D[16][2];
    /* Variable Declaration */

D_drain_IO_L1_out_wrapper_2_2_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L1_out_wrapper_2_2_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p0 + 8 * c1 <= 41) {
                // array
                // io_L3
                // io_L2
                ap_uint<32> data_split[4];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                /* Variable Declaration */
D_drain_IO_L1_out_wrapper_2_2_x1_loop_3:                 for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                    // latency
D_drain_IO_L1_out_wrapper_2_2_x1_loop_4:                     for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                        // simd
                        {
                            D_t1 in_data;
                            D_t4 out_data;
                            in_data = fifo_D_drain_local_in.read();
                            int split_idx = (c7) % 4;
                            out_data = local_D[c8][c7 / 4];
D_drain_IO_L1_out_wrapper_2_2_x1_loop_5:                             for (ap_uint<3> n = 0; n < 4; n++) {
                                data_split[n] = out_data(31, 0);
                                out_data = out_data >> 32;
                            }
                            union {
                                unsigned int ui;
                                float ut;
                            } u;
                            u.ut = in_data;
                            data_split[split_idx] = ap_uint<32>(u.ui);
                            out_data = (data_split[3], data_split[2], data_split[1], data_split[0]);
                            local_D[c8][c7 / 4] = out_data;
                        }
                    }
                }
D_drain_IO_L1_out_wrapper_2_2_x1_loop_6:                 for (ap_uint<3> c4 = p1; c4 <= 3; c4 += 1) {
                    // io_L1
                    if (c4 == p1) {
D_drain_IO_L1_out_wrapper_2_2_x1_loop_7:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_2_2_x1_loop_8:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = local_D[c5][c6];
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    } else {
D_drain_IO_L1_out_wrapper_2_2_x1_loop_9:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_2_2_x1_loop_10:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                }
            }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L1_out_wrapper_2_1_x1(int idx, int idy, hls::stream<D_t4> &fifo_D_drain_in, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<float> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    D_t4 local_D[16][2];
    /* Variable Declaration */

D_drain_IO_L1_out_wrapper_2_1_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L1_out_wrapper_2_1_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p0 + 8 * c1 <= 41) {
                // array
                // io_L3
                // io_L2
                ap_uint<32> data_split[4];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                /* Variable Declaration */
D_drain_IO_L1_out_wrapper_2_1_x1_loop_3:                 for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                    // latency
D_drain_IO_L1_out_wrapper_2_1_x1_loop_4:                     for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                        // simd
                        {
                            D_t1 in_data;
                            D_t4 out_data;
                            in_data = fifo_D_drain_local_in.read();
                            int split_idx = (c7) % 4;
                            out_data = local_D[c8][c7 / 4];
D_drain_IO_L1_out_wrapper_2_1_x1_loop_5:                             for (ap_uint<3> n = 0; n < 4; n++) {
                                data_split[n] = out_data(31, 0);
                                out_data = out_data >> 32;
                            }
                            union {
                                unsigned int ui;
                                float ut;
                            } u;
                            u.ut = in_data;
                            data_split[split_idx] = ap_uint<32>(u.ui);
                            out_data = (data_split[3], data_split[2], data_split[1], data_split[0]);
                            local_D[c8][c7 / 4] = out_data;
                        }
                    }
                }
D_drain_IO_L1_out_wrapper_2_1_x1_loop_6:                 for (ap_uint<3> c4 = p1; c4 <= 3; c4 += 1) {
                    // io_L1
                    if (c4 == p1) {
D_drain_IO_L1_out_wrapper_2_1_x1_loop_7:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_2_1_x1_loop_8:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = local_D[c5][c6];
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    } else {
D_drain_IO_L1_out_wrapper_2_1_x1_loop_9:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_2_1_x1_loop_10:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                }
            }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L1_out_wrapper_2_0_x1(int idx, int idy, hls::stream<D_t4> &fifo_D_drain_in, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<float> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    D_t4 local_D[16][2];
    /* Variable Declaration */

D_drain_IO_L1_out_wrapper_2_0_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L1_out_wrapper_2_0_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p0 + 8 * c1 <= 41) {
                // array
                // io_L3
                // io_L2
                ap_uint<32> data_split[4];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                /* Variable Declaration */
D_drain_IO_L1_out_wrapper_2_0_x1_loop_3:                 for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                    // latency
D_drain_IO_L1_out_wrapper_2_0_x1_loop_4:                     for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                        // simd
                        {
                            D_t1 in_data;
                            D_t4 out_data;
                            in_data = fifo_D_drain_local_in.read();
                            int split_idx = (c7) % 4;
                            out_data = local_D[c8][c7 / 4];
D_drain_IO_L1_out_wrapper_2_0_x1_loop_5:                             for (ap_uint<3> n = 0; n < 4; n++) {
                                data_split[n] = out_data(31, 0);
                                out_data = out_data >> 32;
                            }
                            union {
                                unsigned int ui;
                                float ut;
                            } u;
                            u.ut = in_data;
                            data_split[split_idx] = ap_uint<32>(u.ui);
                            out_data = (data_split[3], data_split[2], data_split[1], data_split[0]);
                            local_D[c8][c7 / 4] = out_data;
                        }
                    }
                }
D_drain_IO_L1_out_wrapper_2_0_x1_loop_6:                 for (ap_uint<3> c4 = p1; c4 <= 3; c4 += 1) {
                    // io_L1
                    if (c4 == p1) {
D_drain_IO_L1_out_wrapper_2_0_x1_loop_7:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_2_0_x1_loop_8:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = local_D[c5][c6];
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    } else {
D_drain_IO_L1_out_wrapper_2_0_x1_loop_9:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_2_0_x1_loop_10:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                }
            }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L1_out_wrapper_3_2_x1(int idx, int idy, hls::stream<D_t4> &fifo_D_drain_in, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<float> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    D_t4 local_D[16][2];
    /* Variable Declaration */

D_drain_IO_L1_out_wrapper_3_2_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L1_out_wrapper_3_2_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p0 + 8 * c1 <= 41) {
                // array
                // io_L3
                // io_L2
                ap_uint<32> data_split[4];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                /* Variable Declaration */
D_drain_IO_L1_out_wrapper_3_2_x1_loop_3:                 for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                    // latency
D_drain_IO_L1_out_wrapper_3_2_x1_loop_4:                     for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                        // simd
                        {
                            D_t1 in_data;
                            D_t4 out_data;
                            in_data = fifo_D_drain_local_in.read();
                            int split_idx = (c7) % 4;
                            out_data = local_D[c8][c7 / 4];
D_drain_IO_L1_out_wrapper_3_2_x1_loop_5:                             for (ap_uint<3> n = 0; n < 4; n++) {
                                data_split[n] = out_data(31, 0);
                                out_data = out_data >> 32;
                            }
                            union {
                                unsigned int ui;
                                float ut;
                            } u;
                            u.ut = in_data;
                            data_split[split_idx] = ap_uint<32>(u.ui);
                            out_data = (data_split[3], data_split[2], data_split[1], data_split[0]);
                            local_D[c8][c7 / 4] = out_data;
                        }
                    }
                }
D_drain_IO_L1_out_wrapper_3_2_x1_loop_6:                 for (ap_uint<3> c4 = p1; c4 <= 3; c4 += 1) {
                    // io_L1
                    if (c4 == p1) {
D_drain_IO_L1_out_wrapper_3_2_x1_loop_7:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_3_2_x1_loop_8:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = local_D[c5][c6];
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    } else {
D_drain_IO_L1_out_wrapper_3_2_x1_loop_9:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_3_2_x1_loop_10:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                }
            }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L1_out_wrapper_3_1_x1(int idx, int idy, hls::stream<D_t4> &fifo_D_drain_in, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<float> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    D_t4 local_D[16][2];
    /* Variable Declaration */

D_drain_IO_L1_out_wrapper_3_1_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L1_out_wrapper_3_1_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p0 + 8 * c1 <= 41) {
                // array
                // io_L3
                // io_L2
                ap_uint<32> data_split[4];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                /* Variable Declaration */
D_drain_IO_L1_out_wrapper_3_1_x1_loop_3:                 for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                    // latency
D_drain_IO_L1_out_wrapper_3_1_x1_loop_4:                     for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                        // simd
                        {
                            D_t1 in_data;
                            D_t4 out_data;
                            in_data = fifo_D_drain_local_in.read();
                            int split_idx = (c7) % 4;
                            out_data = local_D[c8][c7 / 4];
D_drain_IO_L1_out_wrapper_3_1_x1_loop_5:                             for (ap_uint<3> n = 0; n < 4; n++) {
                                data_split[n] = out_data(31, 0);
                                out_data = out_data >> 32;
                            }
                            union {
                                unsigned int ui;
                                float ut;
                            } u;
                            u.ut = in_data;
                            data_split[split_idx] = ap_uint<32>(u.ui);
                            out_data = (data_split[3], data_split[2], data_split[1], data_split[0]);
                            local_D[c8][c7 / 4] = out_data;
                        }
                    }
                }
D_drain_IO_L1_out_wrapper_3_1_x1_loop_6:                 for (ap_uint<3> c4 = p1; c4 <= 3; c4 += 1) {
                    // io_L1
                    if (c4 == p1) {
D_drain_IO_L1_out_wrapper_3_1_x1_loop_7:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_3_1_x1_loop_8:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = local_D[c5][c6];
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    } else {
D_drain_IO_L1_out_wrapper_3_1_x1_loop_9:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_3_1_x1_loop_10:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                }
            }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L1_out_wrapper_3_0_x1(int idx, int idy, hls::stream<D_t4> &fifo_D_drain_in, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<float> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    D_t4 local_D[16][2];
    /* Variable Declaration */

D_drain_IO_L1_out_wrapper_3_0_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L1_out_wrapper_3_0_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p0 + 8 * c1 <= 41) {
                // array
                // io_L3
                // io_L2
                ap_uint<32> data_split[4];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                /* Variable Declaration */
D_drain_IO_L1_out_wrapper_3_0_x1_loop_3:                 for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                    // latency
D_drain_IO_L1_out_wrapper_3_0_x1_loop_4:                     for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                        // simd
                        {
                            D_t1 in_data;
                            D_t4 out_data;
                            in_data = fifo_D_drain_local_in.read();
                            int split_idx = (c7) % 4;
                            out_data = local_D[c8][c7 / 4];
D_drain_IO_L1_out_wrapper_3_0_x1_loop_5:                             for (ap_uint<3> n = 0; n < 4; n++) {
                                data_split[n] = out_data(31, 0);
                                out_data = out_data >> 32;
                            }
                            union {
                                unsigned int ui;
                                float ut;
                            } u;
                            u.ut = in_data;
                            data_split[split_idx] = ap_uint<32>(u.ui);
                            out_data = (data_split[3], data_split[2], data_split[1], data_split[0]);
                            local_D[c8][c7 / 4] = out_data;
                        }
                    }
                }
D_drain_IO_L1_out_wrapper_3_0_x1_loop_6:                 for (ap_uint<3> c4 = p1; c4 <= 3; c4 += 1) {
                    // io_L1
                    if (c4 == p1) {
D_drain_IO_L1_out_wrapper_3_0_x1_loop_7:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_3_0_x1_loop_8:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = local_D[c5][c6];
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    } else {
D_drain_IO_L1_out_wrapper_3_0_x1_loop_9:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_3_0_x1_loop_10:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                }
            }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L1_out_wrapper_4_2_x1(int idx, int idy, hls::stream<D_t4> &fifo_D_drain_in, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<float> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    D_t4 local_D[16][2];
    /* Variable Declaration */

D_drain_IO_L1_out_wrapper_4_2_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L1_out_wrapper_4_2_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p0 + 8 * c1 <= 41) {
                // array
                // io_L3
                // io_L2
                ap_uint<32> data_split[4];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                /* Variable Declaration */
D_drain_IO_L1_out_wrapper_4_2_x1_loop_3:                 for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                    // latency
D_drain_IO_L1_out_wrapper_4_2_x1_loop_4:                     for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                        // simd
                        {
                            D_t1 in_data;
                            D_t4 out_data;
                            in_data = fifo_D_drain_local_in.read();
                            int split_idx = (c7) % 4;
                            out_data = local_D[c8][c7 / 4];
D_drain_IO_L1_out_wrapper_4_2_x1_loop_5:                             for (ap_uint<3> n = 0; n < 4; n++) {
                                data_split[n] = out_data(31, 0);
                                out_data = out_data >> 32;
                            }
                            union {
                                unsigned int ui;
                                float ut;
                            } u;
                            u.ut = in_data;
                            data_split[split_idx] = ap_uint<32>(u.ui);
                            out_data = (data_split[3], data_split[2], data_split[1], data_split[0]);
                            local_D[c8][c7 / 4] = out_data;
                        }
                    }
                }
D_drain_IO_L1_out_wrapper_4_2_x1_loop_6:                 for (ap_uint<3> c4 = p1; c4 <= 3; c4 += 1) {
                    // io_L1
                    if (c4 == p1) {
D_drain_IO_L1_out_wrapper_4_2_x1_loop_7:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_4_2_x1_loop_8:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = local_D[c5][c6];
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    } else {
D_drain_IO_L1_out_wrapper_4_2_x1_loop_9:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_4_2_x1_loop_10:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                }
            }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L1_out_wrapper_4_1_x1(int idx, int idy, hls::stream<D_t4> &fifo_D_drain_in, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<float> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    D_t4 local_D[16][2];
    /* Variable Declaration */

D_drain_IO_L1_out_wrapper_4_1_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L1_out_wrapper_4_1_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p0 + 8 * c1 <= 41) {
                // array
                // io_L3
                // io_L2
                ap_uint<32> data_split[4];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                /* Variable Declaration */
D_drain_IO_L1_out_wrapper_4_1_x1_loop_3:                 for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                    // latency
D_drain_IO_L1_out_wrapper_4_1_x1_loop_4:                     for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                        // simd
                        {
                            D_t1 in_data;
                            D_t4 out_data;
                            in_data = fifo_D_drain_local_in.read();
                            int split_idx = (c7) % 4;
                            out_data = local_D[c8][c7 / 4];
D_drain_IO_L1_out_wrapper_4_1_x1_loop_5:                             for (ap_uint<3> n = 0; n < 4; n++) {
                                data_split[n] = out_data(31, 0);
                                out_data = out_data >> 32;
                            }
                            union {
                                unsigned int ui;
                                float ut;
                            } u;
                            u.ut = in_data;
                            data_split[split_idx] = ap_uint<32>(u.ui);
                            out_data = (data_split[3], data_split[2], data_split[1], data_split[0]);
                            local_D[c8][c7 / 4] = out_data;
                        }
                    }
                }
D_drain_IO_L1_out_wrapper_4_1_x1_loop_6:                 for (ap_uint<3> c4 = p1; c4 <= 3; c4 += 1) {
                    // io_L1
                    if (c4 == p1) {
D_drain_IO_L1_out_wrapper_4_1_x1_loop_7:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_4_1_x1_loop_8:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = local_D[c5][c6];
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    } else {
D_drain_IO_L1_out_wrapper_4_1_x1_loop_9:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_4_1_x1_loop_10:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                }
            }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L1_out_wrapper_4_0_x1(int idx, int idy, hls::stream<D_t4> &fifo_D_drain_in, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<float> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    D_t4 local_D[16][2];
    /* Variable Declaration */

D_drain_IO_L1_out_wrapper_4_0_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L1_out_wrapper_4_0_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p0 + 8 * c1 <= 41) {
                // array
                // io_L3
                // io_L2
                ap_uint<32> data_split[4];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                /* Variable Declaration */
D_drain_IO_L1_out_wrapper_4_0_x1_loop_3:                 for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                    // latency
D_drain_IO_L1_out_wrapper_4_0_x1_loop_4:                     for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                        // simd
                        {
                            D_t1 in_data;
                            D_t4 out_data;
                            in_data = fifo_D_drain_local_in.read();
                            int split_idx = (c7) % 4;
                            out_data = local_D[c8][c7 / 4];
D_drain_IO_L1_out_wrapper_4_0_x1_loop_5:                             for (ap_uint<3> n = 0; n < 4; n++) {
                                data_split[n] = out_data(31, 0);
                                out_data = out_data >> 32;
                            }
                            union {
                                unsigned int ui;
                                float ut;
                            } u;
                            u.ut = in_data;
                            data_split[split_idx] = ap_uint<32>(u.ui);
                            out_data = (data_split[3], data_split[2], data_split[1], data_split[0]);
                            local_D[c8][c7 / 4] = out_data;
                        }
                    }
                }
D_drain_IO_L1_out_wrapper_4_0_x1_loop_6:                 for (ap_uint<3> c4 = p1; c4 <= 3; c4 += 1) {
                    // io_L1
                    if (c4 == p1) {
D_drain_IO_L1_out_wrapper_4_0_x1_loop_7:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_4_0_x1_loop_8:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = local_D[c5][c6];
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    } else {
D_drain_IO_L1_out_wrapper_4_0_x1_loop_9:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_4_0_x1_loop_10:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                }
            }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L1_out_wrapper_5_2_x1(int idx, int idy, hls::stream<D_t4> &fifo_D_drain_in, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<float> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    D_t4 local_D[16][2];
    /* Variable Declaration */

D_drain_IO_L1_out_wrapper_5_2_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L1_out_wrapper_5_2_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p0 + 8 * c1 <= 41) {
                // array
                // io_L3
                // io_L2
                ap_uint<32> data_split[4];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                /* Variable Declaration */
D_drain_IO_L1_out_wrapper_5_2_x1_loop_3:                 for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                    // latency
D_drain_IO_L1_out_wrapper_5_2_x1_loop_4:                     for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                        // simd
                        {
                            D_t1 in_data;
                            D_t4 out_data;
                            in_data = fifo_D_drain_local_in.read();
                            int split_idx = (c7) % 4;
                            out_data = local_D[c8][c7 / 4];
D_drain_IO_L1_out_wrapper_5_2_x1_loop_5:                             for (ap_uint<3> n = 0; n < 4; n++) {
                                data_split[n] = out_data(31, 0);
                                out_data = out_data >> 32;
                            }
                            union {
                                unsigned int ui;
                                float ut;
                            } u;
                            u.ut = in_data;
                            data_split[split_idx] = ap_uint<32>(u.ui);
                            out_data = (data_split[3], data_split[2], data_split[1], data_split[0]);
                            local_D[c8][c7 / 4] = out_data;
                        }
                    }
                }
D_drain_IO_L1_out_wrapper_5_2_x1_loop_6:                 for (ap_uint<3> c4 = p1; c4 <= 3; c4 += 1) {
                    // io_L1
                    if (c4 == p1) {
D_drain_IO_L1_out_wrapper_5_2_x1_loop_7:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_5_2_x1_loop_8:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = local_D[c5][c6];
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    } else {
D_drain_IO_L1_out_wrapper_5_2_x1_loop_9:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_5_2_x1_loop_10:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                }
            }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L1_out_wrapper_5_1_x1(int idx, int idy, hls::stream<D_t4> &fifo_D_drain_in, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<float> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    D_t4 local_D[16][2];
    /* Variable Declaration */

D_drain_IO_L1_out_wrapper_5_1_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L1_out_wrapper_5_1_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p0 + 8 * c1 <= 41) {
                // array
                // io_L3
                // io_L2
                ap_uint<32> data_split[4];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                /* Variable Declaration */
D_drain_IO_L1_out_wrapper_5_1_x1_loop_3:                 for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                    // latency
D_drain_IO_L1_out_wrapper_5_1_x1_loop_4:                     for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                        // simd
                        {
                            D_t1 in_data;
                            D_t4 out_data;
                            in_data = fifo_D_drain_local_in.read();
                            int split_idx = (c7) % 4;
                            out_data = local_D[c8][c7 / 4];
D_drain_IO_L1_out_wrapper_5_1_x1_loop_5:                             for (ap_uint<3> n = 0; n < 4; n++) {
                                data_split[n] = out_data(31, 0);
                                out_data = out_data >> 32;
                            }
                            union {
                                unsigned int ui;
                                float ut;
                            } u;
                            u.ut = in_data;
                            data_split[split_idx] = ap_uint<32>(u.ui);
                            out_data = (data_split[3], data_split[2], data_split[1], data_split[0]);
                            local_D[c8][c7 / 4] = out_data;
                        }
                    }
                }
D_drain_IO_L1_out_wrapper_5_1_x1_loop_6:                 for (ap_uint<3> c4 = p1; c4 <= 3; c4 += 1) {
                    // io_L1
                    if (c4 == p1) {
D_drain_IO_L1_out_wrapper_5_1_x1_loop_7:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_5_1_x1_loop_8:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = local_D[c5][c6];
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    } else {
D_drain_IO_L1_out_wrapper_5_1_x1_loop_9:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_5_1_x1_loop_10:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                }
            }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L1_out_wrapper_5_0_x1(int idx, int idy, hls::stream<D_t4> &fifo_D_drain_in, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<float> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    D_t4 local_D[16][2];
    /* Variable Declaration */

D_drain_IO_L1_out_wrapper_5_0_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L1_out_wrapper_5_0_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p0 + 8 * c1 <= 41) {
                // array
                // io_L3
                // io_L2
                ap_uint<32> data_split[4];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                /* Variable Declaration */
D_drain_IO_L1_out_wrapper_5_0_x1_loop_3:                 for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                    // latency
D_drain_IO_L1_out_wrapper_5_0_x1_loop_4:                     for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                        // simd
                        {
                            D_t1 in_data;
                            D_t4 out_data;
                            in_data = fifo_D_drain_local_in.read();
                            int split_idx = (c7) % 4;
                            out_data = local_D[c8][c7 / 4];
D_drain_IO_L1_out_wrapper_5_0_x1_loop_5:                             for (ap_uint<3> n = 0; n < 4; n++) {
                                data_split[n] = out_data(31, 0);
                                out_data = out_data >> 32;
                            }
                            union {
                                unsigned int ui;
                                float ut;
                            } u;
                            u.ut = in_data;
                            data_split[split_idx] = ap_uint<32>(u.ui);
                            out_data = (data_split[3], data_split[2], data_split[1], data_split[0]);
                            local_D[c8][c7 / 4] = out_data;
                        }
                    }
                }
D_drain_IO_L1_out_wrapper_5_0_x1_loop_6:                 for (ap_uint<3> c4 = p1; c4 <= 3; c4 += 1) {
                    // io_L1
                    if (c4 == p1) {
D_drain_IO_L1_out_wrapper_5_0_x1_loop_7:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_5_0_x1_loop_8:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = local_D[c5][c6];
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    } else {
D_drain_IO_L1_out_wrapper_5_0_x1_loop_9:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_5_0_x1_loop_10:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                }
            }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L1_out_wrapper_6_2_x1(int idx, int idy, hls::stream<D_t4> &fifo_D_drain_in, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<float> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    D_t4 local_D[16][2];
    /* Variable Declaration */

D_drain_IO_L1_out_wrapper_6_2_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L1_out_wrapper_6_2_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p0 + 8 * c1 <= 41) {
                // array
                // io_L3
                // io_L2
                ap_uint<32> data_split[4];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                /* Variable Declaration */
D_drain_IO_L1_out_wrapper_6_2_x1_loop_3:                 for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                    // latency
D_drain_IO_L1_out_wrapper_6_2_x1_loop_4:                     for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                        // simd
                        {
                            D_t1 in_data;
                            D_t4 out_data;
                            in_data = fifo_D_drain_local_in.read();
                            int split_idx = (c7) % 4;
                            out_data = local_D[c8][c7 / 4];
D_drain_IO_L1_out_wrapper_6_2_x1_loop_5:                             for (ap_uint<3> n = 0; n < 4; n++) {
                                data_split[n] = out_data(31, 0);
                                out_data = out_data >> 32;
                            }
                            union {
                                unsigned int ui;
                                float ut;
                            } u;
                            u.ut = in_data;
                            data_split[split_idx] = ap_uint<32>(u.ui);
                            out_data = (data_split[3], data_split[2], data_split[1], data_split[0]);
                            local_D[c8][c7 / 4] = out_data;
                        }
                    }
                }
D_drain_IO_L1_out_wrapper_6_2_x1_loop_6:                 for (ap_uint<3> c4 = p1; c4 <= 3; c4 += 1) {
                    // io_L1
                    if (c4 == p1) {
D_drain_IO_L1_out_wrapper_6_2_x1_loop_7:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_6_2_x1_loop_8:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = local_D[c5][c6];
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    } else {
D_drain_IO_L1_out_wrapper_6_2_x1_loop_9:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_6_2_x1_loop_10:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                }
            }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L1_out_wrapper_6_1_x1(int idx, int idy, hls::stream<D_t4> &fifo_D_drain_in, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<float> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    D_t4 local_D[16][2];
    /* Variable Declaration */

D_drain_IO_L1_out_wrapper_6_1_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L1_out_wrapper_6_1_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p0 + 8 * c1 <= 41) {
                // array
                // io_L3
                // io_L2
                ap_uint<32> data_split[4];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                /* Variable Declaration */
D_drain_IO_L1_out_wrapper_6_1_x1_loop_3:                 for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                    // latency
D_drain_IO_L1_out_wrapper_6_1_x1_loop_4:                     for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                        // simd
                        {
                            D_t1 in_data;
                            D_t4 out_data;
                            in_data = fifo_D_drain_local_in.read();
                            int split_idx = (c7) % 4;
                            out_data = local_D[c8][c7 / 4];
D_drain_IO_L1_out_wrapper_6_1_x1_loop_5:                             for (ap_uint<3> n = 0; n < 4; n++) {
                                data_split[n] = out_data(31, 0);
                                out_data = out_data >> 32;
                            }
                            union {
                                unsigned int ui;
                                float ut;
                            } u;
                            u.ut = in_data;
                            data_split[split_idx] = ap_uint<32>(u.ui);
                            out_data = (data_split[3], data_split[2], data_split[1], data_split[0]);
                            local_D[c8][c7 / 4] = out_data;
                        }
                    }
                }
D_drain_IO_L1_out_wrapper_6_1_x1_loop_6:                 for (ap_uint<3> c4 = p1; c4 <= 3; c4 += 1) {
                    // io_L1
                    if (c4 == p1) {
D_drain_IO_L1_out_wrapper_6_1_x1_loop_7:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_6_1_x1_loop_8:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = local_D[c5][c6];
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    } else {
D_drain_IO_L1_out_wrapper_6_1_x1_loop_9:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_6_1_x1_loop_10:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                }
            }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L1_out_wrapper_6_0_x1(int idx, int idy, hls::stream<D_t4> &fifo_D_drain_in, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<float> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    D_t4 local_D[16][2];
    /* Variable Declaration */

D_drain_IO_L1_out_wrapper_6_0_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L1_out_wrapper_6_0_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p0 + 8 * c1 <= 41) {
                // array
                // io_L3
                // io_L2
                ap_uint<32> data_split[4];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                /* Variable Declaration */
D_drain_IO_L1_out_wrapper_6_0_x1_loop_3:                 for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                    // latency
D_drain_IO_L1_out_wrapper_6_0_x1_loop_4:                     for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                        // simd
                        {
                            D_t1 in_data;
                            D_t4 out_data;
                            in_data = fifo_D_drain_local_in.read();
                            int split_idx = (c7) % 4;
                            out_data = local_D[c8][c7 / 4];
D_drain_IO_L1_out_wrapper_6_0_x1_loop_5:                             for (ap_uint<3> n = 0; n < 4; n++) {
                                data_split[n] = out_data(31, 0);
                                out_data = out_data >> 32;
                            }
                            union {
                                unsigned int ui;
                                float ut;
                            } u;
                            u.ut = in_data;
                            data_split[split_idx] = ap_uint<32>(u.ui);
                            out_data = (data_split[3], data_split[2], data_split[1], data_split[0]);
                            local_D[c8][c7 / 4] = out_data;
                        }
                    }
                }
D_drain_IO_L1_out_wrapper_6_0_x1_loop_6:                 for (ap_uint<3> c4 = p1; c4 <= 3; c4 += 1) {
                    // io_L1
                    if (c4 == p1) {
D_drain_IO_L1_out_wrapper_6_0_x1_loop_7:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_6_0_x1_loop_8:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = local_D[c5][c6];
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    } else {
D_drain_IO_L1_out_wrapper_6_0_x1_loop_9:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_6_0_x1_loop_10:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                }
            }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L1_out_wrapper_7_2_x1(int idx, int idy, hls::stream<D_t4> &fifo_D_drain_in, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<float> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    D_t4 local_D[16][2];
    /* Variable Declaration */

D_drain_IO_L1_out_wrapper_7_2_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L1_out_wrapper_7_2_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p0 + 8 * c1 <= 41) {
                // array
                // io_L3
                // io_L2
                ap_uint<32> data_split[4];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                /* Variable Declaration */
D_drain_IO_L1_out_wrapper_7_2_x1_loop_3:                 for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                    // latency
D_drain_IO_L1_out_wrapper_7_2_x1_loop_4:                     for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                        // simd
                        {
                            D_t1 in_data;
                            D_t4 out_data;
                            in_data = fifo_D_drain_local_in.read();
                            int split_idx = (c7) % 4;
                            out_data = local_D[c8][c7 / 4];
D_drain_IO_L1_out_wrapper_7_2_x1_loop_5:                             for (ap_uint<3> n = 0; n < 4; n++) {
                                data_split[n] = out_data(31, 0);
                                out_data = out_data >> 32;
                            }
                            union {
                                unsigned int ui;
                                float ut;
                            } u;
                            u.ut = in_data;
                            data_split[split_idx] = ap_uint<32>(u.ui);
                            out_data = (data_split[3], data_split[2], data_split[1], data_split[0]);
                            local_D[c8][c7 / 4] = out_data;
                        }
                    }
                }
D_drain_IO_L1_out_wrapper_7_2_x1_loop_6:                 for (ap_uint<3> c4 = p1; c4 <= 3; c4 += 1) {
                    // io_L1
                    if (c4 == p1) {
D_drain_IO_L1_out_wrapper_7_2_x1_loop_7:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_7_2_x1_loop_8:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = local_D[c5][c6];
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    } else {
D_drain_IO_L1_out_wrapper_7_2_x1_loop_9:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_7_2_x1_loop_10:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                }
            }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L1_out_wrapper_7_1_x1(int idx, int idy, hls::stream<D_t4> &fifo_D_drain_in, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<float> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    D_t4 local_D[16][2];
    /* Variable Declaration */

D_drain_IO_L1_out_wrapper_7_1_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L1_out_wrapper_7_1_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p0 + 8 * c1 <= 41) {
                // array
                // io_L3
                // io_L2
                ap_uint<32> data_split[4];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                /* Variable Declaration */
D_drain_IO_L1_out_wrapper_7_1_x1_loop_3:                 for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                    // latency
D_drain_IO_L1_out_wrapper_7_1_x1_loop_4:                     for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                        // simd
                        {
                            D_t1 in_data;
                            D_t4 out_data;
                            in_data = fifo_D_drain_local_in.read();
                            int split_idx = (c7) % 4;
                            out_data = local_D[c8][c7 / 4];
D_drain_IO_L1_out_wrapper_7_1_x1_loop_5:                             for (ap_uint<3> n = 0; n < 4; n++) {
                                data_split[n] = out_data(31, 0);
                                out_data = out_data >> 32;
                            }
                            union {
                                unsigned int ui;
                                float ut;
                            } u;
                            u.ut = in_data;
                            data_split[split_idx] = ap_uint<32>(u.ui);
                            out_data = (data_split[3], data_split[2], data_split[1], data_split[0]);
                            local_D[c8][c7 / 4] = out_data;
                        }
                    }
                }
D_drain_IO_L1_out_wrapper_7_1_x1_loop_6:                 for (ap_uint<3> c4 = p1; c4 <= 3; c4 += 1) {
                    // io_L1
                    if (c4 == p1) {
D_drain_IO_L1_out_wrapper_7_1_x1_loop_7:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_7_1_x1_loop_8:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = local_D[c5][c6];
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    } else {
D_drain_IO_L1_out_wrapper_7_1_x1_loop_9:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_7_1_x1_loop_10:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                }
            }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L1_out_wrapper_7_0_x1(int idx, int idy, hls::stream<D_t4> &fifo_D_drain_in, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<float> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    D_t4 local_D[16][2];
    /* Variable Declaration */

D_drain_IO_L1_out_wrapper_7_0_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L1_out_wrapper_7_0_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p0 + 8 * c1 <= 41) {
                // array
                // io_L3
                // io_L2
                ap_uint<32> data_split[4];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                /* Variable Declaration */
D_drain_IO_L1_out_wrapper_7_0_x1_loop_3:                 for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                    // latency
D_drain_IO_L1_out_wrapper_7_0_x1_loop_4:                     for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                        // simd
                        {
                            D_t1 in_data;
                            D_t4 out_data;
                            in_data = fifo_D_drain_local_in.read();
                            int split_idx = (c7) % 4;
                            out_data = local_D[c8][c7 / 4];
D_drain_IO_L1_out_wrapper_7_0_x1_loop_5:                             for (ap_uint<3> n = 0; n < 4; n++) {
                                data_split[n] = out_data(31, 0);
                                out_data = out_data >> 32;
                            }
                            union {
                                unsigned int ui;
                                float ut;
                            } u;
                            u.ut = in_data;
                            data_split[split_idx] = ap_uint<32>(u.ui);
                            out_data = (data_split[3], data_split[2], data_split[1], data_split[0]);
                            local_D[c8][c7 / 4] = out_data;
                        }
                    }
                }
D_drain_IO_L1_out_wrapper_7_0_x1_loop_6:                 for (ap_uint<3> c4 = p1; c4 <= 3; c4 += 1) {
                    // io_L1
                    if (c4 == p1) {
D_drain_IO_L1_out_wrapper_7_0_x1_loop_7:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_7_0_x1_loop_8:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = local_D[c5][c6];
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    } else {
D_drain_IO_L1_out_wrapper_7_0_x1_loop_9:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_wrapper_7_0_x1_loop_10:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                }
            }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L1_out_boundary_wrapper_0_x1(int idx, int idy, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<float> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    D_t4 local_D[16][2];
    /* Variable Declaration */

D_drain_IO_L1_out_boundary_wrapper_0_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L1_out_boundary_wrapper_0_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p0 + 8 * c1 <= 41) {
                // array
                // io_L3
                // io_L2
                ap_uint<32> data_split[4];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                /* Variable Declaration */
D_drain_IO_L1_out_boundary_wrapper_0_x1_loop_3:                 for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                    // latency
D_drain_IO_L1_out_boundary_wrapper_0_x1_loop_4:                     for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                        // simd
                        {
                            D_t1 in_data;
                            D_t4 out_data;
                            in_data = fifo_D_drain_local_in.read();
                            int split_idx = (c7) % 4;
                            out_data = local_D[c8][c7 / 4];
D_drain_IO_L1_out_boundary_wrapper_0_x1_loop_5:                             for (ap_uint<3> n = 0; n < 4; n++) {
                                data_split[n] = out_data(31, 0);
                                out_data = out_data >> 32;
                            }
                            union {
                                unsigned int ui;
                                float ut;
                            } u;
                            u.ut = in_data;
                            data_split[split_idx] = ap_uint<32>(u.ui);
                            out_data = (data_split[3], data_split[2], data_split[1], data_split[0]);
                            local_D[c8][c7 / 4] = out_data;
                        }
                    }
                }
D_drain_IO_L1_out_boundary_wrapper_0_x1_loop_6:                 for (ap_uint<3> c4 = p1; c4 <= 3; c4 += 1)
                    if (c4 == p1) {
                        // io_L1
D_drain_IO_L1_out_boundary_wrapper_0_x1_loop_7:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_boundary_wrapper_0_x1_loop_8:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = local_D[c5][c6];
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
            }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L1_out_boundary_wrapper_1_x1(int idx, int idy, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<float> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    D_t4 local_D[16][2];
    /* Variable Declaration */

D_drain_IO_L1_out_boundary_wrapper_1_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L1_out_boundary_wrapper_1_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p0 + 8 * c1 <= 41) {
                // array
                // io_L3
                // io_L2
                ap_uint<32> data_split[4];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                /* Variable Declaration */
D_drain_IO_L1_out_boundary_wrapper_1_x1_loop_3:                 for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                    // latency
D_drain_IO_L1_out_boundary_wrapper_1_x1_loop_4:                     for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                        // simd
                        {
                            D_t1 in_data;
                            D_t4 out_data;
                            in_data = fifo_D_drain_local_in.read();
                            int split_idx = (c7) % 4;
                            out_data = local_D[c8][c7 / 4];
D_drain_IO_L1_out_boundary_wrapper_1_x1_loop_5:                             for (ap_uint<3> n = 0; n < 4; n++) {
                                data_split[n] = out_data(31, 0);
                                out_data = out_data >> 32;
                            }
                            union {
                                unsigned int ui;
                                float ut;
                            } u;
                            u.ut = in_data;
                            data_split[split_idx] = ap_uint<32>(u.ui);
                            out_data = (data_split[3], data_split[2], data_split[1], data_split[0]);
                            local_D[c8][c7 / 4] = out_data;
                        }
                    }
                }
D_drain_IO_L1_out_boundary_wrapper_1_x1_loop_6:                 for (ap_uint<3> c4 = p1; c4 <= 3; c4 += 1)
                    if (c4 == p1) {
                        // io_L1
D_drain_IO_L1_out_boundary_wrapper_1_x1_loop_7:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_boundary_wrapper_1_x1_loop_8:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = local_D[c5][c6];
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
            }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L1_out_boundary_wrapper_2_x1(int idx, int idy, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<float> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    D_t4 local_D[16][2];
    /* Variable Declaration */

D_drain_IO_L1_out_boundary_wrapper_2_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L1_out_boundary_wrapper_2_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p0 + 8 * c1 <= 41) {
                // array
                // io_L3
                // io_L2
                ap_uint<32> data_split[4];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                /* Variable Declaration */
D_drain_IO_L1_out_boundary_wrapper_2_x1_loop_3:                 for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                    // latency
D_drain_IO_L1_out_boundary_wrapper_2_x1_loop_4:                     for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                        // simd
                        {
                            D_t1 in_data;
                            D_t4 out_data;
                            in_data = fifo_D_drain_local_in.read();
                            int split_idx = (c7) % 4;
                            out_data = local_D[c8][c7 / 4];
D_drain_IO_L1_out_boundary_wrapper_2_x1_loop_5:                             for (ap_uint<3> n = 0; n < 4; n++) {
                                data_split[n] = out_data(31, 0);
                                out_data = out_data >> 32;
                            }
                            union {
                                unsigned int ui;
                                float ut;
                            } u;
                            u.ut = in_data;
                            data_split[split_idx] = ap_uint<32>(u.ui);
                            out_data = (data_split[3], data_split[2], data_split[1], data_split[0]);
                            local_D[c8][c7 / 4] = out_data;
                        }
                    }
                }
D_drain_IO_L1_out_boundary_wrapper_2_x1_loop_6:                 for (ap_uint<3> c4 = p1; c4 <= 3; c4 += 1)
                    if (c4 == p1) {
                        // io_L1
D_drain_IO_L1_out_boundary_wrapper_2_x1_loop_7:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_boundary_wrapper_2_x1_loop_8:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = local_D[c5][c6];
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
            }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L1_out_boundary_wrapper_3_x1(int idx, int idy, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<float> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    D_t4 local_D[16][2];
    /* Variable Declaration */

D_drain_IO_L1_out_boundary_wrapper_3_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L1_out_boundary_wrapper_3_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p0 + 8 * c1 <= 41) {
                // array
                // io_L3
                // io_L2
                ap_uint<32> data_split[4];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                /* Variable Declaration */
D_drain_IO_L1_out_boundary_wrapper_3_x1_loop_3:                 for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                    // latency
D_drain_IO_L1_out_boundary_wrapper_3_x1_loop_4:                     for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                        // simd
                        {
                            D_t1 in_data;
                            D_t4 out_data;
                            in_data = fifo_D_drain_local_in.read();
                            int split_idx = (c7) % 4;
                            out_data = local_D[c8][c7 / 4];
D_drain_IO_L1_out_boundary_wrapper_3_x1_loop_5:                             for (ap_uint<3> n = 0; n < 4; n++) {
                                data_split[n] = out_data(31, 0);
                                out_data = out_data >> 32;
                            }
                            union {
                                unsigned int ui;
                                float ut;
                            } u;
                            u.ut = in_data;
                            data_split[split_idx] = ap_uint<32>(u.ui);
                            out_data = (data_split[3], data_split[2], data_split[1], data_split[0]);
                            local_D[c8][c7 / 4] = out_data;
                        }
                    }
                }
D_drain_IO_L1_out_boundary_wrapper_3_x1_loop_6:                 for (ap_uint<3> c4 = p1; c4 <= 3; c4 += 1)
                    if (c4 == p1) {
                        // io_L1
D_drain_IO_L1_out_boundary_wrapper_3_x1_loop_7:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_boundary_wrapper_3_x1_loop_8:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = local_D[c5][c6];
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
            }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L1_out_boundary_wrapper_4_x1(int idx, int idy, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<float> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    D_t4 local_D[16][2];
    /* Variable Declaration */

D_drain_IO_L1_out_boundary_wrapper_4_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L1_out_boundary_wrapper_4_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p0 + 8 * c1 <= 41) {
                // array
                // io_L3
                // io_L2
                ap_uint<32> data_split[4];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                /* Variable Declaration */
D_drain_IO_L1_out_boundary_wrapper_4_x1_loop_3:                 for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                    // latency
D_drain_IO_L1_out_boundary_wrapper_4_x1_loop_4:                     for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                        // simd
                        {
                            D_t1 in_data;
                            D_t4 out_data;
                            in_data = fifo_D_drain_local_in.read();
                            int split_idx = (c7) % 4;
                            out_data = local_D[c8][c7 / 4];
D_drain_IO_L1_out_boundary_wrapper_4_x1_loop_5:                             for (ap_uint<3> n = 0; n < 4; n++) {
                                data_split[n] = out_data(31, 0);
                                out_data = out_data >> 32;
                            }
                            union {
                                unsigned int ui;
                                float ut;
                            } u;
                            u.ut = in_data;
                            data_split[split_idx] = ap_uint<32>(u.ui);
                            out_data = (data_split[3], data_split[2], data_split[1], data_split[0]);
                            local_D[c8][c7 / 4] = out_data;
                        }
                    }
                }
D_drain_IO_L1_out_boundary_wrapper_4_x1_loop_6:                 for (ap_uint<3> c4 = p1; c4 <= 3; c4 += 1)
                    if (c4 == p1) {
                        // io_L1
D_drain_IO_L1_out_boundary_wrapper_4_x1_loop_7:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_boundary_wrapper_4_x1_loop_8:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = local_D[c5][c6];
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
            }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L1_out_boundary_wrapper_5_x1(int idx, int idy, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<float> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    D_t4 local_D[16][2];
    /* Variable Declaration */

D_drain_IO_L1_out_boundary_wrapper_5_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L1_out_boundary_wrapper_5_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p0 + 8 * c1 <= 41) {
                // array
                // io_L3
                // io_L2
                ap_uint<32> data_split[4];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                /* Variable Declaration */
D_drain_IO_L1_out_boundary_wrapper_5_x1_loop_3:                 for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                    // latency
D_drain_IO_L1_out_boundary_wrapper_5_x1_loop_4:                     for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                        // simd
                        {
                            D_t1 in_data;
                            D_t4 out_data;
                            in_data = fifo_D_drain_local_in.read();
                            int split_idx = (c7) % 4;
                            out_data = local_D[c8][c7 / 4];
D_drain_IO_L1_out_boundary_wrapper_5_x1_loop_5:                             for (ap_uint<3> n = 0; n < 4; n++) {
                                data_split[n] = out_data(31, 0);
                                out_data = out_data >> 32;
                            }
                            union {
                                unsigned int ui;
                                float ut;
                            } u;
                            u.ut = in_data;
                            data_split[split_idx] = ap_uint<32>(u.ui);
                            out_data = (data_split[3], data_split[2], data_split[1], data_split[0]);
                            local_D[c8][c7 / 4] = out_data;
                        }
                    }
                }
D_drain_IO_L1_out_boundary_wrapper_5_x1_loop_6:                 for (ap_uint<3> c4 = p1; c4 <= 3; c4 += 1)
                    if (c4 == p1) {
                        // io_L1
D_drain_IO_L1_out_boundary_wrapper_5_x1_loop_7:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_boundary_wrapper_5_x1_loop_8:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = local_D[c5][c6];
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
            }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L1_out_boundary_wrapper_6_x1(int idx, int idy, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<float> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    D_t4 local_D[16][2];
    /* Variable Declaration */

D_drain_IO_L1_out_boundary_wrapper_6_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L1_out_boundary_wrapper_6_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p0 + 8 * c1 <= 41) {
                // array
                // io_L3
                // io_L2
                ap_uint<32> data_split[4];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                /* Variable Declaration */
D_drain_IO_L1_out_boundary_wrapper_6_x1_loop_3:                 for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                    // latency
D_drain_IO_L1_out_boundary_wrapper_6_x1_loop_4:                     for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                        // simd
                        {
                            D_t1 in_data;
                            D_t4 out_data;
                            in_data = fifo_D_drain_local_in.read();
                            int split_idx = (c7) % 4;
                            out_data = local_D[c8][c7 / 4];
D_drain_IO_L1_out_boundary_wrapper_6_x1_loop_5:                             for (ap_uint<3> n = 0; n < 4; n++) {
                                data_split[n] = out_data(31, 0);
                                out_data = out_data >> 32;
                            }
                            union {
                                unsigned int ui;
                                float ut;
                            } u;
                            u.ut = in_data;
                            data_split[split_idx] = ap_uint<32>(u.ui);
                            out_data = (data_split[3], data_split[2], data_split[1], data_split[0]);
                            local_D[c8][c7 / 4] = out_data;
                        }
                    }
                }
D_drain_IO_L1_out_boundary_wrapper_6_x1_loop_6:                 for (ap_uint<3> c4 = p1; c4 <= 3; c4 += 1)
                    if (c4 == p1) {
                        // io_L1
D_drain_IO_L1_out_boundary_wrapper_6_x1_loop_7:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_boundary_wrapper_6_x1_loop_8:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = local_D[c5][c6];
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
            }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L1_out_boundary_wrapper_7_x1(int idx, int idy, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<float> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx, p1 = idy; // module id
    D_t4 local_D[16][2];
    /* Variable Declaration */

D_drain_IO_L1_out_boundary_wrapper_7_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L1_out_boundary_wrapper_7_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1)
            if (p0 + 8 * c1 <= 41) {
                // array
                // io_L3
                // io_L2
                ap_uint<32> data_split[4];
#pragma HLS ARRAY_PARTITION variable = data_split complete
                /* Variable Declaration */
D_drain_IO_L1_out_boundary_wrapper_7_x1_loop_3:                 for (ap_uint<4> c7 = 0; c7 <= 7; c7 += 1) {
                    // latency
D_drain_IO_L1_out_boundary_wrapper_7_x1_loop_4:                     for (ap_uint<5> c8 = 0; c8 <= 15; c8 += 1) {

                        // simd
                        {
                            D_t1 in_data;
                            D_t4 out_data;
                            in_data = fifo_D_drain_local_in.read();
                            int split_idx = (c7) % 4;
                            out_data = local_D[c8][c7 / 4];
D_drain_IO_L1_out_boundary_wrapper_7_x1_loop_5:                             for (ap_uint<3> n = 0; n < 4; n++) {
                                data_split[n] = out_data(31, 0);
                                out_data = out_data >> 32;
                            }
                            union {
                                unsigned int ui;
                                float ut;
                            } u;
                            u.ut = in_data;
                            data_split[split_idx] = ap_uint<32>(u.ui);
                            out_data = (data_split[3], data_split[2], data_split[1], data_split[0]);
                            local_D[c8][c7 / 4] = out_data;
                        }
                    }
                }
D_drain_IO_L1_out_boundary_wrapper_7_x1_loop_6:                 for (ap_uint<3> c4 = p1; c4 <= 3; c4 += 1)
                    if (c4 == p1) {
                        // io_L1
D_drain_IO_L1_out_boundary_wrapper_7_x1_loop_7:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L1_out_boundary_wrapper_7_x1_loop_8:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = local_D[c5][c6];
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
            }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L2_out_6_x1(int idx, hls::stream<D_t4> &fifo_D_drain_in, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<D_t4> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx; // module id
    /* Variable Declaration */

D_drain_IO_L2_out_6_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L2_out_6_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
            // array
            // io_L3
D_drain_IO_L2_out_6_x1_loop_3:             for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 2 max = 8
                if (c3 > -8 * c1 + 41)
                    break;
                // io_L2
                if (c3 == p0) {
D_drain_IO_L2_out_6_x1_loop_4:                     for (ap_uint<3> c4 = 0; c4 <= 3; c4 += 1) {
                        // io_L1
D_drain_IO_L2_out_6_x1_loop_5:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L2_out_6_x1_loop_6:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_local_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                } else {
D_drain_IO_L2_out_6_x1_loop_7:                     for (ap_uint<3> c4 = 0; c4 <= 3; c4 += 1) {
                        // io_L1
D_drain_IO_L2_out_6_x1_loop_8:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L2_out_6_x1_loop_9:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                }
            }
        }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L2_out_5_x1(int idx, hls::stream<D_t4> &fifo_D_drain_in, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<D_t4> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx; // module id
    /* Variable Declaration */

D_drain_IO_L2_out_5_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L2_out_5_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
            // array
            // io_L3
D_drain_IO_L2_out_5_x1_loop_3:             for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 2 max = 8
                if (c3 > -8 * c1 + 41)
                    break;
                // io_L2
                if (c3 == p0) {
D_drain_IO_L2_out_5_x1_loop_4:                     for (ap_uint<3> c4 = 0; c4 <= 3; c4 += 1) {
                        // io_L1
D_drain_IO_L2_out_5_x1_loop_5:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L2_out_5_x1_loop_6:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_local_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                } else {
D_drain_IO_L2_out_5_x1_loop_7:                     for (ap_uint<3> c4 = 0; c4 <= 3; c4 += 1) {
                        // io_L1
D_drain_IO_L2_out_5_x1_loop_8:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L2_out_5_x1_loop_9:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                }
            }
        }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L2_out_4_x1(int idx, hls::stream<D_t4> &fifo_D_drain_in, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<D_t4> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx; // module id
    /* Variable Declaration */

D_drain_IO_L2_out_4_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L2_out_4_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
            // array
            // io_L3
D_drain_IO_L2_out_4_x1_loop_3:             for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 2 max = 8
                if (c3 > -8 * c1 + 41)
                    break;
                // io_L2
                if (c3 == p0) {
D_drain_IO_L2_out_4_x1_loop_4:                     for (ap_uint<3> c4 = 0; c4 <= 3; c4 += 1) {
                        // io_L1
D_drain_IO_L2_out_4_x1_loop_5:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L2_out_4_x1_loop_6:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_local_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                } else {
D_drain_IO_L2_out_4_x1_loop_7:                     for (ap_uint<3> c4 = 0; c4 <= 3; c4 += 1) {
                        // io_L1
D_drain_IO_L2_out_4_x1_loop_8:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L2_out_4_x1_loop_9:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                }
            }
        }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L2_out_3_x1(int idx, hls::stream<D_t4> &fifo_D_drain_in, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<D_t4> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx; // module id
    /* Variable Declaration */

D_drain_IO_L2_out_3_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L2_out_3_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
            // array
            // io_L3
D_drain_IO_L2_out_3_x1_loop_3:             for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 2 max = 8
                if (c3 > -8 * c1 + 41)
                    break;
                // io_L2
                if (c3 == p0) {
D_drain_IO_L2_out_3_x1_loop_4:                     for (ap_uint<3> c4 = 0; c4 <= 3; c4 += 1) {
                        // io_L1
D_drain_IO_L2_out_3_x1_loop_5:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L2_out_3_x1_loop_6:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_local_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                } else {
D_drain_IO_L2_out_3_x1_loop_7:                     for (ap_uint<3> c4 = 0; c4 <= 3; c4 += 1) {
                        // io_L1
D_drain_IO_L2_out_3_x1_loop_8:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L2_out_3_x1_loop_9:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                }
            }
        }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L2_out_2_x1(int idx, hls::stream<D_t4> &fifo_D_drain_in, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<D_t4> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx; // module id
    /* Variable Declaration */

D_drain_IO_L2_out_2_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L2_out_2_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
            // array
            // io_L3
D_drain_IO_L2_out_2_x1_loop_3:             for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 2 max = 8
                if (c3 > -8 * c1 + 41)
                    break;
                // io_L2
                if (c3 == p0) {
D_drain_IO_L2_out_2_x1_loop_4:                     for (ap_uint<3> c4 = 0; c4 <= 3; c4 += 1) {
                        // io_L1
D_drain_IO_L2_out_2_x1_loop_5:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L2_out_2_x1_loop_6:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_local_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                } else {
D_drain_IO_L2_out_2_x1_loop_7:                     for (ap_uint<3> c4 = 0; c4 <= 3; c4 += 1) {
                        // io_L1
D_drain_IO_L2_out_2_x1_loop_8:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L2_out_2_x1_loop_9:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                }
            }
        }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L2_out_1_x1(int idx, hls::stream<D_t4> &fifo_D_drain_in, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<D_t4> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx; // module id
    /* Variable Declaration */

D_drain_IO_L2_out_1_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L2_out_1_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
            // array
            // io_L3
D_drain_IO_L2_out_1_x1_loop_3:             for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 2 max = 8
                if (c3 > -8 * c1 + 41)
                    break;
                // io_L2
                if (c3 == p0) {
D_drain_IO_L2_out_1_x1_loop_4:                     for (ap_uint<3> c4 = 0; c4 <= 3; c4 += 1) {
                        // io_L1
D_drain_IO_L2_out_1_x1_loop_5:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L2_out_1_x1_loop_6:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_local_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                } else {
D_drain_IO_L2_out_1_x1_loop_7:                     for (ap_uint<3> c4 = 0; c4 <= 3; c4 += 1) {
                        // io_L1
D_drain_IO_L2_out_1_x1_loop_8:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L2_out_1_x1_loop_9:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                }
            }
        }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L2_out_0_x1(int idx, hls::stream<D_t4> &fifo_D_drain_in, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<D_t4> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx; // module id
    /* Variable Declaration */

D_drain_IO_L2_out_0_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L2_out_0_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
            // array
            // io_L3
D_drain_IO_L2_out_0_x1_loop_3:             for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 2 max = 8
                if (c3 > -8 * c1 + 41)
                    break;
                // io_L2
                if (c3 == p0) {
D_drain_IO_L2_out_0_x1_loop_4:                     for (ap_uint<3> c4 = 0; c4 <= 3; c4 += 1) {
                        // io_L1
D_drain_IO_L2_out_0_x1_loop_5:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L2_out_0_x1_loop_6:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_local_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                } else {
D_drain_IO_L2_out_0_x1_loop_7:                     for (ap_uint<3> c4 = 0; c4 <= 3; c4 += 1) {
                        // io_L1
D_drain_IO_L2_out_0_x1_loop_8:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L2_out_0_x1_loop_9:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                }
            }
        }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L2_out_boundary_x1(int idx, hls::stream<D_t4> &fifo_D_drain_out, hls::stream<D_t4> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    int p0 = idx; // module id
    /* Variable Declaration */

D_drain_IO_L2_out_boundary_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L2_out_boundary_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
            // array
            // io_L3
D_drain_IO_L2_out_boundary_x1_loop_3:             for (int c3 = p0; c3 <= 7; c3 += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 1 max = 1
                if (c3 > -8 * c1 + 41)
                    break;
                if (c3 == p0) {
                    // io_L2
D_drain_IO_L2_out_boundary_x1_loop_4:                     for (ap_uint<3> c4 = 0; c4 <= 3; c4 += 1) {
                        // io_L1
D_drain_IO_L2_out_boundary_x1_loop_5:                         for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                            // access_coalesce
D_drain_IO_L2_out_boundary_x1_loop_6:                             for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                                {
                                    D_t4 in_data;
                                    D_t4 out_data;
                                    in_data = fifo_D_drain_local_in.read();
                                    out_data = in_data;
                                    fifo_D_drain_out.write(out_data);
                                }
                            }
                        }
                    }
                }
            }
        }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L3_out_x1(hls::stream<D_t4> &fifo_D_drain_out, hls::stream<D_t4> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    /* Variable Declaration */

D_drain_IO_L3_out_x1_loop_1:     for (ap_uint<3> c0 = 0; c0 <= 3; c0 += 1)
D_drain_IO_L3_out_x1_loop_2:         for (ap_uint<4> c1 = 0; c1 <= 5; c1 += 1) {
            // array
            // io_L3
D_drain_IO_L3_out_x1_loop_3:             for (int c3 = 0; c3 <= 7; c3 += 1) {
                if (c3 > -8 * c1 + 41)
                    break;
                // io_L2
D_drain_IO_L3_out_x1_loop_4:                 for (ap_uint<3> c4 = 0; c4 <= 3; c4 += 1) {
                    // io_L1
D_drain_IO_L3_out_x1_loop_5:                     for (ap_uint<5> c5 = 0; c5 <= 15; c5 += 1) {
                        // access_coalesce
                        // access_serialize
D_drain_IO_L3_out_x1_loop_6:                         for (ap_uint<2> c6 = 0; c6 <= 1; c6 += 1) {

                            {
                                D_t4 in_data;
                                D_t4 out_data;
                                in_data = fifo_D_drain_local_in.read();
                                out_data = in_data;
                                fifo_D_drain_out.write(out_data);
                            }
                        }
                    }
                }
            }
        }
}
/* Module Definition */

/* Module Definition */
void D_drain_IO_L3_out_serialize_x1(D_t16 *D, hls::stream<D_t4> &fifo_D_drain_local_in) {
#pragma HLS INLINE OFF
    /* Variable Declaration */
    /* Variable Declaration */

D_drain_IO_L3_out_serialize_x1_loop_1:     for (ap_uint<14> i = 0; i < 1024; i++) {

        D_t4 fifo_data;
        D_t16 mem_data;
        D_t4 mem_data_split[4];
#pragma HLS ARRAY_PARTITION variable = mem_data_split complete
D_drain_IO_L3_out_serialize_x1_loop_2:         for (ap_uint<3> p = 0; p < 4; p++) {
            fifo_data = fifo_D_drain_local_in.read();
            mem_data_split[p] = fifo_data;
        }
        mem_data = (mem_data_split[3], mem_data_split[2], mem_data_split[1], mem_data_split[0]);
        D[i] = mem_data;
    }
}
/* Module Definition */

void kernel0_x1(A_t16 *A, B_t16 *B, C_t16 *C, D_t16 *D) {
#pragma HLS INLINE OFF
#pragma HLS DATAFLOW disable_start_propagation

    /* FIFO Declaration */
    /* A_IO_L3_in_serialize fifo */ hls::stream<A_t16> fifo_A_A_IO_L3_in_serialize_x1;
#pragma HLS STREAM variable = fifo_A_A_IO_L3_in_serialize_x1 depth = 2
    /* B_IO_L3_in_serialize fifo */ hls::stream<B_t8> fifo_B_B_IO_L3_in_serialize_x1;
#pragma HLS STREAM variable = fifo_B_B_IO_L3_in_serialize_x1 depth = 2
    /* C_IO_L3_in_serialize fifo */ hls::stream<C_t16> fifo_C_C_IO_L3_in_serialize_x1;
#pragma HLS STREAM variable = fifo_C_C_IO_L3_in_serialize_x1 depth = 2
    /* D_drain_IO_L3_out_serialize fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L3_out_serialize_x1;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L3_out_serialize_x1 depth = 2
    /* A_IO_L2_in fifo */ hls::stream<A_t16> fifo_A_A_IO_L2_in_0_x1;
#pragma HLS STREAM variable = fifo_A_A_IO_L2_in_0_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_A_IO_L2_in_0_x1 type = FIFO impl = SRL
    /* A_IO_L2_in fifo */ hls::stream<A_t16> fifo_A_A_IO_L2_in_1_x1;
#pragma HLS STREAM variable = fifo_A_A_IO_L2_in_1_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_A_IO_L2_in_1_x1 type = FIFO impl = SRL
    /* A_IO_L2_in fifo */ hls::stream<A_t16> fifo_A_A_IO_L2_in_2_x1;
#pragma HLS STREAM variable = fifo_A_A_IO_L2_in_2_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_A_IO_L2_in_2_x1 type = FIFO impl = SRL
    /* A_IO_L2_in fifo */ hls::stream<A_t16> fifo_A_A_IO_L2_in_3_x1;
#pragma HLS STREAM variable = fifo_A_A_IO_L2_in_3_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_A_IO_L2_in_3_x1 type = FIFO impl = SRL
    /* A_IO_L2_in fifo */ hls::stream<A_t16> fifo_A_A_IO_L2_in_4_x1;
#pragma HLS STREAM variable = fifo_A_A_IO_L2_in_4_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_A_IO_L2_in_4_x1 type = FIFO impl = SRL
    /* B_IO_L2_in fifo */ hls::stream<B_t8> fifo_B_B_IO_L2_in_0_x1;
#pragma HLS STREAM variable = fifo_B_B_IO_L2_in_0_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_B_IO_L2_in_0_x1 type = FIFO impl = SRL
    /* B_IO_L2_in fifo */ hls::stream<B_t8> fifo_B_B_IO_L2_in_1_x1;
#pragma HLS STREAM variable = fifo_B_B_IO_L2_in_1_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_B_IO_L2_in_1_x1 type = FIFO impl = SRL
    /* B_IO_L2_in fifo */ hls::stream<B_t8> fifo_B_B_IO_L2_in_2_x1;
#pragma HLS STREAM variable = fifo_B_B_IO_L2_in_2_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_B_IO_L2_in_2_x1 type = FIFO impl = SRL
    /* B_IO_L2_in fifo */ hls::stream<B_t8> fifo_B_B_IO_L2_in_3_x1;
#pragma HLS STREAM variable = fifo_B_B_IO_L2_in_3_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_B_IO_L2_in_3_x1 type = FIFO impl = SRL
    /* B_IO_L2_in fifo */ hls::stream<B_t8> fifo_B_B_IO_L2_in_4_x1;
#pragma HLS STREAM variable = fifo_B_B_IO_L2_in_4_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_B_IO_L2_in_4_x1 type = FIFO impl = SRL
    /* B_IO_L2_in fifo */ hls::stream<B_t8> fifo_B_B_IO_L2_in_5_x1;
#pragma HLS STREAM variable = fifo_B_B_IO_L2_in_5_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_B_IO_L2_in_5_x1 type = FIFO impl = SRL
    /* B_IO_L2_in fifo */ hls::stream<B_t8> fifo_B_B_IO_L2_in_6_x1;
#pragma HLS STREAM variable = fifo_B_B_IO_L2_in_6_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_B_IO_L2_in_6_x1 type = FIFO impl = SRL
    /* B_IO_L2_in fifo */ hls::stream<B_t8> fifo_B_B_IO_L2_in_7_x1;
#pragma HLS STREAM variable = fifo_B_B_IO_L2_in_7_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_B_IO_L2_in_7_x1 type = FIFO impl = SRL
    /* B_IO_L2_in fifo */ hls::stream<B_t8> fifo_B_B_IO_L2_in_8_x1;
#pragma HLS STREAM variable = fifo_B_B_IO_L2_in_8_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_B_IO_L2_in_8_x1 type = FIFO impl = SRL
    /* C_IO_L2_in fifo */ hls::stream<C_t16> fifo_C_C_IO_L2_in_0_x1;
#pragma HLS STREAM variable = fifo_C_C_IO_L2_in_0_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_C_IO_L2_in_0_x1 type = FIFO impl = SRL
    /* C_IO_L2_in fifo */ hls::stream<C_t16> fifo_C_C_IO_L2_in_1_x1;
#pragma HLS STREAM variable = fifo_C_C_IO_L2_in_1_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_C_IO_L2_in_1_x1 type = FIFO impl = SRL
    /* C_IO_L2_in fifo */ hls::stream<C_t16> fifo_C_C_IO_L2_in_2_x1;
#pragma HLS STREAM variable = fifo_C_C_IO_L2_in_2_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_C_IO_L2_in_2_x1 type = FIFO impl = SRL
    /* C_IO_L2_in fifo */ hls::stream<C_t16> fifo_C_C_IO_L2_in_3_x1;
#pragma HLS STREAM variable = fifo_C_C_IO_L2_in_3_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_C_IO_L2_in_3_x1 type = FIFO impl = SRL
    /* C_IO_L2_in fifo */ hls::stream<C_t16> fifo_C_C_IO_L2_in_4_x1;
#pragma HLS STREAM variable = fifo_C_C_IO_L2_in_4_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_C_IO_L2_in_4_x1 type = FIFO impl = SRL
    /* C_IO_L2_in fifo */ hls::stream<C_t16> fifo_C_C_IO_L2_in_5_x1;
#pragma HLS STREAM variable = fifo_C_C_IO_L2_in_5_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_C_IO_L2_in_5_x1 type = FIFO impl = SRL
    /* C_IO_L2_in fifo */ hls::stream<C_t16> fifo_C_C_IO_L2_in_6_x1;
#pragma HLS STREAM variable = fifo_C_C_IO_L2_in_6_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_C_IO_L2_in_6_x1 type = FIFO impl = SRL
    /* C_IO_L2_in fifo */ hls::stream<C_t16> fifo_C_C_IO_L2_in_7_x1;
#pragma HLS STREAM variable = fifo_C_C_IO_L2_in_7_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_C_IO_L2_in_7_x1 type = FIFO impl = SRL
    /* C_IO_L2_in fifo */ hls::stream<C_t16> fifo_C_C_IO_L2_in_8_x1;
#pragma HLS STREAM variable = fifo_C_C_IO_L2_in_8_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_C_IO_L2_in_8_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<A_t8> fifo_A_PE_0_0_x1;
#pragma HLS STREAM variable = fifo_A_PE_0_0_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_PE_0_0_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<A_t8> fifo_A_PE_0_1_x1;
#pragma HLS STREAM variable = fifo_A_PE_0_1_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_PE_0_1_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<A_t8> fifo_A_PE_0_2_x1;
#pragma HLS STREAM variable = fifo_A_PE_0_2_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_PE_0_2_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<A_t8> fifo_A_PE_0_3_x1;
#pragma HLS STREAM variable = fifo_A_PE_0_3_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_PE_0_3_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<A_t8> fifo_A_PE_0_4_x1;
#pragma HLS STREAM variable = fifo_A_PE_0_4_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_PE_0_4_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<A_t8> fifo_A_PE_0_5_x1;
#pragma HLS STREAM variable = fifo_A_PE_0_5_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_PE_0_5_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<A_t8> fifo_A_PE_0_6_x1;
#pragma HLS STREAM variable = fifo_A_PE_0_6_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_PE_0_6_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<A_t8> fifo_A_PE_0_7_x1;
#pragma HLS STREAM variable = fifo_A_PE_0_7_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_PE_0_7_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<A_t8> fifo_A_PE_0_8_x1;
#pragma HLS STREAM variable = fifo_A_PE_0_8_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_PE_0_8_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<A_t8> fifo_A_PE_1_0_x1;
#pragma HLS STREAM variable = fifo_A_PE_1_0_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_PE_1_0_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<A_t8> fifo_A_PE_1_1_x1;
#pragma HLS STREAM variable = fifo_A_PE_1_1_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_PE_1_1_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<A_t8> fifo_A_PE_1_2_x1;
#pragma HLS STREAM variable = fifo_A_PE_1_2_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_PE_1_2_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<A_t8> fifo_A_PE_1_3_x1;
#pragma HLS STREAM variable = fifo_A_PE_1_3_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_PE_1_3_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<A_t8> fifo_A_PE_1_4_x1;
#pragma HLS STREAM variable = fifo_A_PE_1_4_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_PE_1_4_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<A_t8> fifo_A_PE_1_5_x1;
#pragma HLS STREAM variable = fifo_A_PE_1_5_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_PE_1_5_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<A_t8> fifo_A_PE_1_6_x1;
#pragma HLS STREAM variable = fifo_A_PE_1_6_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_PE_1_6_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<A_t8> fifo_A_PE_1_7_x1;
#pragma HLS STREAM variable = fifo_A_PE_1_7_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_PE_1_7_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<A_t8> fifo_A_PE_1_8_x1;
#pragma HLS STREAM variable = fifo_A_PE_1_8_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_PE_1_8_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<A_t8> fifo_A_PE_2_0_x1;
#pragma HLS STREAM variable = fifo_A_PE_2_0_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_PE_2_0_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<A_t8> fifo_A_PE_2_1_x1;
#pragma HLS STREAM variable = fifo_A_PE_2_1_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_PE_2_1_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<A_t8> fifo_A_PE_2_2_x1;
#pragma HLS STREAM variable = fifo_A_PE_2_2_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_PE_2_2_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<A_t8> fifo_A_PE_2_3_x1;
#pragma HLS STREAM variable = fifo_A_PE_2_3_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_PE_2_3_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<A_t8> fifo_A_PE_2_4_x1;
#pragma HLS STREAM variable = fifo_A_PE_2_4_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_PE_2_4_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<A_t8> fifo_A_PE_2_5_x1;
#pragma HLS STREAM variable = fifo_A_PE_2_5_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_PE_2_5_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<A_t8> fifo_A_PE_2_6_x1;
#pragma HLS STREAM variable = fifo_A_PE_2_6_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_PE_2_6_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<A_t8> fifo_A_PE_2_7_x1;
#pragma HLS STREAM variable = fifo_A_PE_2_7_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_PE_2_7_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<A_t8> fifo_A_PE_2_8_x1;
#pragma HLS STREAM variable = fifo_A_PE_2_8_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_PE_2_8_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<A_t8> fifo_A_PE_3_0_x1;
#pragma HLS STREAM variable = fifo_A_PE_3_0_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_PE_3_0_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<A_t8> fifo_A_PE_3_1_x1;
#pragma HLS STREAM variable = fifo_A_PE_3_1_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_PE_3_1_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<A_t8> fifo_A_PE_3_2_x1;
#pragma HLS STREAM variable = fifo_A_PE_3_2_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_PE_3_2_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<A_t8> fifo_A_PE_3_3_x1;
#pragma HLS STREAM variable = fifo_A_PE_3_3_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_PE_3_3_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<A_t8> fifo_A_PE_3_4_x1;
#pragma HLS STREAM variable = fifo_A_PE_3_4_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_PE_3_4_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<A_t8> fifo_A_PE_3_5_x1;
#pragma HLS STREAM variable = fifo_A_PE_3_5_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_PE_3_5_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<A_t8> fifo_A_PE_3_6_x1;
#pragma HLS STREAM variable = fifo_A_PE_3_6_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_PE_3_6_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<A_t8> fifo_A_PE_3_7_x1;
#pragma HLS STREAM variable = fifo_A_PE_3_7_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_PE_3_7_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<A_t8> fifo_A_PE_3_8_x1;
#pragma HLS STREAM variable = fifo_A_PE_3_8_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_A_PE_3_8_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_0_0_x1;
#pragma HLS STREAM variable = fifo_B_PE_0_0_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_0_0_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_1_0_x1;
#pragma HLS STREAM variable = fifo_B_PE_1_0_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_1_0_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_2_0_x1;
#pragma HLS STREAM variable = fifo_B_PE_2_0_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_2_0_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_3_0_x1;
#pragma HLS STREAM variable = fifo_B_PE_3_0_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_3_0_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_4_0_x1;
#pragma HLS STREAM variable = fifo_B_PE_4_0_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_4_0_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_0_1_x1;
#pragma HLS STREAM variable = fifo_B_PE_0_1_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_0_1_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_1_1_x1;
#pragma HLS STREAM variable = fifo_B_PE_1_1_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_1_1_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_2_1_x1;
#pragma HLS STREAM variable = fifo_B_PE_2_1_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_2_1_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_3_1_x1;
#pragma HLS STREAM variable = fifo_B_PE_3_1_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_3_1_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_4_1_x1;
#pragma HLS STREAM variable = fifo_B_PE_4_1_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_4_1_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_0_2_x1;
#pragma HLS STREAM variable = fifo_B_PE_0_2_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_0_2_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_1_2_x1;
#pragma HLS STREAM variable = fifo_B_PE_1_2_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_1_2_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_2_2_x1;
#pragma HLS STREAM variable = fifo_B_PE_2_2_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_2_2_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_3_2_x1;
#pragma HLS STREAM variable = fifo_B_PE_3_2_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_3_2_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_4_2_x1;
#pragma HLS STREAM variable = fifo_B_PE_4_2_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_4_2_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_0_3_x1;
#pragma HLS STREAM variable = fifo_B_PE_0_3_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_0_3_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_1_3_x1;
#pragma HLS STREAM variable = fifo_B_PE_1_3_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_1_3_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_2_3_x1;
#pragma HLS STREAM variable = fifo_B_PE_2_3_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_2_3_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_3_3_x1;
#pragma HLS STREAM variable = fifo_B_PE_3_3_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_3_3_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_4_3_x1;
#pragma HLS STREAM variable = fifo_B_PE_4_3_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_4_3_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_0_4_x1;
#pragma HLS STREAM variable = fifo_B_PE_0_4_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_0_4_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_1_4_x1;
#pragma HLS STREAM variable = fifo_B_PE_1_4_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_1_4_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_2_4_x1;
#pragma HLS STREAM variable = fifo_B_PE_2_4_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_2_4_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_3_4_x1;
#pragma HLS STREAM variable = fifo_B_PE_3_4_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_3_4_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_4_4_x1;
#pragma HLS STREAM variable = fifo_B_PE_4_4_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_4_4_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_0_5_x1;
#pragma HLS STREAM variable = fifo_B_PE_0_5_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_0_5_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_1_5_x1;
#pragma HLS STREAM variable = fifo_B_PE_1_5_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_1_5_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_2_5_x1;
#pragma HLS STREAM variable = fifo_B_PE_2_5_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_2_5_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_3_5_x1;
#pragma HLS STREAM variable = fifo_B_PE_3_5_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_3_5_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_4_5_x1;
#pragma HLS STREAM variable = fifo_B_PE_4_5_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_4_5_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_0_6_x1;
#pragma HLS STREAM variable = fifo_B_PE_0_6_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_0_6_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_1_6_x1;
#pragma HLS STREAM variable = fifo_B_PE_1_6_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_1_6_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_2_6_x1;
#pragma HLS STREAM variable = fifo_B_PE_2_6_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_2_6_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_3_6_x1;
#pragma HLS STREAM variable = fifo_B_PE_3_6_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_3_6_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_4_6_x1;
#pragma HLS STREAM variable = fifo_B_PE_4_6_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_4_6_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_0_7_x1;
#pragma HLS STREAM variable = fifo_B_PE_0_7_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_0_7_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_1_7_x1;
#pragma HLS STREAM variable = fifo_B_PE_1_7_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_1_7_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_2_7_x1;
#pragma HLS STREAM variable = fifo_B_PE_2_7_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_2_7_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_3_7_x1;
#pragma HLS STREAM variable = fifo_B_PE_3_7_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_3_7_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_B_PE_4_7_x1;
#pragma HLS STREAM variable = fifo_B_PE_4_7_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_B_PE_4_7_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_0_0_x1;
#pragma HLS STREAM variable = fifo_C_PE_0_0_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_0_0_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_1_0_x1;
#pragma HLS STREAM variable = fifo_C_PE_1_0_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_1_0_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_2_0_x1;
#pragma HLS STREAM variable = fifo_C_PE_2_0_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_2_0_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_3_0_x1;
#pragma HLS STREAM variable = fifo_C_PE_3_0_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_3_0_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_4_0_x1;
#pragma HLS STREAM variable = fifo_C_PE_4_0_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_4_0_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_0_1_x1;
#pragma HLS STREAM variable = fifo_C_PE_0_1_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_0_1_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_1_1_x1;
#pragma HLS STREAM variable = fifo_C_PE_1_1_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_1_1_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_2_1_x1;
#pragma HLS STREAM variable = fifo_C_PE_2_1_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_2_1_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_3_1_x1;
#pragma HLS STREAM variable = fifo_C_PE_3_1_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_3_1_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_4_1_x1;
#pragma HLS STREAM variable = fifo_C_PE_4_1_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_4_1_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_0_2_x1;
#pragma HLS STREAM variable = fifo_C_PE_0_2_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_0_2_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_1_2_x1;
#pragma HLS STREAM variable = fifo_C_PE_1_2_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_1_2_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_2_2_x1;
#pragma HLS STREAM variable = fifo_C_PE_2_2_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_2_2_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_3_2_x1;
#pragma HLS STREAM variable = fifo_C_PE_3_2_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_3_2_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_4_2_x1;
#pragma HLS STREAM variable = fifo_C_PE_4_2_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_4_2_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_0_3_x1;
#pragma HLS STREAM variable = fifo_C_PE_0_3_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_0_3_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_1_3_x1;
#pragma HLS STREAM variable = fifo_C_PE_1_3_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_1_3_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_2_3_x1;
#pragma HLS STREAM variable = fifo_C_PE_2_3_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_2_3_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_3_3_x1;
#pragma HLS STREAM variable = fifo_C_PE_3_3_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_3_3_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_4_3_x1;
#pragma HLS STREAM variable = fifo_C_PE_4_3_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_4_3_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_0_4_x1;
#pragma HLS STREAM variable = fifo_C_PE_0_4_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_0_4_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_1_4_x1;
#pragma HLS STREAM variable = fifo_C_PE_1_4_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_1_4_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_2_4_x1;
#pragma HLS STREAM variable = fifo_C_PE_2_4_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_2_4_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_3_4_x1;
#pragma HLS STREAM variable = fifo_C_PE_3_4_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_3_4_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_4_4_x1;
#pragma HLS STREAM variable = fifo_C_PE_4_4_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_4_4_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_0_5_x1;
#pragma HLS STREAM variable = fifo_C_PE_0_5_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_0_5_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_1_5_x1;
#pragma HLS STREAM variable = fifo_C_PE_1_5_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_1_5_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_2_5_x1;
#pragma HLS STREAM variable = fifo_C_PE_2_5_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_2_5_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_3_5_x1;
#pragma HLS STREAM variable = fifo_C_PE_3_5_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_3_5_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_4_5_x1;
#pragma HLS STREAM variable = fifo_C_PE_4_5_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_4_5_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_0_6_x1;
#pragma HLS STREAM variable = fifo_C_PE_0_6_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_0_6_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_1_6_x1;
#pragma HLS STREAM variable = fifo_C_PE_1_6_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_1_6_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_2_6_x1;
#pragma HLS STREAM variable = fifo_C_PE_2_6_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_2_6_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_3_6_x1;
#pragma HLS STREAM variable = fifo_C_PE_3_6_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_3_6_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_4_6_x1;
#pragma HLS STREAM variable = fifo_C_PE_4_6_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_4_6_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_0_7_x1;
#pragma HLS STREAM variable = fifo_C_PE_0_7_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_0_7_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_1_7_x1;
#pragma HLS STREAM variable = fifo_C_PE_1_7_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_1_7_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_2_7_x1;
#pragma HLS STREAM variable = fifo_C_PE_2_7_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_2_7_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_3_7_x1;
#pragma HLS STREAM variable = fifo_C_PE_3_7_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_3_7_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<C_t8> fifo_C_PE_4_7_x1;
#pragma HLS STREAM variable = fifo_C_PE_4_7_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_C_PE_4_7_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_D_drain_PE_0_0_x1;
#pragma HLS STREAM variable = fifo_D_drain_PE_0_0_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_PE_0_0_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_D_drain_PE_1_0_x1;
#pragma HLS STREAM variable = fifo_D_drain_PE_1_0_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_PE_1_0_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_D_drain_PE_2_0_x1;
#pragma HLS STREAM variable = fifo_D_drain_PE_2_0_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_PE_2_0_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_D_drain_PE_3_0_x1;
#pragma HLS STREAM variable = fifo_D_drain_PE_3_0_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_PE_3_0_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_D_drain_PE_0_1_x1;
#pragma HLS STREAM variable = fifo_D_drain_PE_0_1_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_PE_0_1_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_D_drain_PE_1_1_x1;
#pragma HLS STREAM variable = fifo_D_drain_PE_1_1_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_PE_1_1_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_D_drain_PE_2_1_x1;
#pragma HLS STREAM variable = fifo_D_drain_PE_2_1_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_PE_2_1_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_D_drain_PE_3_1_x1;
#pragma HLS STREAM variable = fifo_D_drain_PE_3_1_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_PE_3_1_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_D_drain_PE_0_2_x1;
#pragma HLS STREAM variable = fifo_D_drain_PE_0_2_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_PE_0_2_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_D_drain_PE_1_2_x1;
#pragma HLS STREAM variable = fifo_D_drain_PE_1_2_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_PE_1_2_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_D_drain_PE_2_2_x1;
#pragma HLS STREAM variable = fifo_D_drain_PE_2_2_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_PE_2_2_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_D_drain_PE_3_2_x1;
#pragma HLS STREAM variable = fifo_D_drain_PE_3_2_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_PE_3_2_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_D_drain_PE_0_3_x1;
#pragma HLS STREAM variable = fifo_D_drain_PE_0_3_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_PE_0_3_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_D_drain_PE_1_3_x1;
#pragma HLS STREAM variable = fifo_D_drain_PE_1_3_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_PE_1_3_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_D_drain_PE_2_3_x1;
#pragma HLS STREAM variable = fifo_D_drain_PE_2_3_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_PE_2_3_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_D_drain_PE_3_3_x1;
#pragma HLS STREAM variable = fifo_D_drain_PE_3_3_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_PE_3_3_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_D_drain_PE_0_4_x1;
#pragma HLS STREAM variable = fifo_D_drain_PE_0_4_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_PE_0_4_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_D_drain_PE_1_4_x1;
#pragma HLS STREAM variable = fifo_D_drain_PE_1_4_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_PE_1_4_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_D_drain_PE_2_4_x1;
#pragma HLS STREAM variable = fifo_D_drain_PE_2_4_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_PE_2_4_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_D_drain_PE_3_4_x1;
#pragma HLS STREAM variable = fifo_D_drain_PE_3_4_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_PE_3_4_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_D_drain_PE_0_5_x1;
#pragma HLS STREAM variable = fifo_D_drain_PE_0_5_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_PE_0_5_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_D_drain_PE_1_5_x1;
#pragma HLS STREAM variable = fifo_D_drain_PE_1_5_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_PE_1_5_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_D_drain_PE_2_5_x1;
#pragma HLS STREAM variable = fifo_D_drain_PE_2_5_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_PE_2_5_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_D_drain_PE_3_5_x1;
#pragma HLS STREAM variable = fifo_D_drain_PE_3_5_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_PE_3_5_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_D_drain_PE_0_6_x1;
#pragma HLS STREAM variable = fifo_D_drain_PE_0_6_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_PE_0_6_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_D_drain_PE_1_6_x1;
#pragma HLS STREAM variable = fifo_D_drain_PE_1_6_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_PE_1_6_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_D_drain_PE_2_6_x1;
#pragma HLS STREAM variable = fifo_D_drain_PE_2_6_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_PE_2_6_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_D_drain_PE_3_6_x1;
#pragma HLS STREAM variable = fifo_D_drain_PE_3_6_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_PE_3_6_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_D_drain_PE_0_7_x1;
#pragma HLS STREAM variable = fifo_D_drain_PE_0_7_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_PE_0_7_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_D_drain_PE_1_7_x1;
#pragma HLS STREAM variable = fifo_D_drain_PE_1_7_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_PE_1_7_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_D_drain_PE_2_7_x1;
#pragma HLS STREAM variable = fifo_D_drain_PE_2_7_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_PE_2_7_x1 type = FIFO impl = SRL
    /* PE fifo */ hls::stream<float> fifo_D_drain_PE_3_7_x1;
#pragma HLS STREAM variable = fifo_D_drain_PE_3_7_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_PE_3_7_x1 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_0_0_x1;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_0_0_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_0_0_x1 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_0_1_x1;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_0_1_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_0_1_x1 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_0_2_x1;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_0_2_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_0_2_x1 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_0_3_x1;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_0_3_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_0_3_x1 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_0_4_x1;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_0_4_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_0_4_x1 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_1_0_x1;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_1_0_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_1_0_x1 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_1_1_x1;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_1_1_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_1_1_x1 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_1_2_x1;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_1_2_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_1_2_x1 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_1_3_x1;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_1_3_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_1_3_x1 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_1_4_x1;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_1_4_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_1_4_x1 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_2_0_x1;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_2_0_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_2_0_x1 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_2_1_x1;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_2_1_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_2_1_x1 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_2_2_x1;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_2_2_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_2_2_x1 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_2_3_x1;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_2_3_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_2_3_x1 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_2_4_x1;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_2_4_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_2_4_x1 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_3_0_x1;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_3_0_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_3_0_x1 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_3_1_x1;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_3_1_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_3_1_x1 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_3_2_x1;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_3_2_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_3_2_x1 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_3_3_x1;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_3_3_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_3_3_x1 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_3_4_x1;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_3_4_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_3_4_x1 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_4_0_x1;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_4_0_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_4_0_x1 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_4_1_x1;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_4_1_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_4_1_x1 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_4_2_x1;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_4_2_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_4_2_x1 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_4_3_x1;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_4_3_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_4_3_x1 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_4_4_x1;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_4_4_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_4_4_x1 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_5_0_x1;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_5_0_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_5_0_x1 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_5_1_x1;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_5_1_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_5_1_x1 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_5_2_x1;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_5_2_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_5_2_x1 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_5_3_x1;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_5_3_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_5_3_x1 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_5_4_x1;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_5_4_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_5_4_x1 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_6_0_x1;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_6_0_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_6_0_x1 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_6_1_x1;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_6_1_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_6_1_x1 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_6_2_x1;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_6_2_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_6_2_x1 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_6_3_x1;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_6_3_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_6_3_x1 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_6_4_x1;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_6_4_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_6_4_x1 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_7_0_x1;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_7_0_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_7_0_x1 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_7_1_x1;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_7_1_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_7_1_x1 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_7_2_x1;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_7_2_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_7_2_x1 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_7_3_x1;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_7_3_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_7_3_x1 type = FIFO impl = SRL
    /* D_drain_IO_L1_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L1_out_7_4_x1;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L1_out_7_4_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L1_out_7_4_x1 type = FIFO impl = SRL
    /* D_drain_IO_L2_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L2_out_0_x1;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L2_out_0_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L2_out_0_x1 type = FIFO impl = SRL
    /* D_drain_IO_L2_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L2_out_1_x1;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L2_out_1_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L2_out_1_x1 type = FIFO impl = SRL
    /* D_drain_IO_L2_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L2_out_2_x1;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L2_out_2_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L2_out_2_x1 type = FIFO impl = SRL
    /* D_drain_IO_L2_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L2_out_3_x1;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L2_out_3_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L2_out_3_x1 type = FIFO impl = SRL
    /* D_drain_IO_L2_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L2_out_4_x1;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L2_out_4_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L2_out_4_x1 type = FIFO impl = SRL
    /* D_drain_IO_L2_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L2_out_5_x1;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L2_out_5_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L2_out_5_x1 type = FIFO impl = SRL
    /* D_drain_IO_L2_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L2_out_6_x1;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L2_out_6_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L2_out_6_x1 type = FIFO impl = SRL
    /* D_drain_IO_L2_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L2_out_7_x1;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L2_out_7_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L2_out_7_x1 type = FIFO impl = SRL
    /* D_drain_IO_L2_out fifo */ hls::stream<D_t4> fifo_D_drain_D_drain_IO_L2_out_8_x1;
#pragma HLS STREAM variable = fifo_D_drain_D_drain_IO_L2_out_8_x1 depth = 2
#pragma HLS BIND_STORAGE variable = fifo_D_drain_D_drain_IO_L2_out_8_x1 type = FIFO impl = SRL
    /* FIFO Declaration */

    /* Module Call */
    A_IO_L3_in_serialize_x1(

        /* array */ A,
        /* fifo */ fifo_A_A_IO_L3_in_serialize_x1);
    /* Module Call */

    /* Module Call */
    A_IO_L3_in_x1(

        /* fifo */ fifo_A_A_IO_L3_in_serialize_x1,
        /* fifo */ fifo_A_A_IO_L2_in_0_x1);
    /* Module Call */

    /* Module Call */
    A_IO_L2_in_0_x1(

        /* module id */ 0,
        /* fifo */ fifo_A_A_IO_L2_in_0_x1,
        /* fifo */ fifo_A_A_IO_L2_in_1_x1,
        /* fifo */ fifo_A_PE_0_0_x1);
    /* Module Call */

    /* Module Call */
    A_IO_L2_in_1_x1(

        /* module id */ 1,
        /* fifo */ fifo_A_A_IO_L2_in_1_x1,
        /* fifo */ fifo_A_A_IO_L2_in_2_x1,
        /* fifo */ fifo_A_PE_1_0_x1);
    /* Module Call */

    /* Module Call */
    A_IO_L2_in_2_x1(

        /* module id */ 2,
        /* fifo */ fifo_A_A_IO_L2_in_2_x1,
        /* fifo */ fifo_A_A_IO_L2_in_3_x1,
        /* fifo */ fifo_A_PE_2_0_x1);
    /* Module Call */

    /* Module Call */
    A_IO_L2_in_boundary_x1(

        /* module id */ 3,
        /* fifo */ fifo_A_A_IO_L2_in_3_x1,
        /* fifo */ fifo_A_PE_3_0_x1);
    /* Module Call */

    /* Module Call */
    B_IO_L3_in_serialize_x1(

        /* array */ B,
        /* fifo */ fifo_B_B_IO_L3_in_serialize_x1);
    /* Module Call */

    /* Module Call */
    B_IO_L3_in_x1(

        /* fifo */ fifo_B_B_IO_L3_in_serialize_x1,
        /* fifo */ fifo_B_B_IO_L2_in_0_x1);
    /* Module Call */

    /* Module Call */
    B_IO_L2_in_0_x1(

        /* module id */ 0,
        /* fifo */ fifo_B_B_IO_L2_in_0_x1,
        /* fifo */ fifo_B_B_IO_L2_in_1_x1,
        /* fifo */ fifo_B_PE_0_0_x1);
    /* Module Call */

    /* Module Call */
    B_IO_L2_in_1_x1(

        /* module id */ 1,
        /* fifo */ fifo_B_B_IO_L2_in_1_x1,
        /* fifo */ fifo_B_B_IO_L2_in_2_x1,
        /* fifo */ fifo_B_PE_0_1_x1);
    /* Module Call */

    /* Module Call */
    B_IO_L2_in_2_x1(

        /* module id */ 2,
        /* fifo */ fifo_B_B_IO_L2_in_2_x1,
        /* fifo */ fifo_B_B_IO_L2_in_3_x1,
        /* fifo */ fifo_B_PE_0_2_x1);
    /* Module Call */

    /* Module Call */
    B_IO_L2_in_3_x1(

        /* module id */ 3,
        /* fifo */ fifo_B_B_IO_L2_in_3_x1,
        /* fifo */ fifo_B_B_IO_L2_in_4_x1,
        /* fifo */ fifo_B_PE_0_3_x1);
    /* Module Call */

    /* Module Call */
    B_IO_L2_in_4_x1(

        /* module id */ 4,
        /* fifo */ fifo_B_B_IO_L2_in_4_x1,
        /* fifo */ fifo_B_B_IO_L2_in_5_x1,
        /* fifo */ fifo_B_PE_0_4_x1);
    /* Module Call */

    /* Module Call */
    B_IO_L2_in_5_x1(

        /* module id */ 5,
        /* fifo */ fifo_B_B_IO_L2_in_5_x1,
        /* fifo */ fifo_B_B_IO_L2_in_6_x1,
        /* fifo */ fifo_B_PE_0_5_x1);
    /* Module Call */

    /* Module Call */
    B_IO_L2_in_6_x1(

        /* module id */ 6,
        /* fifo */ fifo_B_B_IO_L2_in_6_x1,
        /* fifo */ fifo_B_B_IO_L2_in_7_x1,
        /* fifo */ fifo_B_PE_0_6_x1);
    /* Module Call */

    /* Module Call */
    B_IO_L2_in_boundary_x1(

        /* module id */ 7,
        /* fifo */ fifo_B_B_IO_L2_in_7_x1,
        /* fifo */ fifo_B_PE_0_7_x1);
    /* Module Call */

    /* Module Call */
    C_IO_L3_in_serialize_x1(

        /* array */ C,
        /* fifo */ fifo_C_C_IO_L3_in_serialize_x1);
    /* Module Call */

    /* Module Call */
    C_IO_L3_in_x1(

        /* fifo */ fifo_C_C_IO_L3_in_serialize_x1,
        /* fifo */ fifo_C_C_IO_L2_in_0_x1);
    /* Module Call */

    /* Module Call */
    C_IO_L2_in_0_x1(

        /* module id */ 0,
        /* fifo */ fifo_C_C_IO_L2_in_0_x1,
        /* fifo */ fifo_C_C_IO_L2_in_1_x1,
        /* fifo */ fifo_C_PE_0_0_x1);
    /* Module Call */

    /* Module Call */
    C_IO_L2_in_1_x1(

        /* module id */ 1,
        /* fifo */ fifo_C_C_IO_L2_in_1_x1,
        /* fifo */ fifo_C_C_IO_L2_in_2_x1,
        /* fifo */ fifo_C_PE_0_1_x1);
    /* Module Call */

    /* Module Call */
    C_IO_L2_in_2_x1(

        /* module id */ 2,
        /* fifo */ fifo_C_C_IO_L2_in_2_x1,
        /* fifo */ fifo_C_C_IO_L2_in_3_x1,
        /* fifo */ fifo_C_PE_0_2_x1);
    /* Module Call */

    /* Module Call */
    C_IO_L2_in_3_x1(

        /* module id */ 3,
        /* fifo */ fifo_C_C_IO_L2_in_3_x1,
        /* fifo */ fifo_C_C_IO_L2_in_4_x1,
        /* fifo */ fifo_C_PE_0_3_x1);
    /* Module Call */

    /* Module Call */
    C_IO_L2_in_4_x1(

        /* module id */ 4,
        /* fifo */ fifo_C_C_IO_L2_in_4_x1,
        /* fifo */ fifo_C_C_IO_L2_in_5_x1,
        /* fifo */ fifo_C_PE_0_4_x1);
    /* Module Call */

    /* Module Call */
    C_IO_L2_in_5_x1(

        /* module id */ 5,
        /* fifo */ fifo_C_C_IO_L2_in_5_x1,
        /* fifo */ fifo_C_C_IO_L2_in_6_x1,
        /* fifo */ fifo_C_PE_0_5_x1);
    /* Module Call */

    /* Module Call */
    C_IO_L2_in_6_x1(

        /* module id */ 6,
        /* fifo */ fifo_C_C_IO_L2_in_6_x1,
        /* fifo */ fifo_C_C_IO_L2_in_7_x1,
        /* fifo */ fifo_C_PE_0_6_x1);
    /* Module Call */

    /* Module Call */
    C_IO_L2_in_boundary_x1(

        /* module id */ 7,
        /* fifo */ fifo_C_C_IO_L2_in_7_x1,
        /* fifo */ fifo_C_PE_0_7_x1);
    /* Module Call */

    /* Module Call */
    PE_wrapper_0_0_x1(

        /* module id */ 0,
        /* module id */ 0,
        /* fifo */ fifo_A_PE_0_0_x1,
        /* fifo */ fifo_A_PE_0_1_x1,
        /* fifo */ fifo_B_PE_0_0_x1,
        /* fifo */ fifo_B_PE_1_0_x1,
        /* fifo */ fifo_C_PE_0_0_x1,
        /* fifo */ fifo_C_PE_1_0_x1,
        /* fifo */ fifo_D_drain_PE_0_0_x1);
    /* Module Call */

    /* Module Call */
    PE_wrapper_0_1_x1(

        /* module id */ 0,
        /* module id */ 1,
        /* fifo */ fifo_A_PE_0_1_x1,
        /* fifo */ fifo_A_PE_0_2_x1,
        /* fifo */ fifo_B_PE_0_1_x1,
        /* fifo */ fifo_B_PE_1_1_x1,
        /* fifo */ fifo_C_PE_0_1_x1,
        /* fifo */ fifo_C_PE_1_1_x1,
        /* fifo */ fifo_D_drain_PE_0_1_x1);
    /* Module Call */

    /* Module Call */
    PE_wrapper_0_2_x1(

        /* module id */ 0,
        /* module id */ 2,
        /* fifo */ fifo_A_PE_0_2_x1,
        /* fifo */ fifo_A_PE_0_3_x1,
        /* fifo */ fifo_B_PE_0_2_x1,
        /* fifo */ fifo_B_PE_1_2_x1,
        /* fifo */ fifo_C_PE_0_2_x1,
        /* fifo */ fifo_C_PE_1_2_x1,
        /* fifo */ fifo_D_drain_PE_0_2_x1);
    /* Module Call */

    /* Module Call */
    PE_wrapper_0_3_x1(

        /* module id */ 0,
        /* module id */ 3,
        /* fifo */ fifo_A_PE_0_3_x1,
        /* fifo */ fifo_A_PE_0_4_x1,
        /* fifo */ fifo_B_PE_0_3_x1,
        /* fifo */ fifo_B_PE_1_3_x1,
        /* fifo */ fifo_C_PE_0_3_x1,
        /* fifo */ fifo_C_PE_1_3_x1,
        /* fifo */ fifo_D_drain_PE_0_3_x1);
    /* Module Call */

    /* Module Call */
    PE_wrapper_0_4_x1(

        /* module id */ 0,
        /* module id */ 4,
        /* fifo */ fifo_A_PE_0_4_x1,
        /* fifo */ fifo_A_PE_0_5_x1,
        /* fifo */ fifo_B_PE_0_4_x1,
        /* fifo */ fifo_B_PE_1_4_x1,
        /* fifo */ fifo_C_PE_0_4_x1,
        /* fifo */ fifo_C_PE_1_4_x1,
        /* fifo */ fifo_D_drain_PE_0_4_x1);
    /* Module Call */

    /* Module Call */
    PE_wrapper_0_5_x1(

        /* module id */ 0,
        /* module id */ 5,
        /* fifo */ fifo_A_PE_0_5_x1,
        /* fifo */ fifo_A_PE_0_6_x1,
        /* fifo */ fifo_B_PE_0_5_x1,
        /* fifo */ fifo_B_PE_1_5_x1,
        /* fifo */ fifo_C_PE_0_5_x1,
        /* fifo */ fifo_C_PE_1_5_x1,
        /* fifo */ fifo_D_drain_PE_0_5_x1);
    /* Module Call */

    /* Module Call */
    PE_wrapper_0_6_x1(

        /* module id */ 0,
        /* module id */ 6,
        /* fifo */ fifo_A_PE_0_6_x1,
        /* fifo */ fifo_A_PE_0_7_x1,
        /* fifo */ fifo_B_PE_0_6_x1,
        /* fifo */ fifo_B_PE_1_6_x1,
        /* fifo */ fifo_C_PE_0_6_x1,
        /* fifo */ fifo_C_PE_1_6_x1,
        /* fifo */ fifo_D_drain_PE_0_6_x1);
    /* Module Call */

    /* Module Call */
    PE_wrapper_0_7_x1(

        /* module id */ 0,
        /* module id */ 7,
        /* fifo */ fifo_A_PE_0_7_x1,
        /* fifo */ fifo_A_PE_0_8_x1,
        /* fifo */ fifo_B_PE_0_7_x1,
        /* fifo */ fifo_B_PE_1_7_x1,
        /* fifo */ fifo_C_PE_0_7_x1,
        /* fifo */ fifo_C_PE_1_7_x1,
        /* fifo */ fifo_D_drain_PE_0_7_x1);
    /* Module Call */

    /* Module Call */
    PE_wrapper_1_0_x1(

        /* module id */ 1,
        /* module id */ 0,
        /* fifo */ fifo_A_PE_1_0_x1,
        /* fifo */ fifo_A_PE_1_1_x1,
        /* fifo */ fifo_B_PE_1_0_x1,
        /* fifo */ fifo_B_PE_2_0_x1,
        /* fifo */ fifo_C_PE_1_0_x1,
        /* fifo */ fifo_C_PE_2_0_x1,
        /* fifo */ fifo_D_drain_PE_1_0_x1);
    /* Module Call */

    /* Module Call */
    PE_wrapper_1_1_x1(

        /* module id */ 1,
        /* module id */ 1,
        /* fifo */ fifo_A_PE_1_1_x1,
        /* fifo */ fifo_A_PE_1_2_x1,
        /* fifo */ fifo_B_PE_1_1_x1,
        /* fifo */ fifo_B_PE_2_1_x1,
        /* fifo */ fifo_C_PE_1_1_x1,
        /* fifo */ fifo_C_PE_2_1_x1,
        /* fifo */ fifo_D_drain_PE_1_1_x1);
    /* Module Call */

    /* Module Call */
    PE_wrapper_1_2_x1(

        /* module id */ 1,
        /* module id */ 2,
        /* fifo */ fifo_A_PE_1_2_x1,
        /* fifo */ fifo_A_PE_1_3_x1,
        /* fifo */ fifo_B_PE_1_2_x1,
        /* fifo */ fifo_B_PE_2_2_x1,
        /* fifo */ fifo_C_PE_1_2_x1,
        /* fifo */ fifo_C_PE_2_2_x1,
        /* fifo */ fifo_D_drain_PE_1_2_x1);
    /* Module Call */

    /* Module Call */
    PE_wrapper_1_3_x1(

        /* module id */ 1,
        /* module id */ 3,
        /* fifo */ fifo_A_PE_1_3_x1,
        /* fifo */ fifo_A_PE_1_4_x1,
        /* fifo */ fifo_B_PE_1_3_x1,
        /* fifo */ fifo_B_PE_2_3_x1,
        /* fifo */ fifo_C_PE_1_3_x1,
        /* fifo */ fifo_C_PE_2_3_x1,
        /* fifo */ fifo_D_drain_PE_1_3_x1);
    /* Module Call */

    /* Module Call */
    PE_wrapper_1_4_x1(

        /* module id */ 1,
        /* module id */ 4,
        /* fifo */ fifo_A_PE_1_4_x1,
        /* fifo */ fifo_A_PE_1_5_x1,
        /* fifo */ fifo_B_PE_1_4_x1,
        /* fifo */ fifo_B_PE_2_4_x1,
        /* fifo */ fifo_C_PE_1_4_x1,
        /* fifo */ fifo_C_PE_2_4_x1,
        /* fifo */ fifo_D_drain_PE_1_4_x1);
    /* Module Call */

    /* Module Call */
    PE_wrapper_1_5_x1(

        /* module id */ 1,
        /* module id */ 5,
        /* fifo */ fifo_A_PE_1_5_x1,
        /* fifo */ fifo_A_PE_1_6_x1,
        /* fifo */ fifo_B_PE_1_5_x1,
        /* fifo */ fifo_B_PE_2_5_x1,
        /* fifo */ fifo_C_PE_1_5_x1,
        /* fifo */ fifo_C_PE_2_5_x1,
        /* fifo */ fifo_D_drain_PE_1_5_x1);
    /* Module Call */

    /* Module Call */
    PE_wrapper_1_6_x1(

        /* module id */ 1,
        /* module id */ 6,
        /* fifo */ fifo_A_PE_1_6_x1,
        /* fifo */ fifo_A_PE_1_7_x1,
        /* fifo */ fifo_B_PE_1_6_x1,
        /* fifo */ fifo_B_PE_2_6_x1,
        /* fifo */ fifo_C_PE_1_6_x1,
        /* fifo */ fifo_C_PE_2_6_x1,
        /* fifo */ fifo_D_drain_PE_1_6_x1);
    /* Module Call */

    /* Module Call */
    PE_wrapper_1_7_x1(

        /* module id */ 1,
        /* module id */ 7,
        /* fifo */ fifo_A_PE_1_7_x1,
        /* fifo */ fifo_A_PE_1_8_x1,
        /* fifo */ fifo_B_PE_1_7_x1,
        /* fifo */ fifo_B_PE_2_7_x1,
        /* fifo */ fifo_C_PE_1_7_x1,
        /* fifo */ fifo_C_PE_2_7_x1,
        /* fifo */ fifo_D_drain_PE_1_7_x1);
    /* Module Call */

    /* Module Call */
    PE_wrapper_2_0_x1(

        /* module id */ 2,
        /* module id */ 0,
        /* fifo */ fifo_A_PE_2_0_x1,
        /* fifo */ fifo_A_PE_2_1_x1,
        /* fifo */ fifo_B_PE_2_0_x1,
        /* fifo */ fifo_B_PE_3_0_x1,
        /* fifo */ fifo_C_PE_2_0_x1,
        /* fifo */ fifo_C_PE_3_0_x1,
        /* fifo */ fifo_D_drain_PE_2_0_x1);
    /* Module Call */

    /* Module Call */
    PE_wrapper_2_1_x1(

        /* module id */ 2,
        /* module id */ 1,
        /* fifo */ fifo_A_PE_2_1_x1,
        /* fifo */ fifo_A_PE_2_2_x1,
        /* fifo */ fifo_B_PE_2_1_x1,
        /* fifo */ fifo_B_PE_3_1_x1,
        /* fifo */ fifo_C_PE_2_1_x1,
        /* fifo */ fifo_C_PE_3_1_x1,
        /* fifo */ fifo_D_drain_PE_2_1_x1);
    /* Module Call */

    /* Module Call */
    PE_wrapper_2_2_x1(

        /* module id */ 2,
        /* module id */ 2,
        /* fifo */ fifo_A_PE_2_2_x1,
        /* fifo */ fifo_A_PE_2_3_x1,
        /* fifo */ fifo_B_PE_2_2_x1,
        /* fifo */ fifo_B_PE_3_2_x1,
        /* fifo */ fifo_C_PE_2_2_x1,
        /* fifo */ fifo_C_PE_3_2_x1,
        /* fifo */ fifo_D_drain_PE_2_2_x1);
    /* Module Call */

    /* Module Call */
    PE_wrapper_2_3_x1(

        /* module id */ 2,
        /* module id */ 3,
        /* fifo */ fifo_A_PE_2_3_x1,
        /* fifo */ fifo_A_PE_2_4_x1,
        /* fifo */ fifo_B_PE_2_3_x1,
        /* fifo */ fifo_B_PE_3_3_x1,
        /* fifo */ fifo_C_PE_2_3_x1,
        /* fifo */ fifo_C_PE_3_3_x1,
        /* fifo */ fifo_D_drain_PE_2_3_x1);
    /* Module Call */

    /* Module Call */
    PE_wrapper_2_4_x1(

        /* module id */ 2,
        /* module id */ 4,
        /* fifo */ fifo_A_PE_2_4_x1,
        /* fifo */ fifo_A_PE_2_5_x1,
        /* fifo */ fifo_B_PE_2_4_x1,
        /* fifo */ fifo_B_PE_3_4_x1,
        /* fifo */ fifo_C_PE_2_4_x1,
        /* fifo */ fifo_C_PE_3_4_x1,
        /* fifo */ fifo_D_drain_PE_2_4_x1);
    /* Module Call */

    /* Module Call */
    PE_wrapper_2_5_x1(

        /* module id */ 2,
        /* module id */ 5,
        /* fifo */ fifo_A_PE_2_5_x1,
        /* fifo */ fifo_A_PE_2_6_x1,
        /* fifo */ fifo_B_PE_2_5_x1,
        /* fifo */ fifo_B_PE_3_5_x1,
        /* fifo */ fifo_C_PE_2_5_x1,
        /* fifo */ fifo_C_PE_3_5_x1,
        /* fifo */ fifo_D_drain_PE_2_5_x1);
    /* Module Call */

    /* Module Call */
    PE_wrapper_2_6_x1(

        /* module id */ 2,
        /* module id */ 6,
        /* fifo */ fifo_A_PE_2_6_x1,
        /* fifo */ fifo_A_PE_2_7_x1,
        /* fifo */ fifo_B_PE_2_6_x1,
        /* fifo */ fifo_B_PE_3_6_x1,
        /* fifo */ fifo_C_PE_2_6_x1,
        /* fifo */ fifo_C_PE_3_6_x1,
        /* fifo */ fifo_D_drain_PE_2_6_x1);
    /* Module Call */

    /* Module Call */
    PE_wrapper_2_7_x1(

        /* module id */ 2,
        /* module id */ 7,
        /* fifo */ fifo_A_PE_2_7_x1,
        /* fifo */ fifo_A_PE_2_8_x1,
        /* fifo */ fifo_B_PE_2_7_x1,
        /* fifo */ fifo_B_PE_3_7_x1,
        /* fifo */ fifo_C_PE_2_7_x1,
        /* fifo */ fifo_C_PE_3_7_x1,
        /* fifo */ fifo_D_drain_PE_2_7_x1);
    /* Module Call */

    /* Module Call */
    PE_wrapper_3_0_x1(

        /* module id */ 3,
        /* module id */ 0,
        /* fifo */ fifo_A_PE_3_0_x1,
        /* fifo */ fifo_A_PE_3_1_x1,
        /* fifo */ fifo_B_PE_3_0_x1,
        /* fifo */ fifo_B_PE_4_0_x1,
        /* fifo */ fifo_C_PE_3_0_x1,
        /* fifo */ fifo_C_PE_4_0_x1,
        /* fifo */ fifo_D_drain_PE_3_0_x1);
    /* Module Call */

    /* Module Call */
    PE_wrapper_3_1_x1(

        /* module id */ 3,
        /* module id */ 1,
        /* fifo */ fifo_A_PE_3_1_x1,
        /* fifo */ fifo_A_PE_3_2_x1,
        /* fifo */ fifo_B_PE_3_1_x1,
        /* fifo */ fifo_B_PE_4_1_x1,
        /* fifo */ fifo_C_PE_3_1_x1,
        /* fifo */ fifo_C_PE_4_1_x1,
        /* fifo */ fifo_D_drain_PE_3_1_x1);
    /* Module Call */

    /* Module Call */
    PE_wrapper_3_2_x1(

        /* module id */ 3,
        /* module id */ 2,
        /* fifo */ fifo_A_PE_3_2_x1,
        /* fifo */ fifo_A_PE_3_3_x1,
        /* fifo */ fifo_B_PE_3_2_x1,
        /* fifo */ fifo_B_PE_4_2_x1,
        /* fifo */ fifo_C_PE_3_2_x1,
        /* fifo */ fifo_C_PE_4_2_x1,
        /* fifo */ fifo_D_drain_PE_3_2_x1);
    /* Module Call */

    /* Module Call */
    PE_wrapper_3_3_x1(

        /* module id */ 3,
        /* module id */ 3,
        /* fifo */ fifo_A_PE_3_3_x1,
        /* fifo */ fifo_A_PE_3_4_x1,
        /* fifo */ fifo_B_PE_3_3_x1,
        /* fifo */ fifo_B_PE_4_3_x1,
        /* fifo */ fifo_C_PE_3_3_x1,
        /* fifo */ fifo_C_PE_4_3_x1,
        /* fifo */ fifo_D_drain_PE_3_3_x1);
    /* Module Call */

    /* Module Call */
    PE_wrapper_3_4_x1(

        /* module id */ 3,
        /* module id */ 4,
        /* fifo */ fifo_A_PE_3_4_x1,
        /* fifo */ fifo_A_PE_3_5_x1,
        /* fifo */ fifo_B_PE_3_4_x1,
        /* fifo */ fifo_B_PE_4_4_x1,
        /* fifo */ fifo_C_PE_3_4_x1,
        /* fifo */ fifo_C_PE_4_4_x1,
        /* fifo */ fifo_D_drain_PE_3_4_x1);
    /* Module Call */

    /* Module Call */
    PE_wrapper_3_5_x1(

        /* module id */ 3,
        /* module id */ 5,
        /* fifo */ fifo_A_PE_3_5_x1,
        /* fifo */ fifo_A_PE_3_6_x1,
        /* fifo */ fifo_B_PE_3_5_x1,
        /* fifo */ fifo_B_PE_4_5_x1,
        /* fifo */ fifo_C_PE_3_5_x1,
        /* fifo */ fifo_C_PE_4_5_x1,
        /* fifo */ fifo_D_drain_PE_3_5_x1);
    /* Module Call */

    /* Module Call */
    PE_wrapper_3_6_x1(

        /* module id */ 3,
        /* module id */ 6,
        /* fifo */ fifo_A_PE_3_6_x1,
        /* fifo */ fifo_A_PE_3_7_x1,
        /* fifo */ fifo_B_PE_3_6_x1,
        /* fifo */ fifo_B_PE_4_6_x1,
        /* fifo */ fifo_C_PE_3_6_x1,
        /* fifo */ fifo_C_PE_4_6_x1,
        /* fifo */ fifo_D_drain_PE_3_6_x1);
    /* Module Call */

    /* Module Call */
    PE_wrapper_3_7_x1(

        /* module id */ 3,
        /* module id */ 7,
        /* fifo */ fifo_A_PE_3_7_x1,
        /* fifo */ fifo_A_PE_3_8_x1,
        /* fifo */ fifo_B_PE_3_7_x1,
        /* fifo */ fifo_B_PE_4_7_x1,
        /* fifo */ fifo_C_PE_3_7_x1,
        /* fifo */ fifo_C_PE_4_7_x1,
        /* fifo */ fifo_D_drain_PE_3_7_x1);
    /* Module Call */

    /* Module Call */
    A_PE_dummy_in_0_x1(

        /* module id */ 0,
        /* module id */ 7,
        /* fifo */ fifo_A_PE_0_8_x1);
    /* Module Call */

    /* Module Call */
    A_PE_dummy_in_1_x1(

        /* module id */ 1,
        /* module id */ 7,
        /* fifo */ fifo_A_PE_1_8_x1);
    /* Module Call */

    /* Module Call */
    A_PE_dummy_in_2_x1(

        /* module id */ 2,
        /* module id */ 7,
        /* fifo */ fifo_A_PE_2_8_x1);
    /* Module Call */

    /* Module Call */
    A_PE_dummy_in_3_x1(

        /* module id */ 3,
        /* module id */ 7,
        /* fifo */ fifo_A_PE_3_8_x1);
    /* Module Call */

    /* Module Call */
    B_PE_dummy_in_0_x1(

        /* module id */ 3,
        /* module id */ 0,
        /* fifo */ fifo_B_PE_4_0_x1);
    /* Module Call */

    /* Module Call */
    B_PE_dummy_in_1_x1(

        /* module id */ 3,
        /* module id */ 1,
        /* fifo */ fifo_B_PE_4_1_x1);
    /* Module Call */

    /* Module Call */
    B_PE_dummy_in_2_x1(

        /* module id */ 3,
        /* module id */ 2,
        /* fifo */ fifo_B_PE_4_2_x1);
    /* Module Call */

    /* Module Call */
    B_PE_dummy_in_3_x1(

        /* module id */ 3,
        /* module id */ 3,
        /* fifo */ fifo_B_PE_4_3_x1);
    /* Module Call */

    /* Module Call */
    B_PE_dummy_in_4_x1(

        /* module id */ 3,
        /* module id */ 4,
        /* fifo */ fifo_B_PE_4_4_x1);
    /* Module Call */

    /* Module Call */
    B_PE_dummy_in_5_x1(

        /* module id */ 3,
        /* module id */ 5,
        /* fifo */ fifo_B_PE_4_5_x1);
    /* Module Call */

    /* Module Call */
    B_PE_dummy_in_6_x1(

        /* module id */ 3,
        /* module id */ 6,
        /* fifo */ fifo_B_PE_4_6_x1);
    /* Module Call */

    /* Module Call */
    B_PE_dummy_in_7_x1(

        /* module id */ 3,
        /* module id */ 7,
        /* fifo */ fifo_B_PE_4_7_x1);
    /* Module Call */

    /* Module Call */
    C_PE_dummy_in_0_x1(

        /* module id */ 3,
        /* module id */ 0,
        /* fifo */ fifo_C_PE_4_0_x1);
    /* Module Call */

    /* Module Call */
    C_PE_dummy_in_1_x1(

        /* module id */ 3,
        /* module id */ 1,
        /* fifo */ fifo_C_PE_4_1_x1);
    /* Module Call */

    /* Module Call */
    C_PE_dummy_in_2_x1(

        /* module id */ 3,
        /* module id */ 2,
        /* fifo */ fifo_C_PE_4_2_x1);
    /* Module Call */

    /* Module Call */
    C_PE_dummy_in_3_x1(

        /* module id */ 3,
        /* module id */ 3,
        /* fifo */ fifo_C_PE_4_3_x1);
    /* Module Call */

    /* Module Call */
    C_PE_dummy_in_4_x1(

        /* module id */ 3,
        /* module id */ 4,
        /* fifo */ fifo_C_PE_4_4_x1);
    /* Module Call */

    /* Module Call */
    C_PE_dummy_in_5_x1(

        /* module id */ 3,
        /* module id */ 5,
        /* fifo */ fifo_C_PE_4_5_x1);
    /* Module Call */

    /* Module Call */
    C_PE_dummy_in_6_x1(

        /* module id */ 3,
        /* module id */ 6,
        /* fifo */ fifo_C_PE_4_6_x1);
    /* Module Call */

    /* Module Call */
    C_PE_dummy_in_7_x1(

        /* module id */ 3,
        /* module id */ 7,
        /* fifo */ fifo_C_PE_4_7_x1);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L1_out_boundary_wrapper_0_x1(

        /* module id */ 0,
        /* module id */ 3,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_0_3_x1,
        /* fifo */ fifo_D_drain_PE_3_0_x1);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L1_out_wrapper_0_2_x1(

        /* module id */ 0,
        /* module id */ 2,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_0_3_x1,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_0_2_x1,
        /* fifo */ fifo_D_drain_PE_2_0_x1);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L1_out_wrapper_0_1_x1(

        /* module id */ 0,
        /* module id */ 1,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_0_2_x1,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_0_1_x1,
        /* fifo */ fifo_D_drain_PE_1_0_x1);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L1_out_wrapper_0_0_x1(

        /* module id */ 0,
        /* module id */ 0,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_0_1_x1,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_0_0_x1,
        /* fifo */ fifo_D_drain_PE_0_0_x1);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L1_out_boundary_wrapper_1_x1(

        /* module id */ 1,
        /* module id */ 3,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_1_3_x1,
        /* fifo */ fifo_D_drain_PE_3_1_x1);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L1_out_wrapper_1_2_x1(

        /* module id */ 1,
        /* module id */ 2,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_1_3_x1,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_1_2_x1,
        /* fifo */ fifo_D_drain_PE_2_1_x1);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L1_out_wrapper_1_1_x1(

        /* module id */ 1,
        /* module id */ 1,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_1_2_x1,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_1_1_x1,
        /* fifo */ fifo_D_drain_PE_1_1_x1);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L1_out_wrapper_1_0_x1(

        /* module id */ 1,
        /* module id */ 0,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_1_1_x1,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_1_0_x1,
        /* fifo */ fifo_D_drain_PE_0_1_x1);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L1_out_boundary_wrapper_2_x1(

        /* module id */ 2,
        /* module id */ 3,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_2_3_x1,
        /* fifo */ fifo_D_drain_PE_3_2_x1);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L1_out_wrapper_2_2_x1(

        /* module id */ 2,
        /* module id */ 2,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_2_3_x1,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_2_2_x1,
        /* fifo */ fifo_D_drain_PE_2_2_x1);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L1_out_wrapper_2_1_x1(

        /* module id */ 2,
        /* module id */ 1,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_2_2_x1,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_2_1_x1,
        /* fifo */ fifo_D_drain_PE_1_2_x1);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L1_out_wrapper_2_0_x1(

        /* module id */ 2,
        /* module id */ 0,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_2_1_x1,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_2_0_x1,
        /* fifo */ fifo_D_drain_PE_0_2_x1);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L1_out_boundary_wrapper_3_x1(

        /* module id */ 3,
        /* module id */ 3,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_3_3_x1,
        /* fifo */ fifo_D_drain_PE_3_3_x1);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L1_out_wrapper_3_2_x1(

        /* module id */ 3,
        /* module id */ 2,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_3_3_x1,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_3_2_x1,
        /* fifo */ fifo_D_drain_PE_2_3_x1);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L1_out_wrapper_3_1_x1(

        /* module id */ 3,
        /* module id */ 1,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_3_2_x1,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_3_1_x1,
        /* fifo */ fifo_D_drain_PE_1_3_x1);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L1_out_wrapper_3_0_x1(

        /* module id */ 3,
        /* module id */ 0,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_3_1_x1,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_3_0_x1,
        /* fifo */ fifo_D_drain_PE_0_3_x1);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L1_out_boundary_wrapper_4_x1(

        /* module id */ 4,
        /* module id */ 3,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_4_3_x1,
        /* fifo */ fifo_D_drain_PE_3_4_x1);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L1_out_wrapper_4_2_x1(

        /* module id */ 4,
        /* module id */ 2,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_4_3_x1,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_4_2_x1,
        /* fifo */ fifo_D_drain_PE_2_4_x1);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L1_out_wrapper_4_1_x1(

        /* module id */ 4,
        /* module id */ 1,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_4_2_x1,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_4_1_x1,
        /* fifo */ fifo_D_drain_PE_1_4_x1);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L1_out_wrapper_4_0_x1(

        /* module id */ 4,
        /* module id */ 0,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_4_1_x1,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_4_0_x1,
        /* fifo */ fifo_D_drain_PE_0_4_x1);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L1_out_boundary_wrapper_5_x1(

        /* module id */ 5,
        /* module id */ 3,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_5_3_x1,
        /* fifo */ fifo_D_drain_PE_3_5_x1);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L1_out_wrapper_5_2_x1(

        /* module id */ 5,
        /* module id */ 2,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_5_3_x1,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_5_2_x1,
        /* fifo */ fifo_D_drain_PE_2_5_x1);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L1_out_wrapper_5_1_x1(

        /* module id */ 5,
        /* module id */ 1,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_5_2_x1,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_5_1_x1,
        /* fifo */ fifo_D_drain_PE_1_5_x1);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L1_out_wrapper_5_0_x1(

        /* module id */ 5,
        /* module id */ 0,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_5_1_x1,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_5_0_x1,
        /* fifo */ fifo_D_drain_PE_0_5_x1);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L1_out_boundary_wrapper_6_x1(

        /* module id */ 6,
        /* module id */ 3,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_6_3_x1,
        /* fifo */ fifo_D_drain_PE_3_6_x1);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L1_out_wrapper_6_2_x1(

        /* module id */ 6,
        /* module id */ 2,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_6_3_x1,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_6_2_x1,
        /* fifo */ fifo_D_drain_PE_2_6_x1);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L1_out_wrapper_6_1_x1(

        /* module id */ 6,
        /* module id */ 1,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_6_2_x1,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_6_1_x1,
        /* fifo */ fifo_D_drain_PE_1_6_x1);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L1_out_wrapper_6_0_x1(

        /* module id */ 6,
        /* module id */ 0,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_6_1_x1,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_6_0_x1,
        /* fifo */ fifo_D_drain_PE_0_6_x1);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L1_out_boundary_wrapper_7_x1(

        /* module id */ 7,
        /* module id */ 3,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_7_3_x1,
        /* fifo */ fifo_D_drain_PE_3_7_x1);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L1_out_wrapper_7_2_x1(

        /* module id */ 7,
        /* module id */ 2,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_7_3_x1,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_7_2_x1,
        /* fifo */ fifo_D_drain_PE_2_7_x1);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L1_out_wrapper_7_1_x1(

        /* module id */ 7,
        /* module id */ 1,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_7_2_x1,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_7_1_x1,
        /* fifo */ fifo_D_drain_PE_1_7_x1);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L1_out_wrapper_7_0_x1(

        /* module id */ 7,
        /* module id */ 0,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_7_1_x1,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_7_0_x1,
        /* fifo */ fifo_D_drain_PE_0_7_x1);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L2_out_boundary_x1(

        /* module id */ 7,
        /* fifo */ fifo_D_drain_D_drain_IO_L2_out_7_x1,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_7_0_x1);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L2_out_6_x1(

        /* module id */ 6,
        /* fifo */ fifo_D_drain_D_drain_IO_L2_out_7_x1,
        /* fifo */ fifo_D_drain_D_drain_IO_L2_out_6_x1,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_6_0_x1);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L2_out_5_x1(

        /* module id */ 5,
        /* fifo */ fifo_D_drain_D_drain_IO_L2_out_6_x1,
        /* fifo */ fifo_D_drain_D_drain_IO_L2_out_5_x1,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_5_0_x1);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L2_out_4_x1(

        /* module id */ 4,
        /* fifo */ fifo_D_drain_D_drain_IO_L2_out_5_x1,
        /* fifo */ fifo_D_drain_D_drain_IO_L2_out_4_x1,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_4_0_x1);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L2_out_3_x1(

        /* module id */ 3,
        /* fifo */ fifo_D_drain_D_drain_IO_L2_out_4_x1,
        /* fifo */ fifo_D_drain_D_drain_IO_L2_out_3_x1,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_3_0_x1);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L2_out_2_x1(

        /* module id */ 2,
        /* fifo */ fifo_D_drain_D_drain_IO_L2_out_3_x1,
        /* fifo */ fifo_D_drain_D_drain_IO_L2_out_2_x1,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_2_0_x1);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L2_out_1_x1(

        /* module id */ 1,
        /* fifo */ fifo_D_drain_D_drain_IO_L2_out_2_x1,
        /* fifo */ fifo_D_drain_D_drain_IO_L2_out_1_x1,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_1_0_x1);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L2_out_0_x1(

        /* module id */ 0,
        /* fifo */ fifo_D_drain_D_drain_IO_L2_out_1_x1,
        /* fifo */ fifo_D_drain_D_drain_IO_L2_out_0_x1,
        /* fifo */ fifo_D_drain_D_drain_IO_L1_out_0_0_x1);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L3_out_x1(

        /* fifo */ fifo_D_drain_D_drain_IO_L3_out_serialize_x1,
        /* fifo */ fifo_D_drain_D_drain_IO_L2_out_0_x1);
    /* Module Call */

    /* Module Call */
    D_drain_IO_L3_out_serialize_x1(

        /* array */ D,
        /* fifo */ fifo_D_drain_D_drain_IO_L3_out_serialize_x1);
    /* Module Call */
}

extern "C" {
void top(A_t16 *A, B_t16 *B, C_t16 *C, D_t16 *D) {
#pragma HLS INTERFACE m_axi port = A offset = slave bundle = gmem_A
#pragma HLS INTERFACE m_axi port = B offset = slave bundle = gmem_B
#pragma HLS INTERFACE m_axi port = C offset = slave bundle = gmem_C
#pragma HLS INTERFACE m_axi port = D offset = slave bundle = gmem_D
#pragma HLS INTERFACE s_axilite port = A bundle = control
#pragma HLS INTERFACE s_axilite port = B bundle = control
#pragma HLS INTERFACE s_axilite port = C bundle = control
#pragma HLS INTERFACE s_axilite port = D bundle = control
#pragma HLS INTERFACE s_axilite port = return bundle = control

    ap_uint<512> temp_C1[4096], temp_D1[4096];
    ap_uint<512> temp_C2[4096], temp_D2[4096];
    kernel0_x0(A, B, temp_C1, temp_D1);
    nondf_kernel_cov_x0(1024, temp_C1, temp_C2);
    nondf_kernel_cov_x1(1024, temp_D1, temp_D2);
    kernel0_x1(temp_C2, temp_D2, C, D);
}
}
