-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_nondf_kernel_2mm is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    xout_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    xout_ce0 : OUT STD_LOGIC;
    xout_q0 : IN STD_LOGIC_VECTOR (511 downto 0);
    xin_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    xin_ce0 : OUT STD_LOGIC;
    xin_we0 : OUT STD_LOGIC;
    xin_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of top_nondf_kernel_2mm is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (25 downto 0) := "00000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (25 downto 0) := "00000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (25 downto 0) := "00000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (25 downto 0) := "00000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (25 downto 0) := "00000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (25 downto 0) := "00000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (25 downto 0) := "00001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (25 downto 0) := "00010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (25 downto 0) := "00100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (25 downto 0) := "01000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (25 downto 0) := "10000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal add_ln27_fu_346_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln27_reg_678 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_cast_fu_356_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_cast_reg_683 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln28_fu_370_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln28_reg_691 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_V_addr_reg_696 : STD_LOGIC_VECTOR (9 downto 0);
    signal A_V_addr_reg_701 : STD_LOGIC_VECTOR (9 downto 0);
    signal B_V_addr_reg_706 : STD_LOGIC_VECTOR (9 downto 0);
    signal C_V_addr_reg_711 : STD_LOGIC_VECTOR (9 downto 0);
    signal D_input_V_addr_reg_716 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln28_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln38_fu_408_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln38_reg_729 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_3_cast_fu_418_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_3_cast_reg_734 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln39_fu_432_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln39_reg_743 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln41_fu_438_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln41_reg_748 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_V_addr_1_reg_753 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln42_fu_458_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln42_reg_761 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal A_V_q0 : STD_LOGIC_VECTOR (511 downto 0);
    signal A_V_load_reg_779 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal B_V_q0 : STD_LOGIC_VECTOR (511 downto 0);
    signal B_V_load_reg_784 : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_fu_511_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal mul_ln691_reg_789 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_fu_515_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal add_ln45_fu_520_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln45_reg_799 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal tmp_4_cast_fu_530_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_cast_reg_804 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln46_fu_544_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln46_reg_813 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal zext_ln215_fu_550_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln215_reg_818 : STD_LOGIC_VECTOR (9 downto 0);
    signal D_output_V_addr_1_reg_828 : STD_LOGIC_VECTOR (9 downto 0);
    signal D_input_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal add_ln49_fu_571_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln49_reg_841 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal tmp_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_load_reg_859 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal C_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_V_load_reg_864 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_619_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln50_reg_869 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal sum_2_fu_623_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal add_ln55_fu_628_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln55_reg_879 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal tmp_5_cast_fu_638_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_cast_reg_884 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln56_fu_652_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln56_reg_892 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal zext_ln57_1_fu_667_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln57_1_reg_897 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_V_ce0 : STD_LOGIC;
    signal tmp_V_we0 : STD_LOGIC;
    signal tmp_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal A_V_ce0 : STD_LOGIC;
    signal A_V_we0 : STD_LOGIC;
    signal B_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal B_V_ce0 : STD_LOGIC;
    signal B_V_we0 : STD_LOGIC;
    signal C_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal C_V_ce0 : STD_LOGIC;
    signal C_V_we0 : STD_LOGIC;
    signal D_input_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal D_input_V_ce0 : STD_LOGIC;
    signal D_input_V_we0 : STD_LOGIC;
    signal D_output_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal D_output_V_ce0 : STD_LOGIC;
    signal D_output_V_we0 : STD_LOGIC;
    signal D_output_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_213 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_reg_224 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln27_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_reg_235 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln39_fu_452_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_reg_246 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln42_fu_500_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_fu_426_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_reg_257 : STD_LOGIC_VECTOR (5 downto 0);
    signal conv3_i20_reg_268 : STD_LOGIC_VECTOR (511 downto 0);
    signal i_2_reg_280 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln46_fu_565_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_2_reg_291 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln49_fu_613_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_fu_538_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_1_reg_302 : STD_LOGIC_VECTOR (5 downto 0);
    signal sum_1_reg_313 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_reg_324 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln56_fu_672_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_3_reg_335 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal icmp_ln55_fu_646_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln29_1_fu_385_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln41_1_fu_447_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln215_3_fu_473_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln215_4_fu_495_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln215_1_fu_559_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln215_6_fu_586_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln215_7_fu_608_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_fu_401_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln42_fu_506_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln29_fu_352_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln29_fu_376_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln29_fu_380_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln41_fu_414_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln41_fu_442_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln215_2_fu_464_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln215_1_fu_468_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln215_1_fu_478_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_6_cast_fu_482_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln215_2_fu_490_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal trunc_ln215_fu_526_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln215_fu_554_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln215_5_fu_577_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln215_3_fu_581_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln215_2_fu_591_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_9_cast_fu_595_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln215_4_fu_603_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal trunc_ln57_fu_634_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln57_fu_658_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln57_fu_662_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component top_mul_512s_512s_512_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (511 downto 0);
        din1 : IN STD_LOGIC_VECTOR (511 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (511 downto 0) );
    end component;


    component top_add_512ns_512ns_512_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (511 downto 0);
        din1 : IN STD_LOGIC_VECTOR (511 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (511 downto 0) );
    end component;


    component top_mul_32s_32s_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_nondf_kernel_2mm_tmp_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_nondf_kernel_2mm_A_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (511 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (511 downto 0) );
    end component;



begin
    tmp_V_U : component top_nondf_kernel_2mm_tmp_V
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => tmp_V_address0,
        ce0 => tmp_V_ce0,
        we0 => tmp_V_we0,
        d0 => tmp_V_d0,
        q0 => tmp_V_q0);

    A_V_U : component top_nondf_kernel_2mm_A_V
    generic map (
        DataWidth => 512,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_V_address0,
        ce0 => A_V_ce0,
        we0 => A_V_we0,
        d0 => xout_q0,
        q0 => A_V_q0);

    B_V_U : component top_nondf_kernel_2mm_A_V
    generic map (
        DataWidth => 512,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => B_V_address0,
        ce0 => B_V_ce0,
        we0 => B_V_we0,
        d0 => xout_q0,
        q0 => B_V_q0);

    C_V_U : component top_nondf_kernel_2mm_tmp_V
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => C_V_address0,
        ce0 => C_V_ce0,
        we0 => C_V_we0,
        d0 => empty_fu_401_p1,
        q0 => C_V_q0);

    D_input_V_U : component top_nondf_kernel_2mm_tmp_V
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => D_input_V_address0,
        ce0 => D_input_V_ce0,
        we0 => D_input_V_we0,
        d0 => empty_fu_401_p1,
        q0 => D_input_V_q0);

    D_output_V_U : component top_nondf_kernel_2mm_tmp_V
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => D_output_V_address0,
        ce0 => D_output_V_ce0,
        we0 => D_output_V_we0,
        d0 => sum_1_reg_313,
        q0 => D_output_V_q0);

    mul_512s_512s_512_5_1_U486 : component top_mul_512s_512s_512_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 512,
        din1_WIDTH => 512,
        dout_WIDTH => 512)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_V_load_reg_779,
        din1 => B_V_load_reg_784,
        ce => ap_const_logic_1,
        dout => grp_fu_511_p2);

    add_512ns_512ns_512_2_1_U487 : component top_add_512ns_512ns_512_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 512,
        din1_WIDTH => 512,
        dout_WIDTH => 512)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul_ln691_reg_789,
        din1 => conv3_i20_reg_268,
        ce => ap_const_logic_1,
        dout => grp_fu_515_p2);

    mul_32s_32s_32_2_1_U488 : component top_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => C_V_load_reg_864,
        din1 => tmp_V_load_reg_859,
        ce => ap_const_logic_1,
        dout => grp_fu_619_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    conv3_i20_reg_268_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln39_fu_452_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                conv3_i20_reg_268 <= ap_const_lv512_lc_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                conv3_i20_reg_268 <= grp_fu_515_p2;
            end if; 
        end if;
    end process;

    i_1_reg_235_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln27_fu_364_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_1_reg_235 <= ap_const_lv6_0;
            elsif (((icmp_ln39_fu_452_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                i_1_reg_235 <= add_ln38_reg_729;
            end if; 
        end if;
    end process;

    i_2_reg_280_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln38_fu_426_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i_2_reg_280 <= ap_const_lv6_0;
            elsif (((icmp_ln46_fu_565_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                i_2_reg_280 <= add_ln45_reg_799;
            end if; 
        end if;
    end process;

    i_3_reg_324_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln45_fu_538_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                i_3_reg_324 <= ap_const_lv6_0;
            elsif (((icmp_ln56_fu_672_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
                i_3_reg_324 <= add_ln55_reg_879;
            end if; 
        end if;
    end process;

    i_reg_213_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_213 <= ap_const_lv6_0;
            elsif (((icmp_ln28_fu_395_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_reg_213 <= add_ln27_reg_678;
            end if; 
        end if;
    end process;

    j_1_reg_246_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln38_fu_426_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                j_1_reg_246 <= ap_const_lv6_0;
            elsif (((icmp_ln42_fu_500_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                j_1_reg_246 <= add_ln39_reg_743;
            end if; 
        end if;
    end process;

    j_2_reg_291_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln45_fu_538_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                j_2_reg_291 <= ap_const_lv6_0;
            elsif (((icmp_ln49_fu_613_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                j_2_reg_291 <= add_ln46_reg_813;
            end if; 
        end if;
    end process;

    j_3_reg_335_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln55_fu_646_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                j_3_reg_335 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                j_3_reg_335 <= add_ln56_reg_892;
            end if; 
        end if;
    end process;

    j_reg_224_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln27_fu_364_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_224 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_reg_224 <= add_ln28_reg_691;
            end if; 
        end if;
    end process;

    k_1_reg_302_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                k_1_reg_302 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                k_1_reg_302 <= add_ln49_reg_841;
            end if; 
        end if;
    end process;

    k_reg_257_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln39_fu_452_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                k_reg_257 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                k_reg_257 <= add_ln42_reg_761;
            end if; 
        end if;
    end process;

    sum_1_reg_313_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                sum_1_reg_313 <= D_input_V_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                sum_1_reg_313 <= sum_2_fu_623_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                A_V_addr_reg_701 <= zext_ln29_1_fu_385_p1(10 - 1 downto 0);
                B_V_addr_reg_706 <= zext_ln29_1_fu_385_p1(10 - 1 downto 0);
                C_V_addr_reg_711 <= zext_ln29_1_fu_385_p1(10 - 1 downto 0);
                D_input_V_addr_reg_716 <= zext_ln29_1_fu_385_p1(10 - 1 downto 0);
                add_ln28_reg_691 <= add_ln28_fu_370_p2;
                tmp_V_addr_reg_696 <= zext_ln29_1_fu_385_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                A_V_load_reg_779 <= A_V_q0;
                B_V_load_reg_784 <= B_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                C_V_load_reg_864 <= C_V_q0;
                tmp_V_load_reg_859 <= tmp_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                D_output_V_addr_1_reg_828 <= zext_ln215_1_fu_559_p1(10 - 1 downto 0);
                add_ln46_reg_813 <= add_ln46_fu_544_p2;
                    zext_ln215_reg_818(5 downto 0) <= zext_ln215_fu_550_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln27_reg_678 <= add_ln27_fu_346_p2;
                    tmp_cast_reg_683(9 downto 5) <= tmp_cast_fu_356_p3(9 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln38_reg_729 <= add_ln38_fu_408_p2;
                    tmp_3_cast_reg_734(9 downto 5) <= tmp_3_cast_fu_418_p3(9 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add_ln39_reg_743 <= add_ln39_fu_432_p2;
                tmp_V_addr_1_reg_753 <= zext_ln41_1_fu_447_p1(10 - 1 downto 0);
                    zext_ln41_reg_748(5 downto 0) <= zext_ln41_fu_438_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                add_ln42_reg_761 <= add_ln42_fu_458_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                add_ln45_reg_799 <= add_ln45_fu_520_p2;
                    tmp_4_cast_reg_804(9 downto 5) <= tmp_4_cast_fu_530_p3(9 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                add_ln49_reg_841 <= add_ln49_fu_571_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                add_ln55_reg_879 <= add_ln55_fu_628_p2;
                    tmp_5_cast_reg_884(9 downto 5) <= tmp_5_cast_fu_638_p3(9 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                add_ln56_reg_892 <= add_ln56_fu_652_p2;
                    zext_ln57_1_reg_897(9 downto 0) <= zext_ln57_1_fu_667_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                mul_ln50_reg_869 <= grp_fu_619_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                mul_ln691_reg_789 <= grp_fu_511_p2;
            end if;
        end if;
    end process;
    tmp_cast_reg_683(4 downto 0) <= "00000";
    tmp_3_cast_reg_734(4 downto 0) <= "00000";
    zext_ln41_reg_748(9 downto 6) <= "0000";
    tmp_4_cast_reg_804(4 downto 0) <= "00000";
    zext_ln215_reg_818(9 downto 6) <= "0000";
    tmp_5_cast_reg_884(4 downto 0) <= "00000";
    zext_ln57_1_reg_897(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln28_fu_395_p2, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state24, ap_CS_fsm_state25, icmp_ln27_fu_364_p2, icmp_ln39_fu_452_p2, icmp_ln42_fu_500_p2, icmp_ln38_fu_426_p2, icmp_ln46_fu_565_p2, icmp_ln49_fu_613_p2, icmp_ln45_fu_538_p2, icmp_ln56_fu_672_p2, icmp_ln55_fu_646_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln27_fu_364_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln28_fu_395_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln38_fu_426_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln39_fu_452_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln42_fu_500_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state16 => 
                if (((icmp_ln45_fu_538_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                if (((icmp_ln46_fu_565_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((icmp_ln49_fu_613_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state24 => 
                if (((icmp_ln55_fu_646_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state25 => 
                if (((icmp_ln56_fu_672_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    A_V_address0_assign_proc : process(A_V_addr_reg_701, ap_CS_fsm_state7, ap_CS_fsm_state4, zext_ln215_3_fu_473_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            A_V_address0 <= zext_ln215_3_fu_473_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_V_address0 <= A_V_addr_reg_701;
        else 
            A_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    A_V_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            A_V_ce0 <= ap_const_logic_1;
        else 
            A_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_V_we0 <= ap_const_logic_1;
        else 
            A_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    B_V_address0_assign_proc : process(B_V_addr_reg_706, ap_CS_fsm_state7, ap_CS_fsm_state4, zext_ln215_4_fu_495_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            B_V_address0 <= zext_ln215_4_fu_495_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            B_V_address0 <= B_V_addr_reg_706;
        else 
            B_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    B_V_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            B_V_ce0 <= ap_const_logic_1;
        else 
            B_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_V_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            B_V_we0 <= ap_const_logic_1;
        else 
            B_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    C_V_address0_assign_proc : process(C_V_addr_reg_711, ap_CS_fsm_state19, ap_CS_fsm_state4, zext_ln215_7_fu_608_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            C_V_address0 <= zext_ln215_7_fu_608_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            C_V_address0 <= C_V_addr_reg_711;
        else 
            C_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    C_V_ce0_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            C_V_ce0 <= ap_const_logic_1;
        else 
            C_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    C_V_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            C_V_we0 <= ap_const_logic_1;
        else 
            C_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    D_input_V_address0_assign_proc : process(D_input_V_addr_reg_716, ap_CS_fsm_state17, ap_CS_fsm_state4, zext_ln215_1_fu_559_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            D_input_V_address0 <= zext_ln215_1_fu_559_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            D_input_V_address0 <= D_input_V_addr_reg_716;
        else 
            D_input_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    D_input_V_ce0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            D_input_V_ce0 <= ap_const_logic_1;
        else 
            D_input_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    D_input_V_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            D_input_V_we0 <= ap_const_logic_1;
        else 
            D_input_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    D_output_V_address0_assign_proc : process(D_output_V_addr_1_reg_828, ap_CS_fsm_state19, ap_CS_fsm_state25, zext_ln57_1_fu_667_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            D_output_V_address0 <= zext_ln57_1_fu_667_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            D_output_V_address0 <= D_output_V_addr_1_reg_828;
        else 
            D_output_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    D_output_V_ce0_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            D_output_V_ce0 <= ap_const_logic_1;
        else 
            D_output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    D_output_V_we0_assign_proc : process(ap_CS_fsm_state19, icmp_ln49_fu_613_p2)
    begin
        if (((icmp_ln49_fu_613_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            D_output_V_we0 <= ap_const_logic_1;
        else 
            D_output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln215_1_fu_468_p2 <= std_logic_vector(unsigned(tmp_3_cast_reg_734) + unsigned(zext_ln215_2_fu_464_p1));
    add_ln215_2_fu_490_p2 <= std_logic_vector(unsigned(tmp_6_cast_fu_482_p3) + unsigned(zext_ln41_reg_748));
    add_ln215_3_fu_581_p2 <= std_logic_vector(unsigned(tmp_4_cast_reg_804) + unsigned(zext_ln215_5_fu_577_p1));
    add_ln215_4_fu_603_p2 <= std_logic_vector(unsigned(tmp_9_cast_fu_595_p3) + unsigned(zext_ln215_reg_818));
    add_ln215_fu_554_p2 <= std_logic_vector(unsigned(tmp_4_cast_reg_804) + unsigned(zext_ln215_fu_550_p1));
    add_ln27_fu_346_p2 <= std_logic_vector(unsigned(i_reg_213) + unsigned(ap_const_lv6_1));
    add_ln28_fu_370_p2 <= std_logic_vector(unsigned(j_reg_224) + unsigned(ap_const_lv6_1));
    add_ln29_fu_380_p2 <= std_logic_vector(unsigned(tmp_cast_reg_683) + unsigned(zext_ln29_fu_376_p1));
    add_ln38_fu_408_p2 <= std_logic_vector(unsigned(i_1_reg_235) + unsigned(ap_const_lv6_1));
    add_ln39_fu_432_p2 <= std_logic_vector(unsigned(j_1_reg_246) + unsigned(ap_const_lv6_1));
    add_ln41_fu_442_p2 <= std_logic_vector(unsigned(tmp_3_cast_reg_734) + unsigned(zext_ln41_fu_438_p1));
    add_ln42_fu_458_p2 <= std_logic_vector(unsigned(k_reg_257) + unsigned(ap_const_lv6_1));
    add_ln45_fu_520_p2 <= std_logic_vector(unsigned(i_2_reg_280) + unsigned(ap_const_lv6_1));
    add_ln46_fu_544_p2 <= std_logic_vector(unsigned(j_2_reg_291) + unsigned(ap_const_lv6_1));
    add_ln49_fu_571_p2 <= std_logic_vector(unsigned(k_1_reg_302) + unsigned(ap_const_lv6_1));
    add_ln55_fu_628_p2 <= std_logic_vector(unsigned(i_3_reg_324) + unsigned(ap_const_lv6_1));
    add_ln56_fu_652_p2 <= std_logic_vector(unsigned(j_3_reg_335) + unsigned(ap_const_lv6_1));
    add_ln57_fu_662_p2 <= std_logic_vector(unsigned(tmp_5_cast_reg_884) + unsigned(zext_ln57_fu_658_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state24, icmp_ln55_fu_646_p2)
    begin
        if ((((icmp_ln55_fu_646_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state24, icmp_ln55_fu_646_p2)
    begin
        if (((icmp_ln55_fu_646_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_401_p1 <= xout_q0(32 - 1 downto 0);
    icmp_ln27_fu_364_p2 <= "1" when (i_reg_213 = ap_const_lv6_20) else "0";
    icmp_ln28_fu_395_p2 <= "1" when (j_reg_224 = ap_const_lv6_20) else "0";
    icmp_ln38_fu_426_p2 <= "1" when (i_1_reg_235 = ap_const_lv6_20) else "0";
    icmp_ln39_fu_452_p2 <= "1" when (j_1_reg_246 = ap_const_lv6_20) else "0";
    icmp_ln42_fu_500_p2 <= "1" when (k_reg_257 = ap_const_lv6_20) else "0";
    icmp_ln45_fu_538_p2 <= "1" when (i_2_reg_280 = ap_const_lv6_20) else "0";
    icmp_ln46_fu_565_p2 <= "1" when (j_2_reg_291 = ap_const_lv6_20) else "0";
    icmp_ln49_fu_613_p2 <= "1" when (k_1_reg_302 = ap_const_lv6_20) else "0";
    icmp_ln55_fu_646_p2 <= "1" when (i_3_reg_324 = ap_const_lv6_20) else "0";
    icmp_ln56_fu_672_p2 <= "1" when (j_3_reg_335 = ap_const_lv6_20) else "0";
    sum_2_fu_623_p2 <= std_logic_vector(unsigned(mul_ln50_reg_869) + unsigned(sum_1_reg_313));
    tmp_3_cast_fu_418_p3 <= (trunc_ln41_fu_414_p1 & ap_const_lv5_0);
    tmp_4_cast_fu_530_p3 <= (trunc_ln215_fu_526_p1 & ap_const_lv5_0);
    tmp_5_cast_fu_638_p3 <= (trunc_ln57_fu_634_p1 & ap_const_lv5_0);
    tmp_6_cast_fu_482_p3 <= (trunc_ln215_1_fu_478_p1 & ap_const_lv5_0);
    tmp_9_cast_fu_595_p3 <= (trunc_ln215_2_fu_591_p1 & ap_const_lv5_0);

    tmp_V_address0_assign_proc : process(tmp_V_addr_reg_696, tmp_V_addr_1_reg_753, ap_CS_fsm_state7, ap_CS_fsm_state19, ap_CS_fsm_state4, zext_ln215_6_fu_586_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            tmp_V_address0 <= zext_ln215_6_fu_586_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            tmp_V_address0 <= tmp_V_addr_1_reg_753;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            tmp_V_address0 <= tmp_V_addr_reg_696;
        else 
            tmp_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    tmp_V_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state19, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            tmp_V_ce0 <= ap_const_logic_1;
        else 
            tmp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    tmp_V_d0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state4, empty_fu_401_p1, trunc_ln42_fu_506_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            tmp_V_d0 <= trunc_ln42_fu_506_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            tmp_V_d0 <= empty_fu_401_p1;
        else 
            tmp_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    tmp_V_we0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state4, icmp_ln42_fu_500_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((icmp_ln42_fu_500_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            tmp_V_we0 <= ap_const_logic_1;
        else 
            tmp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_cast_fu_356_p3 <= (trunc_ln29_fu_352_p1 & ap_const_lv5_0);
    trunc_ln215_1_fu_478_p1 <= k_reg_257(5 - 1 downto 0);
    trunc_ln215_2_fu_591_p1 <= k_1_reg_302(5 - 1 downto 0);
    trunc_ln215_fu_526_p1 <= i_2_reg_280(5 - 1 downto 0);
    trunc_ln29_fu_352_p1 <= i_reg_213(5 - 1 downto 0);
    trunc_ln41_fu_414_p1 <= i_1_reg_235(5 - 1 downto 0);
    trunc_ln42_fu_506_p1 <= conv3_i20_reg_268(32 - 1 downto 0);
    trunc_ln57_fu_634_p1 <= i_3_reg_324(5 - 1 downto 0);
    xin_address0 <= zext_ln57_1_reg_897(10 - 1 downto 0);

    xin_ce0_assign_proc : process(ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            xin_ce0 <= ap_const_logic_1;
        else 
            xin_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    xin_d0 <= D_output_V_q0;

    xin_we0_assign_proc : process(ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            xin_we0 <= ap_const_logic_1;
        else 
            xin_we0 <= ap_const_logic_0;
        end if; 
    end process;

    xout_address0 <= zext_ln29_1_fu_385_p1(10 - 1 downto 0);

    xout_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            xout_ce0 <= ap_const_logic_1;
        else 
            xout_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln215_1_fu_559_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln215_fu_554_p2),64));
    zext_ln215_2_fu_464_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_257),10));
    zext_ln215_3_fu_473_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln215_1_fu_468_p2),64));
    zext_ln215_4_fu_495_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln215_2_fu_490_p2),64));
    zext_ln215_5_fu_577_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_1_reg_302),10));
    zext_ln215_6_fu_586_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln215_3_fu_581_p2),64));
    zext_ln215_7_fu_608_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln215_4_fu_603_p2),64));
    zext_ln215_fu_550_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_2_reg_291),10));
    zext_ln29_1_fu_385_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln29_fu_380_p2),64));
    zext_ln29_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_224),10));
    zext_ln41_1_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln41_fu_442_p2),64));
    zext_ln41_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_246),10));
    zext_ln57_1_fu_667_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln57_fu_662_p2),64));
    zext_ln57_fu_658_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_3_reg_335),10));
end behav;
