// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module top_B_IO_L2_in_boundary_x0 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        fifo_B_B_IO_L2_in_1_x015_dout,
        fifo_B_B_IO_L2_in_1_x015_empty_n,
        fifo_B_B_IO_L2_in_1_x015_read,
        fifo_B_PE_0_1_x069_din,
        fifo_B_PE_0_1_x069_full_n,
        fifo_B_PE_0_1_x069_write
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [255:0] fifo_B_B_IO_L2_in_1_x015_dout;
input   fifo_B_B_IO_L2_in_1_x015_empty_n;
output   fifo_B_B_IO_L2_in_1_x015_read;
output  [255:0] fifo_B_PE_0_1_x069_din;
input   fifo_B_PE_0_1_x069_full_n;
output   fifo_B_PE_0_1_x069_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg fifo_B_B_IO_L2_in_1_x015_read;
reg fifo_B_PE_0_1_x069_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    fifo_B_B_IO_L2_in_1_x015_blk_n;
wire    ap_CS_fsm_state4;
reg    fifo_B_PE_0_1_x069_blk_n;
wire    ap_CS_fsm_state8;
wire   [0:0] icmp_ln890_500_fu_269_p2;
wire   [6:0] add_ln691_fu_163_p2;
reg   [6:0] add_ln691_reg_275;
wire    ap_CS_fsm_state2;
wire   [10:0] tmp_328_cast_fu_173_p3;
reg   [10:0] tmp_328_cast_reg_280;
wire   [5:0] add_ln691_653_fu_187_p2;
reg   [5:0] add_ln691_653_reg_288;
wire    ap_CS_fsm_state3;
reg   [10:0] local_B_pong_V_addr_reg_293;
wire   [5:0] add_ln691_654_fu_213_p2;
reg   [5:0] add_ln691_654_reg_301;
wire    ap_CS_fsm_state5;
wire   [10:0] zext_ln890_fu_219_p1;
reg   [10:0] zext_ln890_reg_306;
wire   [6:0] add_ln691_655_fu_229_p2;
reg   [6:0] add_ln691_655_reg_314;
wire    ap_CS_fsm_state6;
wire   [255:0] local_B_pong_V_q0;
reg   [255:0] local_B_pong_V_load_reg_327;
wire    ap_CS_fsm_state7;
wire   [4:0] add_ln691_656_fu_263_p2;
reg    ap_block_state8;
wire   [10:0] local_B_pong_V_address0;
reg    local_B_pong_V_ce0;
reg    local_B_pong_V_ce1;
reg    local_B_pong_V_we1;
reg   [6:0] c4_V_reg_108;
wire   [0:0] icmp_ln890_498_fu_207_p2;
reg    ap_block_state1;
reg   [5:0] c5_V_4_reg_119;
wire   [0:0] icmp_ln890_fu_181_p2;
reg   [5:0] c5_V_reg_130;
wire   [0:0] icmp_ln890_499_fu_257_p2;
reg   [6:0] c6_V_reg_141;
wire   [0:0] icmp_ln890_497_fu_223_p2;
reg   [4:0] c7_V_reg_152;
wire   [63:0] zext_ln776_1_fu_202_p1;
wire   [63:0] p_cast_fu_252_p1;
wire   [5:0] trunc_ln776_fu_169_p1;
wire   [10:0] zext_ln776_fu_193_p1;
wire   [10:0] add_ln776_fu_197_p2;
wire   [5:0] empty_fu_235_p1;
wire   [10:0] tmp_cast_fu_239_p3;
wire   [10:0] empty_1514_fu_247_p2;
reg   [7:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 8'd1;
end

top_B_IO_L2_in_x0_local_B_pong_V #(
    .DataWidth( 256 ),
    .AddressRange( 2048 ),
    .AddressWidth( 11 ))
local_B_pong_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(local_B_pong_V_address0),
    .ce0(local_B_pong_V_ce0),
    .q0(local_B_pong_V_q0),
    .address1(local_B_pong_V_addr_reg_293),
    .ce1(local_B_pong_V_ce1),
    .we1(local_B_pong_V_we1),
    .d1(fifo_B_B_IO_L2_in_1_x015_dout)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln890_497_fu_223_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        c4_V_reg_108 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln890_498_fu_207_p2 == 1'd1))) begin
        c4_V_reg_108 <= add_ln691_reg_275;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln890_fu_181_p2 == 1'd0))) begin
        c5_V_4_reg_119 <= 6'd0;
    end else if (((fifo_B_B_IO_L2_in_1_x015_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        c5_V_4_reg_119 <= add_ln691_653_reg_288;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln890_fu_181_p2 == 1'd1))) begin
        c5_V_reg_130 <= 6'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln890_499_fu_257_p2 == 1'd1))) begin
        c5_V_reg_130 <= add_ln691_654_reg_301;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln890_497_fu_223_p2 == 1'd0))) begin
        c6_V_reg_141 <= 7'd0;
    end else if ((~((icmp_ln890_500_fu_269_p2 == 1'd0) & (fifo_B_PE_0_1_x069_full_n == 1'b0)) & (icmp_ln890_500_fu_269_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        c6_V_reg_141 <= add_ln691_655_reg_314;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        c7_V_reg_152 <= 5'd0;
    end else if ((~((icmp_ln890_500_fu_269_p2 == 1'd0) & (fifo_B_PE_0_1_x069_full_n == 1'b0)) & (icmp_ln890_500_fu_269_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        c7_V_reg_152 <= add_ln691_656_fu_263_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln691_653_reg_288 <= add_ln691_653_fu_187_p2;
        local_B_pong_V_addr_reg_293 <= zext_ln776_1_fu_202_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln691_654_reg_301 <= add_ln691_654_fu_213_p2;
        zext_ln890_reg_306[5 : 0] <= zext_ln890_fu_219_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        add_ln691_655_reg_314 <= add_ln691_655_fu_229_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln691_reg_275 <= add_ln691_fu_163_p2;
        tmp_328_cast_reg_280[10 : 5] <= tmp_328_cast_fu_173_p3[10 : 5];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        local_B_pong_V_load_reg_327 <= local_B_pong_V_q0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln890_497_fu_223_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln890_497_fu_223_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        fifo_B_B_IO_L2_in_1_x015_blk_n = fifo_B_B_IO_L2_in_1_x015_empty_n;
    end else begin
        fifo_B_B_IO_L2_in_1_x015_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((fifo_B_B_IO_L2_in_1_x015_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        fifo_B_B_IO_L2_in_1_x015_read = 1'b1;
    end else begin
        fifo_B_B_IO_L2_in_1_x015_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln890_500_fu_269_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        fifo_B_PE_0_1_x069_blk_n = fifo_B_PE_0_1_x069_full_n;
    end else begin
        fifo_B_PE_0_1_x069_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((icmp_ln890_500_fu_269_p2 == 1'd0) & (fifo_B_PE_0_1_x069_full_n == 1'b0)) & (icmp_ln890_500_fu_269_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        fifo_B_PE_0_1_x069_write = 1'b1;
    end else begin
        fifo_B_PE_0_1_x069_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        local_B_pong_V_ce0 = 1'b1;
    end else begin
        local_B_pong_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((fifo_B_B_IO_L2_in_1_x015_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        local_B_pong_V_ce1 = 1'b1;
    end else begin
        local_B_pong_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((fifo_B_B_IO_L2_in_1_x015_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        local_B_pong_V_we1 = 1'b1;
    end else begin
        local_B_pong_V_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln890_fu_181_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln890_498_fu_207_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((fifo_B_B_IO_L2_in_1_x015_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln890_497_fu_223_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln890_499_fu_257_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if ((~((icmp_ln890_500_fu_269_p2 == 1'd0) & (fifo_B_PE_0_1_x069_full_n == 1'b0)) & (icmp_ln890_500_fu_269_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else if ((~((icmp_ln890_500_fu_269_p2 == 1'd0) & (fifo_B_PE_0_1_x069_full_n == 1'b0)) & (icmp_ln890_500_fu_269_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln691_653_fu_187_p2 = (c5_V_4_reg_119 + 6'd1);

assign add_ln691_654_fu_213_p2 = (c5_V_reg_130 + 6'd1);

assign add_ln691_655_fu_229_p2 = (c6_V_reg_141 + 7'd1);

assign add_ln691_656_fu_263_p2 = (c7_V_reg_152 + 5'd1);

assign add_ln691_fu_163_p2 = (c4_V_reg_108 + 7'd1);

assign add_ln776_fu_197_p2 = (tmp_328_cast_reg_280 + zext_ln776_fu_193_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state8 = ((icmp_ln890_500_fu_269_p2 == 1'd0) & (fifo_B_PE_0_1_x069_full_n == 1'b0));
end

assign empty_1514_fu_247_p2 = (tmp_cast_fu_239_p3 + zext_ln890_reg_306);

assign empty_fu_235_p1 = c6_V_reg_141[5:0];

assign fifo_B_PE_0_1_x069_din = local_B_pong_V_load_reg_327;

assign icmp_ln890_497_fu_223_p2 = ((c5_V_reg_130 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln890_498_fu_207_p2 = ((c5_V_4_reg_119 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln890_499_fu_257_p2 = ((c6_V_reg_141 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln890_500_fu_269_p2 = ((c7_V_reg_152 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln890_fu_181_p2 = ((c4_V_reg_108 == 7'd64) ? 1'b1 : 1'b0);

assign local_B_pong_V_address0 = p_cast_fu_252_p1;

assign p_cast_fu_252_p1 = empty_1514_fu_247_p2;

assign tmp_328_cast_fu_173_p3 = {{trunc_ln776_fu_169_p1}, {5'd0}};

assign tmp_cast_fu_239_p3 = {{empty_fu_235_p1}, {5'd0}};

assign trunc_ln776_fu_169_p1 = c4_V_reg_108[5:0];

assign zext_ln776_1_fu_202_p1 = add_ln776_fu_197_p2;

assign zext_ln776_fu_193_p1 = c5_V_4_reg_119;

assign zext_ln890_fu_219_p1 = c5_V_reg_130;

always @ (posedge ap_clk) begin
    tmp_328_cast_reg_280[4:0] <= 5'b00000;
    zext_ln890_reg_306[10:6] <= 5'b00000;
end

endmodule //top_B_IO_L2_in_boundary_x0
