// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module top_C_drain_IO_L3_out_x1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        m_axi_gmem_C_AWVALID,
        m_axi_gmem_C_AWREADY,
        m_axi_gmem_C_AWADDR,
        m_axi_gmem_C_AWID,
        m_axi_gmem_C_AWLEN,
        m_axi_gmem_C_AWSIZE,
        m_axi_gmem_C_AWBURST,
        m_axi_gmem_C_AWLOCK,
        m_axi_gmem_C_AWCACHE,
        m_axi_gmem_C_AWPROT,
        m_axi_gmem_C_AWQOS,
        m_axi_gmem_C_AWREGION,
        m_axi_gmem_C_AWUSER,
        m_axi_gmem_C_WVALID,
        m_axi_gmem_C_WREADY,
        m_axi_gmem_C_WDATA,
        m_axi_gmem_C_WSTRB,
        m_axi_gmem_C_WLAST,
        m_axi_gmem_C_WID,
        m_axi_gmem_C_WUSER,
        m_axi_gmem_C_ARVALID,
        m_axi_gmem_C_ARREADY,
        m_axi_gmem_C_ARADDR,
        m_axi_gmem_C_ARID,
        m_axi_gmem_C_ARLEN,
        m_axi_gmem_C_ARSIZE,
        m_axi_gmem_C_ARBURST,
        m_axi_gmem_C_ARLOCK,
        m_axi_gmem_C_ARCACHE,
        m_axi_gmem_C_ARPROT,
        m_axi_gmem_C_ARQOS,
        m_axi_gmem_C_ARREGION,
        m_axi_gmem_C_ARUSER,
        m_axi_gmem_C_RVALID,
        m_axi_gmem_C_RREADY,
        m_axi_gmem_C_RDATA,
        m_axi_gmem_C_RLAST,
        m_axi_gmem_C_RID,
        m_axi_gmem_C_RUSER,
        m_axi_gmem_C_RRESP,
        m_axi_gmem_C_BVALID,
        m_axi_gmem_C_BREADY,
        m_axi_gmem_C_BRESP,
        m_axi_gmem_C_BID,
        m_axi_gmem_C_BUSER,
        fifo_C_drain_local_in_dout,
        fifo_C_drain_local_in_empty_n,
        fifo_C_drain_local_in_read,
        C_dout,
        C_empty_n,
        C_read
);

parameter    ap_ST_fsm_state1 = 78'd1;
parameter    ap_ST_fsm_state2 = 78'd2;
parameter    ap_ST_fsm_pp0_stage0 = 78'd4;
parameter    ap_ST_fsm_pp0_stage1 = 78'd8;
parameter    ap_ST_fsm_pp0_stage2 = 78'd16;
parameter    ap_ST_fsm_pp0_stage3 = 78'd32;
parameter    ap_ST_fsm_pp0_stage4 = 78'd64;
parameter    ap_ST_fsm_pp0_stage5 = 78'd128;
parameter    ap_ST_fsm_pp0_stage6 = 78'd256;
parameter    ap_ST_fsm_pp0_stage7 = 78'd512;
parameter    ap_ST_fsm_state13 = 78'd1024;
parameter    ap_ST_fsm_state14 = 78'd2048;
parameter    ap_ST_fsm_state15 = 78'd4096;
parameter    ap_ST_fsm_state16 = 78'd8192;
parameter    ap_ST_fsm_state17 = 78'd16384;
parameter    ap_ST_fsm_state18 = 78'd32768;
parameter    ap_ST_fsm_state19 = 78'd65536;
parameter    ap_ST_fsm_state20 = 78'd131072;
parameter    ap_ST_fsm_state21 = 78'd262144;
parameter    ap_ST_fsm_state22 = 78'd524288;
parameter    ap_ST_fsm_state23 = 78'd1048576;
parameter    ap_ST_fsm_state24 = 78'd2097152;
parameter    ap_ST_fsm_state25 = 78'd4194304;
parameter    ap_ST_fsm_state26 = 78'd8388608;
parameter    ap_ST_fsm_state27 = 78'd16777216;
parameter    ap_ST_fsm_state28 = 78'd33554432;
parameter    ap_ST_fsm_state29 = 78'd67108864;
parameter    ap_ST_fsm_state30 = 78'd134217728;
parameter    ap_ST_fsm_state31 = 78'd268435456;
parameter    ap_ST_fsm_state32 = 78'd536870912;
parameter    ap_ST_fsm_state33 = 78'd1073741824;
parameter    ap_ST_fsm_state34 = 78'd2147483648;
parameter    ap_ST_fsm_state35 = 78'd4294967296;
parameter    ap_ST_fsm_state36 = 78'd8589934592;
parameter    ap_ST_fsm_state37 = 78'd17179869184;
parameter    ap_ST_fsm_state38 = 78'd34359738368;
parameter    ap_ST_fsm_state39 = 78'd68719476736;
parameter    ap_ST_fsm_state40 = 78'd137438953472;
parameter    ap_ST_fsm_state41 = 78'd274877906944;
parameter    ap_ST_fsm_state42 = 78'd549755813888;
parameter    ap_ST_fsm_state43 = 78'd1099511627776;
parameter    ap_ST_fsm_state44 = 78'd2199023255552;
parameter    ap_ST_fsm_state45 = 78'd4398046511104;
parameter    ap_ST_fsm_state46 = 78'd8796093022208;
parameter    ap_ST_fsm_state47 = 78'd17592186044416;
parameter    ap_ST_fsm_state48 = 78'd35184372088832;
parameter    ap_ST_fsm_state49 = 78'd70368744177664;
parameter    ap_ST_fsm_state50 = 78'd140737488355328;
parameter    ap_ST_fsm_state51 = 78'd281474976710656;
parameter    ap_ST_fsm_state52 = 78'd562949953421312;
parameter    ap_ST_fsm_state53 = 78'd1125899906842624;
parameter    ap_ST_fsm_state54 = 78'd2251799813685248;
parameter    ap_ST_fsm_state55 = 78'd4503599627370496;
parameter    ap_ST_fsm_state56 = 78'd9007199254740992;
parameter    ap_ST_fsm_state57 = 78'd18014398509481984;
parameter    ap_ST_fsm_state58 = 78'd36028797018963968;
parameter    ap_ST_fsm_state59 = 78'd72057594037927936;
parameter    ap_ST_fsm_state60 = 78'd144115188075855872;
parameter    ap_ST_fsm_state61 = 78'd288230376151711744;
parameter    ap_ST_fsm_state62 = 78'd576460752303423488;
parameter    ap_ST_fsm_state63 = 78'd1152921504606846976;
parameter    ap_ST_fsm_state64 = 78'd2305843009213693952;
parameter    ap_ST_fsm_state65 = 78'd4611686018427387904;
parameter    ap_ST_fsm_state66 = 78'd9223372036854775808;
parameter    ap_ST_fsm_state67 = 78'd18446744073709551616;
parameter    ap_ST_fsm_state68 = 78'd36893488147419103232;
parameter    ap_ST_fsm_state69 = 78'd73786976294838206464;
parameter    ap_ST_fsm_state70 = 78'd147573952589676412928;
parameter    ap_ST_fsm_state71 = 78'd295147905179352825856;
parameter    ap_ST_fsm_state72 = 78'd590295810358705651712;
parameter    ap_ST_fsm_state73 = 78'd1180591620717411303424;
parameter    ap_ST_fsm_state74 = 78'd2361183241434822606848;
parameter    ap_ST_fsm_state75 = 78'd4722366482869645213696;
parameter    ap_ST_fsm_state76 = 78'd9444732965739290427392;
parameter    ap_ST_fsm_state77 = 78'd18889465931478580854784;
parameter    ap_ST_fsm_state78 = 78'd37778931862957161709568;
parameter    ap_ST_fsm_state79 = 78'd75557863725914323419136;
parameter    ap_ST_fsm_state80 = 78'd151115727451828646838272;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_C_AWVALID;
input   m_axi_gmem_C_AWREADY;
output  [63:0] m_axi_gmem_C_AWADDR;
output  [0:0] m_axi_gmem_C_AWID;
output  [31:0] m_axi_gmem_C_AWLEN;
output  [2:0] m_axi_gmem_C_AWSIZE;
output  [1:0] m_axi_gmem_C_AWBURST;
output  [1:0] m_axi_gmem_C_AWLOCK;
output  [3:0] m_axi_gmem_C_AWCACHE;
output  [2:0] m_axi_gmem_C_AWPROT;
output  [3:0] m_axi_gmem_C_AWQOS;
output  [3:0] m_axi_gmem_C_AWREGION;
output  [0:0] m_axi_gmem_C_AWUSER;
output   m_axi_gmem_C_WVALID;
input   m_axi_gmem_C_WREADY;
output  [511:0] m_axi_gmem_C_WDATA;
output  [63:0] m_axi_gmem_C_WSTRB;
output   m_axi_gmem_C_WLAST;
output  [0:0] m_axi_gmem_C_WID;
output  [0:0] m_axi_gmem_C_WUSER;
output   m_axi_gmem_C_ARVALID;
input   m_axi_gmem_C_ARREADY;
output  [63:0] m_axi_gmem_C_ARADDR;
output  [0:0] m_axi_gmem_C_ARID;
output  [31:0] m_axi_gmem_C_ARLEN;
output  [2:0] m_axi_gmem_C_ARSIZE;
output  [1:0] m_axi_gmem_C_ARBURST;
output  [1:0] m_axi_gmem_C_ARLOCK;
output  [3:0] m_axi_gmem_C_ARCACHE;
output  [2:0] m_axi_gmem_C_ARPROT;
output  [3:0] m_axi_gmem_C_ARQOS;
output  [3:0] m_axi_gmem_C_ARREGION;
output  [0:0] m_axi_gmem_C_ARUSER;
input   m_axi_gmem_C_RVALID;
output   m_axi_gmem_C_RREADY;
input  [511:0] m_axi_gmem_C_RDATA;
input   m_axi_gmem_C_RLAST;
input  [0:0] m_axi_gmem_C_RID;
input  [0:0] m_axi_gmem_C_RUSER;
input  [1:0] m_axi_gmem_C_RRESP;
input   m_axi_gmem_C_BVALID;
output   m_axi_gmem_C_BREADY;
input  [1:0] m_axi_gmem_C_BRESP;
input  [0:0] m_axi_gmem_C_BID;
input  [0:0] m_axi_gmem_C_BUSER;
input  [63:0] fifo_C_drain_local_in_dout;
input   fifo_C_drain_local_in_empty_n;
output   fifo_C_drain_local_in_read;
input  [63:0] C_dout;
input   C_empty_n;
output   C_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_gmem_C_AWVALID;
reg m_axi_gmem_C_WVALID;
reg m_axi_gmem_C_BREADY;
reg fifo_C_drain_local_in_read;
reg C_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [77:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    gmem_C_blk_n_AW;
wire    ap_CS_fsm_state2;
reg    gmem_C_blk_n_W;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln878_reg_172;
reg   [0:0] icmp_ln878_reg_172_pp0_iter1_reg;
reg    gmem_C_blk_n_B;
wire    ap_CS_fsm_state80;
reg    fifo_C_drain_local_in_blk_n;
reg    ap_enable_reg_pp0_iter0;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_pp0_stage5;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_pp0_stage6;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_pp0_stage7;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_pp0_stage0;
reg    C_blk_n;
reg   [10:0] i_V_reg_100;
reg   [57:0] trunc_ln_reg_156;
wire   [10:0] i_V_1_fu_131_p2;
reg   [10:0] i_V_1_reg_167;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state11_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln878_fu_137_p2;
reg   [63:0] v2_V_reg_176;
reg    ap_block_state4_pp0_stage1_iter0;
wire    ap_block_state12_pp0_stage1_iter1;
reg    ap_block_state12_io;
reg    ap_block_pp0_stage1_11001;
reg   [63:0] v2_V_746_reg_181;
reg    ap_block_state5_pp0_stage2_iter0;
reg    ap_block_pp0_stage2_11001;
reg   [63:0] v2_V_747_reg_186;
reg    ap_block_state6_pp0_stage3_iter0;
reg    ap_block_pp0_stage3_11001;
reg   [63:0] v2_V_748_reg_191;
reg    ap_block_state7_pp0_stage4_iter0;
reg    ap_block_pp0_stage4_11001;
reg   [63:0] v2_V_749_reg_196;
reg    ap_block_state8_pp0_stage5_iter0;
reg    ap_block_pp0_stage5_11001;
reg   [63:0] v2_V_750_reg_201;
reg    ap_block_state9_pp0_stage6_iter0;
reg    ap_block_pp0_stage6_11001;
reg   [63:0] v2_V_751_reg_206;
reg    ap_block_state10_pp0_stage7_iter0;
reg    ap_block_pp0_stage7_11001;
reg   [63:0] v1_V_reg_211;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_block_pp0_stage7_subdone;
reg    ap_block_pp0_stage1_subdone;
reg   [10:0] ap_phi_mux_i_V_phi_fu_104_p4;
wire  signed [63:0] sext_ln11732_fu_121_p1;
reg    ap_block_pp0_stage1_01001;
reg    ap_block_state1;
reg   [77:0] ap_NS_fsm;
reg    ap_block_pp0_stage2_subdone;
reg    ap_block_pp0_stage3_subdone;
reg    ap_block_pp0_stage4_subdone;
reg    ap_block_pp0_stage5_subdone;
reg    ap_block_pp0_stage6_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 78'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state80) & (m_axi_gmem_C_BVALID == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (m_axi_gmem_C_AWREADY == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (m_axi_gmem_C_AWREADY == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln878_reg_172 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i_V_reg_100 <= i_V_1_reg_167;
    end else if (((1'b1 == ap_CS_fsm_state2) & (m_axi_gmem_C_AWREADY == 1'b1))) begin
        i_V_reg_100 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_V_1_reg_167 <= i_V_1_fu_131_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln878_reg_172 <= icmp_ln878_fu_137_p2;
        icmp_ln878_reg_172_pp0_iter1_reg <= icmp_ln878_reg_172;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        trunc_ln_reg_156 <= {{C_dout[63:6]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln878_reg_172 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        v1_V_reg_211 <= fifo_C_drain_local_in_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln878_reg_172 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        v2_V_746_reg_181 <= fifo_C_drain_local_in_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln878_reg_172 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        v2_V_747_reg_186 <= fifo_C_drain_local_in_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln878_reg_172 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        v2_V_748_reg_191 <= fifo_C_drain_local_in_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln878_reg_172 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001))) begin
        v2_V_749_reg_196 <= fifo_C_drain_local_in_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln878_reg_172 == 1'd0) & (1'b0 == ap_block_pp0_stage6_11001))) begin
        v2_V_750_reg_201 <= fifo_C_drain_local_in_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln878_reg_172 == 1'd0) & (1'b0 == ap_block_pp0_stage7_11001))) begin
        v2_V_751_reg_206 <= fifo_C_drain_local_in_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln878_reg_172 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        v2_V_reg_176 <= fifo_C_drain_local_in_dout;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        C_blk_n = C_empty_n;
    end else begin
        C_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (1'b0 == C_empty_n)) & (1'b1 == ap_CS_fsm_state1))) begin
        C_read = 1'b1;
    end else begin
        C_read = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln878_fu_137_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state80) & (m_axi_gmem_C_BVALID == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln878_reg_172 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_i_V_phi_fu_104_p4 = i_V_1_reg_167;
    end else begin
        ap_phi_mux_i_V_phi_fu_104_p4 = i_V_reg_100;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state80) & (m_axi_gmem_C_BVALID == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln878_reg_172 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln878_reg_172 == 1'd0) & (1'b0 == ap_block_pp0_stage7)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln878_reg_172 == 1'd0) & (1'b0 == ap_block_pp0_stage6)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln878_reg_172 == 1'd0) & (1'b0 == ap_block_pp0_stage5)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln878_reg_172 == 1'd0) & (1'b0 == ap_block_pp0_stage4)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln878_reg_172 == 1'd0) & (1'b0 == ap_block_pp0_stage3)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln878_reg_172 == 1'd0) & (1'b0 == ap_block_pp0_stage2)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln878_reg_172 == 1'd0) & (1'b0 == ap_block_pp0_stage1)))) begin
        fifo_C_drain_local_in_blk_n = fifo_C_drain_local_in_empty_n;
    end else begin
        fifo_C_drain_local_in_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln878_reg_172 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln878_reg_172 == 1'd0) & (1'b0 == ap_block_pp0_stage7_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln878_reg_172 == 1'd0) & (1'b0 == ap_block_pp0_stage6_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln878_reg_172 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln878_reg_172 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln878_reg_172 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln878_reg_172 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln878_reg_172 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        fifo_C_drain_local_in_read = 1'b1;
    end else begin
        fifo_C_drain_local_in_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        gmem_C_blk_n_AW = m_axi_gmem_C_AWREADY;
    end else begin
        gmem_C_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state80)) begin
        gmem_C_blk_n_B = m_axi_gmem_C_BVALID;
    end else begin
        gmem_C_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln878_reg_172_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        gmem_C_blk_n_W = m_axi_gmem_C_WREADY;
    end else begin
        gmem_C_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (m_axi_gmem_C_AWREADY == 1'b1))) begin
        m_axi_gmem_C_AWVALID = 1'b1;
    end else begin
        m_axi_gmem_C_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state80) & (m_axi_gmem_C_BVALID == 1'b1))) begin
        m_axi_gmem_C_BREADY = 1'b1;
    end else begin
        m_axi_gmem_C_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln878_reg_172_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        m_axi_gmem_C_WVALID = 1'b1;
    end else begin
        m_axi_gmem_C_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (1'b0 == C_empty_n)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (m_axi_gmem_C_AWREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln878_fu_137_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((icmp_ln878_fu_137_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            if (((1'b1 == ap_CS_fsm_state80) & (m_axi_gmem_C_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state80;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd77];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln878_reg_172 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (fifo_C_drain_local_in_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln878_reg_172 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (fifo_C_drain_local_in_empty_n == 1'b0));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln878_reg_172 == 1'd0) & (fifo_C_drain_local_in_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((1'b1 == ap_block_state12_io) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln878_reg_172 == 1'd0) & (fifo_C_drain_local_in_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((1'b1 == ap_block_state12_io) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln878_reg_172 == 1'd0) & (fifo_C_drain_local_in_empty_n == 1'b0)));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln878_reg_172 == 1'd0) & (fifo_C_drain_local_in_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln878_reg_172 == 1'd0) & (fifo_C_drain_local_in_empty_n == 1'b0));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln878_reg_172 == 1'd0) & (fifo_C_drain_local_in_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln878_reg_172 == 1'd0) & (fifo_C_drain_local_in_empty_n == 1'b0));
end

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln878_reg_172 == 1'd0) & (fifo_C_drain_local_in_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage4_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln878_reg_172 == 1'd0) & (fifo_C_drain_local_in_empty_n == 1'b0));
end

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage5_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln878_reg_172 == 1'd0) & (fifo_C_drain_local_in_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage5_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln878_reg_172 == 1'd0) & (fifo_C_drain_local_in_empty_n == 1'b0));
end

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage6_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln878_reg_172 == 1'd0) & (fifo_C_drain_local_in_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage6_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln878_reg_172 == 1'd0) & (fifo_C_drain_local_in_empty_n == 1'b0));
end

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage7_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln878_reg_172 == 1'd0) & (fifo_C_drain_local_in_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage7_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln878_reg_172 == 1'd0) & (fifo_C_drain_local_in_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (1'b0 == C_empty_n));
end

always @ (*) begin
    ap_block_state10_pp0_stage7_iter0 = ((icmp_ln878_reg_172 == 1'd0) & (fifo_C_drain_local_in_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state11_pp0_stage0_iter1 = ((icmp_ln878_reg_172 == 1'd0) & (fifo_C_drain_local_in_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state12_io = ((icmp_ln878_reg_172_pp0_iter1_reg == 1'd0) & (m_axi_gmem_C_WREADY == 1'b0));
end

assign ap_block_state12_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage1_iter0 = ((icmp_ln878_reg_172 == 1'd0) & (fifo_C_drain_local_in_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state5_pp0_stage2_iter0 = ((icmp_ln878_reg_172 == 1'd0) & (fifo_C_drain_local_in_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state6_pp0_stage3_iter0 = ((icmp_ln878_reg_172 == 1'd0) & (fifo_C_drain_local_in_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state7_pp0_stage4_iter0 = ((icmp_ln878_reg_172 == 1'd0) & (fifo_C_drain_local_in_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state8_pp0_stage5_iter0 = ((icmp_ln878_reg_172 == 1'd0) & (fifo_C_drain_local_in_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state9_pp0_stage6_iter0 = ((icmp_ln878_reg_172 == 1'd0) & (fifo_C_drain_local_in_empty_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign i_V_1_fu_131_p2 = (ap_phi_mux_i_V_phi_fu_104_p4 + 11'd1);

assign icmp_ln878_fu_137_p2 = ((ap_phi_mux_i_V_phi_fu_104_p4 == 11'd1024) ? 1'b1 : 1'b0);

assign m_axi_gmem_C_ARADDR = 64'd0;

assign m_axi_gmem_C_ARBURST = 2'd0;

assign m_axi_gmem_C_ARCACHE = 4'd0;

assign m_axi_gmem_C_ARID = 1'd0;

assign m_axi_gmem_C_ARLEN = 32'd0;

assign m_axi_gmem_C_ARLOCK = 2'd0;

assign m_axi_gmem_C_ARPROT = 3'd0;

assign m_axi_gmem_C_ARQOS = 4'd0;

assign m_axi_gmem_C_ARREGION = 4'd0;

assign m_axi_gmem_C_ARSIZE = 3'd0;

assign m_axi_gmem_C_ARUSER = 1'd0;

assign m_axi_gmem_C_ARVALID = 1'b0;

assign m_axi_gmem_C_AWADDR = sext_ln11732_fu_121_p1;

assign m_axi_gmem_C_AWBURST = 2'd0;

assign m_axi_gmem_C_AWCACHE = 4'd0;

assign m_axi_gmem_C_AWID = 1'd0;

assign m_axi_gmem_C_AWLEN = 32'd1024;

assign m_axi_gmem_C_AWLOCK = 2'd0;

assign m_axi_gmem_C_AWPROT = 3'd0;

assign m_axi_gmem_C_AWQOS = 4'd0;

assign m_axi_gmem_C_AWREGION = 4'd0;

assign m_axi_gmem_C_AWSIZE = 3'd0;

assign m_axi_gmem_C_AWUSER = 1'd0;

assign m_axi_gmem_C_RREADY = 1'b0;

assign m_axi_gmem_C_WDATA = {{{{{{{{v1_V_reg_211}, {v2_V_751_reg_206}}, {v2_V_750_reg_201}}, {v2_V_749_reg_196}}, {v2_V_748_reg_191}}, {v2_V_747_reg_186}}, {v2_V_746_reg_181}}, {v2_V_reg_176}};

assign m_axi_gmem_C_WID = 1'd0;

assign m_axi_gmem_C_WLAST = 1'b0;

assign m_axi_gmem_C_WSTRB = 64'd18446744073709551615;

assign m_axi_gmem_C_WUSER = 1'd0;

assign sext_ln11732_fu_121_p1 = $signed(trunc_ln_reg_156);

endmodule //top_C_drain_IO_L3_out_x1
