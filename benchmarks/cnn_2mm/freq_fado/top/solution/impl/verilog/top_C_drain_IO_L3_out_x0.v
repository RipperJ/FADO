// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module top_C_drain_IO_L3_out_x0 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        fifo_C_drain_C_drain_IO_L2_out_0_x0135_dout,
        fifo_C_drain_C_drain_IO_L2_out_0_x0135_empty_n,
        fifo_C_drain_C_drain_IO_L2_out_0_x0135_read,
        C_address0,
        C_ce0,
        C_we0,
        C_d0
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [63:0] fifo_C_drain_C_drain_IO_L2_out_0_x0135_dout;
input   fifo_C_drain_C_drain_IO_L2_out_0_x0135_empty_n;
output   fifo_C_drain_C_drain_IO_L2_out_0_x0135_read;
output  [9:0] C_address0;
output   C_ce0;
output   C_we0;
output  [31:0] C_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg fifo_C_drain_C_drain_IO_L2_out_0_x0135_read;
reg C_ce0;
reg C_we0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    fifo_C_drain_C_drain_IO_L2_out_0_x0135_blk_n;
wire    ap_CS_fsm_state3;
reg   [0:0] icmp_ln878_reg_87;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire   [0:0] icmp_ln878_fu_65_p2;
wire    ap_CS_fsm_state2;
wire   [10:0] i_V_2_fu_71_p2;
reg   [10:0] i_V_2_reg_91;
reg   [10:0] i_V_reg_53;
reg    ap_block_state1;
wire   [63:0] zext_ln534_fu_82_p1;
reg    ap_block_state3;
wire    ap_CS_fsm_state11;
reg   [10:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 11'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((fifo_C_drain_C_drain_IO_L2_out_0_x0135_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        i_V_reg_53 <= i_V_2_reg_91;
    end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_V_reg_53 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_V_2_reg_91 <= i_V_2_fu_71_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        icmp_ln878_reg_87 <= icmp_ln878_fu_65_p2;
    end
end

always @ (*) begin
    if ((~((icmp_ln878_reg_87 == 1'd0) & (fifo_C_drain_C_drain_IO_L2_out_0_x0135_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        C_ce0 = 1'b1;
    end else begin
        C_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln878_reg_87 == 1'd0) & (fifo_C_drain_C_drain_IO_L2_out_0_x0135_empty_n == 1'b0)) & (icmp_ln878_reg_87 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        C_we0 = 1'b1;
    end else begin
        C_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | ((icmp_ln878_reg_87 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        fifo_C_drain_C_drain_IO_L2_out_0_x0135_blk_n = fifo_C_drain_C_drain_IO_L2_out_0_x0135_empty_n;
    end else begin
        fifo_C_drain_C_drain_IO_L2_out_0_x0135_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((icmp_ln878_reg_87 == 1'd0) & (fifo_C_drain_C_drain_IO_L2_out_0_x0135_empty_n == 1'b0)) & (icmp_ln878_reg_87 == 1'd0) & (1'b1 == ap_CS_fsm_state3)) | ((fifo_C_drain_C_drain_IO_L2_out_0_x0135_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state10)) | ((fifo_C_drain_C_drain_IO_L2_out_0_x0135_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state9)) | ((fifo_C_drain_C_drain_IO_L2_out_0_x0135_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | ((fifo_C_drain_C_drain_IO_L2_out_0_x0135_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state7)) | ((fifo_C_drain_C_drain_IO_L2_out_0_x0135_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | ((fifo_C_drain_C_drain_IO_L2_out_0_x0135_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state5)) | ((fifo_C_drain_C_drain_IO_L2_out_0_x0135_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state4)))) begin
        fifo_C_drain_C_drain_IO_L2_out_0_x0135_read = 1'b1;
    end else begin
        fifo_C_drain_C_drain_IO_L2_out_0_x0135_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if ((~((icmp_ln878_reg_87 == 1'd0) & (fifo_C_drain_C_drain_IO_L2_out_0_x0135_empty_n == 1'b0)) & (icmp_ln878_reg_87 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else if ((~((icmp_ln878_reg_87 == 1'd0) & (fifo_C_drain_C_drain_IO_L2_out_0_x0135_empty_n == 1'b0)) & (icmp_ln878_reg_87 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((fifo_C_drain_C_drain_IO_L2_out_0_x0135_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((fifo_C_drain_C_drain_IO_L2_out_0_x0135_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((fifo_C_drain_C_drain_IO_L2_out_0_x0135_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((fifo_C_drain_C_drain_IO_L2_out_0_x0135_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((fifo_C_drain_C_drain_IO_L2_out_0_x0135_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((fifo_C_drain_C_drain_IO_L2_out_0_x0135_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((fifo_C_drain_C_drain_IO_L2_out_0_x0135_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign C_address0 = zext_ln534_fu_82_p1;

assign C_d0 = fifo_C_drain_C_drain_IO_L2_out_0_x0135_dout[31:0];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state3 = ((icmp_ln878_reg_87 == 1'd0) & (fifo_C_drain_C_drain_IO_L2_out_0_x0135_empty_n == 1'b0));
end

assign i_V_2_fu_71_p2 = (i_V_reg_53 + 11'd1);

assign icmp_ln878_fu_65_p2 = ((i_V_reg_53 == 11'd1024) ? 1'b1 : 1'b0);

assign zext_ln534_fu_82_p1 = i_V_reg_53;

endmodule //top_C_drain_IO_L3_out_x0
