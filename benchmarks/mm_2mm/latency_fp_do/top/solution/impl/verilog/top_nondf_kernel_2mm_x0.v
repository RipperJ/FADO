// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module top_nondf_kernel_2mm_x0 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_A_AWVALID,
        m_axi_gmem_A_AWREADY,
        m_axi_gmem_A_AWADDR,
        m_axi_gmem_A_AWID,
        m_axi_gmem_A_AWLEN,
        m_axi_gmem_A_AWSIZE,
        m_axi_gmem_A_AWBURST,
        m_axi_gmem_A_AWLOCK,
        m_axi_gmem_A_AWCACHE,
        m_axi_gmem_A_AWPROT,
        m_axi_gmem_A_AWQOS,
        m_axi_gmem_A_AWREGION,
        m_axi_gmem_A_AWUSER,
        m_axi_gmem_A_WVALID,
        m_axi_gmem_A_WREADY,
        m_axi_gmem_A_WDATA,
        m_axi_gmem_A_WSTRB,
        m_axi_gmem_A_WLAST,
        m_axi_gmem_A_WID,
        m_axi_gmem_A_WUSER,
        m_axi_gmem_A_ARVALID,
        m_axi_gmem_A_ARREADY,
        m_axi_gmem_A_ARADDR,
        m_axi_gmem_A_ARID,
        m_axi_gmem_A_ARLEN,
        m_axi_gmem_A_ARSIZE,
        m_axi_gmem_A_ARBURST,
        m_axi_gmem_A_ARLOCK,
        m_axi_gmem_A_ARCACHE,
        m_axi_gmem_A_ARPROT,
        m_axi_gmem_A_ARQOS,
        m_axi_gmem_A_ARREGION,
        m_axi_gmem_A_ARUSER,
        m_axi_gmem_A_RVALID,
        m_axi_gmem_A_RREADY,
        m_axi_gmem_A_RDATA,
        m_axi_gmem_A_RLAST,
        m_axi_gmem_A_RID,
        m_axi_gmem_A_RUSER,
        m_axi_gmem_A_RRESP,
        m_axi_gmem_A_BVALID,
        m_axi_gmem_A_BREADY,
        m_axi_gmem_A_BRESP,
        m_axi_gmem_A_BID,
        m_axi_gmem_A_BUSER,
        xout,
        xin_address0,
        xin_ce0,
        xin_we0,
        xin_d0,
        grp_fu_142_p_din0,
        grp_fu_142_p_din1,
        grp_fu_142_p_dout0,
        grp_fu_142_p_ce,
        grp_fu_146_p_din0,
        grp_fu_146_p_din1,
        grp_fu_146_p_dout0,
        grp_fu_146_p_ce
);

parameter    ap_ST_fsm_state1 = 96'd1;
parameter    ap_ST_fsm_state2 = 96'd2;
parameter    ap_ST_fsm_state3 = 96'd4;
parameter    ap_ST_fsm_state4 = 96'd8;
parameter    ap_ST_fsm_state5 = 96'd16;
parameter    ap_ST_fsm_state6 = 96'd32;
parameter    ap_ST_fsm_state7 = 96'd64;
parameter    ap_ST_fsm_state8 = 96'd128;
parameter    ap_ST_fsm_state9 = 96'd256;
parameter    ap_ST_fsm_state10 = 96'd512;
parameter    ap_ST_fsm_state11 = 96'd1024;
parameter    ap_ST_fsm_state12 = 96'd2048;
parameter    ap_ST_fsm_state13 = 96'd4096;
parameter    ap_ST_fsm_state14 = 96'd8192;
parameter    ap_ST_fsm_state15 = 96'd16384;
parameter    ap_ST_fsm_state16 = 96'd32768;
parameter    ap_ST_fsm_state17 = 96'd65536;
parameter    ap_ST_fsm_state18 = 96'd131072;
parameter    ap_ST_fsm_state19 = 96'd262144;
parameter    ap_ST_fsm_state20 = 96'd524288;
parameter    ap_ST_fsm_state21 = 96'd1048576;
parameter    ap_ST_fsm_state22 = 96'd2097152;
parameter    ap_ST_fsm_state23 = 96'd4194304;
parameter    ap_ST_fsm_state24 = 96'd8388608;
parameter    ap_ST_fsm_state25 = 96'd16777216;
parameter    ap_ST_fsm_state26 = 96'd33554432;
parameter    ap_ST_fsm_state27 = 96'd67108864;
parameter    ap_ST_fsm_state28 = 96'd134217728;
parameter    ap_ST_fsm_state29 = 96'd268435456;
parameter    ap_ST_fsm_state30 = 96'd536870912;
parameter    ap_ST_fsm_state31 = 96'd1073741824;
parameter    ap_ST_fsm_state32 = 96'd2147483648;
parameter    ap_ST_fsm_state33 = 96'd4294967296;
parameter    ap_ST_fsm_state34 = 96'd8589934592;
parameter    ap_ST_fsm_state35 = 96'd17179869184;
parameter    ap_ST_fsm_state36 = 96'd34359738368;
parameter    ap_ST_fsm_state37 = 96'd68719476736;
parameter    ap_ST_fsm_state38 = 96'd137438953472;
parameter    ap_ST_fsm_state39 = 96'd274877906944;
parameter    ap_ST_fsm_state40 = 96'd549755813888;
parameter    ap_ST_fsm_state41 = 96'd1099511627776;
parameter    ap_ST_fsm_state42 = 96'd2199023255552;
parameter    ap_ST_fsm_state43 = 96'd4398046511104;
parameter    ap_ST_fsm_state44 = 96'd8796093022208;
parameter    ap_ST_fsm_state45 = 96'd17592186044416;
parameter    ap_ST_fsm_state46 = 96'd35184372088832;
parameter    ap_ST_fsm_state47 = 96'd70368744177664;
parameter    ap_ST_fsm_state48 = 96'd140737488355328;
parameter    ap_ST_fsm_state49 = 96'd281474976710656;
parameter    ap_ST_fsm_state50 = 96'd562949953421312;
parameter    ap_ST_fsm_state51 = 96'd1125899906842624;
parameter    ap_ST_fsm_state52 = 96'd2251799813685248;
parameter    ap_ST_fsm_state53 = 96'd4503599627370496;
parameter    ap_ST_fsm_state54 = 96'd9007199254740992;
parameter    ap_ST_fsm_state55 = 96'd18014398509481984;
parameter    ap_ST_fsm_state56 = 96'd36028797018963968;
parameter    ap_ST_fsm_state57 = 96'd72057594037927936;
parameter    ap_ST_fsm_state58 = 96'd144115188075855872;
parameter    ap_ST_fsm_state59 = 96'd288230376151711744;
parameter    ap_ST_fsm_state60 = 96'd576460752303423488;
parameter    ap_ST_fsm_state61 = 96'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 96'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 96'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 96'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 96'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 96'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 96'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 96'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 96'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 96'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 96'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 96'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 96'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 96'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 96'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 96'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 96'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 96'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 96'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 96'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 96'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 96'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 96'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 96'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 96'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 96'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 96'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 96'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 96'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 96'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 96'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 96'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 96'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 96'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 96'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 96'd39614081257132168796771975168;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_A_AWVALID;
input   m_axi_gmem_A_AWREADY;
output  [63:0] m_axi_gmem_A_AWADDR;
output  [0:0] m_axi_gmem_A_AWID;
output  [31:0] m_axi_gmem_A_AWLEN;
output  [2:0] m_axi_gmem_A_AWSIZE;
output  [1:0] m_axi_gmem_A_AWBURST;
output  [1:0] m_axi_gmem_A_AWLOCK;
output  [3:0] m_axi_gmem_A_AWCACHE;
output  [2:0] m_axi_gmem_A_AWPROT;
output  [3:0] m_axi_gmem_A_AWQOS;
output  [3:0] m_axi_gmem_A_AWREGION;
output  [0:0] m_axi_gmem_A_AWUSER;
output   m_axi_gmem_A_WVALID;
input   m_axi_gmem_A_WREADY;
output  [511:0] m_axi_gmem_A_WDATA;
output  [63:0] m_axi_gmem_A_WSTRB;
output   m_axi_gmem_A_WLAST;
output  [0:0] m_axi_gmem_A_WID;
output  [0:0] m_axi_gmem_A_WUSER;
output   m_axi_gmem_A_ARVALID;
input   m_axi_gmem_A_ARREADY;
output  [63:0] m_axi_gmem_A_ARADDR;
output  [0:0] m_axi_gmem_A_ARID;
output  [31:0] m_axi_gmem_A_ARLEN;
output  [2:0] m_axi_gmem_A_ARSIZE;
output  [1:0] m_axi_gmem_A_ARBURST;
output  [1:0] m_axi_gmem_A_ARLOCK;
output  [3:0] m_axi_gmem_A_ARCACHE;
output  [2:0] m_axi_gmem_A_ARPROT;
output  [3:0] m_axi_gmem_A_ARQOS;
output  [3:0] m_axi_gmem_A_ARREGION;
output  [0:0] m_axi_gmem_A_ARUSER;
input   m_axi_gmem_A_RVALID;
output   m_axi_gmem_A_RREADY;
input  [511:0] m_axi_gmem_A_RDATA;
input   m_axi_gmem_A_RLAST;
input  [0:0] m_axi_gmem_A_RID;
input  [0:0] m_axi_gmem_A_RUSER;
input  [1:0] m_axi_gmem_A_RRESP;
input   m_axi_gmem_A_BVALID;
output   m_axi_gmem_A_BREADY;
input  [1:0] m_axi_gmem_A_BRESP;
input  [0:0] m_axi_gmem_A_BID;
input  [0:0] m_axi_gmem_A_BUSER;
input  [63:0] xout;
output  [9:0] xin_address0;
output   xin_ce0;
output   xin_we0;
output  [31:0] xin_d0;
output  [511:0] grp_fu_142_p_din0;
output  [511:0] grp_fu_142_p_din1;
input  [511:0] grp_fu_142_p_dout0;
output   grp_fu_142_p_ce;
output  [31:0] grp_fu_146_p_din0;
output  [31:0] grp_fu_146_p_din1;
input  [31:0] grp_fu_146_p_dout0;
output   grp_fu_146_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_gmem_A_ARVALID;
reg m_axi_gmem_A_RREADY;
reg xin_ce0;
reg xin_we0;

(* fsm_encoding = "none" *) reg   [95:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    gmem_A_blk_n_AR;
reg    gmem_A_blk_n_R;
wire    ap_CS_fsm_state73;
reg   [0:0] icmp_ln29_reg_758;
wire   [5:0] add_ln28_fu_402_p2;
reg   [5:0] add_ln28_reg_735;
wire    ap_CS_fsm_state71;
wire   [9:0] tmp_cast_fu_412_p3;
reg   [9:0] tmp_cast_reg_740;
wire   [5:0] add_ln29_fu_426_p2;
reg   [5:0] add_ln29_reg_748;
wire    ap_CS_fsm_state72;
wire   [9:0] add_ln30_fu_436_p2;
reg   [9:0] add_ln30_reg_753;
wire   [0:0] icmp_ln29_fu_441_p2;
reg   [9:0] tmp_V_addr_reg_762;
reg   [9:0] A_V_addr_reg_767;
reg   [9:0] B_V_addr_reg_772;
reg   [9:0] C_V_addr_reg_777;
reg   [9:0] D_input_V_addr_reg_782;
reg   [511:0] gmem_A_addr_read_reg_787;
wire   [31:0] trunc_ln30_1_fu_455_p1;
reg   [31:0] trunc_ln30_1_reg_793;
wire   [5:0] add_ln39_fu_459_p2;
reg   [5:0] add_ln39_reg_800;
wire    ap_CS_fsm_state75;
wire   [9:0] tmp_10_cast_fu_469_p3;
reg   [9:0] tmp_10_cast_reg_805;
wire   [5:0] add_ln40_fu_483_p2;
reg   [5:0] add_ln40_reg_814;
wire    ap_CS_fsm_state76;
wire   [9:0] zext_ln42_fu_489_p1;
reg   [9:0] zext_ln42_reg_819;
reg   [9:0] tmp_V_addr_3_reg_824;
wire   [5:0] add_ln43_fu_509_p2;
reg   [5:0] add_ln43_reg_832;
wire    ap_CS_fsm_state77;
wire   [511:0] A_V_q0;
reg  signed [511:0] A_V_load_reg_850;
wire    ap_CS_fsm_state78;
wire   [511:0] B_V_q0;
reg  signed [511:0] B_V_load_reg_855;
wire   [511:0] grp_fu_562_p2;
reg   [511:0] mul_ln691_reg_860;
wire    ap_CS_fsm_state83;
wire   [511:0] grp_fu_566_p2;
wire    ap_CS_fsm_state85;
wire   [5:0] add_ln46_fu_571_p2;
reg   [5:0] add_ln46_reg_870;
wire    ap_CS_fsm_state86;
wire   [9:0] tmp_11_cast_fu_581_p3;
reg   [9:0] tmp_11_cast_reg_875;
wire   [5:0] add_ln47_fu_595_p2;
reg   [5:0] add_ln47_reg_884;
wire    ap_CS_fsm_state87;
wire   [9:0] zext_ln215_fu_601_p1;
reg   [9:0] zext_ln215_reg_889;
reg   [9:0] D_output_V_addr_2_reg_899;
wire   [31:0] D_input_V_q0;
wire    ap_CS_fsm_state88;
wire   [5:0] add_ln50_fu_622_p2;
reg   [5:0] add_ln50_reg_912;
wire    ap_CS_fsm_state89;
wire   [31:0] tmp_V_q0;
reg  signed [31:0] tmp_V_load_reg_930;
wire    ap_CS_fsm_state90;
wire   [31:0] C_V_q0;
reg  signed [31:0] C_V_load_reg_935;
wire   [31:0] grp_fu_670_p2;
reg   [31:0] mul_ln51_reg_940;
wire    ap_CS_fsm_state92;
wire   [31:0] sum_4_fu_674_p2;
wire    ap_CS_fsm_state93;
wire   [5:0] add_ln56_fu_679_p2;
reg   [5:0] add_ln56_reg_950;
wire    ap_CS_fsm_state94;
wire   [9:0] tmp_12_cast_fu_689_p3;
reg   [9:0] tmp_12_cast_reg_955;
wire   [5:0] add_ln57_fu_703_p2;
reg   [5:0] add_ln57_reg_963;
wire    ap_CS_fsm_state95;
wire   [63:0] zext_ln58_1_fu_718_p1;
reg   [63:0] zext_ln58_1_reg_968;
reg   [9:0] tmp_V_address0;
reg    tmp_V_ce0;
reg    tmp_V_we0;
reg   [31:0] tmp_V_d0;
reg   [9:0] A_V_address0;
reg    A_V_ce0;
reg    A_V_we0;
reg   [9:0] B_V_address0;
reg    B_V_ce0;
reg    B_V_we0;
reg   [9:0] C_V_address0;
reg    C_V_ce0;
reg    C_V_we0;
reg   [9:0] D_input_V_address0;
reg    D_input_V_ce0;
reg    D_input_V_we0;
reg   [9:0] D_output_V_address0;
reg    D_output_V_ce0;
reg    D_output_V_we0;
wire   [31:0] D_output_V_q0;
reg   [5:0] i_reg_248;
reg    ap_block_state73;
wire    ap_CS_fsm_state70;
reg   [5:0] j_reg_259;
wire    ap_CS_fsm_state74;
wire   [0:0] icmp_ln28_fu_420_p2;
reg   [5:0] i_4_reg_270;
wire   [0:0] icmp_ln40_fu_503_p2;
reg   [5:0] j_4_reg_281;
wire   [0:0] icmp_ln43_fu_551_p2;
wire   [0:0] icmp_ln39_fu_477_p2;
reg   [5:0] k_reg_292;
reg   [511:0] conv3_i15_reg_303;
reg   [5:0] i_5_reg_315;
wire   [0:0] icmp_ln47_fu_616_p2;
reg   [5:0] j_5_reg_326;
wire   [0:0] icmp_ln50_fu_664_p2;
wire   [0:0] icmp_ln46_fu_589_p2;
reg   [5:0] k_2_reg_337;
reg   [31:0] sum_3_reg_348;
reg   [5:0] i_6_reg_359;
wire   [0:0] icmp_ln57_fu_723_p2;
reg   [5:0] j_6_reg_370;
wire    ap_CS_fsm_state96;
wire   [0:0] icmp_ln56_fu_697_p2;
wire   [63:0] zext_ln30_1_fu_447_p1;
wire   [63:0] zext_ln42_1_fu_498_p1;
wire   [63:0] zext_ln215_10_fu_524_p1;
wire   [63:0] zext_ln215_11_fu_546_p1;
wire   [63:0] zext_ln215_8_fu_610_p1;
wire   [63:0] zext_ln215_13_fu_637_p1;
wire   [63:0] zext_ln215_14_fu_659_p1;
wire  signed [63:0] sext_ln28_fu_391_p1;
wire   [31:0] trunc_ln43_fu_557_p1;
wire   [57:0] trunc_ln_fu_381_p4;
wire   [4:0] trunc_ln30_fu_408_p1;
wire   [9:0] zext_ln30_fu_432_p1;
wire   [4:0] trunc_ln42_fu_465_p1;
wire   [9:0] add_ln42_fu_493_p2;
wire   [9:0] zext_ln215_9_fu_515_p1;
wire   [9:0] add_ln215_5_fu_519_p2;
wire   [4:0] trunc_ln215_3_fu_529_p1;
wire   [9:0] tmp_13_cast_fu_533_p3;
wire   [9:0] add_ln215_6_fu_541_p2;
wire  signed [511:0] grp_fu_562_p0;
wire  signed [511:0] grp_fu_562_p1;
wire    ap_CS_fsm_state79;
wire    ap_CS_fsm_state84;
wire   [4:0] trunc_ln215_fu_577_p1;
wire   [9:0] add_ln215_fu_605_p2;
wire   [9:0] zext_ln215_12_fu_628_p1;
wire   [9:0] add_ln215_7_fu_632_p2;
wire   [4:0] trunc_ln215_4_fu_642_p1;
wire   [9:0] tmp_16_cast_fu_646_p3;
wire   [9:0] add_ln215_8_fu_654_p2;
wire  signed [31:0] grp_fu_670_p0;
wire  signed [31:0] grp_fu_670_p1;
wire    ap_CS_fsm_state91;
wire   [4:0] trunc_ln58_fu_685_p1;
wire   [9:0] zext_ln58_fu_709_p1;
wire   [9:0] add_ln58_fu_713_p2;
wire    grp_fu_562_ce;
wire    grp_fu_670_ce;
reg   [95:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 96'd1;
end

top_nondf_kernel_2mm_x0_tmp_V #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
tmp_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(tmp_V_address0),
    .ce0(tmp_V_ce0),
    .we0(tmp_V_we0),
    .d0(tmp_V_d0),
    .q0(tmp_V_q0)
);

top_nondf_kernel_2mm_x0_A_V #(
    .DataWidth( 512 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
A_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(A_V_address0),
    .ce0(A_V_ce0),
    .we0(A_V_we0),
    .d0(gmem_A_addr_read_reg_787),
    .q0(A_V_q0)
);

top_nondf_kernel_2mm_x0_A_V #(
    .DataWidth( 512 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
B_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(B_V_address0),
    .ce0(B_V_ce0),
    .we0(B_V_we0),
    .d0(gmem_A_addr_read_reg_787),
    .q0(B_V_q0)
);

top_nondf_kernel_2mm_x0_tmp_V #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
C_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(C_V_address0),
    .ce0(C_V_ce0),
    .we0(C_V_we0),
    .d0(trunc_ln30_1_reg_793),
    .q0(C_V_q0)
);

top_nondf_kernel_2mm_x0_tmp_V #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
D_input_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(D_input_V_address0),
    .ce0(D_input_V_ce0),
    .we0(D_input_V_we0),
    .d0(trunc_ln30_1_reg_793),
    .q0(D_input_V_q0)
);

top_nondf_kernel_2mm_x0_tmp_V #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
D_output_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(D_output_V_address0),
    .ce0(D_output_V_ce0),
    .we0(D_output_V_we0),
    .d0(sum_3_reg_348),
    .q0(D_output_V_q0)
);

top_add_512ns_512ns_512_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 512 ),
    .din1_WIDTH( 512 ),
    .dout_WIDTH( 512 ))
add_512ns_512ns_512_2_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(mul_ln691_reg_860),
    .din1(conv3_i15_reg_303),
    .ce(1'b1),
    .dout(grp_fu_566_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln40_fu_503_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state76))) begin
        conv3_i15_reg_303 <= 512'd0;
    end else if ((1'b1 == ap_CS_fsm_state85)) begin
        conv3_i15_reg_303 <= grp_fu_566_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln28_fu_420_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state71))) begin
        i_4_reg_270 <= 6'd0;
    end else if (((icmp_ln40_fu_503_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state76))) begin
        i_4_reg_270 <= add_ln39_reg_800;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln39_fu_477_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state75))) begin
        i_5_reg_315 <= 6'd0;
    end else if (((icmp_ln47_fu_616_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state87))) begin
        i_5_reg_315 <= add_ln46_reg_870;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln46_fu_589_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state86))) begin
        i_6_reg_359 <= 6'd0;
    end else if (((icmp_ln57_fu_723_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state95))) begin
        i_6_reg_359 <= add_ln56_reg_950;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        i_reg_248 <= 6'd0;
    end else if ((~((icmp_ln29_reg_758 == 1'd0) & (m_axi_gmem_A_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state73) & (icmp_ln29_reg_758 == 1'd1))) begin
        i_reg_248 <= add_ln28_reg_735;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln39_fu_477_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state75))) begin
        j_4_reg_281 <= 6'd0;
    end else if (((icmp_ln43_fu_551_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state77))) begin
        j_4_reg_281 <= add_ln40_reg_814;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln46_fu_589_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state86))) begin
        j_5_reg_326 <= 6'd0;
    end else if (((icmp_ln50_fu_664_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state89))) begin
        j_5_reg_326 <= add_ln47_reg_884;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln56_fu_697_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state94))) begin
        j_6_reg_370 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state96)) begin
        j_6_reg_370 <= add_ln57_reg_963;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln28_fu_420_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state71))) begin
        j_reg_259 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        j_reg_259 <= add_ln29_reg_748;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        k_2_reg_337 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state93)) begin
        k_2_reg_337 <= add_ln50_reg_912;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln40_fu_503_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state76))) begin
        k_reg_292 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state85)) begin
        k_reg_292 <= add_ln43_reg_832;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        sum_3_reg_348 <= D_input_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state93)) begin
        sum_3_reg_348 <= sum_4_fu_674_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        A_V_addr_reg_767 <= zext_ln30_1_fu_447_p1;
        B_V_addr_reg_772 <= zext_ln30_1_fu_447_p1;
        C_V_addr_reg_777 <= zext_ln30_1_fu_447_p1;
        D_input_V_addr_reg_782 <= zext_ln30_1_fu_447_p1;
        tmp_V_addr_reg_762 <= zext_ln30_1_fu_447_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state78)) begin
        A_V_load_reg_850 <= A_V_q0;
        B_V_load_reg_855 <= B_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state90)) begin
        C_V_load_reg_935 <= C_V_q0;
        tmp_V_load_reg_930 <= tmp_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        D_output_V_addr_2_reg_899 <= zext_ln215_8_fu_610_p1;
        add_ln47_reg_884 <= add_ln47_fu_595_p2;
        zext_ln215_reg_889[5 : 0] <= zext_ln215_fu_601_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        add_ln28_reg_735 <= add_ln28_fu_402_p2;
        tmp_cast_reg_740[9 : 5] <= tmp_cast_fu_412_p3[9 : 5];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        add_ln29_reg_748 <= add_ln29_fu_426_p2;
        add_ln30_reg_753 <= add_ln30_fu_436_p2;
        icmp_ln29_reg_758 <= icmp_ln29_fu_441_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        add_ln39_reg_800 <= add_ln39_fu_459_p2;
        tmp_10_cast_reg_805[9 : 5] <= tmp_10_cast_fu_469_p3[9 : 5];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        add_ln40_reg_814 <= add_ln40_fu_483_p2;
        tmp_V_addr_3_reg_824 <= zext_ln42_1_fu_498_p1;
        zext_ln42_reg_819[5 : 0] <= zext_ln42_fu_489_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        add_ln43_reg_832 <= add_ln43_fu_509_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        add_ln46_reg_870 <= add_ln46_fu_571_p2;
        tmp_11_cast_reg_875[9 : 5] <= tmp_11_cast_fu_581_p3[9 : 5];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state89)) begin
        add_ln50_reg_912 <= add_ln50_fu_622_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state94)) begin
        add_ln56_reg_950 <= add_ln56_fu_679_p2;
        tmp_12_cast_reg_955[9 : 5] <= tmp_12_cast_fu_689_p3[9 : 5];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state95)) begin
        add_ln57_reg_963 <= add_ln57_fu_703_p2;
        zext_ln58_1_reg_968[9 : 0] <= zext_ln58_1_fu_718_p1[9 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state73) & (icmp_ln29_reg_758 == 1'd0))) begin
        gmem_A_addr_read_reg_787 <= m_axi_gmem_A_RDATA;
        trunc_ln30_1_reg_793 <= trunc_ln30_1_fu_455_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state92)) begin
        mul_ln51_reg_940 <= grp_fu_146_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state83)) begin
        mul_ln691_reg_860 <= grp_fu_142_p_dout0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        A_V_address0 = zext_ln215_10_fu_524_p1;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        A_V_address0 = A_V_addr_reg_767;
    end else begin
        A_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state77))) begin
        A_V_ce0 = 1'b1;
    end else begin
        A_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        A_V_we0 = 1'b1;
    end else begin
        A_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        B_V_address0 = zext_ln215_11_fu_546_p1;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        B_V_address0 = B_V_addr_reg_772;
    end else begin
        B_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state77))) begin
        B_V_ce0 = 1'b1;
    end else begin
        B_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        B_V_we0 = 1'b1;
    end else begin
        B_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state89)) begin
        C_V_address0 = zext_ln215_14_fu_659_p1;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        C_V_address0 = C_V_addr_reg_777;
    end else begin
        C_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state89))) begin
        C_V_ce0 = 1'b1;
    end else begin
        C_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        C_V_we0 = 1'b1;
    end else begin
        C_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        D_input_V_address0 = zext_ln215_8_fu_610_p1;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        D_input_V_address0 = D_input_V_addr_reg_782;
    end else begin
        D_input_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state87))) begin
        D_input_V_ce0 = 1'b1;
    end else begin
        D_input_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        D_input_V_we0 = 1'b1;
    end else begin
        D_input_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state95)) begin
        D_output_V_address0 = zext_ln58_1_fu_718_p1;
    end else if ((1'b1 == ap_CS_fsm_state89)) begin
        D_output_V_address0 = D_output_V_addr_2_reg_899;
    end else begin
        D_output_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state89))) begin
        D_output_V_ce0 = 1'b1;
    end else begin
        D_output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln50_fu_664_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state89))) begin
        D_output_V_we0 = 1'b1;
    end else begin
        D_output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln56_fu_697_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state94)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln56_fu_697_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state94))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        gmem_A_blk_n_AR = m_axi_gmem_A_ARREADY;
    end else begin
        gmem_A_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state73) & (icmp_ln29_reg_758 == 1'd0))) begin
        gmem_A_blk_n_R = m_axi_gmem_A_RVALID;
    end else begin
        gmem_A_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((~((m_axi_gmem_A_ARREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        m_axi_gmem_A_ARVALID = 1'b1;
    end else begin
        m_axi_gmem_A_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln29_reg_758 == 1'd0) & (m_axi_gmem_A_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state73) & (icmp_ln29_reg_758 == 1'd0))) begin
        m_axi_gmem_A_RREADY = 1'b1;
    end else begin
        m_axi_gmem_A_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state89)) begin
        tmp_V_address0 = zext_ln215_13_fu_637_p1;
    end else if ((1'b1 == ap_CS_fsm_state77)) begin
        tmp_V_address0 = tmp_V_addr_3_reg_824;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        tmp_V_address0 = tmp_V_addr_reg_762;
    end else begin
        tmp_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state89) | (1'b1 == ap_CS_fsm_state77))) begin
        tmp_V_ce0 = 1'b1;
    end else begin
        tmp_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        tmp_V_d0 = trunc_ln43_fu_557_p1;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        tmp_V_d0 = trunc_ln30_1_reg_793;
    end else begin
        tmp_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state74) | ((icmp_ln43_fu_551_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state77)))) begin
        tmp_V_we0 = 1'b1;
    end else begin
        tmp_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state96)) begin
        xin_ce0 = 1'b1;
    end else begin
        xin_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state96)) begin
        xin_we0 = 1'b1;
    end else begin
        xin_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((m_axi_gmem_A_ARREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            if (((icmp_ln28_fu_420_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state71))) begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            if ((~((icmp_ln29_reg_758 == 1'd0) & (m_axi_gmem_A_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state73) & (icmp_ln29_reg_758 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state71;
            end else if ((~((icmp_ln29_reg_758 == 1'd0) & (m_axi_gmem_A_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state73) & (icmp_ln29_reg_758 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state75 : begin
            if (((icmp_ln39_fu_477_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state75))) begin
                ap_NS_fsm = ap_ST_fsm_state86;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end
        end
        ap_ST_fsm_state76 : begin
            if (((icmp_ln40_fu_503_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state76))) begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end
        end
        ap_ST_fsm_state77 : begin
            if (((icmp_ln43_fu_551_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state77))) begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state86 : begin
            if (((icmp_ln46_fu_589_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state86))) begin
                ap_NS_fsm = ap_ST_fsm_state94;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state87;
            end
        end
        ap_ST_fsm_state87 : begin
            if (((icmp_ln47_fu_616_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state87))) begin
                ap_NS_fsm = ap_ST_fsm_state86;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state88;
            end
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            if (((icmp_ln50_fu_664_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state89))) begin
                ap_NS_fsm = ap_ST_fsm_state87;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state90;
            end
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state94 : begin
            if (((icmp_ln56_fu_697_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state94))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state95;
            end
        end
        ap_ST_fsm_state95 : begin
            if (((icmp_ln57_fu_723_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state95))) begin
                ap_NS_fsm = ap_ST_fsm_state94;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state96;
            end
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln215_5_fu_519_p2 = (tmp_10_cast_reg_805 + zext_ln215_9_fu_515_p1);

assign add_ln215_6_fu_541_p2 = (tmp_13_cast_fu_533_p3 + zext_ln42_reg_819);

assign add_ln215_7_fu_632_p2 = (tmp_11_cast_reg_875 + zext_ln215_12_fu_628_p1);

assign add_ln215_8_fu_654_p2 = (tmp_16_cast_fu_646_p3 + zext_ln215_reg_889);

assign add_ln215_fu_605_p2 = (tmp_11_cast_reg_875 + zext_ln215_fu_601_p1);

assign add_ln28_fu_402_p2 = (i_reg_248 + 6'd1);

assign add_ln29_fu_426_p2 = (j_reg_259 + 6'd1);

assign add_ln30_fu_436_p2 = (tmp_cast_reg_740 + zext_ln30_fu_432_p1);

assign add_ln39_fu_459_p2 = (i_4_reg_270 + 6'd1);

assign add_ln40_fu_483_p2 = (j_4_reg_281 + 6'd1);

assign add_ln42_fu_493_p2 = (tmp_10_cast_reg_805 + zext_ln42_fu_489_p1);

assign add_ln43_fu_509_p2 = (k_reg_292 + 6'd1);

assign add_ln46_fu_571_p2 = (i_5_reg_315 + 6'd1);

assign add_ln47_fu_595_p2 = (j_5_reg_326 + 6'd1);

assign add_ln50_fu_622_p2 = (k_2_reg_337 + 6'd1);

assign add_ln56_fu_679_p2 = (i_6_reg_359 + 6'd1);

assign add_ln57_fu_703_p2 = (j_6_reg_370 + 6'd1);

assign add_ln58_fu_713_p2 = (tmp_12_cast_reg_955 + zext_ln58_fu_709_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_state89 = ap_CS_fsm[32'd88];

assign ap_CS_fsm_state90 = ap_CS_fsm[32'd89];

assign ap_CS_fsm_state91 = ap_CS_fsm[32'd90];

assign ap_CS_fsm_state92 = ap_CS_fsm[32'd91];

assign ap_CS_fsm_state93 = ap_CS_fsm[32'd92];

assign ap_CS_fsm_state94 = ap_CS_fsm[32'd93];

assign ap_CS_fsm_state95 = ap_CS_fsm[32'd94];

assign ap_CS_fsm_state96 = ap_CS_fsm[32'd95];

always @ (*) begin
    ap_block_state73 = ((icmp_ln29_reg_758 == 1'd0) & (m_axi_gmem_A_RVALID == 1'b0));
end

assign grp_fu_142_p_ce = 1'b1;

assign grp_fu_142_p_din0 = A_V_load_reg_850;

assign grp_fu_142_p_din1 = B_V_load_reg_855;

assign grp_fu_146_p_ce = 1'b1;

assign grp_fu_146_p_din0 = C_V_load_reg_935;

assign grp_fu_146_p_din1 = tmp_V_load_reg_930;

assign grp_fu_562_ce = 1'b1;

assign grp_fu_562_p0 = A_V_load_reg_850;

assign grp_fu_562_p1 = B_V_load_reg_855;

assign grp_fu_562_p2 = grp_fu_142_p_dout0;

assign grp_fu_670_ce = 1'b1;

assign grp_fu_670_p0 = C_V_load_reg_935;

assign grp_fu_670_p1 = tmp_V_load_reg_930;

assign grp_fu_670_p2 = grp_fu_146_p_dout0;

assign icmp_ln28_fu_420_p2 = ((i_reg_248 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_441_p2 = ((j_reg_259 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_477_p2 = ((i_4_reg_270 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln40_fu_503_p2 = ((j_4_reg_281 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_551_p2 = ((k_reg_292 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_589_p2 = ((i_5_reg_315 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln47_fu_616_p2 = ((j_5_reg_326 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_664_p2 = ((k_2_reg_337 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln56_fu_697_p2 = ((i_6_reg_359 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln57_fu_723_p2 = ((j_6_reg_370 == 6'd32) ? 1'b1 : 1'b0);

assign m_axi_gmem_A_ARADDR = sext_ln28_fu_391_p1;

assign m_axi_gmem_A_ARBURST = 2'd0;

assign m_axi_gmem_A_ARCACHE = 4'd0;

assign m_axi_gmem_A_ARID = 1'd0;

assign m_axi_gmem_A_ARLEN = 32'd1024;

assign m_axi_gmem_A_ARLOCK = 2'd0;

assign m_axi_gmem_A_ARPROT = 3'd0;

assign m_axi_gmem_A_ARQOS = 4'd0;

assign m_axi_gmem_A_ARREGION = 4'd0;

assign m_axi_gmem_A_ARSIZE = 3'd0;

assign m_axi_gmem_A_ARUSER = 1'd0;

assign m_axi_gmem_A_AWADDR = 64'd0;

assign m_axi_gmem_A_AWBURST = 2'd0;

assign m_axi_gmem_A_AWCACHE = 4'd0;

assign m_axi_gmem_A_AWID = 1'd0;

assign m_axi_gmem_A_AWLEN = 32'd0;

assign m_axi_gmem_A_AWLOCK = 2'd0;

assign m_axi_gmem_A_AWPROT = 3'd0;

assign m_axi_gmem_A_AWQOS = 4'd0;

assign m_axi_gmem_A_AWREGION = 4'd0;

assign m_axi_gmem_A_AWSIZE = 3'd0;

assign m_axi_gmem_A_AWUSER = 1'd0;

assign m_axi_gmem_A_AWVALID = 1'b0;

assign m_axi_gmem_A_BREADY = 1'b0;

assign m_axi_gmem_A_WDATA = 512'd0;

assign m_axi_gmem_A_WID = 1'd0;

assign m_axi_gmem_A_WLAST = 1'b0;

assign m_axi_gmem_A_WSTRB = 64'd0;

assign m_axi_gmem_A_WUSER = 1'd0;

assign m_axi_gmem_A_WVALID = 1'b0;

assign sext_ln28_fu_391_p1 = $signed(trunc_ln_fu_381_p4);

assign sum_4_fu_674_p2 = (mul_ln51_reg_940 + sum_3_reg_348);

assign tmp_10_cast_fu_469_p3 = {{trunc_ln42_fu_465_p1}, {5'd0}};

assign tmp_11_cast_fu_581_p3 = {{trunc_ln215_fu_577_p1}, {5'd0}};

assign tmp_12_cast_fu_689_p3 = {{trunc_ln58_fu_685_p1}, {5'd0}};

assign tmp_13_cast_fu_533_p3 = {{trunc_ln215_3_fu_529_p1}, {5'd0}};

assign tmp_16_cast_fu_646_p3 = {{trunc_ln215_4_fu_642_p1}, {5'd0}};

assign tmp_cast_fu_412_p3 = {{trunc_ln30_fu_408_p1}, {5'd0}};

assign trunc_ln215_3_fu_529_p1 = k_reg_292[4:0];

assign trunc_ln215_4_fu_642_p1 = k_2_reg_337[4:0];

assign trunc_ln215_fu_577_p1 = i_5_reg_315[4:0];

assign trunc_ln30_1_fu_455_p1 = m_axi_gmem_A_RDATA[31:0];

assign trunc_ln30_fu_408_p1 = i_reg_248[4:0];

assign trunc_ln42_fu_465_p1 = i_4_reg_270[4:0];

assign trunc_ln43_fu_557_p1 = conv3_i15_reg_303[31:0];

assign trunc_ln58_fu_685_p1 = i_6_reg_359[4:0];

assign trunc_ln_fu_381_p4 = {{xout[63:6]}};

assign xin_address0 = zext_ln58_1_reg_968;

assign xin_d0 = D_output_V_q0;

assign zext_ln215_10_fu_524_p1 = add_ln215_5_fu_519_p2;

assign zext_ln215_11_fu_546_p1 = add_ln215_6_fu_541_p2;

assign zext_ln215_12_fu_628_p1 = k_2_reg_337;

assign zext_ln215_13_fu_637_p1 = add_ln215_7_fu_632_p2;

assign zext_ln215_14_fu_659_p1 = add_ln215_8_fu_654_p2;

assign zext_ln215_8_fu_610_p1 = add_ln215_fu_605_p2;

assign zext_ln215_9_fu_515_p1 = k_reg_292;

assign zext_ln215_fu_601_p1 = j_5_reg_326;

assign zext_ln30_1_fu_447_p1 = add_ln30_reg_753;

assign zext_ln30_fu_432_p1 = j_reg_259;

assign zext_ln42_1_fu_498_p1 = add_ln42_fu_493_p2;

assign zext_ln42_fu_489_p1 = j_4_reg_281;

assign zext_ln58_1_fu_718_p1 = add_ln58_fu_713_p2;

assign zext_ln58_fu_709_p1 = j_6_reg_370;

always @ (posedge ap_clk) begin
    tmp_cast_reg_740[4:0] <= 5'b00000;
    tmp_10_cast_reg_805[4:0] <= 5'b00000;
    zext_ln42_reg_819[9:6] <= 4'b0000;
    tmp_11_cast_reg_875[4:0] <= 5'b00000;
    zext_ln215_reg_889[9:6] <= 4'b0000;
    tmp_12_cast_reg_955[4:0] <= 5'b00000;
    zext_ln58_1_reg_968[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
end

endmodule //top_nondf_kernel_2mm_x0
