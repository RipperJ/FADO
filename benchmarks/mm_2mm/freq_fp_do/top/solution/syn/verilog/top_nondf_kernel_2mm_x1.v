// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module top_nondf_kernel_2mm_x1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        xout_address0,
        xout_ce0,
        xout_q0,
        xin_address0,
        xin_ce0,
        xin_we0,
        xin_d0,
        grp_fu_142_p_din0,
        grp_fu_142_p_din1,
        grp_fu_142_p_dout0,
        grp_fu_142_p_ce,
        grp_fu_146_p_din0,
        grp_fu_146_p_din1,
        grp_fu_146_p_dout0,
        grp_fu_146_p_ce,
        grp_fu_150_p_din0,
        grp_fu_150_p_din1,
        grp_fu_150_p_dout0,
        grp_fu_150_p_ce,
        grp_fu_154_p_din0,
        grp_fu_154_p_din1,
        grp_fu_154_p_dout0,
        grp_fu_154_p_ce,
        grp_fu_158_p_din0,
        grp_fu_158_p_din1,
        grp_fu_158_p_dout0,
        grp_fu_158_p_ce,
        grp_fu_162_p_din0,
        grp_fu_162_p_din1,
        grp_fu_162_p_dout0,
        grp_fu_162_p_ce,
        grp_fu_166_p_din0,
        grp_fu_166_p_din1,
        grp_fu_166_p_dout0,
        grp_fu_166_p_ce,
        grp_fu_170_p_din0,
        grp_fu_170_p_din1,
        grp_fu_170_p_dout0,
        grp_fu_170_p_ce,
        grp_fu_174_p_din0,
        grp_fu_174_p_din1,
        grp_fu_174_p_dout0,
        grp_fu_174_p_ce,
        grp_fu_178_p_din0,
        grp_fu_178_p_din1,
        grp_fu_178_p_dout0,
        grp_fu_178_p_ce
);

parameter    ap_ST_fsm_state1 = 28'd1;
parameter    ap_ST_fsm_state2 = 28'd2;
parameter    ap_ST_fsm_state3 = 28'd4;
parameter    ap_ST_fsm_state4 = 28'd8;
parameter    ap_ST_fsm_state5 = 28'd16;
parameter    ap_ST_fsm_state6 = 28'd32;
parameter    ap_ST_fsm_state7 = 28'd64;
parameter    ap_ST_fsm_state8 = 28'd128;
parameter    ap_ST_fsm_state9 = 28'd256;
parameter    ap_ST_fsm_state10 = 28'd512;
parameter    ap_ST_fsm_state11 = 28'd1024;
parameter    ap_ST_fsm_state12 = 28'd2048;
parameter    ap_ST_fsm_state13 = 28'd4096;
parameter    ap_ST_fsm_state14 = 28'd8192;
parameter    ap_ST_fsm_state15 = 28'd16384;
parameter    ap_ST_fsm_state16 = 28'd32768;
parameter    ap_ST_fsm_state17 = 28'd65536;
parameter    ap_ST_fsm_state18 = 28'd131072;
parameter    ap_ST_fsm_state19 = 28'd262144;
parameter    ap_ST_fsm_state20 = 28'd524288;
parameter    ap_ST_fsm_state21 = 28'd1048576;
parameter    ap_ST_fsm_state22 = 28'd2097152;
parameter    ap_ST_fsm_state23 = 28'd4194304;
parameter    ap_ST_fsm_state24 = 28'd8388608;
parameter    ap_ST_fsm_state25 = 28'd16777216;
parameter    ap_ST_fsm_state26 = 28'd33554432;
parameter    ap_ST_fsm_state27 = 28'd67108864;
parameter    ap_ST_fsm_state28 = 28'd134217728;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] xout_address0;
output   xout_ce0;
input  [511:0] xout_q0;
output  [9:0] xin_address0;
output   xin_ce0;
output   xin_we0;
output  [31:0] xin_d0;
output  [511:0] grp_fu_142_p_din0;
output  [511:0] grp_fu_142_p_din1;
input  [511:0] grp_fu_142_p_dout0;
output   grp_fu_142_p_ce;
output  [511:0] grp_fu_146_p_din0;
output  [511:0] grp_fu_146_p_din1;
input  [511:0] grp_fu_146_p_dout0;
output   grp_fu_146_p_ce;
output  [31:0] grp_fu_150_p_din0;
output  [31:0] grp_fu_150_p_din1;
input  [31:0] grp_fu_150_p_dout0;
output   grp_fu_150_p_ce;
output  [31:0] grp_fu_154_p_din0;
output  [31:0] grp_fu_154_p_din1;
input  [31:0] grp_fu_154_p_dout0;
output   grp_fu_154_p_ce;
output  [31:0] grp_fu_158_p_din0;
output  [31:0] grp_fu_158_p_din1;
input  [31:0] grp_fu_158_p_dout0;
output   grp_fu_158_p_ce;
output  [31:0] grp_fu_162_p_din0;
output  [31:0] grp_fu_162_p_din1;
input  [31:0] grp_fu_162_p_dout0;
output   grp_fu_162_p_ce;
output  [31:0] grp_fu_166_p_din0;
output  [31:0] grp_fu_166_p_din1;
input  [31:0] grp_fu_166_p_dout0;
output   grp_fu_166_p_ce;
output  [31:0] grp_fu_170_p_din0;
output  [31:0] grp_fu_170_p_din1;
input  [31:0] grp_fu_170_p_dout0;
output   grp_fu_170_p_ce;
output  [31:0] grp_fu_174_p_din0;
output  [31:0] grp_fu_174_p_din1;
input  [31:0] grp_fu_174_p_dout0;
output   grp_fu_174_p_ce;
output  [31:0] grp_fu_178_p_din0;
output  [31:0] grp_fu_178_p_din1;
input  [31:0] grp_fu_178_p_dout0;
output   grp_fu_178_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg xout_ce0;
reg xin_ce0;
reg xin_we0;

(* fsm_encoding = "none" *) reg   [27:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] add_ln76_fu_892_p2;
reg   [5:0] add_ln76_reg_1492;
wire    ap_CS_fsm_state2;
wire   [9:0] tmp_cast_fu_902_p3;
reg   [9:0] tmp_cast_reg_1497;
wire   [0:0] trunc_ln80_fu_916_p1;
reg   [0:0] trunc_ln80_reg_1505;
wire   [0:0] icmp_ln76_fu_910_p2;
wire   [8:0] tmp_3_fu_930_p3;
reg   [8:0] tmp_3_reg_1509;
wire   [2:0] trunc_ln81_fu_938_p1;
reg   [2:0] trunc_ln81_reg_1514;
wire   [6:0] tmp_4_fu_952_p3;
reg   [6:0] tmp_4_reg_1518;
wire   [5:0] add_ln77_fu_960_p2;
reg   [5:0] add_ln77_reg_1523;
wire    ap_CS_fsm_state3;
reg   [8:0] B_V_0_addr_1_reg_1528;
reg   [8:0] B_V_1_addr_1_reg_1533;
reg   [6:0] C_V_0_addr_1_reg_1538;
reg   [6:0] C_V_1_addr_1_reg_1543;
reg   [6:0] C_V_2_addr_1_reg_1548;
reg   [6:0] C_V_3_addr_1_reg_1553;
reg   [6:0] C_V_4_addr_1_reg_1558;
reg   [6:0] C_V_5_addr_1_reg_1563;
reg   [6:0] C_V_6_addr_1_reg_1568;
reg   [6:0] C_V_7_addr_1_reg_1573;
reg   [9:0] D_input_V_addr_reg_1578;
wire   [0:0] icmp_ln77_fu_1017_p2;
reg   [511:0] xout_load_reg_1594;
wire    ap_CS_fsm_state4;
wire   [31:0] empty_fu_1057_p1;
reg   [31:0] empty_reg_1602;
wire   [5:0] add_ln87_fu_1097_p2;
reg   [5:0] add_ln87_reg_1618;
wire    ap_CS_fsm_state7;
wire   [5:0] add_ln88_fu_1109_p2;
reg   [5:0] add_ln88_reg_1626;
wire    ap_CS_fsm_state8;
wire   [8:0] zext_ln88_fu_1115_p1;
reg   [8:0] zext_ln88_reg_1631;
wire   [2:0] trunc_ln90_fu_1125_p1;
reg   [2:0] trunc_ln90_reg_1639;
wire   [0:0] icmp_ln88_fu_1119_p2;
reg   [6:0] tmp_V_0_addr_1_reg_1643;
reg   [6:0] tmp_V_1_addr_1_reg_1648;
reg   [6:0] tmp_V_2_addr_1_reg_1653;
reg   [6:0] tmp_V_3_addr_1_reg_1658;
reg   [6:0] tmp_V_4_addr_1_reg_1663;
reg   [6:0] tmp_V_5_addr_1_reg_1668;
reg   [6:0] tmp_V_6_addr_1_reg_1673;
reg   [6:0] tmp_V_7_addr_1_reg_1678;
wire   [5:0] add_ln91_fu_1167_p2;
reg   [5:0] add_ln91_reg_1686;
wire    ap_CS_fsm_state9;
wire   [0:0] tmp_fu_1159_p3;
wire   [511:0] A_V_0_q0;
reg  signed [511:0] A_V_0_load_reg_1711;
wire    ap_CS_fsm_state10;
wire   [511:0] B_V_0_q0;
reg  signed [511:0] B_V_0_load_reg_1716;
wire   [511:0] A_V_1_q0;
reg  signed [511:0] A_V_1_load_reg_1721;
wire   [511:0] B_V_1_q0;
reg  signed [511:0] B_V_1_load_reg_1726;
wire   [511:0] grp_fu_1228_p2;
reg   [511:0] mul_ln691_reg_1731;
wire    ap_CS_fsm_state15;
wire   [511:0] grp_fu_1232_p2;
reg   [511:0] mul_ln691_1_reg_1736;
wire   [511:0] add_ln691_fu_1240_p2;
wire    ap_CS_fsm_state16;
wire   [5:0] add_ln94_fu_1246_p2;
reg   [5:0] add_ln94_reg_1746;
wire    ap_CS_fsm_state18;
wire   [9:0] tmp_7_cast_fu_1256_p3;
reg   [9:0] tmp_7_cast_reg_1751;
wire   [5:0] add_ln95_fu_1270_p2;
reg   [5:0] add_ln95_reg_1759;
wire    ap_CS_fsm_state19;
wire   [6:0] zext_ln215_fu_1276_p1;
reg   [6:0] zext_ln215_reg_1764;
reg   [9:0] D_output_V_addr_1_reg_1774;
wire   [31:0] D_input_V_q0;
wire    ap_CS_fsm_state20;
wire   [5:0] add_ln98_fu_1309_p2;
reg   [5:0] add_ln98_reg_1790;
wire    ap_CS_fsm_state21;
wire   [0:0] tmp_5_fu_1301_p3;
wire   [31:0] tmp_V_0_q0;
reg  signed [31:0] tmp_V_0_load_reg_1875;
wire    ap_CS_fsm_state22;
wire   [31:0] C_V_0_q0;
reg  signed [31:0] C_V_0_load_reg_1880;
wire   [31:0] tmp_V_1_q0;
reg  signed [31:0] tmp_V_1_load_reg_1885;
wire   [31:0] C_V_1_q0;
reg  signed [31:0] C_V_1_load_reg_1890;
wire   [31:0] tmp_V_2_q0;
reg  signed [31:0] tmp_V_2_load_reg_1895;
wire   [31:0] C_V_2_q0;
reg  signed [31:0] C_V_2_load_reg_1900;
wire   [31:0] tmp_V_3_q0;
reg  signed [31:0] tmp_V_3_load_reg_1905;
wire   [31:0] C_V_3_q0;
reg  signed [31:0] C_V_3_load_reg_1910;
wire   [31:0] tmp_V_4_q0;
reg  signed [31:0] tmp_V_4_load_reg_1915;
wire   [31:0] C_V_4_q0;
reg  signed [31:0] C_V_4_load_reg_1920;
wire   [31:0] tmp_V_5_q0;
reg  signed [31:0] tmp_V_5_load_reg_1925;
wire   [31:0] C_V_5_q0;
reg  signed [31:0] C_V_5_load_reg_1930;
wire   [31:0] tmp_V_6_q0;
reg  signed [31:0] tmp_V_6_load_reg_1935;
wire   [31:0] C_V_6_q0;
reg  signed [31:0] C_V_6_load_reg_1940;
wire   [31:0] tmp_V_7_q0;
reg  signed [31:0] tmp_V_7_load_reg_1945;
wire   [31:0] C_V_7_q0;
reg  signed [31:0] C_V_7_load_reg_1950;
wire   [31:0] grp_fu_1370_p2;
reg   [31:0] mul_ln99_reg_1955;
wire    ap_CS_fsm_state24;
wire   [31:0] grp_fu_1374_p2;
reg   [31:0] mul_ln99_1_reg_1960;
wire   [31:0] grp_fu_1378_p2;
reg   [31:0] mul_ln99_2_reg_1965;
wire   [31:0] grp_fu_1382_p2;
reg   [31:0] mul_ln99_3_reg_1970;
wire   [31:0] grp_fu_1386_p2;
reg   [31:0] mul_ln99_4_reg_1975;
wire   [31:0] grp_fu_1390_p2;
reg   [31:0] mul_ln99_5_reg_1980;
wire   [31:0] grp_fu_1394_p2;
reg   [31:0] mul_ln99_6_reg_1985;
wire   [31:0] grp_fu_1398_p2;
reg   [31:0] mul_ln99_7_reg_1990;
wire   [31:0] sum_2_fu_1436_p2;
wire    ap_CS_fsm_state25;
wire   [5:0] add_ln104_fu_1442_p2;
reg   [5:0] add_ln104_reg_2000;
wire    ap_CS_fsm_state26;
wire   [9:0] tmp_12_cast_fu_1452_p3;
reg   [9:0] tmp_12_cast_reg_2005;
wire   [5:0] add_ln105_fu_1466_p2;
reg   [5:0] add_ln105_reg_2013;
wire    ap_CS_fsm_state27;
wire   [63:0] zext_ln106_1_fu_1481_p1;
reg   [63:0] zext_ln106_1_reg_2018;
wire   [6:0] tmp_V_0_address0;
reg    tmp_V_0_ce0;
reg   [6:0] tmp_V_0_address1;
reg    tmp_V_0_ce1;
reg    tmp_V_0_we1;
reg   [31:0] tmp_V_0_d1;
wire   [6:0] tmp_V_1_address0;
reg    tmp_V_1_ce0;
reg   [6:0] tmp_V_1_address1;
reg    tmp_V_1_ce1;
reg    tmp_V_1_we1;
reg   [31:0] tmp_V_1_d1;
wire   [6:0] tmp_V_2_address0;
reg    tmp_V_2_ce0;
reg   [6:0] tmp_V_2_address1;
reg    tmp_V_2_ce1;
reg    tmp_V_2_we1;
reg   [31:0] tmp_V_2_d1;
wire   [6:0] tmp_V_3_address0;
reg    tmp_V_3_ce0;
reg   [6:0] tmp_V_3_address1;
reg    tmp_V_3_ce1;
reg    tmp_V_3_we1;
reg   [31:0] tmp_V_3_d1;
wire   [6:0] tmp_V_4_address0;
reg    tmp_V_4_ce0;
reg   [6:0] tmp_V_4_address1;
reg    tmp_V_4_ce1;
reg    tmp_V_4_we1;
reg   [31:0] tmp_V_4_d1;
wire   [6:0] tmp_V_5_address0;
reg    tmp_V_5_ce0;
reg   [6:0] tmp_V_5_address1;
reg    tmp_V_5_ce1;
reg    tmp_V_5_we1;
reg   [31:0] tmp_V_5_d1;
wire   [6:0] tmp_V_6_address0;
reg    tmp_V_6_ce0;
reg   [6:0] tmp_V_6_address1;
reg    tmp_V_6_ce1;
reg    tmp_V_6_we1;
reg   [31:0] tmp_V_6_d1;
wire   [6:0] tmp_V_7_address0;
reg    tmp_V_7_ce0;
reg   [6:0] tmp_V_7_address1;
reg    tmp_V_7_ce1;
reg    tmp_V_7_we1;
reg   [31:0] tmp_V_7_d1;
wire   [8:0] A_V_0_address0;
reg    A_V_0_ce0;
wire   [8:0] A_V_0_address1;
reg    A_V_0_ce1;
reg    A_V_0_we1;
wire   [8:0] A_V_1_address0;
reg    A_V_1_ce0;
wire   [8:0] A_V_1_address1;
reg    A_V_1_ce1;
reg    A_V_1_we1;
wire   [8:0] B_V_0_address0;
reg    B_V_0_ce0;
reg    B_V_0_ce1;
reg    B_V_0_we1;
wire   [8:0] B_V_1_address0;
reg    B_V_1_ce0;
reg    B_V_1_ce1;
reg    B_V_1_we1;
wire   [6:0] C_V_0_address0;
reg    C_V_0_ce0;
reg    C_V_0_ce1;
reg    C_V_0_we1;
wire   [6:0] C_V_1_address0;
reg    C_V_1_ce0;
reg    C_V_1_ce1;
reg    C_V_1_we1;
wire   [6:0] C_V_2_address0;
reg    C_V_2_ce0;
reg    C_V_2_ce1;
reg    C_V_2_we1;
wire   [6:0] C_V_3_address0;
reg    C_V_3_ce0;
reg    C_V_3_ce1;
reg    C_V_3_we1;
wire   [6:0] C_V_4_address0;
reg    C_V_4_ce0;
reg    C_V_4_ce1;
reg    C_V_4_we1;
wire   [6:0] C_V_5_address0;
reg    C_V_5_ce0;
reg    C_V_5_ce1;
reg    C_V_5_we1;
wire   [6:0] C_V_6_address0;
reg    C_V_6_ce0;
reg    C_V_6_ce1;
reg    C_V_6_we1;
wire   [6:0] C_V_7_address0;
reg    C_V_7_ce0;
reg    C_V_7_ce1;
reg    C_V_7_we1;
wire   [9:0] D_input_V_address0;
reg    D_input_V_ce0;
reg    D_input_V_ce1;
reg    D_input_V_we1;
wire   [9:0] D_output_V_address0;
reg    D_output_V_ce0;
wire   [31:0] D_output_V_q0;
reg    D_output_V_ce1;
reg    D_output_V_we1;
reg   [5:0] i_reg_755;
reg   [5:0] j_reg_767;
wire    ap_CS_fsm_state6;
reg   [5:0] i_1_reg_779;
reg   [5:0] j_1_reg_791;
wire    ap_CS_fsm_state17;
wire   [0:0] icmp_ln87_fu_1103_p2;
reg   [5:0] k_reg_802;
reg   [511:0] conv3_i_120_reg_813;
reg   [5:0] i_2_reg_825;
wire   [0:0] icmp_ln95_fu_1295_p2;
reg   [5:0] j_2_reg_837;
wire   [0:0] icmp_ln94_fu_1264_p2;
reg   [5:0] k_1_reg_848;
reg   [31:0] sum_1_reg_859;
reg   [5:0] i_3_reg_870;
wire   [0:0] icmp_ln105_fu_1486_p2;
reg   [5:0] j_3_reg_881;
wire    ap_CS_fsm_state28;
wire   [0:0] icmp_ln104_fu_1460_p2;
wire   [63:0] zext_ln80_3_fu_983_p1;
wire   [63:0] zext_ln81_fu_994_p1;
wire   [63:0] zext_ln82_fu_1011_p1;
wire   [63:0] zext_ln78_fu_1045_p1;
wire   [63:0] zext_ln79_fu_1091_p1;
wire    ap_CS_fsm_state5;
wire   [63:0] zext_ln90_fu_1147_p1;
wire   [63:0] zext_ln215_1_fu_1191_p1;
wire   [63:0] zext_ln215_5_fu_1210_p1;
wire   [63:0] zext_ln215_4_fu_1289_p1;
wire   [63:0] zext_ln215_3_fu_1333_p1;
wire   [63:0] zext_ln215_6_fu_1358_p1;
wire   [2:0] trunc_ln78_fu_1023_p1;
wire   [31:0] trunc_ln91_fu_1216_p1;
wire   [0:0] trunc_ln79_fu_1069_p1;
wire   [4:0] trunc_ln82_fu_898_p1;
wire   [3:0] lshr_ln_fu_920_p4;
wire   [1:0] lshr_ln1_fu_942_p4;
wire   [8:0] zext_ln80_2_fu_974_p1;
wire   [8:0] add_ln80_fu_978_p2;
wire   [6:0] zext_ln80_1_fu_970_p1;
wire   [6:0] add_ln81_fu_989_p2;
wire   [9:0] zext_ln80_fu_966_p1;
wire   [9:0] add_ln82_fu_1006_p2;
wire   [1:0] lshr_ln2_fu_1027_p4;
wire   [7:0] tmp_6_fu_1037_p3;
wire   [3:0] lshr_ln4_fu_1073_p4;
wire   [9:0] tmp_s_fu_1083_p3;
wire   [1:0] lshr_ln3_fu_1129_p4;
wire   [7:0] tmp_9_fu_1139_p3;
wire   [3:0] lshr_ln5_fu_1173_p4;
wire   [9:0] tmp_1_fu_1183_p3;
wire   [8:0] tmp_2_fu_1197_p3;
wire   [8:0] add_ln215_1_fu_1205_p2;
wire  signed [511:0] grp_fu_1228_p0;
wire  signed [511:0] grp_fu_1228_p1;
wire    ap_CS_fsm_state11;
wire  signed [511:0] grp_fu_1232_p0;
wire  signed [511:0] grp_fu_1232_p1;
wire   [511:0] add_ln691_1_fu_1236_p2;
wire   [4:0] trunc_ln215_fu_1252_p1;
wire   [9:0] zext_ln215_2_fu_1280_p1;
wire   [9:0] add_ln215_fu_1284_p2;
wire   [1:0] lshr_ln215_1_fu_1315_p4;
wire   [7:0] tmp_7_fu_1325_p3;
wire   [6:0] tmp_8_fu_1345_p3;
wire   [6:0] add_ln215_2_fu_1353_p2;
wire  signed [31:0] grp_fu_1370_p0;
wire  signed [31:0] grp_fu_1370_p1;
wire    ap_CS_fsm_state23;
wire  signed [31:0] grp_fu_1374_p0;
wire  signed [31:0] grp_fu_1374_p1;
wire  signed [31:0] grp_fu_1378_p0;
wire  signed [31:0] grp_fu_1378_p1;
wire  signed [31:0] grp_fu_1382_p0;
wire  signed [31:0] grp_fu_1382_p1;
wire  signed [31:0] grp_fu_1386_p0;
wire  signed [31:0] grp_fu_1386_p1;
wire  signed [31:0] grp_fu_1390_p0;
wire  signed [31:0] grp_fu_1390_p1;
wire  signed [31:0] grp_fu_1394_p0;
wire  signed [31:0] grp_fu_1394_p1;
wire  signed [31:0] grp_fu_1398_p0;
wire  signed [31:0] grp_fu_1398_p1;
wire   [31:0] add_ln99_1_fu_1406_p2;
wire   [31:0] add_ln99_fu_1402_p2;
wire   [31:0] add_ln99_4_fu_1420_p2;
wire   [31:0] add_ln99_3_fu_1416_p2;
wire   [31:0] add_ln99_5_fu_1424_p2;
wire   [31:0] add_ln99_2_fu_1410_p2;
wire   [31:0] add_ln99_6_fu_1430_p2;
wire   [4:0] trunc_ln106_fu_1448_p1;
wire   [9:0] zext_ln106_fu_1472_p1;
wire   [9:0] add_ln106_fu_1476_p2;
wire    grp_fu_1228_ce;
wire    grp_fu_1232_ce;
wire    grp_fu_1370_ce;
wire    grp_fu_1374_ce;
wire    grp_fu_1378_ce;
wire    grp_fu_1382_ce;
wire    grp_fu_1386_ce;
wire    grp_fu_1390_ce;
wire    grp_fu_1394_ce;
wire    grp_fu_1398_ce;
reg   [27:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 28'd1;
end

top_nondf_kernel_2mm_x0_tmp_V_0 #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
tmp_V_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(tmp_V_0_address0),
    .ce0(tmp_V_0_ce0),
    .q0(tmp_V_0_q0),
    .address1(tmp_V_0_address1),
    .ce1(tmp_V_0_ce1),
    .we1(tmp_V_0_we1),
    .d1(tmp_V_0_d1)
);

top_nondf_kernel_2mm_x0_tmp_V_0 #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
tmp_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(tmp_V_1_address0),
    .ce0(tmp_V_1_ce0),
    .q0(tmp_V_1_q0),
    .address1(tmp_V_1_address1),
    .ce1(tmp_V_1_ce1),
    .we1(tmp_V_1_we1),
    .d1(tmp_V_1_d1)
);

top_nondf_kernel_2mm_x0_tmp_V_0 #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
tmp_V_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(tmp_V_2_address0),
    .ce0(tmp_V_2_ce0),
    .q0(tmp_V_2_q0),
    .address1(tmp_V_2_address1),
    .ce1(tmp_V_2_ce1),
    .we1(tmp_V_2_we1),
    .d1(tmp_V_2_d1)
);

top_nondf_kernel_2mm_x0_tmp_V_0 #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
tmp_V_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(tmp_V_3_address0),
    .ce0(tmp_V_3_ce0),
    .q0(tmp_V_3_q0),
    .address1(tmp_V_3_address1),
    .ce1(tmp_V_3_ce1),
    .we1(tmp_V_3_we1),
    .d1(tmp_V_3_d1)
);

top_nondf_kernel_2mm_x0_tmp_V_0 #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
tmp_V_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(tmp_V_4_address0),
    .ce0(tmp_V_4_ce0),
    .q0(tmp_V_4_q0),
    .address1(tmp_V_4_address1),
    .ce1(tmp_V_4_ce1),
    .we1(tmp_V_4_we1),
    .d1(tmp_V_4_d1)
);

top_nondf_kernel_2mm_x0_tmp_V_0 #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
tmp_V_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(tmp_V_5_address0),
    .ce0(tmp_V_5_ce0),
    .q0(tmp_V_5_q0),
    .address1(tmp_V_5_address1),
    .ce1(tmp_V_5_ce1),
    .we1(tmp_V_5_we1),
    .d1(tmp_V_5_d1)
);

top_nondf_kernel_2mm_x0_tmp_V_0 #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
tmp_V_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(tmp_V_6_address0),
    .ce0(tmp_V_6_ce0),
    .q0(tmp_V_6_q0),
    .address1(tmp_V_6_address1),
    .ce1(tmp_V_6_ce1),
    .we1(tmp_V_6_we1),
    .d1(tmp_V_6_d1)
);

top_nondf_kernel_2mm_x0_tmp_V_0 #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
tmp_V_7_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(tmp_V_7_address0),
    .ce0(tmp_V_7_ce0),
    .q0(tmp_V_7_q0),
    .address1(tmp_V_7_address1),
    .ce1(tmp_V_7_ce1),
    .we1(tmp_V_7_we1),
    .d1(tmp_V_7_d1)
);

top_nondf_kernel_2mm_x0_A_V_0 #(
    .DataWidth( 512 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
A_V_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(A_V_0_address0),
    .ce0(A_V_0_ce0),
    .q0(A_V_0_q0),
    .address1(A_V_0_address1),
    .ce1(A_V_0_ce1),
    .we1(A_V_0_we1),
    .d1(xout_load_reg_1594)
);

top_nondf_kernel_2mm_x0_A_V_0 #(
    .DataWidth( 512 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
A_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(A_V_1_address0),
    .ce0(A_V_1_ce0),
    .q0(A_V_1_q0),
    .address1(A_V_1_address1),
    .ce1(A_V_1_ce1),
    .we1(A_V_1_we1),
    .d1(xout_load_reg_1594)
);

top_nondf_kernel_2mm_x0_A_V_0 #(
    .DataWidth( 512 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
B_V_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(B_V_0_address0),
    .ce0(B_V_0_ce0),
    .q0(B_V_0_q0),
    .address1(B_V_0_addr_1_reg_1528),
    .ce1(B_V_0_ce1),
    .we1(B_V_0_we1),
    .d1(xout_load_reg_1594)
);

top_nondf_kernel_2mm_x0_A_V_0 #(
    .DataWidth( 512 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
B_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(B_V_1_address0),
    .ce0(B_V_1_ce0),
    .q0(B_V_1_q0),
    .address1(B_V_1_addr_1_reg_1533),
    .ce1(B_V_1_ce1),
    .we1(B_V_1_we1),
    .d1(xout_load_reg_1594)
);

top_nondf_kernel_2mm_x0_tmp_V_0 #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
C_V_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(C_V_0_address0),
    .ce0(C_V_0_ce0),
    .q0(C_V_0_q0),
    .address1(C_V_0_addr_1_reg_1538),
    .ce1(C_V_0_ce1),
    .we1(C_V_0_we1),
    .d1(empty_reg_1602)
);

top_nondf_kernel_2mm_x0_tmp_V_0 #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
C_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(C_V_1_address0),
    .ce0(C_V_1_ce0),
    .q0(C_V_1_q0),
    .address1(C_V_1_addr_1_reg_1543),
    .ce1(C_V_1_ce1),
    .we1(C_V_1_we1),
    .d1(empty_reg_1602)
);

top_nondf_kernel_2mm_x0_tmp_V_0 #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
C_V_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(C_V_2_address0),
    .ce0(C_V_2_ce0),
    .q0(C_V_2_q0),
    .address1(C_V_2_addr_1_reg_1548),
    .ce1(C_V_2_ce1),
    .we1(C_V_2_we1),
    .d1(empty_reg_1602)
);

top_nondf_kernel_2mm_x0_tmp_V_0 #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
C_V_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(C_V_3_address0),
    .ce0(C_V_3_ce0),
    .q0(C_V_3_q0),
    .address1(C_V_3_addr_1_reg_1553),
    .ce1(C_V_3_ce1),
    .we1(C_V_3_we1),
    .d1(empty_reg_1602)
);

top_nondf_kernel_2mm_x0_tmp_V_0 #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
C_V_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(C_V_4_address0),
    .ce0(C_V_4_ce0),
    .q0(C_V_4_q0),
    .address1(C_V_4_addr_1_reg_1558),
    .ce1(C_V_4_ce1),
    .we1(C_V_4_we1),
    .d1(empty_reg_1602)
);

top_nondf_kernel_2mm_x0_tmp_V_0 #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
C_V_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(C_V_5_address0),
    .ce0(C_V_5_ce0),
    .q0(C_V_5_q0),
    .address1(C_V_5_addr_1_reg_1563),
    .ce1(C_V_5_ce1),
    .we1(C_V_5_we1),
    .d1(empty_reg_1602)
);

top_nondf_kernel_2mm_x0_tmp_V_0 #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
C_V_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(C_V_6_address0),
    .ce0(C_V_6_ce0),
    .q0(C_V_6_q0),
    .address1(C_V_6_addr_1_reg_1568),
    .ce1(C_V_6_ce1),
    .we1(C_V_6_we1),
    .d1(empty_reg_1602)
);

top_nondf_kernel_2mm_x0_tmp_V_0 #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
C_V_7_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(C_V_7_address0),
    .ce0(C_V_7_ce0),
    .q0(C_V_7_q0),
    .address1(C_V_7_addr_1_reg_1573),
    .ce1(C_V_7_ce1),
    .we1(C_V_7_we1),
    .d1(empty_reg_1602)
);

top_nondf_kernel_2mm_x0_D_input_V #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
D_input_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(D_input_V_address0),
    .ce0(D_input_V_ce0),
    .q0(D_input_V_q0),
    .address1(D_input_V_addr_reg_1578),
    .ce1(D_input_V_ce1),
    .we1(D_input_V_we1),
    .d1(empty_reg_1602)
);

top_nondf_kernel_2mm_x0_D_input_V #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
D_output_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(D_output_V_address0),
    .ce0(D_output_V_ce0),
    .q0(D_output_V_q0),
    .address1(D_output_V_addr_1_reg_1774),
    .ce1(D_output_V_ce1),
    .we1(D_output_V_we1),
    .d1(sum_1_reg_859)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln88_fu_1119_p2 == 1'd0))) begin
        conv3_i_120_reg_813 <= 512'd0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        conv3_i_120_reg_813 <= add_ln691_fu_1240_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln76_fu_910_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_1_reg_779 <= 6'd0;
    end else if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln88_fu_1119_p2 == 1'd1))) begin
        i_1_reg_779 <= add_ln87_reg_1618;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln87_fu_1103_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        i_2_reg_825 <= 6'd0;
    end else if (((icmp_ln95_fu_1295_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state19))) begin
        i_2_reg_825 <= add_ln94_reg_1746;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln94_fu_1264_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
        i_3_reg_870 <= 6'd0;
    end else if (((icmp_ln105_fu_1486_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state27))) begin
        i_3_reg_870 <= add_ln104_reg_2000;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_755 <= 6'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln77_fu_1017_p2 == 1'd1))) begin
        i_reg_755 <= add_ln76_reg_1492;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln87_fu_1103_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        j_1_reg_791 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        j_1_reg_791 <= add_ln88_reg_1626;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln94_fu_1264_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state18))) begin
        j_2_reg_837 <= 6'd0;
    end else if (((tmp_5_fu_1301_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state21))) begin
        j_2_reg_837 <= add_ln95_reg_1759;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln104_fu_1460_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state26))) begin
        j_3_reg_881 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        j_3_reg_881 <= add_ln105_reg_2013;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln76_fu_910_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_767 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        j_reg_767 <= add_ln77_reg_1523;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        k_1_reg_848 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        k_1_reg_848 <= add_ln98_reg_1790;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln88_fu_1119_p2 == 1'd0))) begin
        k_reg_802 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        k_reg_802 <= add_ln91_reg_1686;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        sum_1_reg_859 <= D_input_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        sum_1_reg_859 <= sum_2_fu_1436_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        A_V_0_load_reg_1711 <= A_V_0_q0;
        A_V_1_load_reg_1721 <= A_V_1_q0;
        B_V_0_load_reg_1716 <= B_V_0_q0;
        B_V_1_load_reg_1726 <= B_V_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        B_V_0_addr_1_reg_1528 <= zext_ln80_3_fu_983_p1;
        B_V_1_addr_1_reg_1533 <= zext_ln80_3_fu_983_p1;
        C_V_0_addr_1_reg_1538 <= zext_ln81_fu_994_p1;
        C_V_1_addr_1_reg_1543 <= zext_ln81_fu_994_p1;
        C_V_2_addr_1_reg_1548 <= zext_ln81_fu_994_p1;
        C_V_3_addr_1_reg_1553 <= zext_ln81_fu_994_p1;
        C_V_4_addr_1_reg_1558 <= zext_ln81_fu_994_p1;
        C_V_5_addr_1_reg_1563 <= zext_ln81_fu_994_p1;
        C_V_6_addr_1_reg_1568 <= zext_ln81_fu_994_p1;
        C_V_7_addr_1_reg_1573 <= zext_ln81_fu_994_p1;
        D_input_V_addr_reg_1578 <= zext_ln82_fu_1011_p1;
        add_ln77_reg_1523 <= add_ln77_fu_960_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        C_V_0_load_reg_1880 <= C_V_0_q0;
        C_V_1_load_reg_1890 <= C_V_1_q0;
        C_V_2_load_reg_1900 <= C_V_2_q0;
        C_V_3_load_reg_1910 <= C_V_3_q0;
        C_V_4_load_reg_1920 <= C_V_4_q0;
        C_V_5_load_reg_1930 <= C_V_5_q0;
        C_V_6_load_reg_1940 <= C_V_6_q0;
        C_V_7_load_reg_1950 <= C_V_7_q0;
        tmp_V_0_load_reg_1875 <= tmp_V_0_q0;
        tmp_V_1_load_reg_1885 <= tmp_V_1_q0;
        tmp_V_2_load_reg_1895 <= tmp_V_2_q0;
        tmp_V_3_load_reg_1905 <= tmp_V_3_q0;
        tmp_V_4_load_reg_1915 <= tmp_V_4_q0;
        tmp_V_5_load_reg_1925 <= tmp_V_5_q0;
        tmp_V_6_load_reg_1935 <= tmp_V_6_q0;
        tmp_V_7_load_reg_1945 <= tmp_V_7_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        D_output_V_addr_1_reg_1774 <= zext_ln215_4_fu_1289_p1;
        add_ln95_reg_1759 <= add_ln95_fu_1270_p2;
        zext_ln215_reg_1764[5 : 0] <= zext_ln215_fu_1276_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        add_ln104_reg_2000 <= add_ln104_fu_1442_p2;
        tmp_12_cast_reg_2005[9 : 5] <= tmp_12_cast_fu_1452_p3[9 : 5];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        add_ln105_reg_2013 <= add_ln105_fu_1466_p2;
        zext_ln106_1_reg_2018[9 : 0] <= zext_ln106_1_fu_1481_p1[9 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln76_reg_1492 <= add_ln76_fu_892_p2;
        tmp_cast_reg_1497[9 : 5] <= tmp_cast_fu_902_p3[9 : 5];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        add_ln87_reg_1618 <= add_ln87_fu_1097_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        add_ln88_reg_1626 <= add_ln88_fu_1109_p2;
        zext_ln88_reg_1631[5 : 0] <= zext_ln88_fu_1115_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (tmp_fu_1159_p3 == 1'd0))) begin
        add_ln91_reg_1686 <= add_ln91_fu_1167_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        add_ln94_reg_1746 <= add_ln94_fu_1246_p2;
        tmp_7_cast_reg_1751[9 : 5] <= tmp_7_cast_fu_1256_p3[9 : 5];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_5_fu_1301_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state21))) begin
        add_ln98_reg_1790 <= add_ln98_fu_1309_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        empty_reg_1602 <= empty_fu_1057_p1;
        xout_load_reg_1594 <= xout_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        mul_ln691_1_reg_1736 <= grp_fu_146_p_dout0;
        mul_ln691_reg_1731 <= grp_fu_142_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        mul_ln99_1_reg_1960 <= grp_fu_154_p_dout0;
        mul_ln99_2_reg_1965 <= grp_fu_158_p_dout0;
        mul_ln99_3_reg_1970 <= grp_fu_162_p_dout0;
        mul_ln99_4_reg_1975 <= grp_fu_166_p_dout0;
        mul_ln99_5_reg_1980 <= grp_fu_170_p_dout0;
        mul_ln99_6_reg_1985 <= grp_fu_174_p_dout0;
        mul_ln99_7_reg_1990 <= grp_fu_178_p_dout0;
        mul_ln99_reg_1955 <= grp_fu_150_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln76_fu_910_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_3_reg_1509[8 : 5] <= tmp_3_fu_930_p3[8 : 5];
        tmp_4_reg_1518[6 : 5] <= tmp_4_fu_952_p3[6 : 5];
        trunc_ln80_reg_1505 <= trunc_ln80_fu_916_p1;
        trunc_ln81_reg_1514 <= trunc_ln81_fu_938_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln88_fu_1119_p2 == 1'd0))) begin
        tmp_V_0_addr_1_reg_1643 <= zext_ln90_fu_1147_p1;
        tmp_V_1_addr_1_reg_1648 <= zext_ln90_fu_1147_p1;
        tmp_V_2_addr_1_reg_1653 <= zext_ln90_fu_1147_p1;
        tmp_V_3_addr_1_reg_1658 <= zext_ln90_fu_1147_p1;
        tmp_V_4_addr_1_reg_1663 <= zext_ln90_fu_1147_p1;
        tmp_V_5_addr_1_reg_1668 <= zext_ln90_fu_1147_p1;
        tmp_V_6_addr_1_reg_1673 <= zext_ln90_fu_1147_p1;
        tmp_V_7_addr_1_reg_1678 <= zext_ln90_fu_1147_p1;
        trunc_ln90_reg_1639 <= trunc_ln90_fu_1125_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        A_V_0_ce0 = 1'b1;
    end else begin
        A_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        A_V_0_ce1 = 1'b1;
    end else begin
        A_V_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln79_fu_1069_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        A_V_0_we1 = 1'b1;
    end else begin
        A_V_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        A_V_1_ce0 = 1'b1;
    end else begin
        A_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        A_V_1_ce1 = 1'b1;
    end else begin
        A_V_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln79_fu_1069_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        A_V_1_we1 = 1'b1;
    end else begin
        A_V_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        B_V_0_ce0 = 1'b1;
    end else begin
        B_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        B_V_0_ce1 = 1'b1;
    end else begin
        B_V_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln80_reg_1505 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        B_V_0_we1 = 1'b1;
    end else begin
        B_V_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        B_V_1_ce0 = 1'b1;
    end else begin
        B_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        B_V_1_ce1 = 1'b1;
    end else begin
        B_V_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln80_reg_1505 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        B_V_1_we1 = 1'b1;
    end else begin
        B_V_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        C_V_0_ce0 = 1'b1;
    end else begin
        C_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        C_V_0_ce1 = 1'b1;
    end else begin
        C_V_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln81_reg_1514 == 3'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        C_V_0_we1 = 1'b1;
    end else begin
        C_V_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        C_V_1_ce0 = 1'b1;
    end else begin
        C_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        C_V_1_ce1 = 1'b1;
    end else begin
        C_V_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln81_reg_1514 == 3'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        C_V_1_we1 = 1'b1;
    end else begin
        C_V_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        C_V_2_ce0 = 1'b1;
    end else begin
        C_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        C_V_2_ce1 = 1'b1;
    end else begin
        C_V_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln81_reg_1514 == 3'd2) & (1'b1 == ap_CS_fsm_state5))) begin
        C_V_2_we1 = 1'b1;
    end else begin
        C_V_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        C_V_3_ce0 = 1'b1;
    end else begin
        C_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        C_V_3_ce1 = 1'b1;
    end else begin
        C_V_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln81_reg_1514 == 3'd3) & (1'b1 == ap_CS_fsm_state5))) begin
        C_V_3_we1 = 1'b1;
    end else begin
        C_V_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        C_V_4_ce0 = 1'b1;
    end else begin
        C_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        C_V_4_ce1 = 1'b1;
    end else begin
        C_V_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln81_reg_1514 == 3'd4) & (1'b1 == ap_CS_fsm_state5))) begin
        C_V_4_we1 = 1'b1;
    end else begin
        C_V_4_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        C_V_5_ce0 = 1'b1;
    end else begin
        C_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        C_V_5_ce1 = 1'b1;
    end else begin
        C_V_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln81_reg_1514 == 3'd5) & (1'b1 == ap_CS_fsm_state5))) begin
        C_V_5_we1 = 1'b1;
    end else begin
        C_V_5_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        C_V_6_ce0 = 1'b1;
    end else begin
        C_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        C_V_6_ce1 = 1'b1;
    end else begin
        C_V_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln81_reg_1514 == 3'd6) & (1'b1 == ap_CS_fsm_state5))) begin
        C_V_6_we1 = 1'b1;
    end else begin
        C_V_6_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        C_V_7_ce0 = 1'b1;
    end else begin
        C_V_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        C_V_7_ce1 = 1'b1;
    end else begin
        C_V_7_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln81_reg_1514 == 3'd7) & (1'b1 == ap_CS_fsm_state5))) begin
        C_V_7_we1 = 1'b1;
    end else begin
        C_V_7_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        D_input_V_ce0 = 1'b1;
    end else begin
        D_input_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        D_input_V_ce1 = 1'b1;
    end else begin
        D_input_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        D_input_V_we1 = 1'b1;
    end else begin
        D_input_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        D_output_V_ce0 = 1'b1;
    end else begin
        D_output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        D_output_V_ce1 = 1'b1;
    end else begin
        D_output_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_5_fu_1301_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state21))) begin
        D_output_V_we1 = 1'b1;
    end else begin
        D_output_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln104_fu_1460_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state26)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln104_fu_1460_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state26))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_V_0_address1 = tmp_V_0_addr_1_reg_1643;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_V_0_address1 = zext_ln78_fu_1045_p1;
    end else begin
        tmp_V_0_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        tmp_V_0_ce0 = 1'b1;
    end else begin
        tmp_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state4))) begin
        tmp_V_0_ce1 = 1'b1;
    end else begin
        tmp_V_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_V_0_d1 = trunc_ln91_fu_1216_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_V_0_d1 = empty_fu_1057_p1;
    end else begin
        tmp_V_0_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((trunc_ln78_fu_1023_p1 == 3'd0) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == ap_CS_fsm_state9) & (tmp_fu_1159_p3 == 1'd1) & (trunc_ln90_reg_1639 == 3'd0)))) begin
        tmp_V_0_we1 = 1'b1;
    end else begin
        tmp_V_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_V_1_address1 = tmp_V_1_addr_1_reg_1648;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_V_1_address1 = zext_ln78_fu_1045_p1;
    end else begin
        tmp_V_1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        tmp_V_1_ce0 = 1'b1;
    end else begin
        tmp_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state4))) begin
        tmp_V_1_ce1 = 1'b1;
    end else begin
        tmp_V_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_V_1_d1 = trunc_ln91_fu_1216_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_V_1_d1 = empty_fu_1057_p1;
    end else begin
        tmp_V_1_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((trunc_ln78_fu_1023_p1 == 3'd1) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == ap_CS_fsm_state9) & (tmp_fu_1159_p3 == 1'd1) & (trunc_ln90_reg_1639 == 3'd1)))) begin
        tmp_V_1_we1 = 1'b1;
    end else begin
        tmp_V_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_V_2_address1 = tmp_V_2_addr_1_reg_1653;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_V_2_address1 = zext_ln78_fu_1045_p1;
    end else begin
        tmp_V_2_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        tmp_V_2_ce0 = 1'b1;
    end else begin
        tmp_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state4))) begin
        tmp_V_2_ce1 = 1'b1;
    end else begin
        tmp_V_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_V_2_d1 = trunc_ln91_fu_1216_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_V_2_d1 = empty_fu_1057_p1;
    end else begin
        tmp_V_2_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((trunc_ln78_fu_1023_p1 == 3'd2) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == ap_CS_fsm_state9) & (tmp_fu_1159_p3 == 1'd1) & (trunc_ln90_reg_1639 == 3'd2)))) begin
        tmp_V_2_we1 = 1'b1;
    end else begin
        tmp_V_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_V_3_address1 = tmp_V_3_addr_1_reg_1658;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_V_3_address1 = zext_ln78_fu_1045_p1;
    end else begin
        tmp_V_3_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        tmp_V_3_ce0 = 1'b1;
    end else begin
        tmp_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state4))) begin
        tmp_V_3_ce1 = 1'b1;
    end else begin
        tmp_V_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_V_3_d1 = trunc_ln91_fu_1216_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_V_3_d1 = empty_fu_1057_p1;
    end else begin
        tmp_V_3_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((trunc_ln78_fu_1023_p1 == 3'd3) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == ap_CS_fsm_state9) & (tmp_fu_1159_p3 == 1'd1) & (trunc_ln90_reg_1639 == 3'd3)))) begin
        tmp_V_3_we1 = 1'b1;
    end else begin
        tmp_V_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_V_4_address1 = tmp_V_4_addr_1_reg_1663;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_V_4_address1 = zext_ln78_fu_1045_p1;
    end else begin
        tmp_V_4_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        tmp_V_4_ce0 = 1'b1;
    end else begin
        tmp_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state4))) begin
        tmp_V_4_ce1 = 1'b1;
    end else begin
        tmp_V_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_V_4_d1 = trunc_ln91_fu_1216_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_V_4_d1 = empty_fu_1057_p1;
    end else begin
        tmp_V_4_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((trunc_ln78_fu_1023_p1 == 3'd4) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == ap_CS_fsm_state9) & (tmp_fu_1159_p3 == 1'd1) & (trunc_ln90_reg_1639 == 3'd4)))) begin
        tmp_V_4_we1 = 1'b1;
    end else begin
        tmp_V_4_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_V_5_address1 = tmp_V_5_addr_1_reg_1668;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_V_5_address1 = zext_ln78_fu_1045_p1;
    end else begin
        tmp_V_5_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        tmp_V_5_ce0 = 1'b1;
    end else begin
        tmp_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state4))) begin
        tmp_V_5_ce1 = 1'b1;
    end else begin
        tmp_V_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_V_5_d1 = trunc_ln91_fu_1216_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_V_5_d1 = empty_fu_1057_p1;
    end else begin
        tmp_V_5_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((trunc_ln78_fu_1023_p1 == 3'd5) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == ap_CS_fsm_state9) & (tmp_fu_1159_p3 == 1'd1) & (trunc_ln90_reg_1639 == 3'd5)))) begin
        tmp_V_5_we1 = 1'b1;
    end else begin
        tmp_V_5_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_V_6_address1 = tmp_V_6_addr_1_reg_1673;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_V_6_address1 = zext_ln78_fu_1045_p1;
    end else begin
        tmp_V_6_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        tmp_V_6_ce0 = 1'b1;
    end else begin
        tmp_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state4))) begin
        tmp_V_6_ce1 = 1'b1;
    end else begin
        tmp_V_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_V_6_d1 = trunc_ln91_fu_1216_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_V_6_d1 = empty_fu_1057_p1;
    end else begin
        tmp_V_6_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((trunc_ln78_fu_1023_p1 == 3'd6) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == ap_CS_fsm_state9) & (tmp_fu_1159_p3 == 1'd1) & (trunc_ln90_reg_1639 == 3'd6)))) begin
        tmp_V_6_we1 = 1'b1;
    end else begin
        tmp_V_6_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_V_7_address1 = tmp_V_7_addr_1_reg_1678;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_V_7_address1 = zext_ln78_fu_1045_p1;
    end else begin
        tmp_V_7_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        tmp_V_7_ce0 = 1'b1;
    end else begin
        tmp_V_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state4))) begin
        tmp_V_7_ce1 = 1'b1;
    end else begin
        tmp_V_7_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_V_7_d1 = trunc_ln91_fu_1216_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_V_7_d1 = empty_fu_1057_p1;
    end else begin
        tmp_V_7_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((trunc_ln78_fu_1023_p1 == 3'd7) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == ap_CS_fsm_state9) & (tmp_fu_1159_p3 == 1'd1) & (trunc_ln90_reg_1639 == 3'd7)))) begin
        tmp_V_7_we1 = 1'b1;
    end else begin
        tmp_V_7_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        xin_ce0 = 1'b1;
    end else begin
        xin_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        xin_we0 = 1'b1;
    end else begin
        xin_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        xout_ce0 = 1'b1;
    end else begin
        xout_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln76_fu_910_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln77_fu_1017_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state7 : begin
            if (((icmp_ln87_fu_1103_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln88_fu_1119_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (tmp_fu_1159_p3 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state18 : begin
            if (((icmp_ln94_fu_1264_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state19 : begin
            if (((icmp_ln95_fu_1295_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            if (((tmp_5_fu_1301_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state26 : begin
            if (((icmp_ln104_fu_1460_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state27 : begin
            if (((icmp_ln105_fu_1486_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state27))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_V_0_address0 = zext_ln215_1_fu_1191_p1;

assign A_V_0_address1 = zext_ln79_fu_1091_p1;

assign A_V_1_address0 = zext_ln215_1_fu_1191_p1;

assign A_V_1_address1 = zext_ln79_fu_1091_p1;

assign B_V_0_address0 = zext_ln215_5_fu_1210_p1;

assign B_V_1_address0 = zext_ln215_5_fu_1210_p1;

assign C_V_0_address0 = zext_ln215_6_fu_1358_p1;

assign C_V_1_address0 = zext_ln215_6_fu_1358_p1;

assign C_V_2_address0 = zext_ln215_6_fu_1358_p1;

assign C_V_3_address0 = zext_ln215_6_fu_1358_p1;

assign C_V_4_address0 = zext_ln215_6_fu_1358_p1;

assign C_V_5_address0 = zext_ln215_6_fu_1358_p1;

assign C_V_6_address0 = zext_ln215_6_fu_1358_p1;

assign C_V_7_address0 = zext_ln215_6_fu_1358_p1;

assign D_input_V_address0 = zext_ln215_4_fu_1289_p1;

assign D_output_V_address0 = zext_ln106_1_fu_1481_p1;

assign add_ln104_fu_1442_p2 = (i_3_reg_870 + 6'd1);

assign add_ln105_fu_1466_p2 = (j_3_reg_881 + 6'd1);

assign add_ln106_fu_1476_p2 = (tmp_12_cast_reg_2005 + zext_ln106_fu_1472_p1);

assign add_ln215_1_fu_1205_p2 = (tmp_2_fu_1197_p3 + zext_ln88_reg_1631);

assign add_ln215_2_fu_1353_p2 = (tmp_8_fu_1345_p3 + zext_ln215_reg_1764);

assign add_ln215_fu_1284_p2 = (tmp_7_cast_reg_1751 + zext_ln215_2_fu_1280_p1);

assign add_ln691_1_fu_1236_p2 = (mul_ln691_reg_1731 + mul_ln691_1_reg_1736);

assign add_ln691_fu_1240_p2 = (conv3_i_120_reg_813 + add_ln691_1_fu_1236_p2);

assign add_ln76_fu_892_p2 = (i_reg_755 + 6'd1);

assign add_ln77_fu_960_p2 = (j_reg_767 + 6'd1);

assign add_ln80_fu_978_p2 = (tmp_3_reg_1509 + zext_ln80_2_fu_974_p1);

assign add_ln81_fu_989_p2 = (tmp_4_reg_1518 + zext_ln80_1_fu_970_p1);

assign add_ln82_fu_1006_p2 = (tmp_cast_reg_1497 + zext_ln80_fu_966_p1);

assign add_ln87_fu_1097_p2 = (i_1_reg_779 + 6'd1);

assign add_ln88_fu_1109_p2 = (j_1_reg_791 + 6'd1);

assign add_ln91_fu_1167_p2 = (k_reg_802 + 6'd2);

assign add_ln94_fu_1246_p2 = (i_2_reg_825 + 6'd1);

assign add_ln95_fu_1270_p2 = (j_2_reg_837 + 6'd1);

assign add_ln98_fu_1309_p2 = (k_1_reg_848 + 6'd8);

assign add_ln99_1_fu_1406_p2 = (mul_ln99_2_reg_1965 + mul_ln99_3_reg_1970);

assign add_ln99_2_fu_1410_p2 = (add_ln99_1_fu_1406_p2 + add_ln99_fu_1402_p2);

assign add_ln99_3_fu_1416_p2 = (mul_ln99_4_reg_1975 + mul_ln99_5_reg_1980);

assign add_ln99_4_fu_1420_p2 = (mul_ln99_6_reg_1985 + mul_ln99_7_reg_1990);

assign add_ln99_5_fu_1424_p2 = (add_ln99_4_fu_1420_p2 + add_ln99_3_fu_1416_p2);

assign add_ln99_6_fu_1430_p2 = (add_ln99_5_fu_1424_p2 + add_ln99_2_fu_1410_p2);

assign add_ln99_fu_1402_p2 = (mul_ln99_reg_1955 + mul_ln99_1_reg_1960);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign empty_fu_1057_p1 = xout_q0[31:0];

assign grp_fu_1228_ce = 1'b1;

assign grp_fu_1228_p0 = B_V_0_load_reg_1716;

assign grp_fu_1228_p1 = A_V_0_load_reg_1711;

assign grp_fu_1228_p2 = grp_fu_142_p_dout0;

assign grp_fu_1232_ce = 1'b1;

assign grp_fu_1232_p0 = B_V_1_load_reg_1726;

assign grp_fu_1232_p1 = A_V_1_load_reg_1721;

assign grp_fu_1232_p2 = grp_fu_146_p_dout0;

assign grp_fu_1370_ce = 1'b1;

assign grp_fu_1370_p0 = C_V_0_load_reg_1880;

assign grp_fu_1370_p1 = tmp_V_0_load_reg_1875;

assign grp_fu_1370_p2 = grp_fu_150_p_dout0;

assign grp_fu_1374_ce = 1'b1;

assign grp_fu_1374_p0 = C_V_1_load_reg_1890;

assign grp_fu_1374_p1 = tmp_V_1_load_reg_1885;

assign grp_fu_1374_p2 = grp_fu_154_p_dout0;

assign grp_fu_1378_ce = 1'b1;

assign grp_fu_1378_p0 = C_V_2_load_reg_1900;

assign grp_fu_1378_p1 = tmp_V_2_load_reg_1895;

assign grp_fu_1378_p2 = grp_fu_158_p_dout0;

assign grp_fu_1382_ce = 1'b1;

assign grp_fu_1382_p0 = C_V_3_load_reg_1910;

assign grp_fu_1382_p1 = tmp_V_3_load_reg_1905;

assign grp_fu_1382_p2 = grp_fu_162_p_dout0;

assign grp_fu_1386_ce = 1'b1;

assign grp_fu_1386_p0 = C_V_4_load_reg_1920;

assign grp_fu_1386_p1 = tmp_V_4_load_reg_1915;

assign grp_fu_1386_p2 = grp_fu_166_p_dout0;

assign grp_fu_1390_ce = 1'b1;

assign grp_fu_1390_p0 = C_V_5_load_reg_1930;

assign grp_fu_1390_p1 = tmp_V_5_load_reg_1925;

assign grp_fu_1390_p2 = grp_fu_170_p_dout0;

assign grp_fu_1394_ce = 1'b1;

assign grp_fu_1394_p0 = C_V_6_load_reg_1940;

assign grp_fu_1394_p1 = tmp_V_6_load_reg_1935;

assign grp_fu_1394_p2 = grp_fu_174_p_dout0;

assign grp_fu_1398_ce = 1'b1;

assign grp_fu_1398_p0 = C_V_7_load_reg_1950;

assign grp_fu_1398_p1 = tmp_V_7_load_reg_1945;

assign grp_fu_1398_p2 = grp_fu_178_p_dout0;

assign grp_fu_142_p_ce = 1'b1;

assign grp_fu_142_p_din0 = B_V_0_load_reg_1716;

assign grp_fu_142_p_din1 = A_V_0_load_reg_1711;

assign grp_fu_146_p_ce = 1'b1;

assign grp_fu_146_p_din0 = B_V_1_load_reg_1726;

assign grp_fu_146_p_din1 = A_V_1_load_reg_1721;

assign grp_fu_150_p_ce = 1'b1;

assign grp_fu_150_p_din0 = C_V_0_load_reg_1880;

assign grp_fu_150_p_din1 = tmp_V_0_load_reg_1875;

assign grp_fu_154_p_ce = 1'b1;

assign grp_fu_154_p_din0 = C_V_1_load_reg_1890;

assign grp_fu_154_p_din1 = tmp_V_1_load_reg_1885;

assign grp_fu_158_p_ce = 1'b1;

assign grp_fu_158_p_din0 = C_V_2_load_reg_1900;

assign grp_fu_158_p_din1 = tmp_V_2_load_reg_1895;

assign grp_fu_162_p_ce = 1'b1;

assign grp_fu_162_p_din0 = C_V_3_load_reg_1910;

assign grp_fu_162_p_din1 = tmp_V_3_load_reg_1905;

assign grp_fu_166_p_ce = 1'b1;

assign grp_fu_166_p_din0 = C_V_4_load_reg_1920;

assign grp_fu_166_p_din1 = tmp_V_4_load_reg_1915;

assign grp_fu_170_p_ce = 1'b1;

assign grp_fu_170_p_din0 = C_V_5_load_reg_1930;

assign grp_fu_170_p_din1 = tmp_V_5_load_reg_1925;

assign grp_fu_174_p_ce = 1'b1;

assign grp_fu_174_p_din0 = C_V_6_load_reg_1940;

assign grp_fu_174_p_din1 = tmp_V_6_load_reg_1935;

assign grp_fu_178_p_ce = 1'b1;

assign grp_fu_178_p_din0 = C_V_7_load_reg_1950;

assign grp_fu_178_p_din1 = tmp_V_7_load_reg_1945;

assign icmp_ln104_fu_1460_p2 = ((i_3_reg_870 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln105_fu_1486_p2 = ((j_3_reg_881 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln76_fu_910_p2 = ((i_reg_755 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln77_fu_1017_p2 = ((j_reg_767 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln87_fu_1103_p2 = ((i_1_reg_779 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln88_fu_1119_p2 = ((j_1_reg_791 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln94_fu_1264_p2 = ((i_2_reg_825 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln95_fu_1295_p2 = ((j_2_reg_837 == 6'd32) ? 1'b1 : 1'b0);

assign lshr_ln1_fu_942_p4 = {{i_reg_755[4:3]}};

assign lshr_ln215_1_fu_1315_p4 = {{k_1_reg_848[4:3]}};

assign lshr_ln2_fu_1027_p4 = {{j_reg_767[4:3]}};

assign lshr_ln3_fu_1129_p4 = {{j_1_reg_791[4:3]}};

assign lshr_ln4_fu_1073_p4 = {{j_reg_767[4:1]}};

assign lshr_ln5_fu_1173_p4 = {{k_reg_802[4:1]}};

assign lshr_ln_fu_920_p4 = {{i_reg_755[4:1]}};

assign sum_2_fu_1436_p2 = (sum_1_reg_859 + add_ln99_6_fu_1430_p2);

assign tmp_12_cast_fu_1452_p3 = {{trunc_ln106_fu_1448_p1}, {5'd0}};

assign tmp_1_fu_1183_p3 = {{i_1_reg_779}, {lshr_ln5_fu_1173_p4}};

assign tmp_2_fu_1197_p3 = {{lshr_ln5_fu_1173_p4}, {5'd0}};

assign tmp_3_fu_930_p3 = {{lshr_ln_fu_920_p4}, {5'd0}};

assign tmp_4_fu_952_p3 = {{lshr_ln1_fu_942_p4}, {5'd0}};

assign tmp_5_fu_1301_p3 = k_1_reg_848[32'd5];

assign tmp_6_fu_1037_p3 = {{i_reg_755}, {lshr_ln2_fu_1027_p4}};

assign tmp_7_cast_fu_1256_p3 = {{trunc_ln215_fu_1252_p1}, {5'd0}};

assign tmp_7_fu_1325_p3 = {{i_2_reg_825}, {lshr_ln215_1_fu_1315_p4}};

assign tmp_8_fu_1345_p3 = {{lshr_ln215_1_fu_1315_p4}, {5'd0}};

assign tmp_9_fu_1139_p3 = {{i_1_reg_779}, {lshr_ln3_fu_1129_p4}};

assign tmp_V_0_address0 = zext_ln215_3_fu_1333_p1;

assign tmp_V_1_address0 = zext_ln215_3_fu_1333_p1;

assign tmp_V_2_address0 = zext_ln215_3_fu_1333_p1;

assign tmp_V_3_address0 = zext_ln215_3_fu_1333_p1;

assign tmp_V_4_address0 = zext_ln215_3_fu_1333_p1;

assign tmp_V_5_address0 = zext_ln215_3_fu_1333_p1;

assign tmp_V_6_address0 = zext_ln215_3_fu_1333_p1;

assign tmp_V_7_address0 = zext_ln215_3_fu_1333_p1;

assign tmp_cast_fu_902_p3 = {{trunc_ln82_fu_898_p1}, {5'd0}};

assign tmp_fu_1159_p3 = k_reg_802[32'd5];

assign tmp_s_fu_1083_p3 = {{i_reg_755}, {lshr_ln4_fu_1073_p4}};

assign trunc_ln106_fu_1448_p1 = i_3_reg_870[4:0];

assign trunc_ln215_fu_1252_p1 = i_2_reg_825[4:0];

assign trunc_ln78_fu_1023_p1 = j_reg_767[2:0];

assign trunc_ln79_fu_1069_p1 = j_reg_767[0:0];

assign trunc_ln80_fu_916_p1 = i_reg_755[0:0];

assign trunc_ln81_fu_938_p1 = i_reg_755[2:0];

assign trunc_ln82_fu_898_p1 = i_reg_755[4:0];

assign trunc_ln90_fu_1125_p1 = j_1_reg_791[2:0];

assign trunc_ln91_fu_1216_p1 = conv3_i_120_reg_813[31:0];

assign xin_address0 = zext_ln106_1_reg_2018;

assign xin_d0 = D_output_V_q0;

assign xout_address0 = zext_ln82_fu_1011_p1;

assign zext_ln106_1_fu_1481_p1 = add_ln106_fu_1476_p2;

assign zext_ln106_fu_1472_p1 = j_3_reg_881;

assign zext_ln215_1_fu_1191_p1 = tmp_1_fu_1183_p3;

assign zext_ln215_2_fu_1280_p1 = j_2_reg_837;

assign zext_ln215_3_fu_1333_p1 = tmp_7_fu_1325_p3;

assign zext_ln215_4_fu_1289_p1 = add_ln215_fu_1284_p2;

assign zext_ln215_5_fu_1210_p1 = add_ln215_1_fu_1205_p2;

assign zext_ln215_6_fu_1358_p1 = add_ln215_2_fu_1353_p2;

assign zext_ln215_fu_1276_p1 = j_2_reg_837;

assign zext_ln78_fu_1045_p1 = tmp_6_fu_1037_p3;

assign zext_ln79_fu_1091_p1 = tmp_s_fu_1083_p3;

assign zext_ln80_1_fu_970_p1 = j_reg_767;

assign zext_ln80_2_fu_974_p1 = j_reg_767;

assign zext_ln80_3_fu_983_p1 = add_ln80_fu_978_p2;

assign zext_ln80_fu_966_p1 = j_reg_767;

assign zext_ln81_fu_994_p1 = add_ln81_fu_989_p2;

assign zext_ln82_fu_1011_p1 = add_ln82_fu_1006_p2;

assign zext_ln88_fu_1115_p1 = j_1_reg_791;

assign zext_ln90_fu_1147_p1 = tmp_9_fu_1139_p3;

always @ (posedge ap_clk) begin
    tmp_cast_reg_1497[4:0] <= 5'b00000;
    tmp_3_reg_1509[4:0] <= 5'b00000;
    tmp_4_reg_1518[4:0] <= 5'b00000;
    zext_ln88_reg_1631[8:6] <= 3'b000;
    tmp_7_cast_reg_1751[4:0] <= 5'b00000;
    zext_ln215_reg_1764[6] <= 1'b0;
    tmp_12_cast_reg_2005[4:0] <= 5'b00000;
    zext_ln106_1_reg_2018[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
end

endmodule //top_nondf_kernel_2mm_x1
