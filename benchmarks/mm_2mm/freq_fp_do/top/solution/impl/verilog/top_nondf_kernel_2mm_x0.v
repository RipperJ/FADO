// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module top_nondf_kernel_2mm_x0 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_A_AWVALID,
        m_axi_gmem_A_AWREADY,
        m_axi_gmem_A_AWADDR,
        m_axi_gmem_A_AWID,
        m_axi_gmem_A_AWLEN,
        m_axi_gmem_A_AWSIZE,
        m_axi_gmem_A_AWBURST,
        m_axi_gmem_A_AWLOCK,
        m_axi_gmem_A_AWCACHE,
        m_axi_gmem_A_AWPROT,
        m_axi_gmem_A_AWQOS,
        m_axi_gmem_A_AWREGION,
        m_axi_gmem_A_AWUSER,
        m_axi_gmem_A_WVALID,
        m_axi_gmem_A_WREADY,
        m_axi_gmem_A_WDATA,
        m_axi_gmem_A_WSTRB,
        m_axi_gmem_A_WLAST,
        m_axi_gmem_A_WID,
        m_axi_gmem_A_WUSER,
        m_axi_gmem_A_ARVALID,
        m_axi_gmem_A_ARREADY,
        m_axi_gmem_A_ARADDR,
        m_axi_gmem_A_ARID,
        m_axi_gmem_A_ARLEN,
        m_axi_gmem_A_ARSIZE,
        m_axi_gmem_A_ARBURST,
        m_axi_gmem_A_ARLOCK,
        m_axi_gmem_A_ARCACHE,
        m_axi_gmem_A_ARPROT,
        m_axi_gmem_A_ARQOS,
        m_axi_gmem_A_ARREGION,
        m_axi_gmem_A_ARUSER,
        m_axi_gmem_A_RVALID,
        m_axi_gmem_A_RREADY,
        m_axi_gmem_A_RDATA,
        m_axi_gmem_A_RLAST,
        m_axi_gmem_A_RID,
        m_axi_gmem_A_RUSER,
        m_axi_gmem_A_RRESP,
        m_axi_gmem_A_BVALID,
        m_axi_gmem_A_BREADY,
        m_axi_gmem_A_BRESP,
        m_axi_gmem_A_BID,
        m_axi_gmem_A_BUSER,
        xout,
        xin_address0,
        xin_ce0,
        xin_we0,
        xin_d0,
        grp_fu_142_p_din0,
        grp_fu_142_p_din1,
        grp_fu_142_p_dout0,
        grp_fu_142_p_ce,
        grp_fu_146_p_din0,
        grp_fu_146_p_din1,
        grp_fu_146_p_dout0,
        grp_fu_146_p_ce,
        grp_fu_150_p_din0,
        grp_fu_150_p_din1,
        grp_fu_150_p_dout0,
        grp_fu_150_p_ce,
        grp_fu_154_p_din0,
        grp_fu_154_p_din1,
        grp_fu_154_p_dout0,
        grp_fu_154_p_ce,
        grp_fu_158_p_din0,
        grp_fu_158_p_din1,
        grp_fu_158_p_dout0,
        grp_fu_158_p_ce,
        grp_fu_162_p_din0,
        grp_fu_162_p_din1,
        grp_fu_162_p_dout0,
        grp_fu_162_p_ce,
        grp_fu_166_p_din0,
        grp_fu_166_p_din1,
        grp_fu_166_p_dout0,
        grp_fu_166_p_ce,
        grp_fu_170_p_din0,
        grp_fu_170_p_din1,
        grp_fu_170_p_dout0,
        grp_fu_170_p_ce,
        grp_fu_174_p_din0,
        grp_fu_174_p_din1,
        grp_fu_174_p_dout0,
        grp_fu_174_p_ce,
        grp_fu_178_p_din0,
        grp_fu_178_p_din1,
        grp_fu_178_p_dout0,
        grp_fu_178_p_ce
);

parameter    ap_ST_fsm_state1 = 98'd1;
parameter    ap_ST_fsm_state2 = 98'd2;
parameter    ap_ST_fsm_state3 = 98'd4;
parameter    ap_ST_fsm_state4 = 98'd8;
parameter    ap_ST_fsm_state5 = 98'd16;
parameter    ap_ST_fsm_state6 = 98'd32;
parameter    ap_ST_fsm_state7 = 98'd64;
parameter    ap_ST_fsm_state8 = 98'd128;
parameter    ap_ST_fsm_state9 = 98'd256;
parameter    ap_ST_fsm_state10 = 98'd512;
parameter    ap_ST_fsm_state11 = 98'd1024;
parameter    ap_ST_fsm_state12 = 98'd2048;
parameter    ap_ST_fsm_state13 = 98'd4096;
parameter    ap_ST_fsm_state14 = 98'd8192;
parameter    ap_ST_fsm_state15 = 98'd16384;
parameter    ap_ST_fsm_state16 = 98'd32768;
parameter    ap_ST_fsm_state17 = 98'd65536;
parameter    ap_ST_fsm_state18 = 98'd131072;
parameter    ap_ST_fsm_state19 = 98'd262144;
parameter    ap_ST_fsm_state20 = 98'd524288;
parameter    ap_ST_fsm_state21 = 98'd1048576;
parameter    ap_ST_fsm_state22 = 98'd2097152;
parameter    ap_ST_fsm_state23 = 98'd4194304;
parameter    ap_ST_fsm_state24 = 98'd8388608;
parameter    ap_ST_fsm_state25 = 98'd16777216;
parameter    ap_ST_fsm_state26 = 98'd33554432;
parameter    ap_ST_fsm_state27 = 98'd67108864;
parameter    ap_ST_fsm_state28 = 98'd134217728;
parameter    ap_ST_fsm_state29 = 98'd268435456;
parameter    ap_ST_fsm_state30 = 98'd536870912;
parameter    ap_ST_fsm_state31 = 98'd1073741824;
parameter    ap_ST_fsm_state32 = 98'd2147483648;
parameter    ap_ST_fsm_state33 = 98'd4294967296;
parameter    ap_ST_fsm_state34 = 98'd8589934592;
parameter    ap_ST_fsm_state35 = 98'd17179869184;
parameter    ap_ST_fsm_state36 = 98'd34359738368;
parameter    ap_ST_fsm_state37 = 98'd68719476736;
parameter    ap_ST_fsm_state38 = 98'd137438953472;
parameter    ap_ST_fsm_state39 = 98'd274877906944;
parameter    ap_ST_fsm_state40 = 98'd549755813888;
parameter    ap_ST_fsm_state41 = 98'd1099511627776;
parameter    ap_ST_fsm_state42 = 98'd2199023255552;
parameter    ap_ST_fsm_state43 = 98'd4398046511104;
parameter    ap_ST_fsm_state44 = 98'd8796093022208;
parameter    ap_ST_fsm_state45 = 98'd17592186044416;
parameter    ap_ST_fsm_state46 = 98'd35184372088832;
parameter    ap_ST_fsm_state47 = 98'd70368744177664;
parameter    ap_ST_fsm_state48 = 98'd140737488355328;
parameter    ap_ST_fsm_state49 = 98'd281474976710656;
parameter    ap_ST_fsm_state50 = 98'd562949953421312;
parameter    ap_ST_fsm_state51 = 98'd1125899906842624;
parameter    ap_ST_fsm_state52 = 98'd2251799813685248;
parameter    ap_ST_fsm_state53 = 98'd4503599627370496;
parameter    ap_ST_fsm_state54 = 98'd9007199254740992;
parameter    ap_ST_fsm_state55 = 98'd18014398509481984;
parameter    ap_ST_fsm_state56 = 98'd36028797018963968;
parameter    ap_ST_fsm_state57 = 98'd72057594037927936;
parameter    ap_ST_fsm_state58 = 98'd144115188075855872;
parameter    ap_ST_fsm_state59 = 98'd288230376151711744;
parameter    ap_ST_fsm_state60 = 98'd576460752303423488;
parameter    ap_ST_fsm_state61 = 98'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 98'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 98'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 98'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 98'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 98'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 98'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 98'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 98'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 98'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 98'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 98'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 98'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 98'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 98'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 98'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 98'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 98'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 98'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 98'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 98'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 98'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 98'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 98'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 98'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 98'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 98'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 98'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 98'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 98'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 98'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 98'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 98'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 98'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 98'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 98'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 98'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 98'd158456325028528675187087900672;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_A_AWVALID;
input   m_axi_gmem_A_AWREADY;
output  [63:0] m_axi_gmem_A_AWADDR;
output  [0:0] m_axi_gmem_A_AWID;
output  [31:0] m_axi_gmem_A_AWLEN;
output  [2:0] m_axi_gmem_A_AWSIZE;
output  [1:0] m_axi_gmem_A_AWBURST;
output  [1:0] m_axi_gmem_A_AWLOCK;
output  [3:0] m_axi_gmem_A_AWCACHE;
output  [2:0] m_axi_gmem_A_AWPROT;
output  [3:0] m_axi_gmem_A_AWQOS;
output  [3:0] m_axi_gmem_A_AWREGION;
output  [0:0] m_axi_gmem_A_AWUSER;
output   m_axi_gmem_A_WVALID;
input   m_axi_gmem_A_WREADY;
output  [511:0] m_axi_gmem_A_WDATA;
output  [63:0] m_axi_gmem_A_WSTRB;
output   m_axi_gmem_A_WLAST;
output  [0:0] m_axi_gmem_A_WID;
output  [0:0] m_axi_gmem_A_WUSER;
output   m_axi_gmem_A_ARVALID;
input   m_axi_gmem_A_ARREADY;
output  [63:0] m_axi_gmem_A_ARADDR;
output  [0:0] m_axi_gmem_A_ARID;
output  [31:0] m_axi_gmem_A_ARLEN;
output  [2:0] m_axi_gmem_A_ARSIZE;
output  [1:0] m_axi_gmem_A_ARBURST;
output  [1:0] m_axi_gmem_A_ARLOCK;
output  [3:0] m_axi_gmem_A_ARCACHE;
output  [2:0] m_axi_gmem_A_ARPROT;
output  [3:0] m_axi_gmem_A_ARQOS;
output  [3:0] m_axi_gmem_A_ARREGION;
output  [0:0] m_axi_gmem_A_ARUSER;
input   m_axi_gmem_A_RVALID;
output   m_axi_gmem_A_RREADY;
input  [511:0] m_axi_gmem_A_RDATA;
input   m_axi_gmem_A_RLAST;
input  [0:0] m_axi_gmem_A_RID;
input  [0:0] m_axi_gmem_A_RUSER;
input  [1:0] m_axi_gmem_A_RRESP;
input   m_axi_gmem_A_BVALID;
output   m_axi_gmem_A_BREADY;
input  [1:0] m_axi_gmem_A_BRESP;
input  [0:0] m_axi_gmem_A_BID;
input  [0:0] m_axi_gmem_A_BUSER;
input  [63:0] xout;
output  [9:0] xin_address0;
output   xin_ce0;
output   xin_we0;
output  [31:0] xin_d0;
output  [511:0] grp_fu_142_p_din0;
output  [511:0] grp_fu_142_p_din1;
input  [511:0] grp_fu_142_p_dout0;
output   grp_fu_142_p_ce;
output  [511:0] grp_fu_146_p_din0;
output  [511:0] grp_fu_146_p_din1;
input  [511:0] grp_fu_146_p_dout0;
output   grp_fu_146_p_ce;
output  [31:0] grp_fu_150_p_din0;
output  [31:0] grp_fu_150_p_din1;
input  [31:0] grp_fu_150_p_dout0;
output   grp_fu_150_p_ce;
output  [31:0] grp_fu_154_p_din0;
output  [31:0] grp_fu_154_p_din1;
input  [31:0] grp_fu_154_p_dout0;
output   grp_fu_154_p_ce;
output  [31:0] grp_fu_158_p_din0;
output  [31:0] grp_fu_158_p_din1;
input  [31:0] grp_fu_158_p_dout0;
output   grp_fu_158_p_ce;
output  [31:0] grp_fu_162_p_din0;
output  [31:0] grp_fu_162_p_din1;
input  [31:0] grp_fu_162_p_dout0;
output   grp_fu_162_p_ce;
output  [31:0] grp_fu_166_p_din0;
output  [31:0] grp_fu_166_p_din1;
input  [31:0] grp_fu_166_p_dout0;
output   grp_fu_166_p_ce;
output  [31:0] grp_fu_170_p_din0;
output  [31:0] grp_fu_170_p_din1;
input  [31:0] grp_fu_170_p_dout0;
output   grp_fu_170_p_ce;
output  [31:0] grp_fu_174_p_din0;
output  [31:0] grp_fu_174_p_din1;
input  [31:0] grp_fu_174_p_dout0;
output   grp_fu_174_p_ce;
output  [31:0] grp_fu_178_p_din0;
output  [31:0] grp_fu_178_p_din1;
input  [31:0] grp_fu_178_p_dout0;
output   grp_fu_178_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_gmem_A_ARVALID;
reg m_axi_gmem_A_RREADY;
reg xin_ce0;
reg xin_we0;

(* fsm_encoding = "none" *) reg   [97:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    gmem_A_blk_n_AR;
reg    gmem_A_blk_n_R;
wire    ap_CS_fsm_state73;
reg   [0:0] icmp_ln29_reg_1583;
wire   [5:0] add_ln28_fu_950_p2;
reg   [5:0] add_ln28_reg_1547;
wire    ap_CS_fsm_state71;
wire   [9:0] tmp_cast_fu_960_p3;
reg   [9:0] tmp_cast_reg_1552;
wire   [0:0] trunc_ln32_fu_974_p1;
reg   [0:0] trunc_ln32_reg_1560;
wire   [0:0] icmp_ln28_fu_968_p2;
wire   [8:0] tmp_s_fu_988_p3;
reg   [8:0] tmp_s_reg_1564;
wire   [2:0] trunc_ln33_fu_996_p1;
reg   [2:0] trunc_ln33_reg_1569;
wire   [6:0] tmp_9_fu_1010_p3;
reg   [6:0] tmp_9_reg_1573;
wire   [5:0] add_ln29_fu_1018_p2;
reg   [5:0] add_ln29_reg_1578;
wire    ap_CS_fsm_state72;
wire   [0:0] icmp_ln29_fu_1024_p2;
reg   [8:0] B_V_0_addr_2_reg_1587;
reg   [8:0] B_V_1_addr_2_reg_1592;
reg   [6:0] C_V_0_addr_2_reg_1597;
reg   [6:0] C_V_1_addr_2_reg_1602;
reg   [6:0] C_V_2_addr_2_reg_1607;
reg   [6:0] C_V_3_addr_2_reg_1612;
reg   [6:0] C_V_4_addr_2_reg_1617;
reg   [6:0] C_V_5_addr_2_reg_1622;
reg   [6:0] C_V_6_addr_2_reg_1627;
reg   [6:0] C_V_7_addr_2_reg_1632;
reg   [9:0] D_input_V_addr_reg_1637;
reg   [511:0] gmem_A_addr_read_reg_1642;
wire   [31:0] trunc_ln30_1_fu_1080_p1;
reg   [31:0] trunc_ln30_1_reg_1650;
wire   [5:0] add_ln39_fu_1146_p2;
reg   [5:0] add_ln39_reg_1677;
wire    ap_CS_fsm_state77;
wire   [5:0] add_ln40_fu_1158_p2;
reg   [5:0] add_ln40_reg_1685;
wire    ap_CS_fsm_state78;
wire   [8:0] zext_ln40_fu_1164_p1;
reg   [8:0] zext_ln40_reg_1690;
wire   [2:0] trunc_ln42_fu_1174_p1;
reg   [2:0] trunc_ln42_reg_1698;
wire   [0:0] icmp_ln40_fu_1168_p2;
reg   [6:0] tmp_V_0_addr_3_reg_1702;
reg   [6:0] tmp_V_1_addr_3_reg_1707;
reg   [6:0] tmp_V_2_addr_3_reg_1712;
reg   [6:0] tmp_V_3_addr_3_reg_1717;
reg   [6:0] tmp_V_4_addr_3_reg_1722;
reg   [6:0] tmp_V_5_addr_3_reg_1727;
reg   [6:0] tmp_V_6_addr_3_reg_1732;
reg   [6:0] tmp_V_7_addr_3_reg_1737;
wire   [5:0] add_ln43_fu_1216_p2;
reg   [5:0] add_ln43_reg_1745;
wire    ap_CS_fsm_state79;
wire   [0:0] tmp_fu_1208_p3;
wire   [511:0] A_V_0_q0;
reg  signed [511:0] A_V_0_load_reg_1770;
wire    ap_CS_fsm_state80;
wire   [511:0] B_V_0_q0;
reg  signed [511:0] B_V_0_load_reg_1775;
wire   [511:0] A_V_1_q0;
reg  signed [511:0] A_V_1_load_reg_1780;
wire   [511:0] B_V_1_q0;
reg  signed [511:0] B_V_1_load_reg_1785;
wire   [511:0] grp_fu_1277_p2;
reg   [511:0] mul_ln691_reg_1790;
wire    ap_CS_fsm_state85;
wire   [511:0] grp_fu_1281_p2;
reg   [511:0] mul_ln691_2_reg_1795;
wire   [511:0] add_ln691_fu_1289_p2;
wire    ap_CS_fsm_state86;
wire   [5:0] add_ln46_fu_1295_p2;
reg   [5:0] add_ln46_reg_1805;
wire    ap_CS_fsm_state88;
wire   [9:0] tmp_25_cast_fu_1305_p3;
reg   [9:0] tmp_25_cast_reg_1810;
wire   [5:0] add_ln47_fu_1319_p2;
reg   [5:0] add_ln47_reg_1818;
wire    ap_CS_fsm_state89;
wire   [6:0] zext_ln215_fu_1325_p1;
reg   [6:0] zext_ln215_reg_1823;
reg   [9:0] D_output_V_addr_2_reg_1833;
wire   [31:0] D_input_V_q0;
wire    ap_CS_fsm_state90;
wire   [5:0] add_ln50_fu_1358_p2;
reg   [5:0] add_ln50_reg_1849;
wire    ap_CS_fsm_state91;
wire   [0:0] tmp_6_fu_1350_p3;
wire   [31:0] tmp_V_0_q0;
reg  signed [31:0] tmp_V_0_load_reg_1934;
wire    ap_CS_fsm_state92;
wire   [31:0] C_V_0_q0;
reg  signed [31:0] C_V_0_load_reg_1939;
wire   [31:0] tmp_V_1_q0;
reg  signed [31:0] tmp_V_1_load_reg_1944;
wire   [31:0] C_V_1_q0;
reg  signed [31:0] C_V_1_load_reg_1949;
wire   [31:0] tmp_V_2_q0;
reg  signed [31:0] tmp_V_2_load_reg_1954;
wire   [31:0] C_V_2_q0;
reg  signed [31:0] C_V_2_load_reg_1959;
wire   [31:0] tmp_V_3_q0;
reg  signed [31:0] tmp_V_3_load_reg_1964;
wire   [31:0] C_V_3_q0;
reg  signed [31:0] C_V_3_load_reg_1969;
wire   [31:0] tmp_V_4_q0;
reg  signed [31:0] tmp_V_4_load_reg_1974;
wire   [31:0] C_V_4_q0;
reg  signed [31:0] C_V_4_load_reg_1979;
wire   [31:0] tmp_V_5_q0;
reg  signed [31:0] tmp_V_5_load_reg_1984;
wire   [31:0] C_V_5_q0;
reg  signed [31:0] C_V_5_load_reg_1989;
wire   [31:0] tmp_V_6_q0;
reg  signed [31:0] tmp_V_6_load_reg_1994;
wire   [31:0] C_V_6_q0;
reg  signed [31:0] C_V_6_load_reg_1999;
wire   [31:0] tmp_V_7_q0;
reg  signed [31:0] tmp_V_7_load_reg_2004;
wire   [31:0] C_V_7_q0;
reg  signed [31:0] C_V_7_load_reg_2009;
wire   [31:0] grp_fu_1419_p2;
reg   [31:0] mul_ln51_reg_2014;
wire    ap_CS_fsm_state94;
wire   [31:0] grp_fu_1423_p2;
reg   [31:0] mul_ln51_1_reg_2019;
wire   [31:0] grp_fu_1427_p2;
reg   [31:0] mul_ln51_2_reg_2024;
wire   [31:0] grp_fu_1431_p2;
reg   [31:0] mul_ln51_3_reg_2029;
wire   [31:0] grp_fu_1435_p2;
reg   [31:0] mul_ln51_4_reg_2034;
wire   [31:0] grp_fu_1439_p2;
reg   [31:0] mul_ln51_5_reg_2039;
wire   [31:0] grp_fu_1443_p2;
reg   [31:0] mul_ln51_6_reg_2044;
wire   [31:0] grp_fu_1447_p2;
reg   [31:0] mul_ln51_7_reg_2049;
wire   [31:0] sum_4_fu_1485_p2;
wire    ap_CS_fsm_state95;
wire   [5:0] add_ln56_fu_1491_p2;
reg   [5:0] add_ln56_reg_2059;
wire    ap_CS_fsm_state96;
wire   [9:0] tmp_30_cast_fu_1501_p3;
reg   [9:0] tmp_30_cast_reg_2064;
wire   [5:0] add_ln57_fu_1515_p2;
reg   [5:0] add_ln57_reg_2072;
wire    ap_CS_fsm_state97;
wire   [63:0] zext_ln58_1_fu_1530_p1;
reg   [63:0] zext_ln58_1_reg_2077;
wire   [6:0] tmp_V_0_address0;
reg    tmp_V_0_ce0;
reg   [6:0] tmp_V_0_address1;
reg    tmp_V_0_ce1;
reg    tmp_V_0_we1;
reg   [31:0] tmp_V_0_d1;
wire   [6:0] tmp_V_1_address0;
reg    tmp_V_1_ce0;
reg   [6:0] tmp_V_1_address1;
reg    tmp_V_1_ce1;
reg    tmp_V_1_we1;
reg   [31:0] tmp_V_1_d1;
wire   [6:0] tmp_V_2_address0;
reg    tmp_V_2_ce0;
reg   [6:0] tmp_V_2_address1;
reg    tmp_V_2_ce1;
reg    tmp_V_2_we1;
reg   [31:0] tmp_V_2_d1;
wire   [6:0] tmp_V_3_address0;
reg    tmp_V_3_ce0;
reg   [6:0] tmp_V_3_address1;
reg    tmp_V_3_ce1;
reg    tmp_V_3_we1;
reg   [31:0] tmp_V_3_d1;
wire   [6:0] tmp_V_4_address0;
reg    tmp_V_4_ce0;
reg   [6:0] tmp_V_4_address1;
reg    tmp_V_4_ce1;
reg    tmp_V_4_we1;
reg   [31:0] tmp_V_4_d1;
wire   [6:0] tmp_V_5_address0;
reg    tmp_V_5_ce0;
reg   [6:0] tmp_V_5_address1;
reg    tmp_V_5_ce1;
reg    tmp_V_5_we1;
reg   [31:0] tmp_V_5_d1;
wire   [6:0] tmp_V_6_address0;
reg    tmp_V_6_ce0;
reg   [6:0] tmp_V_6_address1;
reg    tmp_V_6_ce1;
reg    tmp_V_6_we1;
reg   [31:0] tmp_V_6_d1;
wire   [6:0] tmp_V_7_address0;
reg    tmp_V_7_ce0;
reg   [6:0] tmp_V_7_address1;
reg    tmp_V_7_ce1;
reg    tmp_V_7_we1;
reg   [31:0] tmp_V_7_d1;
wire   [8:0] A_V_0_address0;
reg    A_V_0_ce0;
wire   [8:0] A_V_0_address1;
reg    A_V_0_ce1;
reg    A_V_0_we1;
wire   [8:0] A_V_1_address0;
reg    A_V_1_ce0;
wire   [8:0] A_V_1_address1;
reg    A_V_1_ce1;
reg    A_V_1_we1;
wire   [8:0] B_V_0_address0;
reg    B_V_0_ce0;
reg    B_V_0_ce1;
reg    B_V_0_we1;
wire   [8:0] B_V_1_address0;
reg    B_V_1_ce0;
reg    B_V_1_ce1;
reg    B_V_1_we1;
wire   [6:0] C_V_0_address0;
reg    C_V_0_ce0;
reg    C_V_0_ce1;
reg    C_V_0_we1;
wire   [6:0] C_V_1_address0;
reg    C_V_1_ce0;
reg    C_V_1_ce1;
reg    C_V_1_we1;
wire   [6:0] C_V_2_address0;
reg    C_V_2_ce0;
reg    C_V_2_ce1;
reg    C_V_2_we1;
wire   [6:0] C_V_3_address0;
reg    C_V_3_ce0;
reg    C_V_3_ce1;
reg    C_V_3_we1;
wire   [6:0] C_V_4_address0;
reg    C_V_4_ce0;
reg    C_V_4_ce1;
reg    C_V_4_we1;
wire   [6:0] C_V_5_address0;
reg    C_V_5_ce0;
reg    C_V_5_ce1;
reg    C_V_5_we1;
wire   [6:0] C_V_6_address0;
reg    C_V_6_ce0;
reg    C_V_6_ce1;
reg    C_V_6_we1;
wire   [6:0] C_V_7_address0;
reg    C_V_7_ce0;
reg    C_V_7_ce1;
reg    C_V_7_we1;
wire   [9:0] D_input_V_address0;
reg    D_input_V_ce0;
reg    D_input_V_ce1;
reg    D_input_V_we1;
wire   [9:0] D_output_V_address0;
reg    D_output_V_ce0;
wire   [31:0] D_output_V_q0;
reg    D_output_V_ce1;
reg    D_output_V_we1;
reg   [5:0] i_reg_792;
reg    ap_block_state73;
wire    ap_CS_fsm_state70;
reg   [5:0] j_reg_804;
wire    ap_CS_fsm_state76;
reg   [5:0] i_4_reg_816;
reg   [5:0] j_4_reg_828;
wire    ap_CS_fsm_state87;
wire   [0:0] icmp_ln39_fu_1152_p2;
reg   [5:0] k_reg_839;
reg   [511:0] conv3_i_115_reg_850;
reg   [5:0] i_5_reg_862;
wire   [0:0] icmp_ln47_fu_1344_p2;
reg   [5:0] j_5_reg_874;
wire   [0:0] icmp_ln46_fu_1313_p2;
reg   [5:0] k_2_reg_885;
reg   [31:0] sum_3_reg_896;
reg   [5:0] i_6_reg_907;
wire   [0:0] icmp_ln57_fu_1535_p2;
reg   [5:0] j_6_reg_918;
wire    ap_CS_fsm_state98;
wire   [0:0] icmp_ln56_fu_1509_p2;
wire   [63:0] zext_ln32_3_fu_1047_p1;
wire   [63:0] zext_ln33_fu_1058_p1;
wire   [63:0] zext_ln34_fu_1075_p1;
wire   [63:0] zext_ln30_fu_1106_p1;
wire    ap_CS_fsm_state74;
wire   [63:0] zext_ln31_fu_1140_p1;
wire    ap_CS_fsm_state75;
wire   [63:0] zext_ln42_fu_1196_p1;
wire   [63:0] zext_ln215_5_fu_1240_p1;
wire   [63:0] zext_ln215_10_fu_1259_p1;
wire   [63:0] zext_ln215_9_fu_1338_p1;
wire   [63:0] zext_ln215_7_fu_1382_p1;
wire   [63:0] zext_ln215_11_fu_1407_p1;
wire  signed [63:0] sext_ln28_fu_939_p1;
wire   [2:0] trunc_ln30_fu_1084_p1;
wire   [31:0] trunc_ln43_fu_1265_p1;
wire   [0:0] trunc_ln31_fu_1118_p1;
wire   [57:0] trunc_ln_fu_929_p4;
wire   [4:0] trunc_ln34_fu_956_p1;
wire   [3:0] lshr_ln_fu_978_p4;
wire   [1:0] lshr_ln6_fu_1000_p4;
wire   [8:0] zext_ln32_2_fu_1038_p1;
wire   [8:0] add_ln32_fu_1042_p2;
wire   [6:0] zext_ln32_1_fu_1034_p1;
wire   [6:0] add_ln33_fu_1053_p2;
wire   [9:0] zext_ln32_fu_1030_p1;
wire   [9:0] add_ln34_fu_1070_p2;
wire   [1:0] lshr_ln7_fu_1088_p4;
wire   [7:0] tmp_10_fu_1098_p3;
wire   [3:0] lshr_ln9_fu_1122_p4;
wire   [9:0] tmp_12_fu_1132_p3;
wire   [1:0] lshr_ln8_fu_1178_p4;
wire   [7:0] tmp_11_fu_1188_p3;
wire   [3:0] lshr_ln1_fu_1222_p4;
wire   [9:0] tmp_13_fu_1232_p3;
wire   [8:0] tmp_14_fu_1246_p3;
wire   [8:0] add_ln215_3_fu_1254_p2;
wire  signed [511:0] grp_fu_1277_p0;
wire  signed [511:0] grp_fu_1277_p1;
wire    ap_CS_fsm_state81;
wire  signed [511:0] grp_fu_1281_p0;
wire  signed [511:0] grp_fu_1281_p1;
wire   [511:0] add_ln691_2_fu_1285_p2;
wire   [4:0] trunc_ln215_fu_1301_p1;
wire   [9:0] zext_ln215_8_fu_1329_p1;
wire   [9:0] add_ln215_fu_1333_p2;
wire   [1:0] lshr_ln215_2_fu_1364_p4;
wire   [7:0] tmp_15_fu_1374_p3;
wire   [6:0] tmp_16_fu_1394_p3;
wire   [6:0] add_ln215_4_fu_1402_p2;
wire  signed [31:0] grp_fu_1419_p0;
wire  signed [31:0] grp_fu_1419_p1;
wire    ap_CS_fsm_state93;
wire  signed [31:0] grp_fu_1423_p0;
wire  signed [31:0] grp_fu_1423_p1;
wire  signed [31:0] grp_fu_1427_p0;
wire  signed [31:0] grp_fu_1427_p1;
wire  signed [31:0] grp_fu_1431_p0;
wire  signed [31:0] grp_fu_1431_p1;
wire  signed [31:0] grp_fu_1435_p0;
wire  signed [31:0] grp_fu_1435_p1;
wire  signed [31:0] grp_fu_1439_p0;
wire  signed [31:0] grp_fu_1439_p1;
wire  signed [31:0] grp_fu_1443_p0;
wire  signed [31:0] grp_fu_1443_p1;
wire  signed [31:0] grp_fu_1447_p0;
wire  signed [31:0] grp_fu_1447_p1;
wire   [31:0] add_ln51_1_fu_1455_p2;
wire   [31:0] add_ln51_fu_1451_p2;
wire   [31:0] add_ln51_4_fu_1469_p2;
wire   [31:0] add_ln51_3_fu_1465_p2;
wire   [31:0] add_ln51_5_fu_1473_p2;
wire   [31:0] add_ln51_2_fu_1459_p2;
wire   [31:0] add_ln51_6_fu_1479_p2;
wire   [4:0] trunc_ln58_fu_1497_p1;
wire   [9:0] zext_ln58_fu_1521_p1;
wire   [9:0] add_ln58_fu_1525_p2;
wire    grp_fu_1277_ce;
wire    grp_fu_1281_ce;
wire    grp_fu_1419_ce;
wire    grp_fu_1423_ce;
wire    grp_fu_1427_ce;
wire    grp_fu_1431_ce;
wire    grp_fu_1435_ce;
wire    grp_fu_1439_ce;
wire    grp_fu_1443_ce;
wire    grp_fu_1447_ce;
reg   [97:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 98'd1;
end

top_nondf_kernel_2mm_x0_tmp_V_0 #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
tmp_V_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(tmp_V_0_address0),
    .ce0(tmp_V_0_ce0),
    .q0(tmp_V_0_q0),
    .address1(tmp_V_0_address1),
    .ce1(tmp_V_0_ce1),
    .we1(tmp_V_0_we1),
    .d1(tmp_V_0_d1)
);

top_nondf_kernel_2mm_x0_tmp_V_0 #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
tmp_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(tmp_V_1_address0),
    .ce0(tmp_V_1_ce0),
    .q0(tmp_V_1_q0),
    .address1(tmp_V_1_address1),
    .ce1(tmp_V_1_ce1),
    .we1(tmp_V_1_we1),
    .d1(tmp_V_1_d1)
);

top_nondf_kernel_2mm_x0_tmp_V_0 #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
tmp_V_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(tmp_V_2_address0),
    .ce0(tmp_V_2_ce0),
    .q0(tmp_V_2_q0),
    .address1(tmp_V_2_address1),
    .ce1(tmp_V_2_ce1),
    .we1(tmp_V_2_we1),
    .d1(tmp_V_2_d1)
);

top_nondf_kernel_2mm_x0_tmp_V_0 #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
tmp_V_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(tmp_V_3_address0),
    .ce0(tmp_V_3_ce0),
    .q0(tmp_V_3_q0),
    .address1(tmp_V_3_address1),
    .ce1(tmp_V_3_ce1),
    .we1(tmp_V_3_we1),
    .d1(tmp_V_3_d1)
);

top_nondf_kernel_2mm_x0_tmp_V_0 #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
tmp_V_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(tmp_V_4_address0),
    .ce0(tmp_V_4_ce0),
    .q0(tmp_V_4_q0),
    .address1(tmp_V_4_address1),
    .ce1(tmp_V_4_ce1),
    .we1(tmp_V_4_we1),
    .d1(tmp_V_4_d1)
);

top_nondf_kernel_2mm_x0_tmp_V_0 #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
tmp_V_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(tmp_V_5_address0),
    .ce0(tmp_V_5_ce0),
    .q0(tmp_V_5_q0),
    .address1(tmp_V_5_address1),
    .ce1(tmp_V_5_ce1),
    .we1(tmp_V_5_we1),
    .d1(tmp_V_5_d1)
);

top_nondf_kernel_2mm_x0_tmp_V_0 #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
tmp_V_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(tmp_V_6_address0),
    .ce0(tmp_V_6_ce0),
    .q0(tmp_V_6_q0),
    .address1(tmp_V_6_address1),
    .ce1(tmp_V_6_ce1),
    .we1(tmp_V_6_we1),
    .d1(tmp_V_6_d1)
);

top_nondf_kernel_2mm_x0_tmp_V_0 #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
tmp_V_7_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(tmp_V_7_address0),
    .ce0(tmp_V_7_ce0),
    .q0(tmp_V_7_q0),
    .address1(tmp_V_7_address1),
    .ce1(tmp_V_7_ce1),
    .we1(tmp_V_7_we1),
    .d1(tmp_V_7_d1)
);

top_nondf_kernel_2mm_x0_A_V_0 #(
    .DataWidth( 512 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
A_V_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(A_V_0_address0),
    .ce0(A_V_0_ce0),
    .q0(A_V_0_q0),
    .address1(A_V_0_address1),
    .ce1(A_V_0_ce1),
    .we1(A_V_0_we1),
    .d1(gmem_A_addr_read_reg_1642)
);

top_nondf_kernel_2mm_x0_A_V_0 #(
    .DataWidth( 512 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
A_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(A_V_1_address0),
    .ce0(A_V_1_ce0),
    .q0(A_V_1_q0),
    .address1(A_V_1_address1),
    .ce1(A_V_1_ce1),
    .we1(A_V_1_we1),
    .d1(gmem_A_addr_read_reg_1642)
);

top_nondf_kernel_2mm_x0_A_V_0 #(
    .DataWidth( 512 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
B_V_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(B_V_0_address0),
    .ce0(B_V_0_ce0),
    .q0(B_V_0_q0),
    .address1(B_V_0_addr_2_reg_1587),
    .ce1(B_V_0_ce1),
    .we1(B_V_0_we1),
    .d1(gmem_A_addr_read_reg_1642)
);

top_nondf_kernel_2mm_x0_A_V_0 #(
    .DataWidth( 512 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
B_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(B_V_1_address0),
    .ce0(B_V_1_ce0),
    .q0(B_V_1_q0),
    .address1(B_V_1_addr_2_reg_1592),
    .ce1(B_V_1_ce1),
    .we1(B_V_1_we1),
    .d1(gmem_A_addr_read_reg_1642)
);

top_nondf_kernel_2mm_x0_tmp_V_0 #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
C_V_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(C_V_0_address0),
    .ce0(C_V_0_ce0),
    .q0(C_V_0_q0),
    .address1(C_V_0_addr_2_reg_1597),
    .ce1(C_V_0_ce1),
    .we1(C_V_0_we1),
    .d1(trunc_ln30_1_reg_1650)
);

top_nondf_kernel_2mm_x0_tmp_V_0 #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
C_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(C_V_1_address0),
    .ce0(C_V_1_ce0),
    .q0(C_V_1_q0),
    .address1(C_V_1_addr_2_reg_1602),
    .ce1(C_V_1_ce1),
    .we1(C_V_1_we1),
    .d1(trunc_ln30_1_reg_1650)
);

top_nondf_kernel_2mm_x0_tmp_V_0 #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
C_V_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(C_V_2_address0),
    .ce0(C_V_2_ce0),
    .q0(C_V_2_q0),
    .address1(C_V_2_addr_2_reg_1607),
    .ce1(C_V_2_ce1),
    .we1(C_V_2_we1),
    .d1(trunc_ln30_1_reg_1650)
);

top_nondf_kernel_2mm_x0_tmp_V_0 #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
C_V_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(C_V_3_address0),
    .ce0(C_V_3_ce0),
    .q0(C_V_3_q0),
    .address1(C_V_3_addr_2_reg_1612),
    .ce1(C_V_3_ce1),
    .we1(C_V_3_we1),
    .d1(trunc_ln30_1_reg_1650)
);

top_nondf_kernel_2mm_x0_tmp_V_0 #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
C_V_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(C_V_4_address0),
    .ce0(C_V_4_ce0),
    .q0(C_V_4_q0),
    .address1(C_V_4_addr_2_reg_1617),
    .ce1(C_V_4_ce1),
    .we1(C_V_4_we1),
    .d1(trunc_ln30_1_reg_1650)
);

top_nondf_kernel_2mm_x0_tmp_V_0 #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
C_V_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(C_V_5_address0),
    .ce0(C_V_5_ce0),
    .q0(C_V_5_q0),
    .address1(C_V_5_addr_2_reg_1622),
    .ce1(C_V_5_ce1),
    .we1(C_V_5_we1),
    .d1(trunc_ln30_1_reg_1650)
);

top_nondf_kernel_2mm_x0_tmp_V_0 #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
C_V_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(C_V_6_address0),
    .ce0(C_V_6_ce0),
    .q0(C_V_6_q0),
    .address1(C_V_6_addr_2_reg_1627),
    .ce1(C_V_6_ce1),
    .we1(C_V_6_we1),
    .d1(trunc_ln30_1_reg_1650)
);

top_nondf_kernel_2mm_x0_tmp_V_0 #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
C_V_7_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(C_V_7_address0),
    .ce0(C_V_7_ce0),
    .q0(C_V_7_q0),
    .address1(C_V_7_addr_2_reg_1632),
    .ce1(C_V_7_ce1),
    .we1(C_V_7_we1),
    .d1(trunc_ln30_1_reg_1650)
);

top_nondf_kernel_2mm_x0_D_input_V #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
D_input_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(D_input_V_address0),
    .ce0(D_input_V_ce0),
    .q0(D_input_V_q0),
    .address1(D_input_V_addr_reg_1637),
    .ce1(D_input_V_ce1),
    .we1(D_input_V_we1),
    .d1(trunc_ln30_1_reg_1650)
);

top_nondf_kernel_2mm_x0_D_input_V #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
D_output_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(D_output_V_address0),
    .ce0(D_output_V_ce0),
    .q0(D_output_V_q0),
    .address1(D_output_V_addr_2_reg_1833),
    .ce1(D_output_V_ce1),
    .we1(D_output_V_we1),
    .d1(sum_3_reg_896)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln40_fu_1168_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state78))) begin
        conv3_i_115_reg_850 <= 512'd0;
    end else if ((1'b1 == ap_CS_fsm_state86)) begin
        conv3_i_115_reg_850 <= add_ln691_fu_1289_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln28_fu_968_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state71))) begin
        i_4_reg_816 <= 6'd0;
    end else if (((icmp_ln40_fu_1168_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state78))) begin
        i_4_reg_816 <= add_ln39_reg_1677;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln39_fu_1152_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state77))) begin
        i_5_reg_862 <= 6'd0;
    end else if (((icmp_ln47_fu_1344_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state89))) begin
        i_5_reg_862 <= add_ln46_reg_1805;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln46_fu_1313_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state88))) begin
        i_6_reg_907 <= 6'd0;
    end else if (((icmp_ln57_fu_1535_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state97))) begin
        i_6_reg_907 <= add_ln56_reg_2059;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        i_reg_792 <= 6'd0;
    end else if ((~((icmp_ln29_reg_1583 == 1'd0) & (m_axi_gmem_A_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state73) & (icmp_ln29_reg_1583 == 1'd1))) begin
        i_reg_792 <= add_ln28_reg_1547;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln39_fu_1152_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state77))) begin
        j_4_reg_828 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state87)) begin
        j_4_reg_828 <= add_ln40_reg_1685;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln46_fu_1313_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state88))) begin
        j_5_reg_874 <= 6'd0;
    end else if (((tmp_6_fu_1350_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state91))) begin
        j_5_reg_874 <= add_ln47_reg_1818;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln56_fu_1509_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state96))) begin
        j_6_reg_918 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state98)) begin
        j_6_reg_918 <= add_ln57_reg_2072;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln28_fu_968_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state71))) begin
        j_reg_804 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state76)) begin
        j_reg_804 <= add_ln29_reg_1578;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state90)) begin
        k_2_reg_885 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state95)) begin
        k_2_reg_885 <= add_ln50_reg_1849;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln40_fu_1168_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state78))) begin
        k_reg_839 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state86)) begin
        k_reg_839 <= add_ln43_reg_1745;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state90)) begin
        sum_3_reg_896 <= D_input_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state95)) begin
        sum_3_reg_896 <= sum_4_fu_1485_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state80)) begin
        A_V_0_load_reg_1770 <= A_V_0_q0;
        A_V_1_load_reg_1780 <= A_V_1_q0;
        B_V_0_load_reg_1775 <= B_V_0_q0;
        B_V_1_load_reg_1785 <= B_V_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        B_V_0_addr_2_reg_1587 <= zext_ln32_3_fu_1047_p1;
        B_V_1_addr_2_reg_1592 <= zext_ln32_3_fu_1047_p1;
        C_V_0_addr_2_reg_1597 <= zext_ln33_fu_1058_p1;
        C_V_1_addr_2_reg_1602 <= zext_ln33_fu_1058_p1;
        C_V_2_addr_2_reg_1607 <= zext_ln33_fu_1058_p1;
        C_V_3_addr_2_reg_1612 <= zext_ln33_fu_1058_p1;
        C_V_4_addr_2_reg_1617 <= zext_ln33_fu_1058_p1;
        C_V_5_addr_2_reg_1622 <= zext_ln33_fu_1058_p1;
        C_V_6_addr_2_reg_1627 <= zext_ln33_fu_1058_p1;
        C_V_7_addr_2_reg_1632 <= zext_ln33_fu_1058_p1;
        D_input_V_addr_reg_1637 <= zext_ln34_fu_1075_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state92)) begin
        C_V_0_load_reg_1939 <= C_V_0_q0;
        C_V_1_load_reg_1949 <= C_V_1_q0;
        C_V_2_load_reg_1959 <= C_V_2_q0;
        C_V_3_load_reg_1969 <= C_V_3_q0;
        C_V_4_load_reg_1979 <= C_V_4_q0;
        C_V_5_load_reg_1989 <= C_V_5_q0;
        C_V_6_load_reg_1999 <= C_V_6_q0;
        C_V_7_load_reg_2009 <= C_V_7_q0;
        tmp_V_0_load_reg_1934 <= tmp_V_0_q0;
        tmp_V_1_load_reg_1944 <= tmp_V_1_q0;
        tmp_V_2_load_reg_1954 <= tmp_V_2_q0;
        tmp_V_3_load_reg_1964 <= tmp_V_3_q0;
        tmp_V_4_load_reg_1974 <= tmp_V_4_q0;
        tmp_V_5_load_reg_1984 <= tmp_V_5_q0;
        tmp_V_6_load_reg_1994 <= tmp_V_6_q0;
        tmp_V_7_load_reg_2004 <= tmp_V_7_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state89)) begin
        D_output_V_addr_2_reg_1833 <= zext_ln215_9_fu_1338_p1;
        add_ln47_reg_1818 <= add_ln47_fu_1319_p2;
        zext_ln215_reg_1823[5 : 0] <= zext_ln215_fu_1325_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        add_ln28_reg_1547 <= add_ln28_fu_950_p2;
        tmp_cast_reg_1552[9 : 5] <= tmp_cast_fu_960_p3[9 : 5];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        add_ln29_reg_1578 <= add_ln29_fu_1018_p2;
        icmp_ln29_reg_1583 <= icmp_ln29_fu_1024_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        add_ln39_reg_1677 <= add_ln39_fu_1146_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state78)) begin
        add_ln40_reg_1685 <= add_ln40_fu_1158_p2;
        zext_ln40_reg_1690[5 : 0] <= zext_ln40_fu_1164_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_1208_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state79))) begin
        add_ln43_reg_1745 <= add_ln43_fu_1216_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        add_ln46_reg_1805 <= add_ln46_fu_1295_p2;
        tmp_25_cast_reg_1810[9 : 5] <= tmp_25_cast_fu_1305_p3[9 : 5];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_6_fu_1350_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state91))) begin
        add_ln50_reg_1849 <= add_ln50_fu_1358_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state96)) begin
        add_ln56_reg_2059 <= add_ln56_fu_1491_p2;
        tmp_30_cast_reg_2064[9 : 5] <= tmp_30_cast_fu_1501_p3[9 : 5];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state97)) begin
        add_ln57_reg_2072 <= add_ln57_fu_1515_p2;
        zext_ln58_1_reg_2077[9 : 0] <= zext_ln58_1_fu_1530_p1[9 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state73) & (icmp_ln29_reg_1583 == 1'd0))) begin
        gmem_A_addr_read_reg_1642 <= m_axi_gmem_A_RDATA;
        trunc_ln30_1_reg_1650 <= trunc_ln30_1_fu_1080_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state94)) begin
        mul_ln51_1_reg_2019 <= grp_fu_154_p_dout0;
        mul_ln51_2_reg_2024 <= grp_fu_158_p_dout0;
        mul_ln51_3_reg_2029 <= grp_fu_162_p_dout0;
        mul_ln51_4_reg_2034 <= grp_fu_166_p_dout0;
        mul_ln51_5_reg_2039 <= grp_fu_170_p_dout0;
        mul_ln51_6_reg_2044 <= grp_fu_174_p_dout0;
        mul_ln51_7_reg_2049 <= grp_fu_178_p_dout0;
        mul_ln51_reg_2014 <= grp_fu_150_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state85)) begin
        mul_ln691_2_reg_1795 <= grp_fu_146_p_dout0;
        mul_ln691_reg_1790 <= grp_fu_142_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln28_fu_968_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state71))) begin
        tmp_9_reg_1573[6 : 5] <= tmp_9_fu_1010_p3[6 : 5];
        tmp_s_reg_1564[8 : 5] <= tmp_s_fu_988_p3[8 : 5];
        trunc_ln32_reg_1560 <= trunc_ln32_fu_974_p1;
        trunc_ln33_reg_1569 <= trunc_ln33_fu_996_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln40_fu_1168_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state78))) begin
        tmp_V_0_addr_3_reg_1702 <= zext_ln42_fu_1196_p1;
        tmp_V_1_addr_3_reg_1707 <= zext_ln42_fu_1196_p1;
        tmp_V_2_addr_3_reg_1712 <= zext_ln42_fu_1196_p1;
        tmp_V_3_addr_3_reg_1717 <= zext_ln42_fu_1196_p1;
        tmp_V_4_addr_3_reg_1722 <= zext_ln42_fu_1196_p1;
        tmp_V_5_addr_3_reg_1727 <= zext_ln42_fu_1196_p1;
        tmp_V_6_addr_3_reg_1732 <= zext_ln42_fu_1196_p1;
        tmp_V_7_addr_3_reg_1737 <= zext_ln42_fu_1196_p1;
        trunc_ln42_reg_1698 <= trunc_ln42_fu_1174_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        A_V_0_ce0 = 1'b1;
    end else begin
        A_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        A_V_0_ce1 = 1'b1;
    end else begin
        A_V_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln31_fu_1118_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state75))) begin
        A_V_0_we1 = 1'b1;
    end else begin
        A_V_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        A_V_1_ce0 = 1'b1;
    end else begin
        A_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        A_V_1_ce1 = 1'b1;
    end else begin
        A_V_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln31_fu_1118_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state75))) begin
        A_V_1_we1 = 1'b1;
    end else begin
        A_V_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        B_V_0_ce0 = 1'b1;
    end else begin
        B_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        B_V_0_ce1 = 1'b1;
    end else begin
        B_V_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln32_reg_1560 == 1'd0) & (1'b1 == ap_CS_fsm_state75))) begin
        B_V_0_we1 = 1'b1;
    end else begin
        B_V_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        B_V_1_ce0 = 1'b1;
    end else begin
        B_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        B_V_1_ce1 = 1'b1;
    end else begin
        B_V_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln32_reg_1560 == 1'd1) & (1'b1 == ap_CS_fsm_state75))) begin
        B_V_1_we1 = 1'b1;
    end else begin
        B_V_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state91)) begin
        C_V_0_ce0 = 1'b1;
    end else begin
        C_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        C_V_0_ce1 = 1'b1;
    end else begin
        C_V_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln33_reg_1569 == 3'd0) & (1'b1 == ap_CS_fsm_state75))) begin
        C_V_0_we1 = 1'b1;
    end else begin
        C_V_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state91)) begin
        C_V_1_ce0 = 1'b1;
    end else begin
        C_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        C_V_1_ce1 = 1'b1;
    end else begin
        C_V_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln33_reg_1569 == 3'd1) & (1'b1 == ap_CS_fsm_state75))) begin
        C_V_1_we1 = 1'b1;
    end else begin
        C_V_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state91)) begin
        C_V_2_ce0 = 1'b1;
    end else begin
        C_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        C_V_2_ce1 = 1'b1;
    end else begin
        C_V_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln33_reg_1569 == 3'd2) & (1'b1 == ap_CS_fsm_state75))) begin
        C_V_2_we1 = 1'b1;
    end else begin
        C_V_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state91)) begin
        C_V_3_ce0 = 1'b1;
    end else begin
        C_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        C_V_3_ce1 = 1'b1;
    end else begin
        C_V_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln33_reg_1569 == 3'd3) & (1'b1 == ap_CS_fsm_state75))) begin
        C_V_3_we1 = 1'b1;
    end else begin
        C_V_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state91)) begin
        C_V_4_ce0 = 1'b1;
    end else begin
        C_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        C_V_4_ce1 = 1'b1;
    end else begin
        C_V_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln33_reg_1569 == 3'd4) & (1'b1 == ap_CS_fsm_state75))) begin
        C_V_4_we1 = 1'b1;
    end else begin
        C_V_4_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state91)) begin
        C_V_5_ce0 = 1'b1;
    end else begin
        C_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        C_V_5_ce1 = 1'b1;
    end else begin
        C_V_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln33_reg_1569 == 3'd5) & (1'b1 == ap_CS_fsm_state75))) begin
        C_V_5_we1 = 1'b1;
    end else begin
        C_V_5_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state91)) begin
        C_V_6_ce0 = 1'b1;
    end else begin
        C_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        C_V_6_ce1 = 1'b1;
    end else begin
        C_V_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln33_reg_1569 == 3'd6) & (1'b1 == ap_CS_fsm_state75))) begin
        C_V_6_we1 = 1'b1;
    end else begin
        C_V_6_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state91)) begin
        C_V_7_ce0 = 1'b1;
    end else begin
        C_V_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        C_V_7_ce1 = 1'b1;
    end else begin
        C_V_7_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln33_reg_1569 == 3'd7) & (1'b1 == ap_CS_fsm_state75))) begin
        C_V_7_we1 = 1'b1;
    end else begin
        C_V_7_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state89)) begin
        D_input_V_ce0 = 1'b1;
    end else begin
        D_input_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        D_input_V_ce1 = 1'b1;
    end else begin
        D_input_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        D_input_V_we1 = 1'b1;
    end else begin
        D_input_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state97)) begin
        D_output_V_ce0 = 1'b1;
    end else begin
        D_output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state91)) begin
        D_output_V_ce1 = 1'b1;
    end else begin
        D_output_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_6_fu_1350_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state91))) begin
        D_output_V_we1 = 1'b1;
    end else begin
        D_output_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln56_fu_1509_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state96)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln56_fu_1509_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state96))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        gmem_A_blk_n_AR = m_axi_gmem_A_ARREADY;
    end else begin
        gmem_A_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state73) & (icmp_ln29_reg_1583 == 1'd0))) begin
        gmem_A_blk_n_R = m_axi_gmem_A_RVALID;
    end else begin
        gmem_A_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((~((m_axi_gmem_A_ARREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        m_axi_gmem_A_ARVALID = 1'b1;
    end else begin
        m_axi_gmem_A_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln29_reg_1583 == 1'd0) & (m_axi_gmem_A_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state73) & (icmp_ln29_reg_1583 == 1'd0))) begin
        m_axi_gmem_A_RREADY = 1'b1;
    end else begin
        m_axi_gmem_A_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        tmp_V_0_address1 = tmp_V_0_addr_3_reg_1702;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        tmp_V_0_address1 = zext_ln30_fu_1106_p1;
    end else begin
        tmp_V_0_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state91)) begin
        tmp_V_0_ce0 = 1'b1;
    end else begin
        tmp_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state79))) begin
        tmp_V_0_ce1 = 1'b1;
    end else begin
        tmp_V_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        tmp_V_0_d1 = trunc_ln43_fu_1265_p1;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        tmp_V_0_d1 = trunc_ln30_1_reg_1650;
    end else begin
        tmp_V_0_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((trunc_ln30_fu_1084_p1 == 3'd0) & (1'b1 == ap_CS_fsm_state74)) | ((tmp_fu_1208_p3 == 1'd1) & (trunc_ln42_reg_1698 == 3'd0) & (1'b1 == ap_CS_fsm_state79)))) begin
        tmp_V_0_we1 = 1'b1;
    end else begin
        tmp_V_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        tmp_V_1_address1 = tmp_V_1_addr_3_reg_1707;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        tmp_V_1_address1 = zext_ln30_fu_1106_p1;
    end else begin
        tmp_V_1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state91)) begin
        tmp_V_1_ce0 = 1'b1;
    end else begin
        tmp_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state79))) begin
        tmp_V_1_ce1 = 1'b1;
    end else begin
        tmp_V_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        tmp_V_1_d1 = trunc_ln43_fu_1265_p1;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        tmp_V_1_d1 = trunc_ln30_1_reg_1650;
    end else begin
        tmp_V_1_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((trunc_ln30_fu_1084_p1 == 3'd1) & (1'b1 == ap_CS_fsm_state74)) | ((tmp_fu_1208_p3 == 1'd1) & (trunc_ln42_reg_1698 == 3'd1) & (1'b1 == ap_CS_fsm_state79)))) begin
        tmp_V_1_we1 = 1'b1;
    end else begin
        tmp_V_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        tmp_V_2_address1 = tmp_V_2_addr_3_reg_1712;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        tmp_V_2_address1 = zext_ln30_fu_1106_p1;
    end else begin
        tmp_V_2_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state91)) begin
        tmp_V_2_ce0 = 1'b1;
    end else begin
        tmp_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state79))) begin
        tmp_V_2_ce1 = 1'b1;
    end else begin
        tmp_V_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        tmp_V_2_d1 = trunc_ln43_fu_1265_p1;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        tmp_V_2_d1 = trunc_ln30_1_reg_1650;
    end else begin
        tmp_V_2_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((trunc_ln30_fu_1084_p1 == 3'd2) & (1'b1 == ap_CS_fsm_state74)) | ((tmp_fu_1208_p3 == 1'd1) & (trunc_ln42_reg_1698 == 3'd2) & (1'b1 == ap_CS_fsm_state79)))) begin
        tmp_V_2_we1 = 1'b1;
    end else begin
        tmp_V_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        tmp_V_3_address1 = tmp_V_3_addr_3_reg_1717;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        tmp_V_3_address1 = zext_ln30_fu_1106_p1;
    end else begin
        tmp_V_3_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state91)) begin
        tmp_V_3_ce0 = 1'b1;
    end else begin
        tmp_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state79))) begin
        tmp_V_3_ce1 = 1'b1;
    end else begin
        tmp_V_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        tmp_V_3_d1 = trunc_ln43_fu_1265_p1;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        tmp_V_3_d1 = trunc_ln30_1_reg_1650;
    end else begin
        tmp_V_3_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((trunc_ln30_fu_1084_p1 == 3'd3) & (1'b1 == ap_CS_fsm_state74)) | ((tmp_fu_1208_p3 == 1'd1) & (trunc_ln42_reg_1698 == 3'd3) & (1'b1 == ap_CS_fsm_state79)))) begin
        tmp_V_3_we1 = 1'b1;
    end else begin
        tmp_V_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        tmp_V_4_address1 = tmp_V_4_addr_3_reg_1722;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        tmp_V_4_address1 = zext_ln30_fu_1106_p1;
    end else begin
        tmp_V_4_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state91)) begin
        tmp_V_4_ce0 = 1'b1;
    end else begin
        tmp_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state79))) begin
        tmp_V_4_ce1 = 1'b1;
    end else begin
        tmp_V_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        tmp_V_4_d1 = trunc_ln43_fu_1265_p1;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        tmp_V_4_d1 = trunc_ln30_1_reg_1650;
    end else begin
        tmp_V_4_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((trunc_ln30_fu_1084_p1 == 3'd4) & (1'b1 == ap_CS_fsm_state74)) | ((tmp_fu_1208_p3 == 1'd1) & (trunc_ln42_reg_1698 == 3'd4) & (1'b1 == ap_CS_fsm_state79)))) begin
        tmp_V_4_we1 = 1'b1;
    end else begin
        tmp_V_4_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        tmp_V_5_address1 = tmp_V_5_addr_3_reg_1727;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        tmp_V_5_address1 = zext_ln30_fu_1106_p1;
    end else begin
        tmp_V_5_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state91)) begin
        tmp_V_5_ce0 = 1'b1;
    end else begin
        tmp_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state79))) begin
        tmp_V_5_ce1 = 1'b1;
    end else begin
        tmp_V_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        tmp_V_5_d1 = trunc_ln43_fu_1265_p1;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        tmp_V_5_d1 = trunc_ln30_1_reg_1650;
    end else begin
        tmp_V_5_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((trunc_ln30_fu_1084_p1 == 3'd5) & (1'b1 == ap_CS_fsm_state74)) | ((tmp_fu_1208_p3 == 1'd1) & (trunc_ln42_reg_1698 == 3'd5) & (1'b1 == ap_CS_fsm_state79)))) begin
        tmp_V_5_we1 = 1'b1;
    end else begin
        tmp_V_5_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        tmp_V_6_address1 = tmp_V_6_addr_3_reg_1732;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        tmp_V_6_address1 = zext_ln30_fu_1106_p1;
    end else begin
        tmp_V_6_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state91)) begin
        tmp_V_6_ce0 = 1'b1;
    end else begin
        tmp_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state79))) begin
        tmp_V_6_ce1 = 1'b1;
    end else begin
        tmp_V_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        tmp_V_6_d1 = trunc_ln43_fu_1265_p1;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        tmp_V_6_d1 = trunc_ln30_1_reg_1650;
    end else begin
        tmp_V_6_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_fu_1208_p3 == 1'd1) & (trunc_ln42_reg_1698 == 3'd6) & (1'b1 == ap_CS_fsm_state79)) | ((trunc_ln30_fu_1084_p1 == 3'd6) & (1'b1 == ap_CS_fsm_state74)))) begin
        tmp_V_6_we1 = 1'b1;
    end else begin
        tmp_V_6_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        tmp_V_7_address1 = tmp_V_7_addr_3_reg_1737;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        tmp_V_7_address1 = zext_ln30_fu_1106_p1;
    end else begin
        tmp_V_7_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state91)) begin
        tmp_V_7_ce0 = 1'b1;
    end else begin
        tmp_V_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state79))) begin
        tmp_V_7_ce1 = 1'b1;
    end else begin
        tmp_V_7_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        tmp_V_7_d1 = trunc_ln43_fu_1265_p1;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        tmp_V_7_d1 = trunc_ln30_1_reg_1650;
    end else begin
        tmp_V_7_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((trunc_ln30_fu_1084_p1 == 3'd7) & (1'b1 == ap_CS_fsm_state74)) | ((tmp_fu_1208_p3 == 1'd1) & (trunc_ln42_reg_1698 == 3'd7) & (1'b1 == ap_CS_fsm_state79)))) begin
        tmp_V_7_we1 = 1'b1;
    end else begin
        tmp_V_7_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state98)) begin
        xin_ce0 = 1'b1;
    end else begin
        xin_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state98)) begin
        xin_we0 = 1'b1;
    end else begin
        xin_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((m_axi_gmem_A_ARREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            if (((icmp_ln28_fu_968_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state71))) begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            if ((~((icmp_ln29_reg_1583 == 1'd0) & (m_axi_gmem_A_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state73) & (icmp_ln29_reg_1583 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state71;
            end else if ((~((icmp_ln29_reg_1583 == 1'd0) & (m_axi_gmem_A_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state73) & (icmp_ln29_reg_1583 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state77 : begin
            if (((icmp_ln39_fu_1152_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state77))) begin
                ap_NS_fsm = ap_ST_fsm_state88;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end
        end
        ap_ST_fsm_state78 : begin
            if (((icmp_ln40_fu_1168_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state78))) begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state79;
            end
        end
        ap_ST_fsm_state79 : begin
            if (((tmp_fu_1208_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state79))) begin
                ap_NS_fsm = ap_ST_fsm_state87;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state80;
            end
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state88 : begin
            if (((icmp_ln46_fu_1313_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state88))) begin
                ap_NS_fsm = ap_ST_fsm_state96;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state89;
            end
        end
        ap_ST_fsm_state89 : begin
            if (((icmp_ln47_fu_1344_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state89))) begin
                ap_NS_fsm = ap_ST_fsm_state88;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state90;
            end
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            if (((tmp_6_fu_1350_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state91))) begin
                ap_NS_fsm = ap_ST_fsm_state89;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state92;
            end
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state96 : begin
            if (((icmp_ln56_fu_1509_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state96))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state97;
            end
        end
        ap_ST_fsm_state97 : begin
            if (((icmp_ln57_fu_1535_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state97))) begin
                ap_NS_fsm = ap_ST_fsm_state96;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state98;
            end
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_V_0_address0 = zext_ln215_5_fu_1240_p1;

assign A_V_0_address1 = zext_ln31_fu_1140_p1;

assign A_V_1_address0 = zext_ln215_5_fu_1240_p1;

assign A_V_1_address1 = zext_ln31_fu_1140_p1;

assign B_V_0_address0 = zext_ln215_10_fu_1259_p1;

assign B_V_1_address0 = zext_ln215_10_fu_1259_p1;

assign C_V_0_address0 = zext_ln215_11_fu_1407_p1;

assign C_V_1_address0 = zext_ln215_11_fu_1407_p1;

assign C_V_2_address0 = zext_ln215_11_fu_1407_p1;

assign C_V_3_address0 = zext_ln215_11_fu_1407_p1;

assign C_V_4_address0 = zext_ln215_11_fu_1407_p1;

assign C_V_5_address0 = zext_ln215_11_fu_1407_p1;

assign C_V_6_address0 = zext_ln215_11_fu_1407_p1;

assign C_V_7_address0 = zext_ln215_11_fu_1407_p1;

assign D_input_V_address0 = zext_ln215_9_fu_1338_p1;

assign D_output_V_address0 = zext_ln58_1_fu_1530_p1;

assign add_ln215_3_fu_1254_p2 = (tmp_14_fu_1246_p3 + zext_ln40_reg_1690);

assign add_ln215_4_fu_1402_p2 = (tmp_16_fu_1394_p3 + zext_ln215_reg_1823);

assign add_ln215_fu_1333_p2 = (tmp_25_cast_reg_1810 + zext_ln215_8_fu_1329_p1);

assign add_ln28_fu_950_p2 = (i_reg_792 + 6'd1);

assign add_ln29_fu_1018_p2 = (j_reg_804 + 6'd1);

assign add_ln32_fu_1042_p2 = (tmp_s_reg_1564 + zext_ln32_2_fu_1038_p1);

assign add_ln33_fu_1053_p2 = (tmp_9_reg_1573 + zext_ln32_1_fu_1034_p1);

assign add_ln34_fu_1070_p2 = (tmp_cast_reg_1552 + zext_ln32_fu_1030_p1);

assign add_ln39_fu_1146_p2 = (i_4_reg_816 + 6'd1);

assign add_ln40_fu_1158_p2 = (j_4_reg_828 + 6'd1);

assign add_ln43_fu_1216_p2 = (k_reg_839 + 6'd2);

assign add_ln46_fu_1295_p2 = (i_5_reg_862 + 6'd1);

assign add_ln47_fu_1319_p2 = (j_5_reg_874 + 6'd1);

assign add_ln50_fu_1358_p2 = (k_2_reg_885 + 6'd8);

assign add_ln51_1_fu_1455_p2 = (mul_ln51_2_reg_2024 + mul_ln51_3_reg_2029);

assign add_ln51_2_fu_1459_p2 = (add_ln51_1_fu_1455_p2 + add_ln51_fu_1451_p2);

assign add_ln51_3_fu_1465_p2 = (mul_ln51_4_reg_2034 + mul_ln51_5_reg_2039);

assign add_ln51_4_fu_1469_p2 = (mul_ln51_6_reg_2044 + mul_ln51_7_reg_2049);

assign add_ln51_5_fu_1473_p2 = (add_ln51_4_fu_1469_p2 + add_ln51_3_fu_1465_p2);

assign add_ln51_6_fu_1479_p2 = (add_ln51_5_fu_1473_p2 + add_ln51_2_fu_1459_p2);

assign add_ln51_fu_1451_p2 = (mul_ln51_reg_2014 + mul_ln51_1_reg_2019);

assign add_ln56_fu_1491_p2 = (i_6_reg_907 + 6'd1);

assign add_ln57_fu_1515_p2 = (j_6_reg_918 + 6'd1);

assign add_ln58_fu_1525_p2 = (tmp_30_cast_reg_2064 + zext_ln58_fu_1521_p1);

assign add_ln691_2_fu_1285_p2 = (mul_ln691_reg_1790 + mul_ln691_2_reg_1795);

assign add_ln691_fu_1289_p2 = (conv3_i_115_reg_850 + add_ln691_2_fu_1285_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_state89 = ap_CS_fsm[32'd88];

assign ap_CS_fsm_state90 = ap_CS_fsm[32'd89];

assign ap_CS_fsm_state91 = ap_CS_fsm[32'd90];

assign ap_CS_fsm_state92 = ap_CS_fsm[32'd91];

assign ap_CS_fsm_state93 = ap_CS_fsm[32'd92];

assign ap_CS_fsm_state94 = ap_CS_fsm[32'd93];

assign ap_CS_fsm_state95 = ap_CS_fsm[32'd94];

assign ap_CS_fsm_state96 = ap_CS_fsm[32'd95];

assign ap_CS_fsm_state97 = ap_CS_fsm[32'd96];

assign ap_CS_fsm_state98 = ap_CS_fsm[32'd97];

always @ (*) begin
    ap_block_state73 = ((icmp_ln29_reg_1583 == 1'd0) & (m_axi_gmem_A_RVALID == 1'b0));
end

assign grp_fu_1277_ce = 1'b1;

assign grp_fu_1277_p0 = B_V_0_load_reg_1775;

assign grp_fu_1277_p1 = A_V_0_load_reg_1770;

assign grp_fu_1277_p2 = grp_fu_142_p_dout0;

assign grp_fu_1281_ce = 1'b1;

assign grp_fu_1281_p0 = B_V_1_load_reg_1785;

assign grp_fu_1281_p1 = A_V_1_load_reg_1780;

assign grp_fu_1281_p2 = grp_fu_146_p_dout0;

assign grp_fu_1419_ce = 1'b1;

assign grp_fu_1419_p0 = C_V_0_load_reg_1939;

assign grp_fu_1419_p1 = tmp_V_0_load_reg_1934;

assign grp_fu_1419_p2 = grp_fu_150_p_dout0;

assign grp_fu_1423_ce = 1'b1;

assign grp_fu_1423_p0 = C_V_1_load_reg_1949;

assign grp_fu_1423_p1 = tmp_V_1_load_reg_1944;

assign grp_fu_1423_p2 = grp_fu_154_p_dout0;

assign grp_fu_1427_ce = 1'b1;

assign grp_fu_1427_p0 = C_V_2_load_reg_1959;

assign grp_fu_1427_p1 = tmp_V_2_load_reg_1954;

assign grp_fu_1427_p2 = grp_fu_158_p_dout0;

assign grp_fu_142_p_ce = 1'b1;

assign grp_fu_142_p_din0 = B_V_0_load_reg_1775;

assign grp_fu_142_p_din1 = A_V_0_load_reg_1770;

assign grp_fu_1431_ce = 1'b1;

assign grp_fu_1431_p0 = C_V_3_load_reg_1969;

assign grp_fu_1431_p1 = tmp_V_3_load_reg_1964;

assign grp_fu_1431_p2 = grp_fu_162_p_dout0;

assign grp_fu_1435_ce = 1'b1;

assign grp_fu_1435_p0 = C_V_4_load_reg_1979;

assign grp_fu_1435_p1 = tmp_V_4_load_reg_1974;

assign grp_fu_1435_p2 = grp_fu_166_p_dout0;

assign grp_fu_1439_ce = 1'b1;

assign grp_fu_1439_p0 = C_V_5_load_reg_1989;

assign grp_fu_1439_p1 = tmp_V_5_load_reg_1984;

assign grp_fu_1439_p2 = grp_fu_170_p_dout0;

assign grp_fu_1443_ce = 1'b1;

assign grp_fu_1443_p0 = C_V_6_load_reg_1999;

assign grp_fu_1443_p1 = tmp_V_6_load_reg_1994;

assign grp_fu_1443_p2 = grp_fu_174_p_dout0;

assign grp_fu_1447_ce = 1'b1;

assign grp_fu_1447_p0 = C_V_7_load_reg_2009;

assign grp_fu_1447_p1 = tmp_V_7_load_reg_2004;

assign grp_fu_1447_p2 = grp_fu_178_p_dout0;

assign grp_fu_146_p_ce = 1'b1;

assign grp_fu_146_p_din0 = B_V_1_load_reg_1785;

assign grp_fu_146_p_din1 = A_V_1_load_reg_1780;

assign grp_fu_150_p_ce = 1'b1;

assign grp_fu_150_p_din0 = C_V_0_load_reg_1939;

assign grp_fu_150_p_din1 = tmp_V_0_load_reg_1934;

assign grp_fu_154_p_ce = 1'b1;

assign grp_fu_154_p_din0 = C_V_1_load_reg_1949;

assign grp_fu_154_p_din1 = tmp_V_1_load_reg_1944;

assign grp_fu_158_p_ce = 1'b1;

assign grp_fu_158_p_din0 = C_V_2_load_reg_1959;

assign grp_fu_158_p_din1 = tmp_V_2_load_reg_1954;

assign grp_fu_162_p_ce = 1'b1;

assign grp_fu_162_p_din0 = C_V_3_load_reg_1969;

assign grp_fu_162_p_din1 = tmp_V_3_load_reg_1964;

assign grp_fu_166_p_ce = 1'b1;

assign grp_fu_166_p_din0 = C_V_4_load_reg_1979;

assign grp_fu_166_p_din1 = tmp_V_4_load_reg_1974;

assign grp_fu_170_p_ce = 1'b1;

assign grp_fu_170_p_din0 = C_V_5_load_reg_1989;

assign grp_fu_170_p_din1 = tmp_V_5_load_reg_1984;

assign grp_fu_174_p_ce = 1'b1;

assign grp_fu_174_p_din0 = C_V_6_load_reg_1999;

assign grp_fu_174_p_din1 = tmp_V_6_load_reg_1994;

assign grp_fu_178_p_ce = 1'b1;

assign grp_fu_178_p_din0 = C_V_7_load_reg_2009;

assign grp_fu_178_p_din1 = tmp_V_7_load_reg_2004;

assign icmp_ln28_fu_968_p2 = ((i_reg_792 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_1024_p2 = ((j_reg_804 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_1152_p2 = ((i_4_reg_816 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln40_fu_1168_p2 = ((j_4_reg_828 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_1313_p2 = ((i_5_reg_862 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln47_fu_1344_p2 = ((j_5_reg_874 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln56_fu_1509_p2 = ((i_6_reg_907 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln57_fu_1535_p2 = ((j_6_reg_918 == 6'd32) ? 1'b1 : 1'b0);

assign lshr_ln1_fu_1222_p4 = {{k_reg_839[4:1]}};

assign lshr_ln215_2_fu_1364_p4 = {{k_2_reg_885[4:3]}};

assign lshr_ln6_fu_1000_p4 = {{i_reg_792[4:3]}};

assign lshr_ln7_fu_1088_p4 = {{j_reg_804[4:3]}};

assign lshr_ln8_fu_1178_p4 = {{j_4_reg_828[4:3]}};

assign lshr_ln9_fu_1122_p4 = {{j_reg_804[4:1]}};

assign lshr_ln_fu_978_p4 = {{i_reg_792[4:1]}};

assign m_axi_gmem_A_ARADDR = sext_ln28_fu_939_p1;

assign m_axi_gmem_A_ARBURST = 2'd0;

assign m_axi_gmem_A_ARCACHE = 4'd0;

assign m_axi_gmem_A_ARID = 1'd0;

assign m_axi_gmem_A_ARLEN = 32'd1024;

assign m_axi_gmem_A_ARLOCK = 2'd0;

assign m_axi_gmem_A_ARPROT = 3'd0;

assign m_axi_gmem_A_ARQOS = 4'd0;

assign m_axi_gmem_A_ARREGION = 4'd0;

assign m_axi_gmem_A_ARSIZE = 3'd0;

assign m_axi_gmem_A_ARUSER = 1'd0;

assign m_axi_gmem_A_AWADDR = 64'd0;

assign m_axi_gmem_A_AWBURST = 2'd0;

assign m_axi_gmem_A_AWCACHE = 4'd0;

assign m_axi_gmem_A_AWID = 1'd0;

assign m_axi_gmem_A_AWLEN = 32'd0;

assign m_axi_gmem_A_AWLOCK = 2'd0;

assign m_axi_gmem_A_AWPROT = 3'd0;

assign m_axi_gmem_A_AWQOS = 4'd0;

assign m_axi_gmem_A_AWREGION = 4'd0;

assign m_axi_gmem_A_AWSIZE = 3'd0;

assign m_axi_gmem_A_AWUSER = 1'd0;

assign m_axi_gmem_A_AWVALID = 1'b0;

assign m_axi_gmem_A_BREADY = 1'b0;

assign m_axi_gmem_A_WDATA = 512'd0;

assign m_axi_gmem_A_WID = 1'd0;

assign m_axi_gmem_A_WLAST = 1'b0;

assign m_axi_gmem_A_WSTRB = 64'd0;

assign m_axi_gmem_A_WUSER = 1'd0;

assign m_axi_gmem_A_WVALID = 1'b0;

assign sext_ln28_fu_939_p1 = $signed(trunc_ln_fu_929_p4);

assign sum_4_fu_1485_p2 = (sum_3_reg_896 + add_ln51_6_fu_1479_p2);

assign tmp_10_fu_1098_p3 = {{i_reg_792}, {lshr_ln7_fu_1088_p4}};

assign tmp_11_fu_1188_p3 = {{i_4_reg_816}, {lshr_ln8_fu_1178_p4}};

assign tmp_12_fu_1132_p3 = {{i_reg_792}, {lshr_ln9_fu_1122_p4}};

assign tmp_13_fu_1232_p3 = {{i_4_reg_816}, {lshr_ln1_fu_1222_p4}};

assign tmp_14_fu_1246_p3 = {{lshr_ln1_fu_1222_p4}, {5'd0}};

assign tmp_15_fu_1374_p3 = {{i_5_reg_862}, {lshr_ln215_2_fu_1364_p4}};

assign tmp_16_fu_1394_p3 = {{lshr_ln215_2_fu_1364_p4}, {5'd0}};

assign tmp_25_cast_fu_1305_p3 = {{trunc_ln215_fu_1301_p1}, {5'd0}};

assign tmp_30_cast_fu_1501_p3 = {{trunc_ln58_fu_1497_p1}, {5'd0}};

assign tmp_6_fu_1350_p3 = k_2_reg_885[32'd5];

assign tmp_9_fu_1010_p3 = {{lshr_ln6_fu_1000_p4}, {5'd0}};

assign tmp_V_0_address0 = zext_ln215_7_fu_1382_p1;

assign tmp_V_1_address0 = zext_ln215_7_fu_1382_p1;

assign tmp_V_2_address0 = zext_ln215_7_fu_1382_p1;

assign tmp_V_3_address0 = zext_ln215_7_fu_1382_p1;

assign tmp_V_4_address0 = zext_ln215_7_fu_1382_p1;

assign tmp_V_5_address0 = zext_ln215_7_fu_1382_p1;

assign tmp_V_6_address0 = zext_ln215_7_fu_1382_p1;

assign tmp_V_7_address0 = zext_ln215_7_fu_1382_p1;

assign tmp_cast_fu_960_p3 = {{trunc_ln34_fu_956_p1}, {5'd0}};

assign tmp_fu_1208_p3 = k_reg_839[32'd5];

assign tmp_s_fu_988_p3 = {{lshr_ln_fu_978_p4}, {5'd0}};

assign trunc_ln215_fu_1301_p1 = i_5_reg_862[4:0];

assign trunc_ln30_1_fu_1080_p1 = m_axi_gmem_A_RDATA[31:0];

assign trunc_ln30_fu_1084_p1 = j_reg_804[2:0];

assign trunc_ln31_fu_1118_p1 = j_reg_804[0:0];

assign trunc_ln32_fu_974_p1 = i_reg_792[0:0];

assign trunc_ln33_fu_996_p1 = i_reg_792[2:0];

assign trunc_ln34_fu_956_p1 = i_reg_792[4:0];

assign trunc_ln42_fu_1174_p1 = j_4_reg_828[2:0];

assign trunc_ln43_fu_1265_p1 = conv3_i_115_reg_850[31:0];

assign trunc_ln58_fu_1497_p1 = i_6_reg_907[4:0];

assign trunc_ln_fu_929_p4 = {{xout[63:6]}};

assign xin_address0 = zext_ln58_1_reg_2077;

assign xin_d0 = D_output_V_q0;

assign zext_ln215_10_fu_1259_p1 = add_ln215_3_fu_1254_p2;

assign zext_ln215_11_fu_1407_p1 = add_ln215_4_fu_1402_p2;

assign zext_ln215_5_fu_1240_p1 = tmp_13_fu_1232_p3;

assign zext_ln215_7_fu_1382_p1 = tmp_15_fu_1374_p3;

assign zext_ln215_8_fu_1329_p1 = j_5_reg_874;

assign zext_ln215_9_fu_1338_p1 = add_ln215_fu_1333_p2;

assign zext_ln215_fu_1325_p1 = j_5_reg_874;

assign zext_ln30_fu_1106_p1 = tmp_10_fu_1098_p3;

assign zext_ln31_fu_1140_p1 = tmp_12_fu_1132_p3;

assign zext_ln32_1_fu_1034_p1 = j_reg_804;

assign zext_ln32_2_fu_1038_p1 = j_reg_804;

assign zext_ln32_3_fu_1047_p1 = add_ln32_fu_1042_p2;

assign zext_ln32_fu_1030_p1 = j_reg_804;

assign zext_ln33_fu_1058_p1 = add_ln33_fu_1053_p2;

assign zext_ln34_fu_1075_p1 = add_ln34_fu_1070_p2;

assign zext_ln40_fu_1164_p1 = j_4_reg_828;

assign zext_ln42_fu_1196_p1 = tmp_11_fu_1188_p3;

assign zext_ln58_1_fu_1530_p1 = add_ln58_fu_1525_p2;

assign zext_ln58_fu_1521_p1 = j_6_reg_918;

always @ (posedge ap_clk) begin
    tmp_cast_reg_1552[4:0] <= 5'b00000;
    tmp_s_reg_1564[4:0] <= 5'b00000;
    tmp_9_reg_1573[4:0] <= 5'b00000;
    zext_ln40_reg_1690[8:6] <= 3'b000;
    tmp_25_cast_reg_1810[4:0] <= 5'b00000;
    zext_ln215_reg_1823[6] <= 1'b0;
    tmp_30_cast_reg_2064[4:0] <= 5'b00000;
    zext_ln58_1_reg_2077[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
end

endmodule //top_nondf_kernel_2mm_x0
