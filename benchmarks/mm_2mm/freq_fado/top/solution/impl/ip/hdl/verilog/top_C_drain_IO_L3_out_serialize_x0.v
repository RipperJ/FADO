// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module top_C_drain_IO_L3_out_serialize_x0 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        fifo_C_drain_C_drain_IO_L3_out_serialize_x03_dout,
        fifo_C_drain_C_drain_IO_L3_out_serialize_x03_empty_n,
        fifo_C_drain_C_drain_IO_L3_out_serialize_x03_read,
        C_address0,
        C_ce0,
        C_we0,
        C_d0
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [127:0] fifo_C_drain_C_drain_IO_L3_out_serialize_x03_dout;
input   fifo_C_drain_C_drain_IO_L3_out_serialize_x03_empty_n;
output   fifo_C_drain_C_drain_IO_L3_out_serialize_x03_read;
output  [9:0] C_address0;
output   C_ce0;
output   C_we0;
output  [31:0] C_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg fifo_C_drain_C_drain_IO_L3_out_serialize_x03_read;
reg C_ce0;
reg C_we0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    fifo_C_drain_C_drain_IO_L3_out_serialize_x03_blk_n;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln878_fu_132_p2;
wire   [15:0] i_V_2_fu_109_p2;
reg   [15:0] i_V_2_reg_153;
wire    ap_CS_fsm_state2;
wire   [2:0] add_ln691_fu_121_p2;
reg    ap_block_state3;
reg   [1:0] mem_data_split_V_address0;
reg    mem_data_split_V_ce0;
reg    mem_data_split_V_we0;
wire   [31:0] mem_data_split_V_d0;
wire   [31:0] mem_data_split_V_q0;
reg   [15:0] i_V_reg_86;
reg    ap_block_state1;
wire    ap_CS_fsm_state4;
reg   [2:0] p_V_reg_98;
wire   [0:0] icmp_ln17595_fu_115_p2;
wire   [63:0] zext_ln878_fu_127_p1;
wire   [63:0] zext_ln534_fu_143_p1;
reg   [3:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
end

top_C_drain_IO_L3_out_serialize_x0_mem_data_split_V #(
    .DataWidth( 32 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
mem_data_split_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mem_data_split_V_address0),
    .ce0(mem_data_split_V_ce0),
    .we0(mem_data_split_V_we0),
    .d0(mem_data_split_V_d0),
    .q0(mem_data_split_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln17595_fu_115_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_V_reg_86 <= i_V_2_reg_153;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_V_reg_86 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln17595_fu_115_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        p_V_reg_98 <= 3'd0;
    end else if ((~((icmp_ln878_fu_132_p2 == 1'd0) & (fifo_C_drain_C_drain_IO_L3_out_serialize_x03_empty_n == 1'b0)) & (icmp_ln878_fu_132_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        p_V_reg_98 <= add_ln691_fu_121_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_V_2_reg_153 <= i_V_2_fu_109_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        C_ce0 = 1'b1;
    end else begin
        C_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        C_we0 = 1'b1;
    end else begin
        C_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln17595_fu_115_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln17595_fu_115_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln878_fu_132_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        fifo_C_drain_C_drain_IO_L3_out_serialize_x03_blk_n = fifo_C_drain_C_drain_IO_L3_out_serialize_x03_empty_n;
    end else begin
        fifo_C_drain_C_drain_IO_L3_out_serialize_x03_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((icmp_ln878_fu_132_p2 == 1'd0) & (fifo_C_drain_C_drain_IO_L3_out_serialize_x03_empty_n == 1'b0)) & (icmp_ln878_fu_132_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        fifo_C_drain_C_drain_IO_L3_out_serialize_x03_read = 1'b1;
    end else begin
        fifo_C_drain_C_drain_IO_L3_out_serialize_x03_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        if ((icmp_ln878_fu_132_p2 == 1'd1)) begin
            mem_data_split_V_address0 = 64'd0;
        end else if ((icmp_ln878_fu_132_p2 == 1'd0)) begin
            mem_data_split_V_address0 = zext_ln878_fu_127_p1;
        end else begin
            mem_data_split_V_address0 = 'bx;
        end
    end else begin
        mem_data_split_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((~((icmp_ln878_fu_132_p2 == 1'd0) & (fifo_C_drain_C_drain_IO_L3_out_serialize_x03_empty_n == 1'b0)) & (icmp_ln878_fu_132_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)) | (~((icmp_ln878_fu_132_p2 == 1'd0) & (fifo_C_drain_C_drain_IO_L3_out_serialize_x03_empty_n == 1'b0)) & (icmp_ln878_fu_132_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)))) begin
        mem_data_split_V_ce0 = 1'b1;
    end else begin
        mem_data_split_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln878_fu_132_p2 == 1'd0) & (fifo_C_drain_C_drain_IO_L3_out_serialize_x03_empty_n == 1'b0)) & (icmp_ln878_fu_132_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        mem_data_split_V_we0 = 1'b1;
    end else begin
        mem_data_split_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln17595_fu_115_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((icmp_ln878_fu_132_p2 == 1'd0) & (fifo_C_drain_C_drain_IO_L3_out_serialize_x03_empty_n == 1'b0)) & (icmp_ln878_fu_132_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if ((~((icmp_ln878_fu_132_p2 == 1'd0) & (fifo_C_drain_C_drain_IO_L3_out_serialize_x03_empty_n == 1'b0)) & (icmp_ln878_fu_132_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign C_address0 = zext_ln534_fu_143_p1;

assign C_d0 = mem_data_split_V_q0;

assign add_ln691_fu_121_p2 = (p_V_reg_98 + 3'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state3 = ((icmp_ln878_fu_132_p2 == 1'd0) & (fifo_C_drain_C_drain_IO_L3_out_serialize_x03_empty_n == 1'b0));
end

assign i_V_2_fu_109_p2 = (i_V_reg_86 + 16'd1);

assign icmp_ln17595_fu_115_p2 = ((i_V_reg_86 == 16'd32768) ? 1'b1 : 1'b0);

assign icmp_ln878_fu_132_p2 = ((p_V_reg_98 == 3'd4) ? 1'b1 : 1'b0);

assign mem_data_split_V_d0 = fifo_C_drain_C_drain_IO_L3_out_serialize_x03_dout[31:0];

assign zext_ln534_fu_143_p1 = i_V_reg_86;

assign zext_ln878_fu_127_p1 = p_V_reg_98;

endmodule //top_C_drain_IO_L3_out_serialize_x0
