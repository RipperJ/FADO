-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_PE_wrapper_1_7_x0 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    fifo_A_PE_1_7_x036_dout : IN STD_LOGIC_VECTOR (511 downto 0);
    fifo_A_PE_1_7_x036_empty_n : IN STD_LOGIC;
    fifo_A_PE_1_7_x036_read : OUT STD_LOGIC;
    fifo_A_PE_1_8_x037_din : OUT STD_LOGIC_VECTOR (511 downto 0);
    fifo_A_PE_1_8_x037_full_n : IN STD_LOGIC;
    fifo_A_PE_1_8_x037_write : OUT STD_LOGIC;
    fifo_B_PE_1_7_x0156_dout : IN STD_LOGIC_VECTOR (511 downto 0);
    fifo_B_PE_1_7_x0156_empty_n : IN STD_LOGIC;
    fifo_B_PE_1_7_x0156_read : OUT STD_LOGIC;
    fifo_B_PE_2_7_x0157_din : OUT STD_LOGIC_VECTOR (511 downto 0);
    fifo_B_PE_2_7_x0157_full_n : IN STD_LOGIC;
    fifo_B_PE_2_7_x0157_write : OUT STD_LOGIC;
    fifo_C_drain_PE_1_7_x0221_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    fifo_C_drain_PE_1_7_x0221_full_n : IN STD_LOGIC;
    fifo_C_drain_PE_1_7_x0221_write : OUT STD_LOGIC );
end;


architecture behav of top_PE_wrapper_1_7_x0 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv20_80000 : STD_LOGIC_VECTOR (19 downto 0) := "10000000000000000000";
    constant ap_const_lv20_1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_const_lv17_8000 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_const_lv13_800 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_8F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001111";
    constant ap_const_lv32_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101111";
    constant ap_const_lv32_B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001111";
    constant ap_const_lv32_D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101111";
    constant ap_const_lv32_F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_10F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100001111";
    constant ap_const_lv32_110 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100010000";
    constant ap_const_lv32_11F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011111";
    constant ap_const_lv32_120 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100100000";
    constant ap_const_lv32_12F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100101111";
    constant ap_const_lv32_130 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100110000";
    constant ap_const_lv32_13F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111111";
    constant ap_const_lv32_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000000";
    constant ap_const_lv32_14F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101001111";
    constant ap_const_lv32_150 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101010000";
    constant ap_const_lv32_15F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101011111";
    constant ap_const_lv32_160 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101100000";
    constant ap_const_lv32_16F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101101111";
    constant ap_const_lv32_170 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101110000";
    constant ap_const_lv32_17F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111111";
    constant ap_const_lv32_180 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000000";
    constant ap_const_lv32_18F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110001111";
    constant ap_const_lv32_190 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110010000";
    constant ap_const_lv32_19F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110011111";
    constant ap_const_lv32_1A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110100000";
    constant ap_const_lv32_1AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110101111";
    constant ap_const_lv32_1B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110110000";
    constant ap_const_lv32_1BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110111111";
    constant ap_const_lv32_1C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111000000";
    constant ap_const_lv32_1CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111001111";
    constant ap_const_lv32_1D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111010000";
    constant ap_const_lv32_1DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111011111";
    constant ap_const_lv32_1E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111100000";
    constant ap_const_lv32_1EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111101111";
    constant ap_const_lv32_1F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111110000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv6_1F : STD_LOGIC_VECTOR (5 downto 0) := "011111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv8_40 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal fifo_A_PE_1_7_x036_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal icmp_ln890_reg_1572 : STD_LOGIC_VECTOR (0 downto 0);
    signal fifo_A_PE_1_8_x037_blk_n : STD_LOGIC;
    signal fifo_B_PE_1_7_x0156_blk_n : STD_LOGIC;
    signal fifo_B_PE_2_7_x0157_blk_n : STD_LOGIC;
    signal fifo_C_drain_PE_1_7_x0221_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal select_ln4894_2_reg_1947 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln4894_2_reg_1947_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten73_reg_283 : STD_LOGIC_VECTOR (19 downto 0);
    signal indvar_flatten39_reg_295 : STD_LOGIC_VECTOR (16 downto 0);
    signal indvar_flatten13_reg_306 : STD_LOGIC_VECTOR (12 downto 0);
    signal c2_V_reg_317 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten_reg_328 : STD_LOGIC_VECTOR (7 downto 0);
    signal c6_V_reg_339 : STD_LOGIC_VECTOR (3 downto 0);
    signal c7_V_reg_350 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln890_fu_361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln890_reg_1572_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln890_reg_1572_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln890_reg_1572_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln890_294_fu_367_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln890_294_reg_1576 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state7_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state9_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln890_342_fu_373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln890_342_reg_1581 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln890_342_reg_1581_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln890_344_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln890_344_reg_1591 : STD_LOGIC_VECTOR (0 downto 0);
    signal v2_V_11828_fu_385_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_11828_reg_1597 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_11829_reg_1602 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_11831_reg_1612 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_11833_reg_1622 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_11835_reg_1632 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_11837_reg_1642 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_11839_reg_1652 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_11842_reg_1667 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_11843_reg_1672 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_11845_reg_1682 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_11847_reg_1692 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_11849_reg_1702 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_11851_reg_1712 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_11853_reg_1722 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_11855_reg_1732 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_11858_reg_1747 : STD_LOGIC_VECTOR (15 downto 0);
    signal v1_V_98_reg_1752 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_fu_699_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_reg_1757 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_11798_reg_1762 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_11800_reg_1772 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_11802_reg_1782 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_11804_reg_1792 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_11806_reg_1802 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_11808_reg_1812 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_11811_reg_1827 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_11812_reg_1832 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_11814_reg_1842 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_11816_reg_1852 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_11818_reg_1862 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_11820_reg_1872 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_11822_reg_1882 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_11824_reg_1892 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_11827_reg_1907 : STD_LOGIC_VECTOR (15 downto 0);
    signal v1_V_reg_1912 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln890_292_fu_1013_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln890_292_reg_1917 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln890_293_fu_1019_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln890_293_reg_1922 : STD_LOGIC_VECTOR (16 downto 0);
    signal cmp_i_i135998_fu_1025_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp_i_i135998_reg_1927 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln4892_3_fu_1072_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln4892_3_reg_1932 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln4893_2_fu_1112_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln4893_2_reg_1937 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp_i_i1359_mid1_fu_1143_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp_i_i1359_mid1_reg_1942 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln4894_2_fu_1155_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln4894_2_reg_1947_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln890_fu_1175_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln890_reg_1951 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal select_ln890_487_fu_1209_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln890_487_reg_1956 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_fu_1217_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_reg_1962 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln691_343_fu_1221_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln691_343_reg_1967 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln890_488_fu_1233_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln890_488_reg_1972 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln890_489_fu_1241_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln890_489_reg_1977 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln890_490_fu_1248_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln890_490_reg_1982 : STD_LOGIC_VECTOR (16 downto 0);
    signal local_C_addr_reg_1987 : STD_LOGIC_VECTOR (5 downto 0);
    signal local_C_addr_reg_1987_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal local_C_addr_reg_1987_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1367_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1373_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1379_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1385_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1391_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1397_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1403_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1409_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1415_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1421_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1427_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1433_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1439_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1445_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1451_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln4935_6_fu_1306_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln4935_6_reg_2073 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln4935_13_fu_1320_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln4935_13_reg_2078 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln4935_17_fu_1326_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln4935_17_fu_1326_p2 : signal is "no";
    signal add_ln4935_17_reg_2083 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln4935_20_fu_1330_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln4935_20_fu_1330_p2 : signal is "no";
    signal add_ln4935_20_reg_2088 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1485_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln4935_22_reg_2093 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal grp_fu_1491_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln4935_23_reg_2098 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1497_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln4935_25_reg_2103 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1559_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln4935_29_fu_1342_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln4935_29_reg_2113 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln4935_31_fu_1361_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln4935_31_reg_2118 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_condition_pp0_flush_enable : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter1_state4 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal local_C_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal local_C_ce0 : STD_LOGIC;
    signal local_C_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal local_C_ce1 : STD_LOGIC;
    signal local_C_we1 : STD_LOGIC;
    signal ap_phi_mux_indvar_flatten73_phi_fu_287_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_phi_mux_indvar_flatten39_phi_fu_299_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_phi_mux_indvar_flatten13_phi_fu_310_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_phi_mux_c2_V_phi_fu_321_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_332_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_c6_V_phi_fu_343_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_c7_V_phi_fu_354_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_cast_fu_1270_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal cmp_i_i97_fu_1036_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln4892_fu_1031_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln890101_fu_1048_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln890_343_fu_1060_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln4893_fu_1077_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln4893_fu_1090_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln4892_fu_1042_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln4893_2_fu_1095_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln4892_1_fu_1054_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln4892_2_fu_1066_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln4893_fu_1082_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln4894_fu_1124_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln4894_1_fu_1130_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln691_fu_1118_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal cmp_i_i_mid1_fu_1149_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln4893_fu_1100_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln4893_1_fu_1106_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln4894_fu_1163_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln4894_fu_1135_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln4894_fu_1169_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln890_fu_1189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln890_98_fu_1195_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln691_342_fu_1183_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln890_486_fu_1201_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln890_fu_1227_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_169_cast_fu_1257_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln890_fu_1254_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_2892_fu_1264_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln4892_fu_1275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln4893_1_fu_1279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln4894_1_fu_1284_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1545_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1552_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1538_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1531_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln4935_5_fu_1302_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln4935_5_fu_1302_p2 : signal is "no";
    signal add_ln4935_2_fu_1298_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln4935_2_fu_1298_p2 : signal is "no";
    signal grp_fu_1510_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1503_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1524_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1517_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln4935_12_fu_1316_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln4935_12_fu_1316_p2 : signal is "no";
    signal add_ln4935_9_fu_1312_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln4935_9_fu_1312_p2 : signal is "no";
    signal grp_fu_1464_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1457_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1478_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1471_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1565_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln4935_28_fu_1338_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln4935_28_fu_1338_p2 : signal is "no";
    signal add_ln4935_24_fu_1334_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln4935_24_fu_1334_p2 : signal is "no";
    signal add_ln4935_21_fu_1352_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln4935_30_fu_1356_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln4935_14_fu_1348_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1367_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1367_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1373_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1373_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1379_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1379_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1385_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1385_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1391_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1391_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1397_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1397_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1403_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1403_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1409_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1409_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1415_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1415_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1421_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1421_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1427_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1427_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1433_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1433_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1439_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1439_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1445_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1445_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1451_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1451_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1457_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1367_ce : STD_LOGIC;
    signal grp_fu_1373_ce : STD_LOGIC;
    signal grp_fu_1379_ce : STD_LOGIC;
    signal grp_fu_1385_ce : STD_LOGIC;
    signal grp_fu_1391_ce : STD_LOGIC;
    signal grp_fu_1397_ce : STD_LOGIC;
    signal grp_fu_1403_ce : STD_LOGIC;
    signal grp_fu_1409_ce : STD_LOGIC;
    signal grp_fu_1415_ce : STD_LOGIC;
    signal grp_fu_1421_ce : STD_LOGIC;
    signal grp_fu_1427_ce : STD_LOGIC;
    signal grp_fu_1433_ce : STD_LOGIC;
    signal grp_fu_1439_ce : STD_LOGIC;
    signal grp_fu_1445_ce : STD_LOGIC;
    signal grp_fu_1451_ce : STD_LOGIC;
    signal grp_fu_1457_ce : STD_LOGIC;
    signal grp_fu_1464_ce : STD_LOGIC;
    signal grp_fu_1471_ce : STD_LOGIC;
    signal grp_fu_1478_ce : STD_LOGIC;
    signal grp_fu_1485_ce : STD_LOGIC;
    signal grp_fu_1491_ce : STD_LOGIC;
    signal grp_fu_1497_ce : STD_LOGIC;
    signal grp_fu_1503_ce : STD_LOGIC;
    signal grp_fu_1510_ce : STD_LOGIC;
    signal grp_fu_1517_ce : STD_LOGIC;
    signal grp_fu_1524_ce : STD_LOGIC;
    signal grp_fu_1531_ce : STD_LOGIC;
    signal grp_fu_1538_ce : STD_LOGIC;
    signal grp_fu_1545_ce : STD_LOGIC;
    signal grp_fu_1552_ce : STD_LOGIC;
    signal grp_fu_1559_ce : STD_LOGIC;
    signal grp_fu_1565_ce : STD_LOGIC;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component top_mul_mul_16s_16s_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component top_mac_muladd_16s_16s_16ns_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component top_mac_muladd_16s_16s_16s_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component top_PE_wrapper_0_0_x0_local_C IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    local_C_U : component top_PE_wrapper_0_0_x0_local_C
    generic map (
        DataWidth => 16,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => local_C_address0,
        ce0 => local_C_ce0,
        q0 => local_C_q0,
        address1 => local_C_addr_reg_1987_pp0_iter3_reg,
        ce1 => local_C_ce1,
        we1 => local_C_we1,
        d1 => add_ln4935_31_reg_2118);

    mul_mul_16s_16s_16_4_1_U677 : component top_mul_mul_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1367_p0,
        din1 => grp_fu_1367_p1,
        ce => grp_fu_1367_ce,
        dout => grp_fu_1367_p2);

    mul_mul_16s_16s_16_4_1_U678 : component top_mul_mul_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1373_p0,
        din1 => grp_fu_1373_p1,
        ce => grp_fu_1373_ce,
        dout => grp_fu_1373_p2);

    mul_mul_16s_16s_16_4_1_U679 : component top_mul_mul_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1379_p0,
        din1 => grp_fu_1379_p1,
        ce => grp_fu_1379_ce,
        dout => grp_fu_1379_p2);

    mul_mul_16s_16s_16_4_1_U680 : component top_mul_mul_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1385_p0,
        din1 => grp_fu_1385_p1,
        ce => grp_fu_1385_ce,
        dout => grp_fu_1385_p2);

    mul_mul_16s_16s_16_4_1_U681 : component top_mul_mul_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1391_p0,
        din1 => grp_fu_1391_p1,
        ce => grp_fu_1391_ce,
        dout => grp_fu_1391_p2);

    mul_mul_16s_16s_16_4_1_U682 : component top_mul_mul_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1397_p0,
        din1 => grp_fu_1397_p1,
        ce => grp_fu_1397_ce,
        dout => grp_fu_1397_p2);

    mul_mul_16s_16s_16_4_1_U683 : component top_mul_mul_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1403_p0,
        din1 => grp_fu_1403_p1,
        ce => grp_fu_1403_ce,
        dout => grp_fu_1403_p2);

    mul_mul_16s_16s_16_4_1_U684 : component top_mul_mul_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1409_p0,
        din1 => grp_fu_1409_p1,
        ce => grp_fu_1409_ce,
        dout => grp_fu_1409_p2);

    mul_mul_16s_16s_16_4_1_U685 : component top_mul_mul_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1415_p0,
        din1 => grp_fu_1415_p1,
        ce => grp_fu_1415_ce,
        dout => grp_fu_1415_p2);

    mul_mul_16s_16s_16_4_1_U686 : component top_mul_mul_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1421_p0,
        din1 => grp_fu_1421_p1,
        ce => grp_fu_1421_ce,
        dout => grp_fu_1421_p2);

    mul_mul_16s_16s_16_4_1_U687 : component top_mul_mul_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1427_p0,
        din1 => grp_fu_1427_p1,
        ce => grp_fu_1427_ce,
        dout => grp_fu_1427_p2);

    mul_mul_16s_16s_16_4_1_U688 : component top_mul_mul_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1433_p0,
        din1 => grp_fu_1433_p1,
        ce => grp_fu_1433_ce,
        dout => grp_fu_1433_p2);

    mul_mul_16s_16s_16_4_1_U689 : component top_mul_mul_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1439_p0,
        din1 => grp_fu_1439_p1,
        ce => grp_fu_1439_ce,
        dout => grp_fu_1439_p2);

    mul_mul_16s_16s_16_4_1_U690 : component top_mul_mul_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1445_p0,
        din1 => grp_fu_1445_p1,
        ce => grp_fu_1445_ce,
        dout => grp_fu_1445_p2);

    mul_mul_16s_16s_16_4_1_U691 : component top_mul_mul_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1451_p0,
        din1 => grp_fu_1451_p1,
        ce => grp_fu_1451_ce,
        dout => grp_fu_1451_p2);

    mac_muladd_16s_16s_16ns_16_4_1_U692 : component top_mac_muladd_16s_16s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v2_V_reg_1757,
        din1 => v2_V_11828_reg_1597,
        din2 => grp_fu_1457_p2,
        ce => grp_fu_1457_ce,
        dout => grp_fu_1457_p3);

    mac_muladd_16s_16s_16s_16_4_1_U693 : component top_mac_muladd_16s_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v2_V_11798_reg_1762,
        din1 => v2_V_11829_reg_1602,
        din2 => grp_fu_1367_p2,
        ce => grp_fu_1464_ce,
        dout => grp_fu_1464_p3);

    mac_muladd_16s_16s_16s_16_4_1_U694 : component top_mac_muladd_16s_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v2_V_11800_reg_1772,
        din1 => v2_V_11831_reg_1612,
        din2 => grp_fu_1373_p2,
        ce => grp_fu_1471_ce,
        dout => grp_fu_1471_p3);

    mac_muladd_16s_16s_16s_16_4_1_U695 : component top_mac_muladd_16s_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v2_V_11802_reg_1782,
        din1 => v2_V_11833_reg_1622,
        din2 => grp_fu_1379_p2,
        ce => grp_fu_1478_ce,
        dout => grp_fu_1478_p3);

    mac_muladd_16s_16s_16s_16_4_1_U696 : component top_mac_muladd_16s_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v2_V_11804_reg_1792,
        din1 => v2_V_11835_reg_1632,
        din2 => grp_fu_1385_p2,
        ce => grp_fu_1485_ce,
        dout => grp_fu_1485_p3);

    mac_muladd_16s_16s_16s_16_4_1_U697 : component top_mac_muladd_16s_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v2_V_11806_reg_1802,
        din1 => v2_V_11837_reg_1642,
        din2 => grp_fu_1391_p2,
        ce => grp_fu_1491_ce,
        dout => grp_fu_1491_p3);

    mac_muladd_16s_16s_16s_16_4_1_U698 : component top_mac_muladd_16s_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v2_V_11808_reg_1812,
        din1 => v2_V_11839_reg_1652,
        din2 => grp_fu_1397_p2,
        ce => grp_fu_1497_ce,
        dout => grp_fu_1497_p3);

    mac_muladd_16s_16s_16s_16_4_1_U699 : component top_mac_muladd_16s_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v2_V_11812_reg_1832,
        din1 => v2_V_11843_reg_1672,
        din2 => grp_fu_1409_p2,
        ce => grp_fu_1503_ce,
        dout => grp_fu_1503_p3);

    mac_muladd_16s_16s_16s_16_4_1_U700 : component top_mac_muladd_16s_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v2_V_11814_reg_1842,
        din1 => v2_V_11845_reg_1682,
        din2 => grp_fu_1415_p2,
        ce => grp_fu_1510_ce,
        dout => grp_fu_1510_p3);

    mac_muladd_16s_16s_16s_16_4_1_U701 : component top_mac_muladd_16s_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v2_V_11816_reg_1852,
        din1 => v2_V_11847_reg_1692,
        din2 => grp_fu_1421_p2,
        ce => grp_fu_1517_ce,
        dout => grp_fu_1517_p3);

    mac_muladd_16s_16s_16s_16_4_1_U702 : component top_mac_muladd_16s_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v2_V_11818_reg_1862,
        din1 => v2_V_11849_reg_1702,
        din2 => grp_fu_1427_p2,
        ce => grp_fu_1524_ce,
        dout => grp_fu_1524_p3);

    mac_muladd_16s_16s_16s_16_4_1_U703 : component top_mac_muladd_16s_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v2_V_11820_reg_1872,
        din1 => v2_V_11851_reg_1712,
        din2 => grp_fu_1433_p2,
        ce => grp_fu_1531_ce,
        dout => grp_fu_1531_p3);

    mac_muladd_16s_16s_16s_16_4_1_U704 : component top_mac_muladd_16s_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v2_V_11822_reg_1882,
        din1 => v2_V_11853_reg_1722,
        din2 => grp_fu_1439_p2,
        ce => grp_fu_1538_ce,
        dout => grp_fu_1538_p3);

    mac_muladd_16s_16s_16s_16_4_1_U705 : component top_mac_muladd_16s_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v2_V_11824_reg_1892,
        din1 => v2_V_11855_reg_1732,
        din2 => grp_fu_1445_p2,
        ce => grp_fu_1545_ce,
        dout => grp_fu_1545_p3);

    mac_muladd_16s_16s_16s_16_4_1_U706 : component top_mac_muladd_16s_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v2_V_11827_reg_1907,
        din1 => v2_V_11858_reg_1747,
        din2 => grp_fu_1451_p2,
        ce => grp_fu_1552_ce,
        dout => grp_fu_1552_p3);

    mac_muladd_16s_16s_16s_16_4_1_U707 : component top_mac_muladd_16s_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v1_V_reg_1912,
        din1 => v1_V_98_reg_1752,
        din2 => grp_fu_1403_p2,
        ce => grp_fu_1559_ce,
        dout => grp_fu_1559_p3);

    mac_muladd_16s_16s_16s_16_4_1_U708 : component top_mac_muladd_16s_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v2_V_11811_reg_1827,
        din1 => v2_V_11842_reg_1667,
        din2 => grp_fu_1559_p3,
        ce => grp_fu_1565_ce,
        dout => grp_fu_1565_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp0_flush_enable)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter1_state4)) then 
                        ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c2_V_reg_317_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln890_reg_1572_pp0_iter1_reg = ap_const_lv1_0))) then 
                c2_V_reg_317 <= select_ln890_reg_1951;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c2_V_reg_317 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    c6_V_reg_339_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln890_reg_1572_pp0_iter1_reg = ap_const_lv1_0))) then 
                c6_V_reg_339 <= select_ln890_487_reg_1956;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c6_V_reg_339 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    c7_V_reg_350_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln890_reg_1572_pp0_iter1_reg = ap_const_lv1_0))) then 
                c7_V_reg_350 <= add_ln691_343_reg_1967;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c7_V_reg_350 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    indvar_flatten13_reg_306_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln890_reg_1572_pp0_iter1_reg = ap_const_lv1_0))) then 
                indvar_flatten13_reg_306 <= select_ln890_489_reg_1977;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten13_reg_306 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    indvar_flatten39_reg_295_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln890_reg_1572_pp0_iter1_reg = ap_const_lv1_0))) then 
                indvar_flatten39_reg_295 <= select_ln890_490_reg_1982;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten39_reg_295 <= ap_const_lv17_0;
            end if; 
        end if;
    end process;

    indvar_flatten73_reg_283_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln890_reg_1572 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten73_reg_283 <= add_ln890_294_reg_1576;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten73_reg_283 <= ap_const_lv20_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_328_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln890_reg_1572_pp0_iter1_reg = ap_const_lv1_0))) then 
                indvar_flatten_reg_328 <= select_ln890_488_reg_1972;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_328 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln890_reg_1572_pp0_iter2_reg = ap_const_lv1_0))) then
                add_ln4935_13_reg_2078 <= add_ln4935_13_fu_1320_p2;
                add_ln4935_17_reg_2083 <= add_ln4935_17_fu_1326_p2;
                add_ln4935_20_reg_2088 <= add_ln4935_20_fu_1330_p2;
                add_ln4935_6_reg_2073 <= add_ln4935_6_fu_1306_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln890_reg_1572_pp0_iter2_reg = ap_const_lv1_0))) then
                add_ln4935_22_reg_2093 <= grp_fu_1485_p3;
                add_ln4935_23_reg_2098 <= grp_fu_1491_p3;
                add_ln4935_25_reg_2103 <= grp_fu_1497_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln890_reg_1572_pp0_iter2_reg = ap_const_lv1_0))) then
                add_ln4935_29_reg_2113 <= add_ln4935_29_fu_1342_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln890_reg_1572_pp0_iter3_reg = ap_const_lv1_0))) then
                add_ln4935_31_reg_2118 <= add_ln4935_31_fu_1361_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln890_reg_1572 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln691_343_reg_1967 <= add_ln691_343_fu_1221_p2;
                select_ln890_487_reg_1956 <= select_ln890_487_fu_1209_p3;
                select_ln890_488_reg_1972 <= select_ln890_488_fu_1233_p3;
                select_ln890_489_reg_1977 <= select_ln890_489_fu_1241_p3;
                select_ln890_490_reg_1982 <= select_ln890_490_fu_1248_p3;
                select_ln890_reg_1951 <= select_ln890_fu_1175_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln890_reg_1572 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln890_292_reg_1917 <= add_ln890_292_fu_1013_p2;
                add_ln890_293_reg_1922 <= add_ln890_293_fu_1019_p2;
                icmp_ln890_342_reg_1581 <= icmp_ln890_342_fu_373_p2;
                icmp_ln890_344_reg_1591 <= icmp_ln890_344_fu_379_p2;
                v1_V_98_reg_1752 <= fifo_A_PE_1_7_x036_dout(511 downto 496);
                v1_V_reg_1912 <= fifo_B_PE_1_7_x0156_dout(511 downto 496);
                v2_V_11798_reg_1762 <= fifo_B_PE_1_7_x0156_dout(31 downto 16);
                v2_V_11800_reg_1772 <= fifo_B_PE_1_7_x0156_dout(63 downto 48);
                v2_V_11802_reg_1782 <= fifo_B_PE_1_7_x0156_dout(95 downto 80);
                v2_V_11804_reg_1792 <= fifo_B_PE_1_7_x0156_dout(127 downto 112);
                v2_V_11806_reg_1802 <= fifo_B_PE_1_7_x0156_dout(159 downto 144);
                v2_V_11808_reg_1812 <= fifo_B_PE_1_7_x0156_dout(191 downto 176);
                v2_V_11811_reg_1827 <= fifo_B_PE_1_7_x0156_dout(239 downto 224);
                v2_V_11812_reg_1832 <= fifo_B_PE_1_7_x0156_dout(255 downto 240);
                v2_V_11814_reg_1842 <= fifo_B_PE_1_7_x0156_dout(287 downto 272);
                v2_V_11816_reg_1852 <= fifo_B_PE_1_7_x0156_dout(319 downto 304);
                v2_V_11818_reg_1862 <= fifo_B_PE_1_7_x0156_dout(351 downto 336);
                v2_V_11820_reg_1872 <= fifo_B_PE_1_7_x0156_dout(383 downto 368);
                v2_V_11822_reg_1882 <= fifo_B_PE_1_7_x0156_dout(415 downto 400);
                v2_V_11824_reg_1892 <= fifo_B_PE_1_7_x0156_dout(447 downto 432);
                v2_V_11827_reg_1907 <= fifo_B_PE_1_7_x0156_dout(495 downto 480);
                v2_V_11828_reg_1597 <= v2_V_11828_fu_385_p1;
                v2_V_11829_reg_1602 <= fifo_A_PE_1_7_x036_dout(31 downto 16);
                v2_V_11831_reg_1612 <= fifo_A_PE_1_7_x036_dout(63 downto 48);
                v2_V_11833_reg_1622 <= fifo_A_PE_1_7_x036_dout(95 downto 80);
                v2_V_11835_reg_1632 <= fifo_A_PE_1_7_x036_dout(127 downto 112);
                v2_V_11837_reg_1642 <= fifo_A_PE_1_7_x036_dout(159 downto 144);
                v2_V_11839_reg_1652 <= fifo_A_PE_1_7_x036_dout(191 downto 176);
                v2_V_11842_reg_1667 <= fifo_A_PE_1_7_x036_dout(239 downto 224);
                v2_V_11843_reg_1672 <= fifo_A_PE_1_7_x036_dout(255 downto 240);
                v2_V_11845_reg_1682 <= fifo_A_PE_1_7_x036_dout(287 downto 272);
                v2_V_11847_reg_1692 <= fifo_A_PE_1_7_x036_dout(319 downto 304);
                v2_V_11849_reg_1702 <= fifo_A_PE_1_7_x036_dout(351 downto 336);
                v2_V_11851_reg_1712 <= fifo_A_PE_1_7_x036_dout(383 downto 368);
                v2_V_11853_reg_1722 <= fifo_A_PE_1_7_x036_dout(415 downto 400);
                v2_V_11855_reg_1732 <= fifo_A_PE_1_7_x036_dout(447 downto 432);
                v2_V_11858_reg_1747 <= fifo_A_PE_1_7_x036_dout(495 downto 480);
                v2_V_reg_1757 <= v2_V_fu_699_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln890_294_reg_1576 <= add_ln890_294_fu_367_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln890_reg_1572 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln4892_3_reg_1932 <= and_ln4892_3_fu_1072_p2;
                and_ln4893_2_reg_1937 <= and_ln4893_2_fu_1112_p2;
                cmp_i_i135998_reg_1927 <= cmp_i_i135998_fu_1025_p2;
                cmp_i_i1359_mid1_reg_1942 <= cmp_i_i1359_mid1_fu_1143_p2;
                empty_reg_1962 <= empty_fu_1217_p1;
                select_ln4894_2_reg_1947 <= select_ln4894_2_fu_1155_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                icmp_ln890_342_reg_1581_pp0_iter1_reg <= icmp_ln890_342_reg_1581;
                local_C_addr_reg_1987_pp0_iter2_reg <= local_C_addr_reg_1987;
                local_C_addr_reg_1987_pp0_iter3_reg <= local_C_addr_reg_1987_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln890_reg_1572 <= icmp_ln890_fu_361_p2;
                icmp_ln890_reg_1572_pp0_iter1_reg <= icmp_ln890_reg_1572;
                icmp_ln890_reg_1572_pp0_iter2_reg <= icmp_ln890_reg_1572_pp0_iter1_reg;
                icmp_ln890_reg_1572_pp0_iter3_reg <= icmp_ln890_reg_1572_pp0_iter2_reg;
                select_ln4894_2_reg_1947_pp0_iter2_reg <= select_ln4894_2_reg_1947;
                select_ln4894_2_reg_1947_pp0_iter3_reg <= select_ln4894_2_reg_1947_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln890_reg_1572_pp0_iter1_reg = ap_const_lv1_0))) then
                local_C_addr_reg_1987 <= p_cast_fu_1270_p1(6 - 1 downto 0);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and not(((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif ((((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln4935_12_fu_1316_p2 <= std_logic_vector(signed(grp_fu_1524_p3) + signed(grp_fu_1517_p3));
    add_ln4935_13_fu_1320_p2 <= std_logic_vector(unsigned(add_ln4935_12_fu_1316_p2) + unsigned(add_ln4935_9_fu_1312_p2));
    add_ln4935_14_fu_1348_p2 <= std_logic_vector(unsigned(add_ln4935_13_reg_2078) + unsigned(add_ln4935_6_reg_2073));
    add_ln4935_17_fu_1326_p2 <= std_logic_vector(signed(grp_fu_1464_p3) + signed(grp_fu_1457_p3));
    add_ln4935_20_fu_1330_p2 <= std_logic_vector(signed(grp_fu_1478_p3) + signed(grp_fu_1471_p3));
    add_ln4935_21_fu_1352_p2 <= std_logic_vector(unsigned(add_ln4935_20_reg_2088) + unsigned(add_ln4935_17_reg_2083));
    add_ln4935_24_fu_1334_p2 <= std_logic_vector(signed(add_ln4935_23_reg_2098) + signed(add_ln4935_22_reg_2093));
    add_ln4935_28_fu_1338_p2 <= std_logic_vector(signed(grp_fu_1565_p3) + signed(add_ln4935_25_reg_2103));
    add_ln4935_29_fu_1342_p2 <= std_logic_vector(unsigned(add_ln4935_28_fu_1338_p2) + unsigned(add_ln4935_24_fu_1334_p2));
    add_ln4935_2_fu_1298_p2 <= std_logic_vector(signed(grp_fu_1545_p3) + signed(grp_fu_1552_p3));
    add_ln4935_30_fu_1356_p2 <= std_logic_vector(unsigned(add_ln4935_29_reg_2113) + unsigned(add_ln4935_21_fu_1352_p2));
    add_ln4935_31_fu_1361_p2 <= std_logic_vector(unsigned(add_ln4935_30_fu_1356_p2) + unsigned(add_ln4935_14_fu_1348_p2));
    add_ln4935_5_fu_1302_p2 <= std_logic_vector(signed(grp_fu_1538_p3) + signed(grp_fu_1531_p3));
    add_ln4935_6_fu_1306_p2 <= std_logic_vector(unsigned(add_ln4935_5_fu_1302_p2) + unsigned(add_ln4935_2_fu_1298_p2));
    add_ln4935_9_fu_1312_p2 <= std_logic_vector(signed(grp_fu_1510_p3) + signed(grp_fu_1503_p3));
    add_ln691_342_fu_1183_p2 <= std_logic_vector(unsigned(select_ln4894_fu_1135_p3) + unsigned(ap_const_lv4_1));
    add_ln691_343_fu_1221_p2 <= std_logic_vector(unsigned(select_ln890_486_fu_1201_p3) + unsigned(ap_const_lv4_1));
    add_ln691_fu_1118_p2 <= std_logic_vector(unsigned(select_ln4893_fu_1082_p3) + unsigned(ap_const_lv6_1));
    add_ln890_292_fu_1013_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten13_phi_fu_310_p4) + unsigned(ap_const_lv13_1));
    add_ln890_293_fu_1019_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten39_phi_fu_299_p4) + unsigned(ap_const_lv17_1));
    add_ln890_294_fu_367_p2 <= std_logic_vector(unsigned(indvar_flatten73_reg_283) + unsigned(ap_const_lv20_1));
    add_ln890_fu_1227_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_332_p4) + unsigned(ap_const_lv8_1));
    and_ln4892_1_fu_1054_p2 <= (xor_ln4892_fu_1031_p2 and icmp_ln890101_fu_1048_p2);
    and_ln4892_2_fu_1066_p2 <= (xor_ln4892_fu_1031_p2 and icmp_ln890_343_fu_1060_p2);
    and_ln4892_3_fu_1072_p2 <= (xor_ln4892_fu_1031_p2 and icmp_ln890_344_reg_1591);
    and_ln4892_fu_1042_p2 <= (xor_ln4892_fu_1031_p2 and cmp_i_i97_fu_1036_p2);
    and_ln4893_1_fu_1106_p2 <= (or_ln4893_2_fu_1095_p2 and and_ln4892_1_fu_1054_p2);
    and_ln4893_2_fu_1112_p2 <= (or_ln4893_2_fu_1095_p2 and and_ln4892_2_fu_1066_p2);
    and_ln4893_fu_1100_p2 <= (or_ln4893_2_fu_1095_p2 and and_ln4892_fu_1042_p2);
    and_ln4894_fu_1169_p2 <= (xor_ln4894_fu_1163_p2 and and_ln4893_1_fu_1106_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(fifo_C_drain_PE_1_7_x0221_full_n, ap_enable_reg_pp0_iter4, select_ln4894_2_reg_1947_pp0_iter3_reg)
    begin
                ap_block_pp0_stage0_01001 <= ((select_ln4894_2_reg_1947_pp0_iter3_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (fifo_C_drain_PE_1_7_x0221_full_n = ap_const_logic_0));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(fifo_C_drain_PE_1_7_x0221_full_n, ap_enable_reg_pp0_iter4, select_ln4894_2_reg_1947_pp0_iter3_reg)
    begin
                ap_block_pp0_stage0_11001 <= ((select_ln4894_2_reg_1947_pp0_iter3_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (fifo_C_drain_PE_1_7_x0221_full_n = ap_const_logic_0));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(fifo_C_drain_PE_1_7_x0221_full_n, ap_enable_reg_pp0_iter4, select_ln4894_2_reg_1947_pp0_iter3_reg)
    begin
                ap_block_pp0_stage0_subdone <= ((select_ln4894_2_reg_1947_pp0_iter3_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (fifo_C_drain_PE_1_7_x0221_full_n = ap_const_logic_0));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_01001_assign_proc : process(fifo_A_PE_1_7_x036_empty_n, fifo_A_PE_1_8_x037_full_n, fifo_B_PE_1_7_x0156_empty_n, fifo_B_PE_2_7_x0157_full_n, ap_enable_reg_pp0_iter0, icmp_ln890_reg_1572)
    begin
                ap_block_pp0_stage1_01001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (((icmp_ln890_reg_1572 = ap_const_lv1_0) and (fifo_A_PE_1_8_x037_full_n = ap_const_logic_0)) or ((icmp_ln890_reg_1572 = ap_const_lv1_0) and (fifo_B_PE_2_7_x0157_full_n = ap_const_logic_0)) or ((icmp_ln890_reg_1572 = ap_const_lv1_0) and (fifo_B_PE_1_7_x0156_empty_n = ap_const_logic_0)) or ((icmp_ln890_reg_1572 = ap_const_lv1_0) and (fifo_A_PE_1_7_x036_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage1_11001_assign_proc : process(fifo_A_PE_1_7_x036_empty_n, fifo_A_PE_1_8_x037_full_n, fifo_B_PE_1_7_x0156_empty_n, fifo_B_PE_2_7_x0157_full_n, ap_enable_reg_pp0_iter0, icmp_ln890_reg_1572)
    begin
                ap_block_pp0_stage1_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (((icmp_ln890_reg_1572 = ap_const_lv1_0) and (fifo_A_PE_1_8_x037_full_n = ap_const_logic_0)) or ((icmp_ln890_reg_1572 = ap_const_lv1_0) and (fifo_B_PE_2_7_x0157_full_n = ap_const_logic_0)) or ((icmp_ln890_reg_1572 = ap_const_lv1_0) and (fifo_B_PE_1_7_x0156_empty_n = ap_const_logic_0)) or ((icmp_ln890_reg_1572 = ap_const_lv1_0) and (fifo_A_PE_1_7_x036_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(fifo_A_PE_1_7_x036_empty_n, fifo_A_PE_1_8_x037_full_n, fifo_B_PE_1_7_x0156_empty_n, fifo_B_PE_2_7_x0157_full_n, ap_enable_reg_pp0_iter0, icmp_ln890_reg_1572)
    begin
                ap_block_pp0_stage1_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (((icmp_ln890_reg_1572 = ap_const_lv1_0) and (fifo_A_PE_1_8_x037_full_n = ap_const_logic_0)) or ((icmp_ln890_reg_1572 = ap_const_lv1_0) and (fifo_B_PE_2_7_x0157_full_n = ap_const_logic_0)) or ((icmp_ln890_reg_1572 = ap_const_lv1_0) and (fifo_B_PE_1_7_x0156_empty_n = ap_const_logic_0)) or ((icmp_ln890_reg_1572 = ap_const_lv1_0) and (fifo_A_PE_1_7_x036_empty_n = ap_const_logic_0))));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state10_pp0_stage0_iter4_assign_proc : process(fifo_C_drain_PE_1_7_x0221_full_n, select_ln4894_2_reg_1947_pp0_iter3_reg)
    begin
                ap_block_state10_pp0_stage0_iter4 <= ((select_ln4894_2_reg_1947_pp0_iter3_reg = ap_const_lv1_1) and (fifo_C_drain_PE_1_7_x0221_full_n = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage1_iter0_assign_proc : process(fifo_A_PE_1_7_x036_empty_n, fifo_A_PE_1_8_x037_full_n, fifo_B_PE_1_7_x0156_empty_n, fifo_B_PE_2_7_x0157_full_n, icmp_ln890_reg_1572)
    begin
                ap_block_state3_pp0_stage1_iter0 <= (((icmp_ln890_reg_1572 = ap_const_lv1_0) and (fifo_A_PE_1_8_x037_full_n = ap_const_logic_0)) or ((icmp_ln890_reg_1572 = ap_const_lv1_0) and (fifo_B_PE_2_7_x0157_full_n = ap_const_logic_0)) or ((icmp_ln890_reg_1572 = ap_const_lv1_0) and (fifo_B_PE_1_7_x0156_empty_n = ap_const_logic_0)) or ((icmp_ln890_reg_1572 = ap_const_lv1_0) and (fifo_A_PE_1_7_x036_empty_n = ap_const_logic_0)));
    end process;

        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter1_state4_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_condition_pp0_exit_iter1_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter1_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp0_flush_enable_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln890_reg_1572, ap_block_pp0_stage1_subdone)
    begin
        if (((icmp_ln890_reg_1572 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_pp0_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp0_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_c2_V_phi_fu_321_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, c2_V_reg_317, icmp_ln890_reg_1572_pp0_iter1_reg, select_ln890_reg_1951, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln890_reg_1572_pp0_iter1_reg = ap_const_lv1_0))) then 
            ap_phi_mux_c2_V_phi_fu_321_p4 <= select_ln890_reg_1951;
        else 
            ap_phi_mux_c2_V_phi_fu_321_p4 <= c2_V_reg_317;
        end if; 
    end process;


    ap_phi_mux_c6_V_phi_fu_343_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, c6_V_reg_339, icmp_ln890_reg_1572_pp0_iter1_reg, select_ln890_487_reg_1956, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln890_reg_1572_pp0_iter1_reg = ap_const_lv1_0))) then 
            ap_phi_mux_c6_V_phi_fu_343_p4 <= select_ln890_487_reg_1956;
        else 
            ap_phi_mux_c6_V_phi_fu_343_p4 <= c6_V_reg_339;
        end if; 
    end process;


    ap_phi_mux_c7_V_phi_fu_354_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, c7_V_reg_350, icmp_ln890_reg_1572_pp0_iter1_reg, add_ln691_343_reg_1967, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln890_reg_1572_pp0_iter1_reg = ap_const_lv1_0))) then 
            ap_phi_mux_c7_V_phi_fu_354_p4 <= add_ln691_343_reg_1967;
        else 
            ap_phi_mux_c7_V_phi_fu_354_p4 <= c7_V_reg_350;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten13_phi_fu_310_p4_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, indvar_flatten13_reg_306, icmp_ln890_reg_1572_pp0_iter1_reg, ap_enable_reg_pp0_iter1, select_ln890_489_reg_1977)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln890_reg_1572_pp0_iter1_reg = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten13_phi_fu_310_p4 <= select_ln890_489_reg_1977;
        else 
            ap_phi_mux_indvar_flatten13_phi_fu_310_p4 <= indvar_flatten13_reg_306;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten39_phi_fu_299_p4_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, indvar_flatten39_reg_295, icmp_ln890_reg_1572_pp0_iter1_reg, ap_enable_reg_pp0_iter1, select_ln890_490_reg_1982)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln890_reg_1572_pp0_iter1_reg = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten39_phi_fu_299_p4 <= select_ln890_490_reg_1982;
        else 
            ap_phi_mux_indvar_flatten39_phi_fu_299_p4 <= indvar_flatten39_reg_295;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten73_phi_fu_287_p4_assign_proc : process(icmp_ln890_reg_1572, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, indvar_flatten73_reg_283, add_ln890_294_reg_1576, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln890_reg_1572 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten73_phi_fu_287_p4 <= add_ln890_294_reg_1576;
        else 
            ap_phi_mux_indvar_flatten73_phi_fu_287_p4 <= indvar_flatten73_reg_283;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_332_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, indvar_flatten_reg_328, icmp_ln890_reg_1572_pp0_iter1_reg, select_ln890_488_reg_1972, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln890_reg_1572_pp0_iter1_reg = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_332_p4 <= select_ln890_488_reg_1972;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_332_p4 <= indvar_flatten_reg_328;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    cmp_i_i135998_fu_1025_p2 <= "1" when (ap_phi_mux_c2_V_phi_fu_321_p4 = ap_const_lv6_0) else "0";
    cmp_i_i1359_mid1_fu_1143_p2 <= "1" when (add_ln691_fu_1118_p2 = ap_const_lv6_0) else "0";
    cmp_i_i97_fu_1036_p2 <= "1" when (ap_phi_mux_c2_V_phi_fu_321_p4 = ap_const_lv6_1F) else "0";
    cmp_i_i_mid1_fu_1149_p2 <= "1" when (add_ln691_fu_1118_p2 = ap_const_lv6_1F) else "0";
    empty_2892_fu_1264_p2 <= std_logic_vector(unsigned(tmp_169_cast_fu_1257_p3) + unsigned(zext_ln890_fu_1254_p1));
    empty_fu_1217_p1 <= select_ln890_486_fu_1201_p3(3 - 1 downto 0);

    fifo_A_PE_1_7_x036_blk_n_assign_proc : process(fifo_A_PE_1_7_x036_empty_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln890_reg_1572)
    begin
        if (((icmp_ln890_reg_1572 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            fifo_A_PE_1_7_x036_blk_n <= fifo_A_PE_1_7_x036_empty_n;
        else 
            fifo_A_PE_1_7_x036_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    fifo_A_PE_1_7_x036_read_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln890_reg_1572, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln890_reg_1572 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            fifo_A_PE_1_7_x036_read <= ap_const_logic_1;
        else 
            fifo_A_PE_1_7_x036_read <= ap_const_logic_0;
        end if; 
    end process;


    fifo_A_PE_1_8_x037_blk_n_assign_proc : process(fifo_A_PE_1_8_x037_full_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln890_reg_1572)
    begin
        if (((icmp_ln890_reg_1572 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            fifo_A_PE_1_8_x037_blk_n <= fifo_A_PE_1_8_x037_full_n;
        else 
            fifo_A_PE_1_8_x037_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    fifo_A_PE_1_8_x037_din <= fifo_A_PE_1_7_x036_dout;

    fifo_A_PE_1_8_x037_write_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln890_reg_1572, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln890_reg_1572 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            fifo_A_PE_1_8_x037_write <= ap_const_logic_1;
        else 
            fifo_A_PE_1_8_x037_write <= ap_const_logic_0;
        end if; 
    end process;


    fifo_B_PE_1_7_x0156_blk_n_assign_proc : process(fifo_B_PE_1_7_x0156_empty_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln890_reg_1572)
    begin
        if (((icmp_ln890_reg_1572 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            fifo_B_PE_1_7_x0156_blk_n <= fifo_B_PE_1_7_x0156_empty_n;
        else 
            fifo_B_PE_1_7_x0156_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    fifo_B_PE_1_7_x0156_read_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln890_reg_1572, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln890_reg_1572 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            fifo_B_PE_1_7_x0156_read <= ap_const_logic_1;
        else 
            fifo_B_PE_1_7_x0156_read <= ap_const_logic_0;
        end if; 
    end process;


    fifo_B_PE_2_7_x0157_blk_n_assign_proc : process(fifo_B_PE_2_7_x0157_full_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln890_reg_1572)
    begin
        if (((icmp_ln890_reg_1572 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            fifo_B_PE_2_7_x0157_blk_n <= fifo_B_PE_2_7_x0157_full_n;
        else 
            fifo_B_PE_2_7_x0157_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    fifo_B_PE_2_7_x0157_din <= fifo_B_PE_1_7_x0156_dout;

    fifo_B_PE_2_7_x0157_write_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln890_reg_1572, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln890_reg_1572 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            fifo_B_PE_2_7_x0157_write <= ap_const_logic_1;
        else 
            fifo_B_PE_2_7_x0157_write <= ap_const_logic_0;
        end if; 
    end process;


    fifo_C_drain_PE_1_7_x0221_blk_n_assign_proc : process(fifo_C_drain_PE_1_7_x0221_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0, select_ln4894_2_reg_1947_pp0_iter3_reg)
    begin
        if (((select_ln4894_2_reg_1947_pp0_iter3_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fifo_C_drain_PE_1_7_x0221_blk_n <= fifo_C_drain_PE_1_7_x0221_full_n;
        else 
            fifo_C_drain_PE_1_7_x0221_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    fifo_C_drain_PE_1_7_x0221_din <= add_ln4935_31_reg_2118;

    fifo_C_drain_PE_1_7_x0221_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, select_ln4894_2_reg_1947_pp0_iter3_reg, ap_block_pp0_stage0_11001)
    begin
        if (((select_ln4894_2_reg_1947_pp0_iter3_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fifo_C_drain_PE_1_7_x0221_write <= ap_const_logic_1;
        else 
            fifo_C_drain_PE_1_7_x0221_write <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1367_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_1367_ce <= ap_const_logic_1;
        else 
            grp_fu_1367_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1367_p0 <= fifo_B_PE_1_7_x0156_dout(47 downto 32);
    grp_fu_1367_p1 <= fifo_A_PE_1_7_x036_dout(47 downto 32);

    grp_fu_1373_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_1373_ce <= ap_const_logic_1;
        else 
            grp_fu_1373_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1373_p0 <= fifo_B_PE_1_7_x0156_dout(79 downto 64);
    grp_fu_1373_p1 <= fifo_A_PE_1_7_x036_dout(79 downto 64);

    grp_fu_1379_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_1379_ce <= ap_const_logic_1;
        else 
            grp_fu_1379_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1379_p0 <= fifo_B_PE_1_7_x0156_dout(111 downto 96);
    grp_fu_1379_p1 <= fifo_A_PE_1_7_x036_dout(111 downto 96);

    grp_fu_1385_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_1385_ce <= ap_const_logic_1;
        else 
            grp_fu_1385_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1385_p0 <= fifo_B_PE_1_7_x0156_dout(143 downto 128);
    grp_fu_1385_p1 <= fifo_A_PE_1_7_x036_dout(143 downto 128);

    grp_fu_1391_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_1391_ce <= ap_const_logic_1;
        else 
            grp_fu_1391_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1391_p0 <= fifo_B_PE_1_7_x0156_dout(175 downto 160);
    grp_fu_1391_p1 <= fifo_A_PE_1_7_x036_dout(175 downto 160);

    grp_fu_1397_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_1397_ce <= ap_const_logic_1;
        else 
            grp_fu_1397_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1397_p0 <= fifo_B_PE_1_7_x0156_dout(207 downto 192);
    grp_fu_1397_p1 <= fifo_A_PE_1_7_x036_dout(207 downto 192);

    grp_fu_1403_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_1403_ce <= ap_const_logic_1;
        else 
            grp_fu_1403_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1403_p0 <= fifo_B_PE_1_7_x0156_dout(223 downto 208);
    grp_fu_1403_p1 <= fifo_A_PE_1_7_x036_dout(223 downto 208);

    grp_fu_1409_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_1409_ce <= ap_const_logic_1;
        else 
            grp_fu_1409_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1409_p0 <= fifo_B_PE_1_7_x0156_dout(271 downto 256);
    grp_fu_1409_p1 <= fifo_A_PE_1_7_x036_dout(271 downto 256);

    grp_fu_1415_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_1415_ce <= ap_const_logic_1;
        else 
            grp_fu_1415_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1415_p0 <= fifo_B_PE_1_7_x0156_dout(303 downto 288);
    grp_fu_1415_p1 <= fifo_A_PE_1_7_x036_dout(303 downto 288);

    grp_fu_1421_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_1421_ce <= ap_const_logic_1;
        else 
            grp_fu_1421_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1421_p0 <= fifo_B_PE_1_7_x0156_dout(335 downto 320);
    grp_fu_1421_p1 <= fifo_A_PE_1_7_x036_dout(335 downto 320);

    grp_fu_1427_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_1427_ce <= ap_const_logic_1;
        else 
            grp_fu_1427_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1427_p0 <= fifo_B_PE_1_7_x0156_dout(367 downto 352);
    grp_fu_1427_p1 <= fifo_A_PE_1_7_x036_dout(367 downto 352);

    grp_fu_1433_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_1433_ce <= ap_const_logic_1;
        else 
            grp_fu_1433_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1433_p0 <= fifo_B_PE_1_7_x0156_dout(399 downto 384);
    grp_fu_1433_p1 <= fifo_A_PE_1_7_x036_dout(399 downto 384);

    grp_fu_1439_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_1439_ce <= ap_const_logic_1;
        else 
            grp_fu_1439_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1439_p0 <= fifo_B_PE_1_7_x0156_dout(431 downto 416);
    grp_fu_1439_p1 <= fifo_A_PE_1_7_x036_dout(431 downto 416);

    grp_fu_1445_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_1445_ce <= ap_const_logic_1;
        else 
            grp_fu_1445_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1445_p0 <= fifo_B_PE_1_7_x0156_dout(463 downto 448);
    grp_fu_1445_p1 <= fifo_A_PE_1_7_x036_dout(463 downto 448);

    grp_fu_1451_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_1451_ce <= ap_const_logic_1;
        else 
            grp_fu_1451_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1451_p0 <= fifo_B_PE_1_7_x0156_dout(479 downto 464);
    grp_fu_1451_p1 <= fifo_A_PE_1_7_x036_dout(479 downto 464);

    grp_fu_1457_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_1457_ce <= ap_const_logic_1;
        else 
            grp_fu_1457_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1457_p2 <= 
        ap_const_lv16_0 when (select_ln4894_1_fu_1284_p3(0) = '1') else 
        local_C_q0;

    grp_fu_1464_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_1464_ce <= ap_const_logic_1;
        else 
            grp_fu_1464_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1471_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_1471_ce <= ap_const_logic_1;
        else 
            grp_fu_1471_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1478_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_1478_ce <= ap_const_logic_1;
        else 
            grp_fu_1478_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1485_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_1485_ce <= ap_const_logic_1;
        else 
            grp_fu_1485_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1491_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_1491_ce <= ap_const_logic_1;
        else 
            grp_fu_1491_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1497_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_1497_ce <= ap_const_logic_1;
        else 
            grp_fu_1497_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1503_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_1503_ce <= ap_const_logic_1;
        else 
            grp_fu_1503_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1510_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_1510_ce <= ap_const_logic_1;
        else 
            grp_fu_1510_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1517_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_1517_ce <= ap_const_logic_1;
        else 
            grp_fu_1517_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1524_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_1524_ce <= ap_const_logic_1;
        else 
            grp_fu_1524_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1531_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_1531_ce <= ap_const_logic_1;
        else 
            grp_fu_1531_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1538_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_1538_ce <= ap_const_logic_1;
        else 
            grp_fu_1538_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1545_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_1545_ce <= ap_const_logic_1;
        else 
            grp_fu_1545_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1552_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_1552_ce <= ap_const_logic_1;
        else 
            grp_fu_1552_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1559_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_1559_ce <= ap_const_logic_1;
        else 
            grp_fu_1559_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1565_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_1565_ce <= ap_const_logic_1;
        else 
            grp_fu_1565_ce <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln890101_fu_1048_p2 <= "1" when (ap_phi_mux_c7_V_phi_fu_354_p4 = ap_const_lv4_8) else "0";
    icmp_ln890_342_fu_373_p2 <= "1" when (ap_phi_mux_indvar_flatten39_phi_fu_299_p4 = ap_const_lv17_8000) else "0";
    icmp_ln890_343_fu_1060_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_332_p4 = ap_const_lv8_40) else "0";
    icmp_ln890_344_fu_379_p2 <= "1" when (ap_phi_mux_indvar_flatten13_phi_fu_310_p4 = ap_const_lv13_800) else "0";
    icmp_ln890_fu_361_p2 <= "1" when (ap_phi_mux_indvar_flatten73_phi_fu_287_p4 = ap_const_lv20_80000) else "0";
    local_C_address0 <= p_cast_fu_1270_p1(6 - 1 downto 0);

    local_C_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            local_C_ce0 <= ap_const_logic_1;
        else 
            local_C_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    local_C_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            local_C_ce1 <= ap_const_logic_1;
        else 
            local_C_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    local_C_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001, icmp_ln890_reg_1572_pp0_iter3_reg)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln890_reg_1572_pp0_iter3_reg = ap_const_lv1_0))) then 
            local_C_we1 <= ap_const_logic_1;
        else 
            local_C_we1 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln4892_fu_1275_p2 <= (icmp_ln890_342_reg_1581_pp0_iter1_reg or cmp_i_i135998_reg_1927);
    or_ln4893_1_fu_1279_p2 <= (or_ln4892_fu_1275_p2 or and_ln4892_3_reg_1932);
    or_ln4893_2_fu_1095_p2 <= (xor_ln4893_fu_1090_p2 or icmp_ln890_342_reg_1581);
    or_ln4893_fu_1077_p2 <= (icmp_ln890_342_reg_1581 or and_ln4892_3_fu_1072_p2);
    or_ln4894_1_fu_1130_p2 <= (or_ln4894_fu_1124_p2 or icmp_ln890_342_reg_1581);
    or_ln4894_fu_1124_p2 <= (and_ln4893_2_fu_1112_p2 or and_ln4892_3_fu_1072_p2);
    or_ln890_98_fu_1195_p2 <= (or_ln890_fu_1189_p2 or or_ln4893_fu_1077_p2);
    or_ln890_fu_1189_p2 <= (and_ln4894_fu_1169_p2 or and_ln4893_2_fu_1112_p2);
    p_cast_fu_1270_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_2892_fu_1264_p2),64));
    select_ln4893_fu_1082_p3 <= 
        ap_const_lv6_0 when (or_ln4893_fu_1077_p2(0) = '1') else 
        ap_phi_mux_c2_V_phi_fu_321_p4;
    select_ln4894_1_fu_1284_p3 <= 
        cmp_i_i1359_mid1_reg_1942 when (and_ln4893_2_reg_1937(0) = '1') else 
        or_ln4893_1_fu_1279_p2;
    select_ln4894_2_fu_1155_p3 <= 
        cmp_i_i_mid1_fu_1149_p2 when (and_ln4893_2_fu_1112_p2(0) = '1') else 
        and_ln4893_fu_1100_p2;
    select_ln4894_fu_1135_p3 <= 
        ap_const_lv4_0 when (or_ln4894_1_fu_1130_p2(0) = '1') else 
        ap_phi_mux_c6_V_phi_fu_343_p4;
    select_ln890_486_fu_1201_p3 <= 
        ap_const_lv4_0 when (or_ln890_98_fu_1195_p2(0) = '1') else 
        ap_phi_mux_c7_V_phi_fu_354_p4;
    select_ln890_487_fu_1209_p3 <= 
        add_ln691_342_fu_1183_p2 when (and_ln4894_fu_1169_p2(0) = '1') else 
        select_ln4894_fu_1135_p3;
    select_ln890_488_fu_1233_p3 <= 
        ap_const_lv8_1 when (or_ln4894_1_fu_1130_p2(0) = '1') else 
        add_ln890_fu_1227_p2;
    select_ln890_489_fu_1241_p3 <= 
        ap_const_lv13_1 when (or_ln4893_fu_1077_p2(0) = '1') else 
        add_ln890_292_reg_1917;
    select_ln890_490_fu_1248_p3 <= 
        ap_const_lv17_1 when (icmp_ln890_342_reg_1581(0) = '1') else 
        add_ln890_293_reg_1922;
    select_ln890_fu_1175_p3 <= 
        add_ln691_fu_1118_p2 when (and_ln4893_2_fu_1112_p2(0) = '1') else 
        select_ln4893_fu_1082_p3;
    tmp_169_cast_fu_1257_p3 <= (empty_reg_1962 & ap_const_lv3_0);
    v2_V_11828_fu_385_p1 <= fifo_A_PE_1_7_x036_dout(16 - 1 downto 0);
    v2_V_fu_699_p1 <= fifo_B_PE_1_7_x0156_dout(16 - 1 downto 0);
    xor_ln4892_fu_1031_p2 <= (icmp_ln890_342_reg_1581 xor ap_const_lv1_1);
    xor_ln4893_fu_1090_p2 <= (icmp_ln890_344_reg_1591 xor ap_const_lv1_1);
    xor_ln4894_fu_1163_p2 <= (ap_const_lv1_1 xor and_ln4893_2_fu_1112_p2);
    zext_ln890_fu_1254_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln890_487_reg_1956),6));
end behav;
