-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_D_drain_IO_L1_out_wrapper_1_0_x0 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    fifo_D_drain_D_drain_IO_L1_out_1_1_x0178_dout : IN STD_LOGIC_VECTOR (127 downto 0);
    fifo_D_drain_D_drain_IO_L1_out_1_1_x0178_empty_n : IN STD_LOGIC;
    fifo_D_drain_D_drain_IO_L1_out_1_1_x0178_read : OUT STD_LOGIC;
    fifo_D_drain_D_drain_IO_L1_out_1_0_x0177_din : OUT STD_LOGIC_VECTOR (127 downto 0);
    fifo_D_drain_D_drain_IO_L1_out_1_0_x0177_full_n : IN STD_LOGIC;
    fifo_D_drain_D_drain_IO_L1_out_1_0_x0177_write : OUT STD_LOGIC;
    fifo_D_drain_PE_0_1_x0145_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    fifo_D_drain_PE_0_1_x0145_empty_n : IN STD_LOGIC;
    fifo_D_drain_PE_0_1_x0145_read : OUT STD_LOGIC );
end;


architecture behav of top_D_drain_IO_L1_out_wrapper_1_0_x0 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal fifo_D_drain_D_drain_IO_L1_out_1_1_x0178_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal fifo_D_drain_D_drain_IO_L1_out_1_0_x0177_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal fifo_D_drain_PE_0_1_x0145_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal add_ln691_fu_329_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln691_reg_559 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln691_1189_fu_341_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln691_1189_reg_567 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln691_1188_fu_353_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln691_1188_reg_575 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_reg_583 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln890_1040_fu_359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_split_V_addr_209_reg_588 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln691_1190_fu_382_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln691_1190_reg_593 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal local_D_V_addr_reg_598 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_385_reg_606 : STD_LOGIC_VECTOR (31 downto 0);
    signal local_D_V_q0 : STD_LOGIC_VECTOR (127 downto 0);
    signal add_ln691_1191_fu_406_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal zext_ln1497_fu_438_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal icmp_ln878_fu_417_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_split_V_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal v2_V_reg_629 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal data_split_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal v2_V_1775_reg_634 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln691_1192_fu_453_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln691_1192_reg_639 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal icmp_ln870_fu_465_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln870_reg_647 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln890_1041_fu_459_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln691_1195_fu_471_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln691_1195_reg_651 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal add_ln691_1193_fu_483_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln691_1193_reg_659 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln890_fu_489_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln890_reg_664 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln691_1196_fu_501_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln691_1196_reg_672 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal add_ln691_1194_fu_513_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln691_1194_reg_680 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal local_D_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal local_D_V_ce0 : STD_LOGIC;
    signal local_D_V_we0 : STD_LOGIC;
    signal local_D_V_d0 : STD_LOGIC_VECTOR (127 downto 0);
    signal data_split_V_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal data_split_V_ce0 : STD_LOGIC;
    signal data_split_V_we0 : STD_LOGIC;
    signal data_split_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_split_V_address1 : STD_LOGIC_VECTOR (1 downto 0);
    signal data_split_V_ce1 : STD_LOGIC;
    signal c0_V_reg_210 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln890_1039_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal c1_V_reg_221 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln890_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c7_V_reg_232 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln890_1042_fu_400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c8_V_reg_243 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal n_V_reg_254 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_s_reg_265 : STD_LOGIC_VECTOR (127 downto 0);
    signal c4_V_reg_274 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln890_1043_fu_495_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln890_1044_fu_477_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c5_V_56_reg_285 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln890_1046_fu_507_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c5_V_reg_296 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln890_1045_fu_533_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c6_V_120_reg_307 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_state14 : BOOLEAN;
    signal c6_V_reg_318 : STD_LOGIC_VECTOR (1 downto 0);
    signal idxprom_fu_377_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln9598_fu_395_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln878_fu_412_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln9624_1_fu_528_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln674_fu_423_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal empty_fu_365_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_s_fu_388_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_fu_428_p4 : STD_LOGIC_VECTOR (95 downto 0);
    signal zext_ln9624_fu_519_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln9624_fu_523_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component top_D_drain_IO_L1_out_boundary_wrapper_0_x0_local_D_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (127 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;


    component top_D_drain_IO_L1_out_boundary_wrapper_0_x0_data_split_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    local_D_V_U : component top_D_drain_IO_L1_out_boundary_wrapper_0_x0_local_D_V
    generic map (
        DataWidth => 128,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => local_D_V_address0,
        ce0 => local_D_V_ce0,
        we0 => local_D_V_we0,
        d0 => local_D_V_d0,
        q0 => local_D_V_q0);

    data_split_V_U : component top_D_drain_IO_L1_out_boundary_wrapper_0_x0_data_split_V
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => data_split_V_address0,
        ce0 => data_split_V_ce0,
        we0 => data_split_V_we0,
        d0 => data_split_V_d0,
        q0 => data_split_V_q0,
        address1 => data_split_V_address1,
        ce1 => data_split_V_ce1,
        q1 => data_split_V_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln890_fu_335_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    c0_V_reg_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c0_V_reg_210 <= ap_const_lv3_0;
            elsif (((icmp_ln890_1039_fu_347_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                c0_V_reg_210 <= add_ln691_reg_559;
            end if; 
        end if;
    end process;

    c1_V_reg_221_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln890_1041_fu_459_p2 = ap_const_lv1_1))) then 
                c1_V_reg_221 <= add_ln691_1189_reg_567;
            elsif (((icmp_ln890_fu_335_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                c1_V_reg_221 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    c4_V_reg_274_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln890_1040_fu_359_p2 = ap_const_lv1_1))) then 
                c4_V_reg_274 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (((icmp_ln890_1044_fu_477_p2 = ap_const_lv1_1) and (icmp_ln870_reg_647 = ap_const_lv1_0)) or ((icmp_ln890_1043_fu_495_p2 = ap_const_lv1_1) and (icmp_ln870_reg_647 = ap_const_lv1_1))))) then 
                c4_V_reg_274 <= add_ln691_1192_reg_639;
            end if; 
        end if;
    end process;

    c5_V_56_reg_285_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln890_1041_fu_459_p2 = ap_const_lv1_0) and (icmp_ln870_fu_465_p2 = ap_const_lv1_0))) then 
                c5_V_56_reg_285 <= ap_const_lv5_0;
            elsif (((icmp_ln890_1046_fu_507_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                c5_V_56_reg_285 <= add_ln691_1195_reg_651;
            end if; 
        end if;
    end process;

    c5_V_reg_296_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln890_1041_fu_459_p2 = ap_const_lv1_0) and (icmp_ln870_fu_465_p2 = ap_const_lv1_1))) then 
                c5_V_reg_296 <= ap_const_lv5_0;
            elsif (((icmp_ln890_1045_fu_533_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                c5_V_reg_296 <= add_ln691_1193_reg_659;
            end if; 
        end if;
    end process;

    c6_V_120_reg_307_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln890_1044_fu_477_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln870_reg_647 = ap_const_lv1_0))) then 
                c6_V_120_reg_307 <= ap_const_lv2_0;
            elsif ((not(((fifo_D_drain_D_drain_IO_L1_out_1_0_x0177_full_n = ap_const_logic_0) or (fifo_D_drain_D_drain_IO_L1_out_1_1_x0178_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                c6_V_120_reg_307 <= add_ln691_1196_reg_672;
            end if; 
        end if;
    end process;

    c6_V_reg_318_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln890_1043_fu_495_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln870_reg_647 = ap_const_lv1_1))) then 
                c6_V_reg_318 <= ap_const_lv2_0;
            elsif (((fifo_D_drain_D_drain_IO_L1_out_1_0_x0177_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                c6_V_reg_318 <= add_ln691_1194_reg_680;
            end if; 
        end if;
    end process;

    c7_V_reg_232_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln890_1039_fu_347_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                c7_V_reg_232 <= ap_const_lv4_0;
            elsif (((icmp_ln890_1042_fu_400_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                c7_V_reg_232 <= add_ln691_1188_reg_575;
            end if; 
        end if;
    end process;

    c8_V_reg_243_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln890_1040_fu_359_p2 = ap_const_lv1_0))) then 
                c8_V_reg_243 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                c8_V_reg_243 <= add_ln691_1190_reg_593;
            end if; 
        end if;
    end process;

    n_V_reg_254_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((fifo_D_drain_PE_0_1_x0145_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                n_V_reg_254 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln878_fu_417_p2 = ap_const_lv1_0))) then 
                n_V_reg_254 <= add_ln691_1191_fu_406_p2;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_265_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((fifo_D_drain_PE_0_1_x0145_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                p_Val2_s_reg_265 <= local_D_V_q0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln878_fu_417_p2 = ap_const_lv1_0))) then 
                p_Val2_s_reg_265 <= zext_ln1497_fu_438_p1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln691_1188_reg_575 <= add_ln691_1188_fu_353_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln691_1189_reg_567 <= add_ln691_1189_fu_341_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln691_1190_reg_593 <= add_ln691_1190_fu_382_p2;
                local_D_V_addr_reg_598 <= zext_ln9598_fu_395_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                add_ln691_1192_reg_639 <= add_ln691_1192_fu_453_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln870_reg_647 = ap_const_lv1_1))) then
                add_ln691_1193_reg_659 <= add_ln691_1193_fu_483_p2;
                    shl_ln890_reg_664(4 downto 1) <= shl_ln890_fu_489_p2(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                add_ln691_1194_reg_680 <= add_ln691_1194_fu_513_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln870_reg_647 = ap_const_lv1_0))) then
                add_ln691_1195_reg_651 <= add_ln691_1195_fu_471_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                add_ln691_1196_reg_672 <= add_ln691_1196_fu_501_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln691_reg_559 <= add_ln691_fu_329_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln890_1040_fu_359_p2 = ap_const_lv1_0))) then
                data_split_V_addr_209_reg_588 <= idxprom_fu_377_p1(2 - 1 downto 0);
                tmp_reg_583 <= c7_V_reg_232(2 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln890_1041_fu_459_p2 = ap_const_lv1_0))) then
                icmp_ln870_reg_647 <= icmp_ln870_fu_465_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_385_reg_606 <= fifo_D_drain_PE_0_1_x0145_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                v2_V_1775_reg_634 <= data_split_V_q0;
                v2_V_reg_629 <= data_split_V_q1;
            end if;
        end if;
    end process;
    shl_ln890_reg_664(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, fifo_D_drain_D_drain_IO_L1_out_1_1_x0178_empty_n, fifo_D_drain_D_drain_IO_L1_out_1_0_x0177_full_n, fifo_D_drain_PE_0_1_x0145_empty_n, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state6, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, icmp_ln890_1040_fu_359_p2, ap_CS_fsm_state5, ap_CS_fsm_state7, icmp_ln878_fu_417_p2, ap_CS_fsm_state11, icmp_ln870_reg_647, icmp_ln890_1041_fu_459_p2, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state15, icmp_ln890_1039_fu_347_p2, icmp_ln890_fu_335_p2, icmp_ln890_1042_fu_400_p2, icmp_ln890_1043_fu_495_p2, icmp_ln890_1044_fu_477_p2, icmp_ln890_1046_fu_507_p2, icmp_ln890_1045_fu_533_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln890_fu_335_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln890_1039_fu_347_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln890_1040_fu_359_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln890_1042_fu_400_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((fifo_D_drain_PE_0_1_x0145_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln878_fu_417_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln890_1041_fu_459_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (((icmp_ln890_1044_fu_477_p2 = ap_const_lv1_1) and (icmp_ln870_reg_647 = ap_const_lv1_0)) or ((icmp_ln890_1043_fu_495_p2 = ap_const_lv1_1) and (icmp_ln870_reg_647 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                elsif (((icmp_ln890_1043_fu_495_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln870_reg_647 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                if (((icmp_ln890_1046_fu_507_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                if ((not(((fifo_D_drain_D_drain_IO_L1_out_1_0_x0177_full_n = ap_const_logic_0) or (fifo_D_drain_D_drain_IO_L1_out_1_1_x0178_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if (((icmp_ln890_1045_fu_533_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                if (((fifo_D_drain_D_drain_IO_L1_out_1_0_x0177_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln691_1188_fu_353_p2 <= std_logic_vector(unsigned(c7_V_reg_232) + unsigned(ap_const_lv4_1));
    add_ln691_1189_fu_341_p2 <= std_logic_vector(unsigned(c1_V_reg_221) + unsigned(ap_const_lv3_1));
    add_ln691_1190_fu_382_p2 <= std_logic_vector(unsigned(c8_V_reg_243) + unsigned(ap_const_lv5_1));
    add_ln691_1191_fu_406_p2 <= std_logic_vector(unsigned(n_V_reg_254) + unsigned(ap_const_lv3_1));
    add_ln691_1192_fu_453_p2 <= std_logic_vector(unsigned(c4_V_reg_274) + unsigned(ap_const_lv3_1));
    add_ln691_1193_fu_483_p2 <= std_logic_vector(unsigned(c5_V_reg_296) + unsigned(ap_const_lv5_1));
    add_ln691_1194_fu_513_p2 <= std_logic_vector(unsigned(c6_V_reg_318) + unsigned(ap_const_lv2_1));
    add_ln691_1195_fu_471_p2 <= std_logic_vector(unsigned(c5_V_56_reg_285) + unsigned(ap_const_lv5_1));
    add_ln691_1196_fu_501_p2 <= std_logic_vector(unsigned(c6_V_120_reg_307) + unsigned(ap_const_lv2_1));
    add_ln691_fu_329_p2 <= std_logic_vector(unsigned(c0_V_reg_210) + unsigned(ap_const_lv3_1));
    add_ln9624_fu_523_p2 <= std_logic_vector(unsigned(shl_ln890_reg_664) + unsigned(zext_ln9624_fu_519_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state14_assign_proc : process(fifo_D_drain_D_drain_IO_L1_out_1_1_x0178_empty_n, fifo_D_drain_D_drain_IO_L1_out_1_0_x0177_full_n)
    begin
                ap_block_state14 <= ((fifo_D_drain_D_drain_IO_L1_out_1_0_x0177_full_n = ap_const_logic_0) or (fifo_D_drain_D_drain_IO_L1_out_1_1_x0178_empty_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, icmp_ln890_fu_335_p2)
    begin
        if (((icmp_ln890_fu_335_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln890_fu_335_p2)
    begin
        if (((icmp_ln890_fu_335_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    data_split_V_address0_assign_proc : process(data_split_V_addr_209_reg_588, ap_CS_fsm_state7, icmp_ln878_fu_417_p2, ap_CS_fsm_state9, zext_ln878_fu_412_p1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            data_split_V_address0 <= ap_const_lv64_2(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            data_split_V_address0 <= ap_const_lv64_1(2 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln878_fu_417_p2 = ap_const_lv1_1))) then 
            data_split_V_address0 <= data_split_V_addr_209_reg_588;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln878_fu_417_p2 = ap_const_lv1_0))) then 
            data_split_V_address0 <= zext_ln878_fu_412_p1(2 - 1 downto 0);
        else 
            data_split_V_address0 <= "XX";
        end if; 
    end process;


    data_split_V_address1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            data_split_V_address1 <= ap_const_lv64_3(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            data_split_V_address1 <= ap_const_lv64_0(2 - 1 downto 0);
        else 
            data_split_V_address1 <= "XX";
        end if; 
    end process;


    data_split_V_ce0_assign_proc : process(ap_CS_fsm_state7, icmp_ln878_fu_417_p2, ap_CS_fsm_state9, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln878_fu_417_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln878_fu_417_p2 = ap_const_lv1_0)))) then 
            data_split_V_ce0 <= ap_const_logic_1;
        else 
            data_split_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_split_V_ce1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            data_split_V_ce1 <= ap_const_logic_1;
        else 
            data_split_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    data_split_V_d0_assign_proc : process(tmp_385_reg_606, ap_CS_fsm_state7, icmp_ln878_fu_417_p2, trunc_ln674_fu_423_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
            if ((icmp_ln878_fu_417_p2 = ap_const_lv1_1)) then 
                data_split_V_d0 <= tmp_385_reg_606;
            elsif ((icmp_ln878_fu_417_p2 = ap_const_lv1_0)) then 
                data_split_V_d0 <= trunc_ln674_fu_423_p1;
            else 
                data_split_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            data_split_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data_split_V_we0_assign_proc : process(ap_CS_fsm_state7, icmp_ln878_fu_417_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln878_fu_417_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln878_fu_417_p2 = ap_const_lv1_0)))) then 
            data_split_V_we0 <= ap_const_logic_1;
        else 
            data_split_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_365_p1 <= c7_V_reg_232(2 - 1 downto 0);

    fifo_D_drain_D_drain_IO_L1_out_1_0_x0177_blk_n_assign_proc : process(fifo_D_drain_D_drain_IO_L1_out_1_0_x0177_full_n, ap_CS_fsm_state14, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            fifo_D_drain_D_drain_IO_L1_out_1_0_x0177_blk_n <= fifo_D_drain_D_drain_IO_L1_out_1_0_x0177_full_n;
        else 
            fifo_D_drain_D_drain_IO_L1_out_1_0_x0177_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    fifo_D_drain_D_drain_IO_L1_out_1_0_x0177_din_assign_proc : process(fifo_D_drain_D_drain_IO_L1_out_1_1_x0178_dout, fifo_D_drain_D_drain_IO_L1_out_1_1_x0178_empty_n, fifo_D_drain_D_drain_IO_L1_out_1_0_x0177_full_n, ap_CS_fsm_state14, ap_CS_fsm_state16, local_D_V_q0)
    begin
        if (((fifo_D_drain_D_drain_IO_L1_out_1_0_x0177_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            fifo_D_drain_D_drain_IO_L1_out_1_0_x0177_din <= local_D_V_q0;
        elsif ((not(((fifo_D_drain_D_drain_IO_L1_out_1_0_x0177_full_n = ap_const_logic_0) or (fifo_D_drain_D_drain_IO_L1_out_1_1_x0178_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            fifo_D_drain_D_drain_IO_L1_out_1_0_x0177_din <= fifo_D_drain_D_drain_IO_L1_out_1_1_x0178_dout;
        else 
            fifo_D_drain_D_drain_IO_L1_out_1_0_x0177_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    fifo_D_drain_D_drain_IO_L1_out_1_0_x0177_write_assign_proc : process(fifo_D_drain_D_drain_IO_L1_out_1_1_x0178_empty_n, fifo_D_drain_D_drain_IO_L1_out_1_0_x0177_full_n, ap_CS_fsm_state14, ap_CS_fsm_state16)
    begin
        if ((((fifo_D_drain_D_drain_IO_L1_out_1_0_x0177_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or (not(((fifo_D_drain_D_drain_IO_L1_out_1_0_x0177_full_n = ap_const_logic_0) or (fifo_D_drain_D_drain_IO_L1_out_1_1_x0178_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            fifo_D_drain_D_drain_IO_L1_out_1_0_x0177_write <= ap_const_logic_1;
        else 
            fifo_D_drain_D_drain_IO_L1_out_1_0_x0177_write <= ap_const_logic_0;
        end if; 
    end process;


    fifo_D_drain_D_drain_IO_L1_out_1_1_x0178_blk_n_assign_proc : process(fifo_D_drain_D_drain_IO_L1_out_1_1_x0178_empty_n, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            fifo_D_drain_D_drain_IO_L1_out_1_1_x0178_blk_n <= fifo_D_drain_D_drain_IO_L1_out_1_1_x0178_empty_n;
        else 
            fifo_D_drain_D_drain_IO_L1_out_1_1_x0178_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    fifo_D_drain_D_drain_IO_L1_out_1_1_x0178_read_assign_proc : process(fifo_D_drain_D_drain_IO_L1_out_1_1_x0178_empty_n, fifo_D_drain_D_drain_IO_L1_out_1_0_x0177_full_n, ap_CS_fsm_state14)
    begin
        if ((not(((fifo_D_drain_D_drain_IO_L1_out_1_0_x0177_full_n = ap_const_logic_0) or (fifo_D_drain_D_drain_IO_L1_out_1_1_x0178_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            fifo_D_drain_D_drain_IO_L1_out_1_1_x0178_read <= ap_const_logic_1;
        else 
            fifo_D_drain_D_drain_IO_L1_out_1_1_x0178_read <= ap_const_logic_0;
        end if; 
    end process;


    fifo_D_drain_PE_0_1_x0145_blk_n_assign_proc : process(fifo_D_drain_PE_0_1_x0145_empty_n, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            fifo_D_drain_PE_0_1_x0145_blk_n <= fifo_D_drain_PE_0_1_x0145_empty_n;
        else 
            fifo_D_drain_PE_0_1_x0145_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    fifo_D_drain_PE_0_1_x0145_read_assign_proc : process(fifo_D_drain_PE_0_1_x0145_empty_n, ap_CS_fsm_state6)
    begin
        if (((fifo_D_drain_PE_0_1_x0145_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            fifo_D_drain_PE_0_1_x0145_read <= ap_const_logic_1;
        else 
            fifo_D_drain_PE_0_1_x0145_read <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln870_fu_465_p2 <= "1" when (c4_V_reg_274 = ap_const_lv3_0) else "0";
    icmp_ln878_fu_417_p2 <= "1" when (n_V_reg_254 = ap_const_lv3_4) else "0";
    icmp_ln890_1039_fu_347_p2 <= "1" when (c1_V_reg_221 = ap_const_lv3_6) else "0";
    icmp_ln890_1040_fu_359_p2 <= "1" when (c7_V_reg_232 = ap_const_lv4_8) else "0";
    icmp_ln890_1041_fu_459_p2 <= "1" when (c4_V_reg_274 = ap_const_lv3_4) else "0";
    icmp_ln890_1042_fu_400_p2 <= "1" when (c8_V_reg_243 = ap_const_lv5_10) else "0";
    icmp_ln890_1043_fu_495_p2 <= "1" when (c5_V_reg_296 = ap_const_lv5_10) else "0";
    icmp_ln890_1044_fu_477_p2 <= "1" when (c5_V_56_reg_285 = ap_const_lv5_10) else "0";
    icmp_ln890_1045_fu_533_p2 <= "1" when (c6_V_reg_318 = ap_const_lv2_2) else "0";
    icmp_ln890_1046_fu_507_p2 <= "1" when (c6_V_120_reg_307 = ap_const_lv2_2) else "0";
    icmp_ln890_fu_335_p2 <= "1" when (c0_V_reg_210 = ap_const_lv3_4) else "0";
    idxprom_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_fu_365_p1),64));

    local_D_V_address0_assign_proc : process(ap_CS_fsm_state5, local_D_V_addr_reg_598, ap_CS_fsm_state15, ap_CS_fsm_state10, zext_ln9598_fu_395_p1, zext_ln9624_1_fu_528_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            local_D_V_address0 <= zext_ln9624_1_fu_528_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            local_D_V_address0 <= local_D_V_addr_reg_598;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            local_D_V_address0 <= zext_ln9598_fu_395_p1(5 - 1 downto 0);
        else 
            local_D_V_address0 <= "XXXXX";
        end if; 
    end process;


    local_D_V_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state15, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            local_D_V_ce0 <= ap_const_logic_1;
        else 
            local_D_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    local_D_V_d0 <= (((data_split_V_q1 & data_split_V_q0) & v2_V_1775_reg_634) & v2_V_reg_629);

    local_D_V_we0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            local_D_V_we0 <= ap_const_logic_1;
        else 
            local_D_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    r_fu_428_p4 <= p_Val2_s_reg_265(127 downto 32);
    shl_ln890_fu_489_p2 <= std_logic_vector(shift_left(unsigned(c5_V_reg_296),to_integer(unsigned('0' & ap_const_lv5_1(5-1 downto 0)))));
    tmp_s_fu_388_p3 <= (c8_V_reg_243 & tmp_reg_583);
    trunc_ln674_fu_423_p1 <= p_Val2_s_reg_265(32 - 1 downto 0);
    zext_ln1497_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_fu_428_p4),128));
    zext_ln878_fu_412_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_V_reg_254),64));
    zext_ln9598_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_388_p3),64));
    zext_ln9624_1_fu_528_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln9624_fu_523_p2),64));
    zext_ln9624_fu_519_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c6_V_reg_318),5));
end behav;
