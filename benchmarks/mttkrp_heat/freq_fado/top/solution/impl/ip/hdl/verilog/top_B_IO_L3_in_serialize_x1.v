// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module top_B_IO_L3_in_serialize_x1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        fifo_B_B_IO_L3_in_serialize_x12_din,
        fifo_B_B_IO_L3_in_serialize_x12_full_n,
        fifo_B_B_IO_L3_in_serialize_x12_write,
        B_address0,
        B_ce0,
        B_q0
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [255:0] fifo_B_B_IO_L3_in_serialize_x12_din;
input   fifo_B_B_IO_L3_in_serialize_x12_full_n;
output   fifo_B_B_IO_L3_in_serialize_x12_write;
output  [9:0] B_address0;
output   B_ce0;
input  [511:0] B_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg fifo_B_B_IO_L3_in_serialize_x12_write;
reg B_ce0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    fifo_B_B_IO_L3_in_serialize_x12_blk_n;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln878_19_fu_120_p2;
wire   [10:0] i_V_5_fu_97_p2;
reg   [10:0] i_V_5_reg_145;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln878_fu_103_p2;
wire    ap_CS_fsm_state3;
wire   [1:0] add_ln691_fu_114_p2;
reg    ap_block_state4;
wire   [511:0] zext_ln1497_fu_141_p1;
reg   [10:0] i_V_reg_66;
reg    ap_block_state1;
reg   [1:0] p_V_reg_77;
reg   [511:0] p_Val2_s_reg_88;
wire   [63:0] zext_ln534_fu_109_p1;
wire   [255:0] r_fu_131_p4;
reg   [3:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln878_fu_103_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln878_19_fu_120_p2 == 1'd0) & (fifo_B_B_IO_L3_in_serialize_x12_full_n == 1'b0)) & (icmp_ln878_19_fu_120_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i_V_reg_66 <= i_V_5_reg_145;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_V_reg_66 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        p_V_reg_77 <= 2'd0;
    end else if ((~((icmp_ln878_19_fu_120_p2 == 1'd0) & (fifo_B_B_IO_L3_in_serialize_x12_full_n == 1'b0)) & (icmp_ln878_19_fu_120_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        p_V_reg_77 <= add_ln691_fu_114_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        p_Val2_s_reg_88 <= B_q0;
    end else if ((~((icmp_ln878_19_fu_120_p2 == 1'd0) & (fifo_B_B_IO_L3_in_serialize_x12_full_n == 1'b0)) & (icmp_ln878_19_fu_120_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        p_Val2_s_reg_88 <= zext_ln1497_fu_141_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_V_5_reg_145 <= i_V_5_fu_97_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        B_ce0 = 1'b1;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln878_fu_103_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln878_fu_103_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln878_19_fu_120_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        fifo_B_B_IO_L3_in_serialize_x12_blk_n = fifo_B_B_IO_L3_in_serialize_x12_full_n;
    end else begin
        fifo_B_B_IO_L3_in_serialize_x12_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((icmp_ln878_19_fu_120_p2 == 1'd0) & (fifo_B_B_IO_L3_in_serialize_x12_full_n == 1'b0)) & (icmp_ln878_19_fu_120_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        fifo_B_B_IO_L3_in_serialize_x12_write = 1'b1;
    end else begin
        fifo_B_B_IO_L3_in_serialize_x12_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln878_fu_103_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if ((~((icmp_ln878_19_fu_120_p2 == 1'd0) & (fifo_B_B_IO_L3_in_serialize_x12_full_n == 1'b0)) & (icmp_ln878_19_fu_120_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~((icmp_ln878_19_fu_120_p2 == 1'd0) & (fifo_B_B_IO_L3_in_serialize_x12_full_n == 1'b0)) & (icmp_ln878_19_fu_120_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign B_address0 = zext_ln534_fu_109_p1;

assign add_ln691_fu_114_p2 = (p_V_reg_77 + 2'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state4 = ((icmp_ln878_19_fu_120_p2 == 1'd0) & (fifo_B_B_IO_L3_in_serialize_x12_full_n == 1'b0));
end

assign fifo_B_B_IO_L3_in_serialize_x12_din = p_Val2_s_reg_88[255:0];

assign i_V_5_fu_97_p2 = (i_V_reg_66 + 11'd1);

assign icmp_ln878_19_fu_120_p2 = ((p_V_reg_77 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln878_fu_103_p2 = ((i_V_reg_66 == 11'd1024) ? 1'b1 : 1'b0);

assign r_fu_131_p4 = {{p_Val2_s_reg_88[511:256]}};

assign zext_ln1497_fu_141_p1 = r_fu_131_p4;

assign zext_ln534_fu_109_p1 = i_V_reg_66;

endmodule //top_B_IO_L3_in_serialize_x1
