// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module top_D_drain_IO_L3_out_serialize_x0 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        fifo_D_drain_D_drain_IO_L3_out_serialize_x04_dout,
        fifo_D_drain_D_drain_IO_L3_out_serialize_x04_empty_n,
        fifo_D_drain_D_drain_IO_L3_out_serialize_x04_read,
        D_address0,
        D_ce0,
        D_we0,
        D_d0
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [127:0] fifo_D_drain_D_drain_IO_L3_out_serialize_x04_dout;
input   fifo_D_drain_D_drain_IO_L3_out_serialize_x04_empty_n;
output   fifo_D_drain_D_drain_IO_L3_out_serialize_x04_read;
output  [9:0] D_address0;
output   D_ce0;
output   D_we0;
output  [511:0] D_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg fifo_D_drain_D_drain_IO_L3_out_serialize_x04_read;
reg D_ce0;
reg D_we0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    fifo_D_drain_D_drain_IO_L3_out_serialize_x04_blk_n;
wire    ap_CS_fsm_state4;
wire   [10:0] i_V_2_fu_143_p2;
reg   [10:0] i_V_2_reg_207;
wire    ap_CS_fsm_state2;
wire   [2:0] add_ln691_fu_155_p2;
reg   [2:0] add_ln691_reg_215;
wire    ap_CS_fsm_state3;
wire   [63:0] zext_ln878_fu_161_p1;
reg   [63:0] zext_ln878_reg_220;
wire   [127:0] mem_data_split_V_q1;
reg   [127:0] v2_V_reg_228;
wire    ap_CS_fsm_state5;
wire   [127:0] mem_data_split_V_q0;
reg   [127:0] v2_V_914_reg_233;
reg   [1:0] mem_data_split_V_address0;
reg    mem_data_split_V_ce0;
reg    mem_data_split_V_we0;
reg   [1:0] mem_data_split_V_address1;
reg    mem_data_split_V_ce1;
reg   [10:0] i_V_reg_120;
reg    ap_block_state1;
wire    ap_CS_fsm_state6;
reg   [2:0] p_V_reg_132;
wire   [0:0] icmp_ln878_fu_149_p2;
wire   [63:0] zext_ln534_fu_182_p1;
wire   [0:0] icmp_ln878_2_fu_165_p2;
reg   [5:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 6'd1;
end

top_D_drain_IO_L3_out_serialize_x0_mem_data_split_V #(
    .DataWidth( 128 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
mem_data_split_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mem_data_split_V_address0),
    .ce0(mem_data_split_V_ce0),
    .we0(mem_data_split_V_we0),
    .d0(fifo_D_drain_D_drain_IO_L3_out_serialize_x04_dout),
    .q0(mem_data_split_V_q0),
    .address1(mem_data_split_V_address1),
    .ce1(mem_data_split_V_ce1),
    .q1(mem_data_split_V_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln878_fu_149_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_V_reg_120 <= i_V_2_reg_207;
    end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_V_reg_120 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln878_fu_149_p2 == 1'd0))) begin
        p_V_reg_132 <= 3'd0;
    end else if (((fifo_D_drain_D_drain_IO_L3_out_serialize_x04_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        p_V_reg_132 <= add_ln691_reg_215;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln691_reg_215 <= add_ln691_fu_155_p2;
        zext_ln878_reg_220[2 : 0] <= zext_ln878_fu_161_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_V_2_reg_207 <= i_V_2_fu_143_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        v2_V_914_reg_233 <= mem_data_split_V_q0;
        v2_V_reg_228 <= mem_data_split_V_q1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        D_ce0 = 1'b1;
    end else begin
        D_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        D_we0 = 1'b1;
    end else begin
        D_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln878_fu_149_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln878_fu_149_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        fifo_D_drain_D_drain_IO_L3_out_serialize_x04_blk_n = fifo_D_drain_D_drain_IO_L3_out_serialize_x04_empty_n;
    end else begin
        fifo_D_drain_D_drain_IO_L3_out_serialize_x04_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((fifo_D_drain_D_drain_IO_L3_out_serialize_x04_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        fifo_D_drain_D_drain_IO_L3_out_serialize_x04_read = 1'b1;
    end else begin
        fifo_D_drain_D_drain_IO_L3_out_serialize_x04_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        mem_data_split_V_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        mem_data_split_V_address0 = zext_ln878_reg_220;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        mem_data_split_V_address0 = 64'd1;
    end else begin
        mem_data_split_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        mem_data_split_V_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        mem_data_split_V_address1 = 64'd0;
    end else begin
        mem_data_split_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | ((fifo_D_drain_D_drain_IO_L3_out_serialize_x04_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state4)))) begin
        mem_data_split_V_ce0 = 1'b1;
    end else begin
        mem_data_split_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3))) begin
        mem_data_split_V_ce1 = 1'b1;
    end else begin
        mem_data_split_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((fifo_D_drain_D_drain_IO_L3_out_serialize_x04_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        mem_data_split_V_we0 = 1'b1;
    end else begin
        mem_data_split_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln878_fu_149_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln878_2_fu_165_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((fifo_D_drain_D_drain_IO_L3_out_serialize_x04_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign D_address0 = zext_ln534_fu_182_p1;

assign D_d0 = {{{{mem_data_split_V_q1}, {mem_data_split_V_q0}}, {v2_V_914_reg_233}}, {v2_V_reg_228}};

assign add_ln691_fu_155_p2 = (p_V_reg_132 + 3'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign i_V_2_fu_143_p2 = (i_V_reg_120 + 11'd1);

assign icmp_ln878_2_fu_165_p2 = ((p_V_reg_132 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln878_fu_149_p2 = ((i_V_reg_120 == 11'd1024) ? 1'b1 : 1'b0);

assign zext_ln534_fu_182_p1 = i_V_reg_120;

assign zext_ln878_fu_161_p1 = p_V_reg_132;

always @ (posedge ap_clk) begin
    zext_ln878_reg_220[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
end

endmodule //top_D_drain_IO_L3_out_serialize_x0
