// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module top_D_drain_IO_L1_out_boundary_wrapper_0_x0 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        fifo_D_drain_D_drain_IO_L1_out_0_3_x0176_din,
        fifo_D_drain_D_drain_IO_L1_out_0_3_x0176_full_n,
        fifo_D_drain_D_drain_IO_L1_out_0_3_x0176_write,
        fifo_D_drain_PE_3_0_x0144_dout,
        fifo_D_drain_PE_3_0_x0144_empty_n,
        fifo_D_drain_PE_3_0_x0144_read
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [127:0] fifo_D_drain_D_drain_IO_L1_out_0_3_x0176_din;
input   fifo_D_drain_D_drain_IO_L1_out_0_3_x0176_full_n;
output   fifo_D_drain_D_drain_IO_L1_out_0_3_x0176_write;
input  [31:0] fifo_D_drain_PE_3_0_x0144_dout;
input   fifo_D_drain_PE_3_0_x0144_empty_n;
output   fifo_D_drain_PE_3_0_x0144_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg fifo_D_drain_D_drain_IO_L1_out_0_3_x0176_write;
reg fifo_D_drain_PE_3_0_x0144_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    fifo_D_drain_D_drain_IO_L1_out_0_3_x0176_blk_n;
wire    ap_CS_fsm_state13;
reg    fifo_D_drain_PE_3_0_x0144_blk_n;
wire    ap_CS_fsm_state6;
wire   [2:0] add_ln691_fu_279_p2;
reg   [2:0] add_ln691_reg_467;
wire    ap_CS_fsm_state2;
wire   [2:0] add_ln691_1007_fu_291_p2;
reg   [2:0] add_ln691_1007_reg_475;
wire    ap_CS_fsm_state3;
wire   [3:0] add_ln691_1008_fu_303_p2;
reg   [3:0] add_ln691_1008_reg_483;
wire    ap_CS_fsm_state4;
reg   [0:0] tmp_reg_491;
wire   [0:0] icmp_ln890_1058_fu_309_p2;
reg   [1:0] data_split_V_addr_319_reg_496;
wire   [4:0] add_ln691_1011_fu_332_p2;
reg   [4:0] add_ln691_1011_reg_501;
wire    ap_CS_fsm_state5;
reg   [4:0] local_D_V_addr_reg_506;
reg   [31:0] tmp_378_reg_514;
wire   [127:0] local_D_V_q0;
wire   [2:0] add_ln691_1012_fu_356_p2;
wire    ap_CS_fsm_state7;
wire   [127:0] zext_ln1497_fu_388_p1;
wire   [0:0] icmp_ln878_fu_367_p2;
wire   [31:0] data_split_V_q1;
reg   [31:0] v2_V_reg_537;
wire    ap_CS_fsm_state9;
wire   [31:0] data_split_V_q0;
reg   [31:0] v2_V_1170_reg_542;
wire   [4:0] add_ln691_1009_fu_403_p2;
reg   [4:0] add_ln691_1009_reg_547;
wire    ap_CS_fsm_state11;
wire   [4:0] shl_ln890_fu_409_p2;
reg   [4:0] shl_ln890_reg_552;
wire   [1:0] add_ln691_1010_fu_421_p2;
reg   [1:0] add_ln691_1010_reg_560;
wire    ap_CS_fsm_state12;
reg   [4:0] local_D_V_address0;
reg    local_D_V_ce0;
reg    local_D_V_we0;
wire   [127:0] local_D_V_d0;
reg   [1:0] data_split_V_address0;
reg    data_split_V_ce0;
reg    data_split_V_we0;
reg   [31:0] data_split_V_d0;
reg   [1:0] data_split_V_address1;
reg    data_split_V_ce1;
reg   [2:0] c0_V_reg_193;
wire   [0:0] icmp_ln890_1057_fu_297_p2;
reg    ap_block_state1;
reg   [2:0] c1_V_reg_204;
wire   [0:0] icmp_ln890_fu_285_p2;
wire   [0:0] icmp_ln890_1059_fu_415_p2;
reg   [3:0] c7_V_reg_215;
wire   [0:0] icmp_ln890_1060_fu_350_p2;
reg   [4:0] c8_V_reg_226;
wire    ap_CS_fsm_state10;
reg   [2:0] n_V_reg_237;
reg   [127:0] p_Val2_s_reg_248;
reg   [4:0] c5_V_reg_257;
wire   [0:0] icmp_ln890_1061_fu_441_p2;
reg   [1:0] c6_V_reg_268;
wire   [63:0] idxprom_fu_327_p1;
wire   [63:0] zext_ln11080_fu_345_p1;
wire   [63:0] zext_ln878_fu_362_p1;
wire   [63:0] zext_ln11106_1_fu_436_p1;
wire   [31:0] trunc_ln674_fu_373_p1;
wire    ap_CS_fsm_state8;
wire   [1:0] empty_fu_315_p1;
wire   [5:0] tmp_s_fu_338_p3;
wire   [95:0] r_fu_378_p4;
wire   [4:0] zext_ln11106_fu_427_p1;
wire   [4:0] add_ln11106_fu_431_p2;
reg   [12:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 13'd1;
end

top_D_drain_IO_L1_out_boundary_wrapper_0_x0_local_D_V #(
    .DataWidth( 128 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
local_D_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(local_D_V_address0),
    .ce0(local_D_V_ce0),
    .we0(local_D_V_we0),
    .d0(local_D_V_d0),
    .q0(local_D_V_q0)
);

top_D_drain_IO_L1_out_boundary_wrapper_0_x0_data_split_V #(
    .DataWidth( 32 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
data_split_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(data_split_V_address0),
    .ce0(data_split_V_ce0),
    .we0(data_split_V_we0),
    .d0(data_split_V_d0),
    .q0(data_split_V_q0),
    .address1(data_split_V_address1),
    .ce1(data_split_V_ce1),
    .q1(data_split_V_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln890_fu_285_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        c0_V_reg_193 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln890_1057_fu_297_p2 == 1'd1))) begin
        c0_V_reg_193 <= add_ln691_reg_467;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln890_1059_fu_415_p2 == 1'd1))) begin
        c1_V_reg_204 <= add_ln691_1007_reg_475;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln890_fu_285_p2 == 1'd0))) begin
        c1_V_reg_204 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln890_1058_fu_309_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        c5_V_reg_257 <= 5'd0;
    end else if (((icmp_ln890_1061_fu_441_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
        c5_V_reg_257 <= add_ln691_1009_reg_547;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln890_1059_fu_415_p2 == 1'd0))) begin
        c6_V_reg_268 <= 2'd0;
    end else if (((fifo_D_drain_D_drain_IO_L1_out_0_3_x0176_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
        c6_V_reg_268 <= add_ln691_1010_reg_560;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln890_1057_fu_297_p2 == 1'd0))) begin
        c7_V_reg_215 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln890_1060_fu_350_p2 == 1'd1))) begin
        c7_V_reg_215 <= add_ln691_1008_reg_483;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln890_1058_fu_309_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        c8_V_reg_226 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        c8_V_reg_226 <= add_ln691_1011_reg_501;
    end
end

always @ (posedge ap_clk) begin
    if (((fifo_D_drain_PE_3_0_x0144_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        n_V_reg_237 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln878_fu_367_p2 == 1'd0))) begin
        n_V_reg_237 <= add_ln691_1012_fu_356_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((fifo_D_drain_PE_3_0_x0144_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        p_Val2_s_reg_248 <= local_D_V_q0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln878_fu_367_p2 == 1'd0))) begin
        p_Val2_s_reg_248 <= zext_ln1497_fu_388_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln691_1007_reg_475 <= add_ln691_1007_fu_291_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln691_1008_reg_483 <= add_ln691_1008_fu_303_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        add_ln691_1009_reg_547 <= add_ln691_1009_fu_403_p2;
        shl_ln890_reg_552[4 : 1] <= shl_ln890_fu_409_p2[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        add_ln691_1010_reg_560 <= add_ln691_1010_fu_421_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln691_1011_reg_501 <= add_ln691_1011_fu_332_p2;
        local_D_V_addr_reg_506 <= zext_ln11080_fu_345_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln691_reg_467 <= add_ln691_fu_279_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln890_1058_fu_309_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        data_split_V_addr_319_reg_496 <= idxprom_fu_327_p1;
        tmp_reg_491 <= c7_V_reg_215[32'd2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_378_reg_514 <= fifo_D_drain_PE_3_0_x0144_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        v2_V_1170_reg_542 <= data_split_V_q0;
        v2_V_reg_537 <= data_split_V_q1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln890_fu_285_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln890_fu_285_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        data_split_V_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        data_split_V_address0 = 64'd1;
    end else if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln878_fu_367_p2 == 1'd1))) begin
        data_split_V_address0 = data_split_V_addr_319_reg_496;
    end else if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln878_fu_367_p2 == 1'd0))) begin
        data_split_V_address0 = zext_ln878_fu_362_p1;
    end else begin
        data_split_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        data_split_V_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        data_split_V_address1 = 64'd0;
    end else begin
        data_split_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9) | ((1'b1 == ap_CS_fsm_state7) & (icmp_ln878_fu_367_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state7) & (icmp_ln878_fu_367_p2 == 1'd0)))) begin
        data_split_V_ce0 = 1'b1;
    end else begin
        data_split_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9))) begin
        data_split_V_ce1 = 1'b1;
    end else begin
        data_split_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        if ((icmp_ln878_fu_367_p2 == 1'd1)) begin
            data_split_V_d0 = tmp_378_reg_514;
        end else if ((icmp_ln878_fu_367_p2 == 1'd0)) begin
            data_split_V_d0 = trunc_ln674_fu_373_p1;
        end else begin
            data_split_V_d0 = 'bx;
        end
    end else begin
        data_split_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state7) & (icmp_ln878_fu_367_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state7) & (icmp_ln878_fu_367_p2 == 1'd0)))) begin
        data_split_V_we0 = 1'b1;
    end else begin
        data_split_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        fifo_D_drain_D_drain_IO_L1_out_0_3_x0176_blk_n = fifo_D_drain_D_drain_IO_L1_out_0_3_x0176_full_n;
    end else begin
        fifo_D_drain_D_drain_IO_L1_out_0_3_x0176_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((fifo_D_drain_D_drain_IO_L1_out_0_3_x0176_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
        fifo_D_drain_D_drain_IO_L1_out_0_3_x0176_write = 1'b1;
    end else begin
        fifo_D_drain_D_drain_IO_L1_out_0_3_x0176_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        fifo_D_drain_PE_3_0_x0144_blk_n = fifo_D_drain_PE_3_0_x0144_empty_n;
    end else begin
        fifo_D_drain_PE_3_0_x0144_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((fifo_D_drain_PE_3_0_x0144_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        fifo_D_drain_PE_3_0_x0144_read = 1'b1;
    end else begin
        fifo_D_drain_PE_3_0_x0144_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        local_D_V_address0 = zext_ln11106_1_fu_436_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        local_D_V_address0 = local_D_V_addr_reg_506;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        local_D_V_address0 = zext_ln11080_fu_345_p1;
    end else begin
        local_D_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state12))) begin
        local_D_V_ce0 = 1'b1;
    end else begin
        local_D_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        local_D_V_we0 = 1'b1;
    end else begin
        local_D_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln890_fu_285_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln890_1057_fu_297_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln890_1058_fu_309_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln890_1060_fu_350_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((fifo_D_drain_PE_3_0_x0144_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln878_fu_367_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln890_1059_fu_415_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((icmp_ln890_1061_fu_441_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((fifo_D_drain_D_drain_IO_L1_out_0_3_x0176_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln11106_fu_431_p2 = (shl_ln890_reg_552 + zext_ln11106_fu_427_p1);

assign add_ln691_1007_fu_291_p2 = (c1_V_reg_204 + 3'd1);

assign add_ln691_1008_fu_303_p2 = (c7_V_reg_215 + 4'd1);

assign add_ln691_1009_fu_403_p2 = (c5_V_reg_257 + 5'd1);

assign add_ln691_1010_fu_421_p2 = (c6_V_reg_268 + 2'd1);

assign add_ln691_1011_fu_332_p2 = (c8_V_reg_226 + 5'd1);

assign add_ln691_1012_fu_356_p2 = (n_V_reg_237 + 3'd1);

assign add_ln691_fu_279_p2 = (c0_V_reg_193 + 3'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign empty_fu_315_p1 = c7_V_reg_215[1:0];

assign fifo_D_drain_D_drain_IO_L1_out_0_3_x0176_din = local_D_V_q0;

assign icmp_ln878_fu_367_p2 = ((n_V_reg_237 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln890_1057_fu_297_p2 = ((c1_V_reg_204 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln890_1058_fu_309_p2 = ((c7_V_reg_215 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln890_1059_fu_415_p2 = ((c5_V_reg_257 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln890_1060_fu_350_p2 = ((c8_V_reg_226 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln890_1061_fu_441_p2 = ((c6_V_reg_268 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln890_fu_285_p2 = ((c0_V_reg_193 == 3'd4) ? 1'b1 : 1'b0);

assign idxprom_fu_327_p1 = empty_fu_315_p1;

assign local_D_V_d0 = {{{{data_split_V_q1}, {data_split_V_q0}}, {v2_V_1170_reg_542}}, {v2_V_reg_537}};

assign r_fu_378_p4 = {{p_Val2_s_reg_248[127:32]}};

assign shl_ln890_fu_409_p2 = c5_V_reg_257 << 5'd1;

assign tmp_s_fu_338_p3 = {{c8_V_reg_226}, {tmp_reg_491}};

assign trunc_ln674_fu_373_p1 = p_Val2_s_reg_248[31:0];

assign zext_ln11080_fu_345_p1 = tmp_s_fu_338_p3;

assign zext_ln11106_1_fu_436_p1 = add_ln11106_fu_431_p2;

assign zext_ln11106_fu_427_p1 = c6_V_reg_268;

assign zext_ln1497_fu_388_p1 = r_fu_378_p4;

assign zext_ln878_fu_362_p1 = n_V_reg_237;

always @ (posedge ap_clk) begin
    shl_ln890_reg_552[0] <= 1'b0;
end

endmodule //top_D_drain_IO_L1_out_boundary_wrapper_0_x0
