// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module top_C_IO_L3_in_x0 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        fifo_C_in_dout,
        fifo_C_in_empty_n,
        fifo_C_in_read,
        fifo_C_local_out_din,
        fifo_C_local_out_full_n,
        fifo_C_local_out_write
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [511:0] fifo_C_in_dout;
input   fifo_C_in_empty_n;
output   fifo_C_in_read;
output  [511:0] fifo_C_local_out_din;
input   fifo_C_local_out_full_n;
output   fifo_C_local_out_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg fifo_C_in_read;
reg fifo_C_local_out_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    fifo_C_in_blk_n;
wire    ap_CS_fsm_state7;
reg    fifo_C_local_out_blk_n;
wire   [2:0] add_ln691_fu_141_p2;
reg   [2:0] add_ln691_reg_224;
wire    ap_CS_fsm_state2;
wire   [2:0] add_ln691_1446_fu_153_p2;
reg   [2:0] add_ln691_1446_reg_232;
wire    ap_CS_fsm_state3;
wire   [5:0] add_i_i42_cast_fu_173_p2;
reg   [5:0] add_i_i42_cast_reg_240;
wire   [0:0] icmp_ln890_1282_fu_159_p2;
wire   [3:0] c3_18_fu_185_p2;
reg   [3:0] c3_18_reg_248;
wire    ap_CS_fsm_state4;
wire   [3:0] add_ln691_1447_fu_200_p2;
reg   [3:0] add_ln691_1447_reg_256;
wire    ap_CS_fsm_state5;
wire   [4:0] add_ln691_1448_fu_212_p2;
reg   [4:0] add_ln691_1448_reg_264;
wire    ap_CS_fsm_state6;
reg   [2:0] c0_V_reg_86;
reg    ap_block_state1;
reg   [2:0] c1_V_reg_97;
wire   [0:0] icmp_ln886_fu_195_p2;
wire   [0:0] icmp_ln2948_fu_179_p2;
wire   [0:0] icmp_ln890_fu_147_p2;
reg   [3:0] c3_reg_108;
wire   [0:0] icmp_ln890_1283_fu_206_p2;
reg   [3:0] c4_V_reg_119;
wire   [0:0] icmp_ln890_1284_fu_218_p2;
reg   [4:0] c5_V_reg_130;
reg    ap_block_state7;
wire   [5:0] p_shl_fu_165_p3;
wire   [5:0] zext_ln886_fu_191_p1;
reg   [6:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 7'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln890_fu_147_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        c0_V_reg_86 <= 3'd0;
    end else if (((icmp_ln890_1282_fu_159_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        c0_V_reg_86 <= add_ln691_reg_224;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln890_fu_147_p2 == 1'd0))) begin
        c1_V_reg_97 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & ((icmp_ln886_fu_195_p2 == 1'd1) | (icmp_ln2948_fu_179_p2 == 1'd1)))) begin
        c1_V_reg_97 <= add_ln691_1446_reg_232;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln890_1283_fu_206_p2 == 1'd1))) begin
        c3_reg_108 <= c3_18_reg_248;
    end else if (((icmp_ln890_1282_fu_159_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        c3_reg_108 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln886_fu_195_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln2948_fu_179_p2 == 1'd0))) begin
        c4_V_reg_119 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln890_1284_fu_218_p2 == 1'd1))) begin
        c4_V_reg_119 <= add_ln691_1447_reg_256;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln890_1283_fu_206_p2 == 1'd0))) begin
        c5_V_reg_130 <= 5'd0;
    end else if ((~((fifo_C_local_out_full_n == 1'b0) | (fifo_C_in_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7))) begin
        c5_V_reg_130 <= add_ln691_1448_reg_264;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln890_1282_fu_159_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        add_i_i42_cast_reg_240[5 : 3] <= add_i_i42_cast_fu_173_p2[5 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln691_1446_reg_232 <= add_ln691_1446_fu_153_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln691_1447_reg_256 <= add_ln691_1447_fu_200_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        add_ln691_1448_reg_264 <= add_ln691_1448_fu_212_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln691_reg_224 <= add_ln691_fu_141_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        c3_18_reg_248 <= c3_18_fu_185_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln890_fu_147_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln890_fu_147_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        fifo_C_in_blk_n = fifo_C_in_empty_n;
    end else begin
        fifo_C_in_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((fifo_C_local_out_full_n == 1'b0) | (fifo_C_in_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7))) begin
        fifo_C_in_read = 1'b1;
    end else begin
        fifo_C_in_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        fifo_C_local_out_blk_n = fifo_C_local_out_full_n;
    end else begin
        fifo_C_local_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((fifo_C_local_out_full_n == 1'b0) | (fifo_C_in_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7))) begin
        fifo_C_local_out_write = 1'b1;
    end else begin
        fifo_C_local_out_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln890_fu_147_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln890_1282_fu_159_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & ((icmp_ln886_fu_195_p2 == 1'd1) | (icmp_ln2948_fu_179_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln890_1283_fu_206_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln890_1284_fu_218_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if ((~((fifo_C_local_out_full_n == 1'b0) | (fifo_C_in_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_i_i42_cast_fu_173_p2 = ($signed(6'd41) - $signed(p_shl_fu_165_p3));

assign add_ln691_1446_fu_153_p2 = (c1_V_reg_97 + 3'd1);

assign add_ln691_1447_fu_200_p2 = (c4_V_reg_119 + 4'd1);

assign add_ln691_1448_fu_212_p2 = (c5_V_reg_130 + 5'd1);

assign add_ln691_fu_141_p2 = (c0_V_reg_86 + 3'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state7 = ((fifo_C_local_out_full_n == 1'b0) | (fifo_C_in_empty_n == 1'b0));
end

assign c3_18_fu_185_p2 = (c3_reg_108 + 4'd1);

assign fifo_C_local_out_din = fifo_C_in_dout;

assign icmp_ln2948_fu_179_p2 = ((c3_reg_108 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln886_fu_195_p2 = ((zext_ln886_fu_191_p1 > add_i_i42_cast_reg_240) ? 1'b1 : 1'b0);

assign icmp_ln890_1282_fu_159_p2 = ((c1_V_reg_97 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln890_1283_fu_206_p2 = ((c4_V_reg_119 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln890_1284_fu_218_p2 = ((c5_V_reg_130 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln890_fu_147_p2 = ((c0_V_reg_86 == 3'd4) ? 1'b1 : 1'b0);

assign p_shl_fu_165_p3 = {{c1_V_reg_97}, {3'd0}};

assign zext_ln886_fu_191_p1 = c3_reg_108;

always @ (posedge ap_clk) begin
    add_i_i42_cast_reg_240[2:0] <= 3'b001;
end

endmodule //top_C_IO_L3_in_x0
